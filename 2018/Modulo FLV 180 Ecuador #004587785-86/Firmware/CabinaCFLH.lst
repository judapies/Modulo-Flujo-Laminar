CCS PCH C Compiler, Version 4.104, 5967               22-may.-18 11:53

               Filename: H:\JP\JP\Laboratorio\Modulo Flujo Laminar\2018\Modulo FLV 180 Ecuador #0045877XX\Firmware\CabinaCFLH.lst

               ROM used: 13504 bytes (41%)
                         Largest free fragment is 19260
               RAM used: 173 (8%) at main() level
                         210 (10%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   18A4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06D8:  CLRF   FEA
06DA:  MOVLW  C0
06DC:  MOVWF  FE9
06DE:  MOVF   FEF,W
06E0:  BZ    06FE
06E2:  MOVLW  0F
06E4:  MOVWF  01
06E6:  CLRF   00
06E8:  DECFSZ 00,F
06EA:  BRA    06E8
06EC:  DECFSZ 01,F
06EE:  BRA    06E6
06F0:  MOVLW  8F
06F2:  MOVWF  00
06F4:  DECFSZ 00,F
06F6:  BRA    06F4
06F8:  NOP   
06FA:  DECFSZ FEF,F
06FC:  BRA    06E2
06FE:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0700:  SWAPF  xC1,W
0702:  ANDLW  F0
0704:  MOVWF  00
0706:  MOVLW  0F
0708:  ANDWF  F81,W
070A:  IORWF  00,W
070C:  MOVWF  F81
....................       delay_cycles(30); 
070E:  MOVLW  09
0710:  MOVWF  00
0712:  DECFSZ 00,F
0714:  BRA    0712
0716:  BRA    0718
....................       lcd.enable = 1; 
0718:  BSF    F81.3
....................       delay_us(55); 
071A:  MOVLW  DB
071C:  MOVWF  00
071E:  DECFSZ 00,F
0720:  BRA    071E
0722:  BRA    0724
....................       lcd.enable = 0; 
0724:  BCF    F81.3
.................... } 
0726:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0728:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
072A:  MOVLW  01
072C:  MOVWF  xC0
072E:  RCALL  06D8
....................       lcd.rs = address; 
0730:  BTFSS  xBE.0
0732:  BCF    F81.1
0734:  BTFSC  xBE.0
0736:  BSF    F81.1
....................       delay_cycles(30); 
0738:  MOVLW  09
073A:  MOVWF  00
073C:  DECFSZ 00,F
073E:  BRA    073C
0740:  BRA    0742
....................       lcd.rw = 0; 
0742:  BCF    F81.2
....................       delay_cycles(30); 
0744:  MOVLW  09
0746:  MOVWF  00
0748:  DECFSZ 00,F
074A:  BRA    0748
074C:  BRA    074E
....................       lcd.enable = 0; 
074E:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0750:  SWAPF  xBF,W
0752:  MOVWF  xC0
0754:  MOVLW  0F
0756:  ANDWF  xC0,F
0758:  MOVFF  C0,C1
075C:  RCALL  0700
....................       lcd_send_nibble(n & 0xf); 
075E:  MOVF   xBF,W
0760:  ANDLW  0F
0762:  MOVWF  xC0
0764:  MOVWF  xC1
0766:  RCALL  0700
.................... } 
0768:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
076A:  MOVLW  00
076C:  MOVWF  F93
....................     lcd.rs = 0; 
076E:  BCF    F81.1
....................     lcd.rw = 0; 
0770:  BCF    F81.2
....................     lcd.enable = 0; 
0772:  BCF    F81.3
....................     delay_ms(15); 
0774:  MOVLW  0F
0776:  MOVWF  xC0
0778:  RCALL  06D8
....................     for(i=1;i<=3;++i) { 
077A:  MOVLW  01
077C:  MOVWF  xA9
077E:  MOVF   xA9,W
0780:  SUBLW  03
0782:  BNC   0794
....................        lcd_send_nibble(3); 
0784:  MOVLW  03
0786:  MOVWF  xC1
0788:  RCALL  0700
....................        delay_ms(5); 
078A:  MOVLW  05
078C:  MOVWF  xC0
078E:  RCALL  06D8
....................     } 
0790:  INCF   xA9,F
0792:  BRA    077E
....................     lcd_send_nibble(2); 
0794:  MOVLW  02
0796:  MOVWF  xC1
0798:  RCALL  0700
....................     for(i=0;i<=3;++i) 
079A:  CLRF   xA9
079C:  MOVF   xA9,W
079E:  SUBLW  03
07A0:  BNC   07BE
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
07A2:  CLRF   03
07A4:  MOVF   xA9,W
07A6:  MOVFF  FF2,AA
07AA:  BCF    FF2.7
07AC:  RCALL  0096
07AE:  BTFSC  xAA.7
07B0:  BSF    FF2.7
07B2:  MOVWF  xAA
07B4:  CLRF   xBE
07B6:  MOVWF  xBF
07B8:  RCALL  0728
07BA:  INCF   xA9,F
07BC:  BRA    079C
.................... } 
07BE:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0848:  MOVLW  01
084A:  SUBWF  xBC,W
084C:  ADDLW  FC
084E:  BC    086E
0850:  ADDLW  04
0852:  GOTO   087E
....................      case 1 : address=0x80;break; 
0856:  MOVLW  80
0858:  MOVWF  xBD
085A:  BRA    086E
....................      case 2 : address=0xc0;break; 
085C:  MOVLW  C0
085E:  MOVWF  xBD
0860:  BRA    086E
....................      case 3 : address=0x94;break; 
0862:  MOVLW  94
0864:  MOVWF  xBD
0866:  BRA    086E
....................      case 4 : address=0xd4;break; 
0868:  MOVLW  D4
086A:  MOVWF  xBD
086C:  BRA    086E
....................    } 
....................    address+=x-1; 
086E:  MOVLW  01
0870:  SUBWF  xBB,W
0872:  ADDWF  xBD,F
....................    lcd_send_byte(0,address); 
0874:  CLRF   xBE
0876:  MOVFF  BD,BF
087A:  RCALL  0728
.................... } 
087C:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
08AA:  MOVF   xBA,W
08AC:  SUBLW  F1
08AE:  BNZ   08B4
....................    { 
....................       c=238; 
08B0:  MOVLW  EE
08B2:  MOVWF  xBA
....................    } 
....................    if(c=='Ñ') 
08B4:  MOVF   xBA,W
08B6:  SUBLW  D1
08B8:  BNZ   08BE
....................    { 
....................       c=255; 
08BA:  MOVLW  FF
08BC:  MOVWF  xBA
....................    } 
....................     
....................    switch (c) { 
08BE:  MOVF   xBA,W
08C0:  XORLW  0C
08C2:  BZ    08CE
08C4:  XORLW  06
08C6:  BZ    08E2
08C8:  XORLW  02
08CA:  BZ    08F0
08CC:  BRA    08FA
....................      case '\f'   : lcd_send_byte(0,1); 
08CE:  CLRF   xBE
08D0:  MOVLW  01
08D2:  MOVWF  xBF
08D4:  RCALL  0728
....................                    lcdline=1; 
08D6:  MOVLW  01
08D8:  MOVWF  16
....................                    delay_ms(2); 
08DA:  MOVLW  02
08DC:  MOVWF  xC0
08DE:  RCALL  06D8
....................                                            break; 
08E0:  BRA    0906
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
08E2:  INCF   16,F
08E4:  MOVLW  01
08E6:  MOVWF  xBB
08E8:  MOVFF  16,BC
08EC:  RCALL  0848
08EE:  BRA    0906
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
08F0:  CLRF   xBE
08F2:  MOVLW  10
08F4:  MOVWF  xBF
08F6:  RCALL  0728
08F8:  BRA    0906
....................      default     : lcd_send_byte(1,c);     break; 
08FA:  MOVLW  01
08FC:  MOVWF  xBE
08FE:  MOVFF  BA,BF
0902:  RCALL  0728
0904:  BRA    0906
....................    } 
.................... } 
0906:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
154C:  BCF    xBC.0
....................    y = x; 
154E:  MOVFF  B0,B5
1552:  MOVFF  AF,B4
1556:  MOVFF  AE,B3
155A:  MOVFF  AD,B2
....................  
....................    if (x < 0) 
155E:  MOVFF  B0,C0
1562:  MOVFF  AF,BF
1566:  MOVFF  AE,BE
156A:  MOVFF  AD,BD
156E:  CLRF   xC4
1570:  CLRF   xC3
1572:  CLRF   xC2
1574:  CLRF   xC1
1576:  RCALL  0FD6
1578:  BNC   1582
....................    { 
....................       s = 1; 
157A:  BSF    xBC.0
....................       y = -y; 
157C:  MOVF   xB3,W
157E:  XORLW  80
1580:  MOVWF  xB3
....................    } 
....................  
....................    if (y <= 32768.0) 
1582:  MOVFF  B5,C0
1586:  MOVFF  B4,BF
158A:  MOVFF  B3,BE
158E:  MOVFF  B2,BD
1592:  CLRF   xC4
1594:  CLRF   xC3
1596:  CLRF   xC2
1598:  MOVLW  8E
159A:  MOVWF  xC1
159C:  RCALL  0FD6
159E:  BC    15A2
15A0:  BNZ   15D2
....................   res = (float32)(unsigned int16)y; 
15A2:  MOVFF  B5,C0
15A6:  MOVFF  B4,BF
15AA:  MOVFF  B3,BE
15AE:  MOVFF  B2,BD
15B2:  RCALL  1514
15B4:  MOVFF  02,C2
15B8:  MOVFF  01,C1
15BC:  CALL   07C0
15C0:  MOVFF  03,B9
15C4:  MOVFF  02,B8
15C8:  MOVFF  01,B7
15CC:  MOVFF  00,B6
....................  
....................  else if (y < 10000000.0) 
15D0:  BRA    175A
15D2:  MOVFF  B5,C0
15D6:  MOVFF  B4,BF
15DA:  MOVFF  B3,BE
15DE:  MOVFF  B2,BD
15E2:  MOVLW  80
15E4:  MOVWF  xC4
15E6:  MOVLW  96
15E8:  MOVWF  xC3
15EA:  MOVLW  18
15EC:  MOVWF  xC2
15EE:  MOVLW  96
15F0:  MOVWF  xC1
15F2:  RCALL  0FD6
15F4:  BTFSS  FD8.0
15F6:  BRA    174A
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
15F8:  MOVFF  B5,C0
15FC:  MOVFF  B4,BF
1600:  MOVFF  B3,BE
1604:  MOVFF  B2,BD
1608:  CLRF   xC4
160A:  CLRF   xC3
160C:  CLRF   xC2
160E:  MOVLW  8E
1610:  MOVWF  xC1
1612:  CALL   0C12
1616:  MOVFF  03,C0
161A:  MOVFF  02,BF
161E:  MOVFF  01,BE
1622:  MOVFF  00,BD
1626:  RCALL  1514
1628:  MOVFF  02,BB
162C:  MOVFF  01,BA
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1630:  MOVFF  B5,C0
1634:  MOVFF  B4,BF
1638:  MOVFF  B3,BE
163C:  MOVFF  B2,BD
1640:  CLRF   xC4
1642:  CLRF   xC3
1644:  CLRF   xC2
1646:  MOVLW  8E
1648:  MOVWF  xC1
164A:  CALL   0C12
164E:  MOVFF  00,BD
1652:  MOVFF  01,BE
1656:  MOVFF  02,BF
165A:  MOVFF  03,C0
165E:  MOVFF  BB,C2
1662:  MOVFF  BA,C1
1666:  CALL   07C0
166A:  BSF    FD8.1
166C:  MOVFF  C0,C4
1670:  MOVFF  BF,C3
1674:  MOVFF  BE,C2
1678:  MOVFF  BD,C1
167C:  MOVFF  03,C8
1680:  MOVFF  02,C7
1684:  MOVFF  01,C6
1688:  MOVFF  00,C5
168C:  CALL   0D6C
1690:  CLRF   xC0
1692:  CLRF   xBF
1694:  CLRF   xBE
1696:  MOVLW  8E
1698:  MOVWF  xBD
169A:  MOVFF  03,C4
169E:  MOVFF  02,C3
16A2:  MOVFF  01,C2
16A6:  MOVFF  00,C1
16AA:  RCALL  11E2
16AC:  MOVFF  03,B5
16B0:  MOVFF  02,B4
16B4:  MOVFF  01,B3
16B8:  MOVFF  00,B2
....................   res = 32768.0*(float32)l; 
16BC:  MOVFF  BB,C2
16C0:  MOVFF  BA,C1
16C4:  CALL   07C0
16C8:  CLRF   xC0
16CA:  CLRF   xBF
16CC:  CLRF   xBE
16CE:  MOVLW  8E
16D0:  MOVWF  xBD
16D2:  MOVFF  03,C4
16D6:  MOVFF  02,C3
16DA:  MOVFF  01,C2
16DE:  MOVFF  00,C1
16E2:  RCALL  11E2
16E4:  MOVFF  03,B9
16E8:  MOVFF  02,B8
16EC:  MOVFF  01,B7
16F0:  MOVFF  00,B6
....................   res += (float32)(unsigned int16)y; 
16F4:  MOVFF  B5,C0
16F8:  MOVFF  B4,BF
16FC:  MOVFF  B3,BE
1700:  MOVFF  B2,BD
1704:  RCALL  1514
1706:  MOVFF  02,C2
170A:  MOVFF  01,C1
170E:  CALL   07C0
1712:  BCF    FD8.1
1714:  MOVFF  B9,C4
1718:  MOVFF  B8,C3
171C:  MOVFF  B7,C2
1720:  MOVFF  B6,C1
1724:  MOVFF  03,C8
1728:  MOVFF  02,C7
172C:  MOVFF  01,C6
1730:  MOVFF  00,C5
1734:  CALL   0D6C
1738:  MOVFF  03,B9
173C:  MOVFF  02,B8
1740:  MOVFF  01,B7
1744:  MOVFF  00,B6
....................  } 
....................  
....................  else 
1748:  BRA    175A
....................   res = y; 
174A:  MOVFF  B5,B9
174E:  MOVFF  B4,B8
1752:  MOVFF  B3,B7
1756:  MOVFF  B2,B6
....................  
....................  y = y - (float32)(unsigned int16)y; 
175A:  MOVFF  B5,C0
175E:  MOVFF  B4,BF
1762:  MOVFF  B3,BE
1766:  MOVFF  B2,BD
176A:  RCALL  1514
176C:  MOVFF  02,C2
1770:  MOVFF  01,C1
1774:  CALL   07C0
1778:  BSF    FD8.1
177A:  MOVFF  B5,C4
177E:  MOVFF  B4,C3
1782:  MOVFF  B3,C2
1786:  MOVFF  B2,C1
178A:  MOVFF  03,C8
178E:  MOVFF  02,C7
1792:  MOVFF  01,C6
1796:  MOVFF  00,C5
179A:  CALL   0D6C
179E:  MOVFF  03,B5
17A2:  MOVFF  02,B4
17A6:  MOVFF  01,B3
17AA:  MOVFF  00,B2
....................  
....................  if (s) 
17AE:  BTFSS  xBC.0
17B0:  BRA    17B8
....................   res = -res; 
17B2:  MOVF   xB7,W
17B4:  XORLW  80
17B6:  MOVWF  xB7
....................  
....................  if (y != 0) 
17B8:  MOVFF  B5,C0
17BC:  MOVFF  B4,BF
17C0:  MOVFF  B3,BE
17C4:  MOVFF  B2,BD
17C8:  CLRF   xC4
17CA:  CLRF   xC3
17CC:  CLRF   xC2
17CE:  CLRF   xC1
17D0:  RCALL  0FD6
17D2:  BZ    1844
....................  { 
....................   if (s == 1 && n == 0) 
17D4:  BTFSS  xBC.0
17D6:  BRA    180C
17D8:  MOVF   xB1,F
17DA:  BNZ   180C
....................    res -= 1.0; 
17DC:  BSF    FD8.1
17DE:  MOVFF  B9,C4
17E2:  MOVFF  B8,C3
17E6:  MOVFF  B7,C2
17EA:  MOVFF  B6,C1
17EE:  CLRF   xC8
17F0:  CLRF   xC7
17F2:  CLRF   xC6
17F4:  MOVLW  7F
17F6:  MOVWF  xC5
17F8:  CALL   0D6C
17FC:  MOVFF  03,B9
1800:  MOVFF  02,B8
1804:  MOVFF  01,B7
1808:  MOVFF  00,B6
....................  
....................   if (s == 0 && n == 1) 
180C:  BTFSC  xBC.0
180E:  BRA    1844
1810:  DECFSZ xB1,W
1812:  BRA    1844
....................    res += 1.0; 
1814:  BCF    FD8.1
1816:  MOVFF  B9,C4
181A:  MOVFF  B8,C3
181E:  MOVFF  B7,C2
1822:  MOVFF  B6,C1
1826:  CLRF   xC8
1828:  CLRF   xC7
182A:  CLRF   xC6
182C:  MOVLW  7F
182E:  MOVWF  xC5
1830:  CALL   0D6C
1834:  MOVFF  03,B9
1838:  MOVFF  02,B8
183C:  MOVFF  01,B7
1840:  MOVFF  00,B6
....................  } 
....................  if (x == 0) 
1844:  MOVFF  B0,C0
1848:  MOVFF  AF,BF
184C:  MOVFF  AE,BE
1850:  MOVFF  AD,BD
1854:  CLRF   xC4
1856:  CLRF   xC3
1858:  CLRF   xC2
185A:  CLRF   xC1
185C:  CALL   0FD6
1860:  BNZ   186A
....................     res = 0; 
1862:  CLRF   xB9
1864:  CLRF   xB8
1866:  CLRF   xB7
1868:  CLRF   xB6
....................  
....................  return (res); 
186A:  MOVFF  B6,00
186E:  MOVFF  B7,01
1872:  MOVFF  B8,02
1876:  MOVFF  B9,03
.................... } 
187A:  GOTO   1892 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
187E:  MOVFF  AC,B0
1882:  MOVFF  AB,AF
1886:  MOVFF  AA,AE
188A:  MOVFF  A9,AD
188E:  CLRF   xB1
1890:  BRA    154C
.................... } 
1892:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   IZQU          input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   3F,F
00BE:  BTFSC  FD8.2
00C0:  INCF   40,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   40,F
00C4:  BNZ   00CC
00C6:  MOVF   3F,W
00C8:  SUBLW  C7
00CA:  BC    011A
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   40
00CE:  CLRF   3F
00D0:  INCF   30,F
00D2:  BSF    18.0
....................     
....................    if(ActivaBuzzer==1) 
00D4:  DECFSZ 3E,W
00D6:  BRA    00EC
....................    { 
....................       if(estadobuzzer==0) 
00D8:  BTFSC  18.3
00DA:  BRA    00E2
....................       { 
....................          Buzzer_off; 
00DC:  BCF    F8C.0
00DE:  BCF    F95.0
....................       } 
....................       else 
00E0:  BRA    00EA
....................       { 
....................          if(estadoalarma==1) 
00E2:  BTFSS  18.4
00E4:  BRA    00EA
....................             Buzzer_on; 
00E6:  BSF    F8C.0
00E8:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
00EA:  BTG    18.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00EC:  BTFSS  17.0
00EE:  BRA    011A
....................    { 
....................       segundos++; 
00F0:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00F2:  BTFSC  17.7
00F4:  BRA    011A
....................       { 
....................          if(tempo_segundos>0) 
00F6:  MOVF   29,F
00F8:  BZ    00FE
....................          { 
....................             tempo_segundos--; 
00FA:  DECF   29,F
....................          } 
....................          else 
00FC:  BRA    011A
....................          { 
....................             if(tempo_minutos>0) 
00FE:  MOVF   28,F
0100:  BZ    010A
....................             { 
....................                tempo_minutos--; 
0102:  DECF   28,F
....................                tempo_segundos=59; 
0104:  MOVLW  3B
0106:  MOVWF  29
....................             } 
....................             else 
0108:  BRA    011A
....................             { 
....................                tiempo_cumplido=1; 
010A:  BSF    17.7
....................                estadouv=0;Luz_UV_off; 
010C:  BCF    17.0
010E:  BCF    F8C.1
0110:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
0112:  MOVFF  2A,28
0116:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
011A:  BCF    F9E.0
011C:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0A5A:  DECFSZ xAA,W
0A5C:  BRA    0A72
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0A5E:  MOVLW  02
0A60:  MOVWF  xBB
0A62:  MOVFF  AB,BC
0A66:  RCALL  0848
0A68:  MOVLW  20
0A6A:  MOVWF  FF6
0A6C:  MOVLW  01
0A6E:  MOVWF  FF7
0A70:  RCALL  0908
....................    if(x==2) 
0A72:  MOVF   xAA,W
0A74:  SUBLW  02
0A76:  BNZ   0A8C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0A78:  MOVLW  02
0A7A:  MOVWF  xBB
0A7C:  MOVFF  AB,BC
0A80:  RCALL  0848
0A82:  MOVLW  34
0A84:  MOVWF  FF6
0A86:  MOVLW  01
0A88:  MOVWF  FF7
0A8A:  RCALL  0908
....................    if(x==3) 
0A8C:  MOVF   xAA,W
0A8E:  SUBLW  03
0A90:  BNZ   0AA6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0A92:  MOVLW  02
0A94:  MOVWF  xBB
0A96:  MOVFF  AB,BC
0A9A:  RCALL  0848
0A9C:  MOVLW  48
0A9E:  MOVWF  FF6
0AA0:  MOVLW  01
0AA2:  MOVWF  FF7
0AA4:  RCALL  0908
....................    if(x==4) 
0AA6:  MOVF   xAA,W
0AA8:  SUBLW  04
0AAA:  BNZ   0AC0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0AAC:  MOVLW  02
0AAE:  MOVWF  xBB
0AB0:  MOVFF  AB,BC
0AB4:  RCALL  0848
0AB6:  MOVLW  5C
0AB8:  MOVWF  FF6
0ABA:  MOVLW  01
0ABC:  MOVWF  FF7
0ABE:  RCALL  0908
....................     
....................    if(x==5) 
0AC0:  MOVF   xAA,W
0AC2:  SUBLW  05
0AC4:  BNZ   0AF6
....................    {if(estadoalarma==0) 
0AC6:  BTFSC  18.4
0AC8:  BRA    0ADE
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0ACA:  MOVLW  02
0ACC:  MOVWF  xBB
0ACE:  MOVFF  AB,BC
0AD2:  RCALL  0848
0AD4:  MOVLW  70
0AD6:  MOVWF  FF6
0AD8:  MOVLW  01
0ADA:  MOVWF  FF7
0ADC:  RCALL  0908
....................    if(estadoalarma==1) 
0ADE:  BTFSS  18.4
0AE0:  BRA    0AF6
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0AE2:  MOVLW  02
0AE4:  MOVWF  xBB
0AE6:  MOVFF  AB,BC
0AEA:  RCALL  0848
0AEC:  MOVLW  84
0AEE:  MOVWF  FF6
0AF0:  MOVLW  01
0AF2:  MOVWF  FF7
0AF4:  RCALL  0908
....................    } 
.................... } 
0AF6:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
1894:  MOVF   xA9,F
1896:  BNZ   189E
....................    { 
....................       Motor_L1_off; 
1898:  BCF    F8C.3
189A:  BCF    F95.3
....................    } 
....................    else 
189C:  BRA    18A2
....................    { 
....................       Motor_L1_on; 
189E:  BSF    F8C.3
18A0:  BCF    F95.3
....................    } 
.................... } 
18A2:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
07F6:  RLCF   xAE,W
07F8:  MOVWF  00
07FA:  RLCF   00,F
07FC:  MOVLW  FC
07FE:  ANDWF  00,F
0800:  MOVFF  00,01
0804:  MOVF   FC2,W
0806:  ANDLW  C3
0808:  IORWF  00,W
080A:  MOVWF  FC2
080C:  MOVLW  0A
080E:  MOVWF  xC0
0810:  RCALL  06D8
0812:  BSF    FC2.1
0814:  BTFSC  FC2.1
0816:  BRA    0814
0818:  MOVFF  FC4,03
081C:  MOVFF  FC3,C1
0820:  MOVFF  FC4,C2
0824:  RCALL  07C0
0826:  MOVFF  03,B2
082A:  MOVFF  02,B1
082E:  MOVFF  01,B0
0832:  MOVFF  00,AF
0836:  MOVFF  AF,00
083A:  MOVFF  B0,01
083E:  MOVFF  B1,02
0842:  MOVFF  B2,03
.................... } 
0846:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
104C:  CLRF   xAD
104E:  CLRF   xAC
1050:  CLRF   xAB
1052:  CLRF   xAA
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1054:  CLRF   xAE
1056:  CALL   07F6
105A:  MOVFF  03,98
105E:  MOVFF  02,97
1062:  MOVFF  01,96
1066:  MOVFF  00,95
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
106A:  MOVFF  98,C0
106E:  MOVFF  97,BF
1072:  MOVFF  96,BE
1076:  MOVFF  95,BD
107A:  MOVFF  A8,C4
107E:  MOVFF  A7,C3
1082:  MOVFF  A6,C2
1086:  MOVFF  A5,C1
108A:  RCALL  0C12
108C:  MOVFF  00,AE
1090:  MOVFF  01,AF
1094:  MOVFF  02,B0
1098:  MOVFF  03,B1
109C:  BSF    FD8.1
109E:  MOVFF  03,C4
10A2:  MOVFF  02,C3
10A6:  MOVFF  01,C2
10AA:  MOVFF  00,C1
10AE:  CLRF   xC8
10B0:  CLRF   xC7
10B2:  CLRF   xC6
10B4:  MOVLW  7F
10B6:  MOVWF  xC5
10B8:  RCALL  0D6C
10BA:  MOVFF  03,9C
10BE:  MOVFF  02,9B
10C2:  MOVFF  01,9A
10C6:  MOVFF  00,99
....................     
....................    if(Presion<0.0) 
10CA:  MOVFF  9C,C0
10CE:  MOVFF  9B,BF
10D2:  MOVFF  9A,BE
10D6:  MOVFF  99,BD
10DA:  CLRF   xC4
10DC:  CLRF   xC3
10DE:  CLRF   xC2
10E0:  CLRF   xC1
10E2:  RCALL  0FD6
10E4:  BNC   10EE
....................    { 
....................       Presion=0.0; 
10E6:  CLRF   x9C
10E8:  CLRF   x9B
10EA:  CLRF   x9A
10EC:  CLRF   x99
....................    } 
....................  
....................    if(r>media-1) 
10EE:  MOVLW  01
10F0:  SUBWF  xA9,W
10F2:  SUBWF  2C,W
10F4:  BZ    10FA
10F6:  BNC   10FA
....................    {r=0;} 
10F8:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
10FA:  MOVF   2C,W
10FC:  MULLW  04
10FE:  MOVF   FF3,W
1100:  CLRF   03
1102:  ADDLW  45
1104:  MOVWF  FE9
1106:  MOVLW  00
1108:  ADDWFC 03,W
110A:  MOVWF  FEA
110C:  MOVFF  99,FEF
1110:  MOVFF  9A,FEC
1114:  MOVFF  9B,FEC
1118:  MOVFF  9C,FEC
111C:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
111E:  CLRF   2D
1120:  MOVLW  01
1122:  SUBWF  xA9,W
1124:  SUBWF  2D,W
1126:  BZ    112A
1128:  BC    1194
....................    { 
....................       promediopresion+=PromPresion[q]; 
112A:  MOVF   2D,W
112C:  MULLW  04
112E:  MOVF   FF3,W
1130:  CLRF   03
1132:  ADDLW  45
1134:  MOVWF  FE9
1136:  MOVLW  00
1138:  ADDWFC 03,W
113A:  MOVWF  FEA
113C:  MOVFF  FEF,00
1140:  MOVFF  FEC,01
1144:  MOVFF  FEC,02
1148:  MOVFF  FEC,03
114C:  MOVFF  FEA,AF
1150:  MOVFF  FE9,AE
1154:  BCF    FD8.1
1156:  MOVFF  AD,C4
115A:  MOVFF  AC,C3
115E:  MOVFF  AB,C2
1162:  MOVFF  AA,C1
1166:  MOVFF  03,C8
116A:  MOVFF  02,C7
116E:  MOVFF  01,C6
1172:  MOVFF  00,C5
1176:  RCALL  0D6C
1178:  MOVFF  AF,FEA
117C:  MOVFF  AE,FE9
1180:  MOVFF  03,AD
1184:  MOVFF  02,AC
1188:  MOVFF  01,AB
118C:  MOVFF  00,AA
....................    }  
1190:  INCF   2D,F
1192:  BRA    1120
....................    promediopresion=promediopresion/media;    
1194:  CLRF   xC2
1196:  MOVFF  A9,C1
119A:  CALL   07C0
119E:  MOVFF  AD,C0
11A2:  MOVFF  AC,BF
11A6:  MOVFF  AB,BE
11AA:  MOVFF  AA,BD
11AE:  MOVFF  03,C4
11B2:  MOVFF  02,C3
11B6:  MOVFF  01,C2
11BA:  MOVFF  00,C1
11BE:  RCALL  0C12
11C0:  MOVFF  03,AD
11C4:  MOVFF  02,AC
11C8:  MOVFF  01,AB
11CC:  MOVFF  00,AA
....................     
....................    return promediopresion; 
11D0:  MOVFF  AA,00
11D4:  MOVFF  AB,01
11D8:  MOVFF  AC,02
11DC:  MOVFF  AD,03
.................... } 
11E0:  RETLW  00
....................  
.................... void Limita(void){ 
....................     
....................    if(Contrasena[0]>9) 
*
0928:  MOVF   3A,W
092A:  SUBLW  09
092C:  BC    0930
....................       Contrasena[0]=0; 
092E:  CLRF   3A
....................    if(Contrasena[1]>9) 
0930:  MOVF   3B,W
0932:  SUBLW  09
0934:  BC    0938
....................       Contrasena[1]=0; 
0936:  CLRF   3B
....................    if(Contrasena[2]>9) 
0938:  MOVF   3C,W
093A:  SUBLW  09
093C:  BC    0940
....................       Contrasena[2]=0; 
093E:  CLRF   3C
....................    if(Contrasena[3]>9) 
0940:  MOVF   3D,W
0942:  SUBLW  09
0944:  BC    0948
....................       Contrasena[3]=0; 
0946:  CLRF   3D
....................    /*if(tempo_minutos>60) 
....................       tempo_minutos=0; 
....................    if(tempo_segundos) 
....................       tempo_segundos=0; 
....................    if(segundos>60) 
....................       segundos=0; 
....................    if(minutos>60) 
....................       minutos=0;*/  
.................... } 
0948:  GOTO   1C36 (RETURN)
.................... void main () 
.................... { 
*
18A4:  CLRF   FF8
18A6:  BCF    FD0.7
18A8:  BSF    07.7
18AA:  CLRF   FEA
18AC:  CLRF   FE9
18AE:  BCF    17.0
18B0:  BCF    17.1
18B2:  BCF    17.2
18B4:  BCF    17.3
18B6:  BCF    17.4
18B8:  BCF    17.5
18BA:  BCF    17.6
18BC:  BCF    17.7
18BE:  BCF    18.0
18C0:  BCF    18.1
18C2:  BCF    18.2
18C4:  BCF    18.3
18C6:  BCF    18.4
18C8:  CLRF   19
18CA:  MOVLW  06
18CC:  MOVWF  1A
18CE:  MOVLW  02
18D0:  MOVWF  1B
18D2:  MOVLW  0B
18D4:  MOVWF  1C
18D6:  MOVLW  02
18D8:  MOVWF  1D
18DA:  MOVLW  03
18DC:  MOVWF  1E
18DE:  MOVLW  02
18E0:  MOVWF  1F
18E2:  MOVWF  20
18E4:  MOVLW  04
18E6:  MOVWF  21
18E8:  CLRF   22
18EA:  CLRF   23
18EC:  CLRF   24
18EE:  CLRF   25
18F0:  CLRF   26
18F2:  CLRF   27
18F4:  CLRF   28
18F6:  CLRF   29
18F8:  CLRF   2A
18FA:  CLRF   2B
18FC:  CLRF   2C
18FE:  CLRF   2D
1900:  CLRF   2E
1902:  MOVLW  01
1904:  MOVWF  2F
1906:  CLRF   30
1908:  CLRF   31
190A:  CLRF   32
190C:  CLRF   3E
190E:  CLRF   42
1910:  CLRF   41
1912:  CLRF   44
1914:  CLRF   43
1916:  CLRF   x98
1918:  CLRF   x97
191A:  CLRF   x96
191C:  CLRF   x95
191E:  CLRF   x9C
1920:  CLRF   x9B
1922:  CLRF   x9A
1924:  CLRF   x99
1926:  CLRF   xA0
1928:  CLRF   x9F
192A:  CLRF   x9E
192C:  CLRF   x9D
192E:  CLRF   xA4
1930:  CLRF   xA3
1932:  CLRF   xA2
1934:  CLRF   xA1
1936:  CLRF   xA8
1938:  CLRF   xA7
193A:  CLRF   xA6
193C:  MOVLW  80
193E:  MOVWF  xA5
1940:  MOVF   FC1,W
1942:  ANDLW  C0
1944:  IORLW  0F
1946:  MOVWF  FC1
1948:  MOVLW  07
194A:  MOVWF  FB4
194C:  MOVLW  3E
194E:  MOVWF  33
1950:  MOVLW  20
1952:  MOVWF  34
1954:  MOVLW  5E
1956:  MOVWF  35
1958:  CLRF   36
195A:  CLRF   37
195C:  CLRF   38
195E:  CLRF   39
1960:  CLRF   3A
1962:  CLRF   3B
1964:  CLRF   3C
1966:  CLRF   3D
1968:  CLRF   45
196A:  CLRF   46
196C:  CLRF   47
196E:  CLRF   48
1970:  CLRF   49
1972:  CLRF   4A
1974:  CLRF   4B
1976:  CLRF   4C
1978:  CLRF   4D
197A:  CLRF   4E
197C:  CLRF   4F
197E:  CLRF   50
1980:  CLRF   51
1982:  CLRF   52
1984:  CLRF   53
1986:  CLRF   54
1988:  CLRF   55
198A:  CLRF   56
198C:  CLRF   57
198E:  CLRF   58
1990:  CLRF   59
1992:  CLRF   5A
1994:  CLRF   5B
1996:  CLRF   5C
1998:  CLRF   5D
199A:  CLRF   5E
199C:  CLRF   5F
199E:  CLRF   x60
19A0:  CLRF   x61
19A2:  CLRF   x62
19A4:  CLRF   x63
19A6:  CLRF   x64
19A8:  CLRF   x65
19AA:  CLRF   x66
19AC:  CLRF   x67
19AE:  CLRF   x68
19B0:  CLRF   x69
19B2:  CLRF   x6A
19B4:  CLRF   x6B
19B6:  CLRF   x6C
19B8:  CLRF   x6D
19BA:  CLRF   x6E
19BC:  CLRF   x6F
19BE:  CLRF   x70
19C0:  CLRF   x71
19C2:  CLRF   x72
19C4:  CLRF   x73
19C6:  CLRF   x74
19C8:  CLRF   x75
19CA:  CLRF   x76
19CC:  CLRF   x77
19CE:  CLRF   x78
19D0:  CLRF   x79
19D2:  CLRF   x7A
19D4:  CLRF   x7B
19D6:  CLRF   x7C
19D8:  CLRF   x7D
19DA:  CLRF   x7E
19DC:  CLRF   x7F
19DE:  CLRF   x80
19E0:  CLRF   x81
19E2:  CLRF   x82
19E4:  CLRF   x83
19E6:  CLRF   x84
19E8:  CLRF   x85
19EA:  CLRF   x86
19EC:  CLRF   x87
19EE:  CLRF   x88
19F0:  CLRF   x89
19F2:  CLRF   x8A
19F4:  CLRF   x8B
19F6:  CLRF   x8C
19F8:  CLRF   x8D
19FA:  CLRF   x8E
19FC:  CLRF   x8F
19FE:  CLRF   x90
1A00:  CLRF   x91
1A02:  CLRF   x92
1A04:  CLRF   x93
1A06:  CLRF   x94
....................    lcd_init(); 
1A08:  CALL   076A
....................    set_tris_a(0XFF); 
1A0C:  MOVLW  FF
1A0E:  MOVWF  F92
....................    set_tris_e(0XFF); 
1A10:  MOVWF  F96
....................    set_tris_d(0X00); 
1A12:  MOVLW  00
1A14:  MOVWF  F95
....................    output_d(0); 
1A16:  CLRF   F95
1A18:  CLRF   F8C
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1A1A:  MOVLW  85
1A1C:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1A1E:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
1A20:  MOVF   FC1,W
1A22:  ANDLW  C0
1A24:  IORLW  0E
1A26:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1A28:  BCF    FC0.0
1A2A:  BSF    FC0.1
1A2C:  BCF    FC0.2
1A2E:  BSF    FC0.7
1A30:  BSF    FC2.0
....................    enable_interrupts(global); 
1A32:  MOVLW  C0
1A34:  IORWF  FF2,F
....................    sensores(0); 
1A36:  CLRF   xAE
1A38:  CALL   07F6
....................    lcd_gotoxy(1,1); 
1A3C:  MOVLW  01
1A3E:  MOVWF  xBB
1A40:  MOVWF  xBC
1A42:  CALL   0848
....................    printf(lcd_putc," MODULO  DE   FLUJO "); 
1A46:  MOVLW  98
1A48:  MOVWF  FF6
1A4A:  MOVLW  01
1A4C:  MOVWF  FF7
1A4E:  CALL   0908
....................    lcd_gotoxy(1,2); 
1A52:  MOVLW  01
1A54:  MOVWF  xBB
1A56:  MOVLW  02
1A58:  MOVWF  xBC
1A5A:  CALL   0848
....................    printf(lcd_putc,"      LAMINAR       "); 
1A5E:  MOVLW  AE
1A60:  MOVWF  FF6
1A62:  MOVLW  01
1A64:  MOVWF  FF7
1A66:  CALL   0908
....................    lcd_gotoxy(1,3); 
1A6A:  MOVLW  01
1A6C:  MOVWF  xBB
1A6E:  MOVLW  03
1A70:  MOVWF  xBC
1A72:  CALL   0848
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1A76:  MOVLW  C4
1A78:  MOVWF  FF6
1A7A:  MOVLW  01
1A7C:  MOVWF  FF7
1A7E:  CALL   0908
....................    lcd_gotoxy(1,4); 
1A82:  MOVLW  01
1A84:  MOVWF  xBB
1A86:  MOVLW  04
1A88:  MOVWF  xBC
1A8A:  CALL   0848
....................    printf(lcd_putc," REF:  JPCFLVMD721X "); 
1A8E:  MOVLW  DA
1A90:  MOVWF  FF6
1A92:  MOVLW  01
1A94:  MOVWF  FF7
1A96:  CALL   0908
....................    delay_ms(2000); 
1A9A:  MOVLW  08
1A9C:  MOVWF  xA9
1A9E:  MOVLW  FA
1AA0:  MOVWF  xC0
1AA2:  CALL   06D8
1AA6:  DECFSZ xA9,F
1AA8:  BRA    1A9E
....................    printf(lcd_putc,"\f");    
1AAA:  MOVLW  0C
1AAC:  MOVWF  xBA
1AAE:  CALL   08AA
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1AB2:  MOVFF  FF2,A9
1AB6:  BCF    FF2.7
1AB8:  CLRF   FA9
1ABA:  BCF    FA6.6
1ABC:  BCF    FA6.7
1ABE:  BSF    FA6.0
1AC0:  MOVF   FA8,W
1AC2:  BTFSC  xA9.7
1AC4:  BSF    FF2.7
1AC6:  MOVWF  3A
1AC8:  MOVLW  14
1ACA:  MOVWF  xC0
1ACC:  CALL   06D8
1AD0:  MOVFF  FF2,A9
1AD4:  BCF    FF2.7
1AD6:  MOVLW  01
1AD8:  MOVWF  FA9
1ADA:  BCF    FA6.6
1ADC:  BCF    FA6.7
1ADE:  BSF    FA6.0
1AE0:  MOVF   FA8,W
1AE2:  BTFSC  xA9.7
1AE4:  BSF    FF2.7
1AE6:  MOVWF  3B
1AE8:  MOVLW  14
1AEA:  MOVWF  xC0
1AEC:  CALL   06D8
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1AF0:  MOVFF  FF2,A9
1AF4:  BCF    FF2.7
1AF6:  MOVLW  02
1AF8:  MOVWF  FA9
1AFA:  BCF    FA6.6
1AFC:  BCF    FA6.7
1AFE:  BSF    FA6.0
1B00:  MOVF   FA8,W
1B02:  BTFSC  xA9.7
1B04:  BSF    FF2.7
1B06:  MOVWF  3C
1B08:  MOVLW  14
1B0A:  MOVWF  xC0
1B0C:  CALL   06D8
1B10:  MOVFF  FF2,A9
1B14:  BCF    FF2.7
1B16:  MOVLW  03
1B18:  MOVWF  FA9
1B1A:  BCF    FA6.6
1B1C:  BCF    FA6.7
1B1E:  BSF    FA6.0
1B20:  MOVF   FA8,W
1B22:  BTFSC  xA9.7
1B24:  BSF    FF2.7
1B26:  MOVWF  3D
1B28:  MOVLW  14
1B2A:  MOVWF  xC0
1B2C:  CALL   06D8
....................    estadoalarma=read_eeprom(5); 
1B30:  MOVFF  FF2,A9
1B34:  BCF    FF2.7
1B36:  MOVLW  05
1B38:  MOVWF  FA9
1B3A:  BCF    FA6.6
1B3C:  BCF    FA6.7
1B3E:  BSF    FA6.0
1B40:  MOVF   FA8,W
1B42:  BTFSC  xA9.7
1B44:  BSF    FF2.7
1B46:  MOVWF  01
1B48:  BCF    18.4
1B4A:  BTFSC  01.0
1B4C:  BSF    18.4
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(30); 
1B4E:  MOVFF  FF2,A9
1B52:  BCF    FF2.7
1B54:  MOVLW  14
1B56:  MOVWF  FA9
1B58:  BCF    FA6.6
1B5A:  BCF    FA6.7
1B5C:  BSF    FA6.0
1B5E:  MOVF   FA8,W
1B60:  BTFSC  xA9.7
1B62:  BSF    FF2.7
1B64:  MOVWF  28
1B66:  MOVFF  FF2,A9
1B6A:  BCF    FF2.7
1B6C:  MOVLW  1E
1B6E:  MOVWF  FA9
1B70:  BCF    FA6.6
1B72:  BCF    FA6.7
1B74:  BSF    FA6.0
1B76:  MOVF   FA8,W
1B78:  BTFSC  xA9.7
1B7A:  BSF    FF2.7
1B7C:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1B7E:  MOVFF  FF2,A9
1B82:  BCF    FF2.7
1B84:  MOVLW  32
1B86:  MOVWF  FA9
1B88:  BCF    FA6.6
1B8A:  BCF    FA6.7
1B8C:  BSF    FA6.0
1B8E:  MOVF   FA8,W
1B90:  BTFSC  xA9.7
1B92:  BSF    FF2.7
1B94:  MOVWF  22
1B96:  MOVFF  FF2,A9
1B9A:  BCF    FF2.7
1B9C:  MOVLW  33
1B9E:  MOVWF  FA9
1BA0:  BCF    FA6.6
1BA2:  BCF    FA6.7
1BA4:  BSF    FA6.0
1BA6:  MOVF   FA8,W
1BA8:  BTFSC  xA9.7
1BAA:  BSF    FF2.7
1BAC:  MOVWF  23
1BAE:  MOVFF  FF2,A9
1BB2:  BCF    FF2.7
1BB4:  MOVLW  34
1BB6:  MOVWF  FA9
1BB8:  BCF    FA6.6
1BBA:  BCF    FA6.7
1BBC:  BSF    FA6.0
1BBE:  MOVF   FA8,W
1BC0:  BTFSC  xA9.7
1BC2:  BSF    FF2.7
1BC4:  MOVWF  24
1BC6:  MOVFF  FF2,A9
1BCA:  BCF    FF2.7
1BCC:  MOVLW  35
1BCE:  MOVWF  FA9
1BD0:  BCF    FA6.6
1BD2:  BCF    FA6.7
1BD4:  BSF    FA6.0
1BD6:  MOVF   FA8,W
1BD8:  BTFSC  xA9.7
1BDA:  BSF    FF2.7
1BDC:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1BDE:  MOVFF  FF2,A9
1BE2:  BCF    FF2.7
1BE4:  MOVLW  3C
1BE6:  MOVWF  FA9
1BE8:  BCF    FA6.6
1BEA:  BCF    FA6.7
1BEC:  BSF    FA6.0
1BEE:  MOVF   FA8,W
1BF0:  BTFSC  xA9.7
1BF2:  BSF    FF2.7
1BF4:  MOVWF  26
....................    G_h=read_eeprom(61); 
1BF6:  MOVFF  FF2,A9
1BFA:  BCF    FF2.7
1BFC:  MOVLW  3D
1BFE:  MOVWF  FA9
1C00:  BCF    FA6.6
1C02:  BCF    FA6.7
1C04:  BSF    FA6.0
1C06:  MOVF   FA8,W
1C08:  BTFSC  xA9.7
1C0A:  BSF    FF2.7
1C0C:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1C0E:  MOVFF  27,44
1C12:  MOVFF  26,43
....................    G=G16; 
1C16:  MOVFF  44,C2
1C1A:  MOVFF  43,C1
1C1E:  CALL   07C0
1C22:  MOVFF  03,A8
1C26:  MOVFF  02,A7
1C2A:  MOVFF  01,A6
1C2E:  MOVFF  00,A5
....................  
....................    Limita(); 
1C32:  GOTO   0928
....................    horas=make16(horasH,horasL); 
1C36:  MOVFF  25,42
1C3A:  MOVFF  24,41
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1C3E:  MOVFF  28,2A
1C42:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1C46:  MOVF   19,F
1C48:  BTFSS  FD8.2
1C4A:  BRA    1FFC
....................    lcd_gotoxy(1,1); 
1C4C:  MOVLW  01
1C4E:  MOVWF  xBB
1C50:  MOVWF  xBC
1C52:  CALL   0848
....................    printf(lcd_putc,"     Ingrese        "); 
1C56:  MOVLW  F0
1C58:  MOVWF  FF6
1C5A:  MOVLW  01
1C5C:  MOVWF  FF7
1C5E:  CALL   0908
....................    lcd_gotoxy(1,2); 
1C62:  MOVLW  01
1C64:  MOVWF  xBB
1C66:  MOVLW  02
1C68:  MOVWF  xBC
1C6A:  CALL   0848
....................    printf(lcd_putc,"    Contraseña      "); 
1C6E:  MOVLW  06
1C70:  MOVWF  FF6
1C72:  MOVLW  02
1C74:  MOVWF  FF7
1C76:  CALL   0908
....................    lcd_gotoxy(1,3); 
1C7A:  MOVLW  01
1C7C:  MOVWF  xBB
1C7E:  MOVLW  03
1C80:  MOVWF  xBC
1C82:  CALL   0848
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1C86:  MOVLW  1C
1C88:  MOVWF  FF6
1C8A:  MOVLW  02
1C8C:  MOVWF  FF7
1C8E:  MOVLW  0A
1C90:  MOVWF  xAD
1C92:  CALL   094C
1C96:  MOVFF  36,A9
1C9A:  MOVLW  1F
1C9C:  MOVWF  xAA
1C9E:  CALL   0992
1CA2:  MOVFF  37,A9
1CA6:  MOVLW  1F
1CA8:  MOVWF  xAA
1CAA:  CALL   0992
1CAE:  MOVFF  38,A9
1CB2:  MOVLW  1F
1CB4:  MOVWF  xAA
1CB6:  CALL   0992
1CBA:  MOVFF  39,A9
1CBE:  MOVLW  1F
1CC0:  MOVWF  xAA
1CC2:  CALL   0992
1CC6:  MOVLW  20
1CC8:  MOVWF  xBA
1CCA:  CALL   08AA
1CCE:  MOVLW  20
1CD0:  MOVWF  xBA
1CD2:  CALL   08AA
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
1CD6:  BSF    F92.5
1CD8:  BTFSS  F80.5
1CDA:  BRA    1CFE
....................       {  if(Flanco == 0)  
1CDC:  BTFSC  17.3
1CDE:  BRA    1CFC
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1CE0:  MOVLW  0B
1CE2:  SUBWF  1C,W
1CE4:  CLRF   03
1CE6:  ADDLW  36
1CE8:  MOVWF  FE9
1CEA:  MOVLW  00
1CEC:  ADDWFC 03,W
1CEE:  MOVWF  FEA
1CF0:  INCF   FEF,F
1CF2:  BSF    17.3
1CF4:  MOVLW  1E
1CF6:  MOVWF  xC0
1CF8:  CALL   06D8
....................          else 
1CFC:  BRA    1D00
....................             {Flanco = 0;} 
1CFE:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1D00:  BSF    F96.0
1D02:  BTFSS  F84.0
1D04:  BRA    1D28
....................       {  if(Flanco2 == 0)  
1D06:  BTFSC  17.5
1D08:  BRA    1D26
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1D0A:  MOVLW  0B
1D0C:  SUBWF  1C,W
1D0E:  CLRF   03
1D10:  ADDLW  36
1D12:  MOVWF  FE9
1D14:  MOVLW  00
1D16:  ADDWFC 03,W
1D18:  MOVWF  FEA
1D1A:  DECF   FEF,F
1D1C:  BSF    17.5
1D1E:  MOVLW  1E
1D20:  MOVWF  xC0
1D22:  CALL   06D8
....................          else 
1D26:  BRA    1D2A
....................             {Flanco2 = 0;} 
1D28:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1D2A:  BSF    F96.1
1D2C:  BTFSS  F84.1
1D2E:  BRA    1D4A
....................       {  if(Flanco1 == 0)  
1D30:  BTFSC  17.4
1D32:  BRA    1D48
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1D34:  BSF    17.4
1D36:  INCF   1C,F
1D38:  MOVLW  1E
1D3A:  MOVWF  xC0
1D3C:  CALL   06D8
1D40:  MOVLW  0C
1D42:  MOVWF  xBA
1D44:  CALL   08AA
....................          else 
1D48:  BRA    1D4C
....................             {Flanco1 = 0;}    
1D4A:  BCF    17.4
....................              
....................        if(IZQU)// Si Oprime izquierda 
1D4C:  BSF    F96.2
1D4E:  BTFSS  F84.2
1D50:  BRA    1D74
....................        { 
....................          delay_ms(150); 
1D52:  MOVLW  96
1D54:  MOVWF  xC0
1D56:  CALL   06D8
....................          if(Flanco3 == 0) 
1D5A:  BTFSC  17.6
1D5C:  BRA    1D72
....................          { 
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
1D5E:  BSF    17.6
1D60:  DECF   1C,F
1D62:  MOVLW  1E
1D64:  MOVWF  xC0
1D66:  CALL   06D8
1D6A:  MOVLW  0C
1D6C:  MOVWF  xBA
1D6E:  CALL   08AA
....................          } 
....................        } 
....................        else 
1D72:  BRA    1D76
....................        { 
....................          Flanco3 = 0; 
1D74:  BCF    17.6
....................        } 
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1D76:  MOVLW  0B
1D78:  SUBWF  1C,W
1D7A:  CLRF   03
1D7C:  ADDLW  36
1D7E:  MOVWF  FE9
1D80:  MOVLW  00
1D82:  ADDWFC 03,W
1D84:  MOVWF  FEA
1D86:  BTFSC  FEF.7
1D88:  BRA    1D8C
1D8A:  BRA    1DA0
....................        {clave[unidad-11]=9;} 
1D8C:  MOVLW  0B
1D8E:  SUBWF  1C,W
1D90:  CLRF   03
1D92:  ADDLW  36
1D94:  MOVWF  FE9
1D96:  MOVLW  00
1D98:  ADDWFC 03,W
1D9A:  MOVWF  FEA
1D9C:  MOVLW  09
1D9E:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1DA0:  MOVLW  0B
1DA2:  SUBWF  1C,W
1DA4:  CLRF   03
1DA6:  ADDLW  36
1DA8:  MOVWF  FE9
1DAA:  MOVLW  00
1DAC:  ADDWFC 03,W
1DAE:  MOVWF  FEA
1DB0:  BTFSC  FEF.7
1DB2:  BRA    1DCC
1DB4:  MOVF   FEF,W
1DB6:  SUBLW  09
1DB8:  BC    1DCC
....................        {clave[unidad-11]=0;} 
1DBA:  MOVLW  0B
1DBC:  SUBWF  1C,W
1DBE:  CLRF   03
1DC0:  ADDLW  36
1DC2:  MOVWF  FE9
1DC4:  MOVLW  00
1DC6:  ADDWFC 03,W
1DC8:  MOVWF  FEA
1DCA:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1DCC:  MOVF   1C,W
1DCE:  SUBLW  0A
1DD0:  BNC   1DD6
....................        {unidad=11;} 
1DD2:  MOVLW  0B
1DD4:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1DD6:  MOVFF  1C,BB
1DDA:  MOVLW  04
1DDC:  MOVWF  xBC
1DDE:  CALL   0848
....................        lcd_putc(t[2]); 
1DE2:  MOVFF  35,BA
1DE6:  CALL   08AA
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1DEA:  MOVF   1C,W
1DEC:  SUBLW  0E
1DEE:  BTFSC  FD8.0
1DF0:  BRA    1FD8
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1DF2:  MOVF   36,W
1DF4:  SUBLW  03
1DF6:  BNZ   1ED2
1DF8:  MOVF   37,W
1DFA:  SUBLW  08
1DFC:  BNZ   1ED2
1DFE:  MOVF   38,W
1E00:  SUBLW  09
1E02:  BNZ   1ED2
1E04:  MOVF   39,W
1E06:  SUBLW  02
1E08:  BNZ   1ED2
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1E0A:  CLRF   FA9
1E0C:  CLRF   FA8
1E0E:  BCF    FA6.6
1E10:  BCF    FA6.7
1E12:  BSF    FA6.2
1E14:  MOVF   FF2,W
1E16:  MOVWF  00
1E18:  BCF    FF2.7
1E1A:  MOVLB  F
1E1C:  MOVLW  55
1E1E:  MOVWF  FA7
1E20:  MOVLW  AA
1E22:  MOVWF  FA7
1E24:  BSF    FA6.1
1E26:  BTFSC  FA6.1
1E28:  BRA    1E26
1E2A:  BCF    FA6.2
1E2C:  MOVF   00,W
1E2E:  IORWF  FF2,F
1E30:  MOVLW  14
1E32:  MOVLB  0
1E34:  MOVWF  xC0
1E36:  CALL   06D8
1E3A:  MOVLW  01
1E3C:  MOVWF  FA9
1E3E:  CLRF   FA8
1E40:  BCF    FA6.6
1E42:  BCF    FA6.7
1E44:  BSF    FA6.2
1E46:  MOVF   FF2,W
1E48:  MOVWF  00
1E4A:  BCF    FF2.7
1E4C:  MOVLB  F
1E4E:  MOVLW  55
1E50:  MOVWF  FA7
1E52:  MOVLW  AA
1E54:  MOVWF  FA7
1E56:  BSF    FA6.1
1E58:  BTFSC  FA6.1
1E5A:  BRA    1E58
1E5C:  BCF    FA6.2
1E5E:  MOVF   00,W
1E60:  IORWF  FF2,F
1E62:  MOVLW  14
1E64:  MOVLB  0
1E66:  MOVWF  xC0
1E68:  CALL   06D8
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1E6C:  MOVLW  02
1E6E:  MOVWF  FA9
1E70:  CLRF   FA8
1E72:  BCF    FA6.6
1E74:  BCF    FA6.7
1E76:  BSF    FA6.2
1E78:  MOVF   FF2,W
1E7A:  MOVWF  00
1E7C:  BCF    FF2.7
1E7E:  MOVLB  F
1E80:  MOVLW  55
1E82:  MOVWF  FA7
1E84:  MOVLW  AA
1E86:  MOVWF  FA7
1E88:  BSF    FA6.1
1E8A:  BTFSC  FA6.1
1E8C:  BRA    1E8A
1E8E:  BCF    FA6.2
1E90:  MOVF   00,W
1E92:  IORWF  FF2,F
1E94:  MOVLW  14
1E96:  MOVLB  0
1E98:  MOVWF  xC0
1E9A:  CALL   06D8
1E9E:  MOVLW  03
1EA0:  MOVWF  FA9
1EA2:  CLRF   FA8
1EA4:  BCF    FA6.6
1EA6:  BCF    FA6.7
1EA8:  BSF    FA6.2
1EAA:  MOVF   FF2,W
1EAC:  MOVWF  00
1EAE:  BCF    FF2.7
1EB0:  MOVLB  F
1EB2:  MOVLW  55
1EB4:  MOVWF  FA7
1EB6:  MOVLW  AA
1EB8:  MOVWF  FA7
1EBA:  BSF    FA6.1
1EBC:  BTFSC  FA6.1
1EBE:  BRA    1EBC
1EC0:  BCF    FA6.2
1EC2:  MOVF   00,W
1EC4:  IORWF  FF2,F
1EC6:  MOVLW  14
1EC8:  MOVLB  0
1ECA:  MOVWF  xC0
1ECC:  CALL   06D8
....................              reset_cpu();} 
1ED0:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1ED2:  MOVF   3A,W
1ED4:  SUBWF  36,W
1ED6:  BNZ   1F6A
1ED8:  MOVF   3B,W
1EDA:  SUBWF  37,W
1EDC:  BNZ   1F6A
1EDE:  MOVF   3C,W
1EE0:  SUBWF  38,W
1EE2:  BNZ   1F6A
1EE4:  MOVF   3D,W
1EE6:  SUBWF  39,W
1EE8:  BNZ   1F6A
....................             {lcd_gotoxy(1,1); 
1EEA:  MOVLW  01
1EEC:  MOVWF  xBB
1EEE:  MOVWF  xBC
1EF0:  CALL   0848
....................             printf(lcd_putc,"                   "); 
1EF4:  MOVLW  32
1EF6:  MOVWF  FF6
1EF8:  MOVLW  02
1EFA:  MOVWF  FF7
1EFC:  CALL   0908
....................             lcd_gotoxy(1,2); 
1F00:  MOVLW  01
1F02:  MOVWF  xBB
1F04:  MOVLW  02
1F06:  MOVWF  xBC
1F08:  CALL   0848
....................             printf(lcd_putc,"     Contraseña    "); 
1F0C:  MOVLW  46
1F0E:  MOVWF  FF6
1F10:  MOVLW  02
1F12:  MOVWF  FF7
1F14:  CALL   0908
....................             lcd_gotoxy(1,3); 
1F18:  MOVLW  01
1F1A:  MOVWF  xBB
1F1C:  MOVLW  03
1F1E:  MOVWF  xBC
1F20:  CALL   0848
....................             printf(lcd_putc,"      Correcta     "); 
1F24:  MOVLW  5A
1F26:  MOVWF  FF6
1F28:  MOVLW  02
1F2A:  MOVWF  FF7
1F2C:  CALL   0908
....................             lcd_gotoxy(1,4); 
1F30:  MOVLW  01
1F32:  MOVWF  xBB
1F34:  MOVLW  04
1F36:  MOVWF  xBC
1F38:  CALL   0848
....................             printf(lcd_putc,"                   "); 
1F3C:  MOVLW  6E
1F3E:  MOVWF  FF6
1F40:  MOVLW  02
1F42:  MOVWF  FF7
1F44:  CALL   0908
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");} 
1F48:  MOVLW  04
1F4A:  MOVWF  xA9
1F4C:  MOVLW  FA
1F4E:  MOVWF  xC0
1F50:  CALL   06D8
1F54:  DECFSZ xA9,F
1F56:  BRA    1F4C
1F58:  MOVLW  32
1F5A:  MOVWF  19
1F5C:  MOVLW  0B
1F5E:  MOVWF  1C
1F60:  MOVLW  0C
1F62:  MOVWF  xBA
1F64:  CALL   08AA
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1F68:  BRA    1FD8
....................          {lcd_gotoxy(1,1); 
1F6A:  MOVLW  01
1F6C:  MOVWF  xBB
1F6E:  MOVWF  xBC
1F70:  CALL   0848
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1F74:  MOVLW  01
1F76:  MOVWF  xBB
1F78:  MOVLW  02
1F7A:  MOVWF  xBC
1F7C:  CALL   0848
....................             printf(lcd_putc,"     Contraseña    "); 
1F80:  MOVLW  82
1F82:  MOVWF  FF6
1F84:  MOVLW  02
1F86:  MOVWF  FF7
1F88:  CALL   0908
....................             lcd_gotoxy(1,3); 
1F8C:  MOVLW  01
1F8E:  MOVWF  xBB
1F90:  MOVLW  03
1F92:  MOVWF  xBC
1F94:  CALL   0848
....................             printf(lcd_putc,"     Incorrecta    "); 
1F98:  MOVLW  96
1F9A:  MOVWF  FF6
1F9C:  MOVLW  02
1F9E:  MOVWF  FF7
1FA0:  CALL   0908
....................             lcd_gotoxy(1,4); 
1FA4:  MOVLW  01
1FA6:  MOVWF  xBB
1FA8:  MOVLW  04
1FAA:  MOVWF  xBC
1FAC:  CALL   0848
....................             printf(lcd_putc,"                   "); 
1FB0:  MOVLW  AA
1FB2:  MOVWF  FF6
1FB4:  MOVLW  02
1FB6:  MOVWF  FF7
1FB8:  CALL   0908
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
1FBC:  MOVLW  04
1FBE:  MOVWF  xA9
1FC0:  MOVLW  FA
1FC2:  MOVWF  xC0
1FC4:  CALL   06D8
1FC8:  DECFSZ xA9,F
1FCA:  BRA    1FC0
1FCC:  MOVLW  0B
1FCE:  MOVWF  1C
1FD0:  MOVLW  0C
1FD2:  MOVWF  xBA
1FD4:  CALL   08AA
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1FD8:  MOVF   1C,W
1FDA:  SUBLW  0B
1FDC:  BC    1FFC
1FDE:  MOVF   1C,W
1FE0:  SUBLW  0D
1FE2:  BNC   1FFC
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1FE4:  MOVLW  01
1FE6:  SUBWF  1C,W
1FE8:  MOVWF  xA9
1FEA:  MOVWF  xBB
1FEC:  MOVLW  04
1FEE:  MOVWF  xBC
1FF0:  CALL   0848
....................             lcd_putc(t[1]); 
1FF4:  MOVFF  34,BA
1FF8:  CALL   08AA
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1FFC:  DECFSZ 19,W
1FFE:  BRA    21F0
....................    lcd_gotoxy(1,1); 
2000:  MOVLW  01
2002:  MOVWF  xBB
2004:  MOVWF  xBC
2006:  CALL   0848
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
200A:  MOVLW  BE
200C:  MOVWF  FF6
200E:  MOVLW  02
2010:  MOVWF  FF7
2012:  CALL   0908
....................       if(paso<0) 
2016:  BTFSC  32.7
2018:  BRA    201C
201A:  BRA    201E
....................         {paso=0;} 
201C:  CLRF   32
....................          
....................       if(UP)//Si oprime hacia arriba 
201E:  BSF    F92.5
2020:  BTFSS  F80.5
2022:  BRA    203E
....................       { 
....................          if(Flanco == 0) 
2024:  BTFSC  17.3
2026:  BRA    203C
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
2028:  DECF   1F,F
202A:  DECF   1D,F
202C:  MOVLW  01
202E:  ADDWF  1D,W
2030:  MOVWF  1E
2032:  BSF    17.3
2034:  MOVLW  1E
2036:  MOVWF  xC0
2038:  CALL   06D8
....................          } 
....................       } 
....................       else 
203C:  BRA    2040
....................       { 
....................          Flanco = 0; 
203E:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2040:  BSF    F96.0
2042:  BTFSS  F84.0
2044:  BRA    2060
....................       { 
....................          if(Flanco2 == 0) 
2046:  BTFSC  17.5
2048:  BRA    205E
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
204A:  INCF   1F,F
204C:  INCF   1D,F
204E:  MOVLW  01
2050:  SUBWF  1D,W
2052:  MOVWF  1E
2054:  BSF    17.5
2056:  MOVLW  1E
2058:  MOVWF  xC0
205A:  CALL   06D8
....................          } 
....................       } 
....................       else 
205E:  BRA    2062
....................       { 
....................          Flanco2 = 0; 
2060:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
2062:  MOVF   1F,W
2064:  SUBWF  21,W
2066:  BC    2078
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2068:  INCF   32,F
206A:  MOVFF  1F,21
206E:  MOVLW  02
2070:  SUBWF  21,W
2072:  MOVWF  20
2074:  MOVLW  04
2076:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
2078:  MOVF   20,W
207A:  SUBWF  1F,W
207C:  BC    208E
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
207E:  DECF   32,F
2080:  MOVFF  1F,20
2084:  MOVLW  02
2086:  ADDWF  20,W
2088:  MOVWF  21
208A:  MOVLW  02
208C:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
208E:  MOVF   1F,W
2090:  SUBWF  1A,W
2092:  BC    20A6
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
2094:  MOVFF  1B,1F
2098:  MOVLW  02
209A:  MOVWF  1D
209C:  CLRF   32
209E:  MOVFF  1F,20
20A2:  ADDWF  20,W
20A4:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
20A6:  MOVF   1B,W
20A8:  SUBWF  1F,W
20AA:  BC    20C2
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
20AC:  MOVFF  1A,1F
20B0:  MOVLW  04
20B2:  MOVWF  1D
20B4:  SUBWF  1A,W
20B6:  MOVWF  32
20B8:  MOVFF  1F,21
20BC:  MOVLW  02
20BE:  SUBWF  21,W
20C0:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
20C2:  MOVLW  01
20C4:  ADDWF  32,W
20C6:  MOVWF  xA9
20C8:  MOVWF  xAA
20CA:  MOVLW  02
20CC:  MOVWF  xAB
20CE:  CALL   0A5A
....................         mensajes(2+paso,3); 
20D2:  MOVLW  02
20D4:  ADDWF  32,W
20D6:  MOVWF  xA9
20D8:  MOVWF  xAA
20DA:  MOVLW  03
20DC:  MOVWF  xAB
20DE:  CALL   0A5A
....................         mensajes(3+paso,4); 
20E2:  MOVLW  03
20E4:  ADDWF  32,W
20E6:  MOVWF  xA9
20E8:  MOVWF  xAA
20EA:  MOVLW  04
20EC:  MOVWF  xAB
20EE:  CALL   0A5A
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
20F2:  MOVLW  01
20F4:  MOVWF  xBB
20F6:  MOVFF  1D,BC
20FA:  CALL   0848
....................         lcd_putc(t[0]); 
20FE:  MOVFF  33,BA
2102:  CALL   08AA
....................  
....................         if(Flecha==2) 
2106:  MOVF   1D,W
2108:  SUBLW  02
210A:  BNZ   2134
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
210C:  MOVLW  01
210E:  MOVWF  xBB
2110:  MOVLW  04
2112:  MOVWF  xBC
2114:  CALL   0848
....................             lcd_putc(t[1]); 
2118:  MOVFF  34,BA
211C:  CALL   08AA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2120:  MOVLW  01
2122:  MOVWF  xBB
2124:  MOVLW  03
2126:  MOVWF  xBC
2128:  CALL   0848
....................             lcd_putc(t[1]); 
212C:  MOVFF  34,BA
2130:  CALL   08AA
....................           } 
....................          
....................         if(Flecha==4) 
2134:  MOVF   1D,W
2136:  SUBLW  04
2138:  BNZ   2162
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
213A:  MOVLW  01
213C:  MOVWF  xBB
213E:  MOVLW  02
2140:  MOVWF  xBC
2142:  CALL   0848
....................             lcd_putc(t[1]); 
2146:  MOVFF  34,BA
214A:  CALL   08AA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
214E:  MOVLW  01
2150:  MOVWF  xBB
2152:  MOVLW  03
2154:  MOVWF  xBC
2156:  CALL   0848
....................             lcd_putc(t[1]); 
215A:  MOVFF  34,BA
215E:  CALL   08AA
....................           } 
....................          
....................         if(Flecha==3) 
2162:  MOVF   1D,W
2164:  SUBLW  03
2166:  BNZ   2190
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2168:  MOVLW  01
216A:  MOVWF  xBB
216C:  MOVLW  04
216E:  MOVWF  xBC
2170:  CALL   0848
....................             lcd_putc(t[1]); 
2174:  MOVFF  34,BA
2178:  CALL   08AA
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
217C:  MOVLW  01
217E:  MOVWF  xBB
2180:  MOVLW  02
2182:  MOVWF  xBC
2184:  CALL   0848
....................             lcd_putc(t[1]); 
2188:  MOVFF  34,BA
218C:  CALL   08AA
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
2190:  BSF    F96.1
2192:  BTFSS  F84.1
2194:  BRA    21CC
....................        { 
....................          if(Flanco1 == 0) 
2196:  BTFSC  17.4
2198:  BRA    21CA
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
219A:  BSF    17.4
219C:  MOVFF  1F,19
21A0:  MOVLW  03
21A2:  MOVWF  1D
21A4:  MOVLW  02
21A6:  MOVWF  xA9
21A8:  MOVLW  96
21AA:  MOVWF  xC0
21AC:  CALL   06D8
21B0:  DECFSZ xA9,F
21B2:  BRA    21A8
21B4:  MOVLW  0C
21B6:  MOVWF  xBA
21B8:  CALL   08AA
....................             if(Menu==6) 
21BC:  MOVF   19,W
21BE:  SUBLW  06
21C0:  BNZ   21CA
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
21C2:  CLRF   36
21C4:  CLRF   37
21C6:  CLRF   38
21C8:  CLRF   39
....................             } 
....................          } 
....................        } 
....................        else 
21CA:  BRA    21CE
....................        { 
....................          Flanco1 = 0; 
21CC:  BCF    17.4
....................        } 
....................              
....................        if(IZQU) 
21CE:  BSF    F96.2
21D0:  BTFSS  F84.2
21D2:  BRA    21F0
....................        { 
....................          delay_ms(500);Menu=50;printf(lcd_putc,"\f"); 
21D4:  MOVLW  02
21D6:  MOVWF  xA9
21D8:  MOVLW  FA
21DA:  MOVWF  xC0
21DC:  CALL   06D8
21E0:  DECFSZ xA9,F
21E2:  BRA    21D8
21E4:  MOVLW  32
21E6:  MOVWF  19
21E8:  MOVLW  0C
21EA:  MOVWF  xBA
21EC:  CALL   08AA
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
21F0:  MOVF   19,W
21F2:  SUBLW  02
21F4:  BTFSS  FD8.2
21F6:  BRA    2406
....................     
....................    lcd_gotoxy(1,1); 
21F8:  MOVLW  01
21FA:  MOVWF  xBB
21FC:  MOVWF  xBC
21FE:  CALL   0848
....................    printf(lcd_putc,"    Temporizador     "); 
2202:  MOVLW  D4
2204:  MOVWF  FF6
2206:  MOVLW  02
2208:  MOVWF  FF7
220A:  CALL   0908
....................    lcd_gotoxy(1,2); 
220E:  MOVLW  01
2210:  MOVWF  xBB
2212:  MOVLW  02
2214:  MOVWF  xBC
2216:  CALL   0848
....................    printf(lcd_putc,"       Luz UV        "); 
221A:  MOVLW  EA
221C:  MOVWF  FF6
221E:  MOVLW  02
2220:  MOVWF  FF7
2222:  CALL   0908
....................    lcd_gotoxy(6,3); 
2226:  MOVLW  06
2228:  MOVWF  xBB
222A:  MOVLW  03
222C:  MOVWF  xBC
222E:  CALL   0848
....................    printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2232:  MOVFF  2A,A9
2236:  MOVLW  03
2238:  MOVWF  xAA
223A:  CALL   0AF8
223E:  MOVLW  3A
2240:  MOVWF  xBA
2242:  CALL   08AA
2246:  MOVFF  2B,A9
224A:  MOVLW  01
224C:  MOVWF  xAA
224E:  CALL   0AF8
2252:  MOVLW  09
2254:  MOVWF  FF6
2256:  MOVLW  03
2258:  MOVWF  FF7
225A:  MOVLW  08
225C:  MOVWF  xAD
225E:  CALL   094C
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2262:  MOVLW  06
2264:  ADDWF  2F,W
2266:  MOVWF  xA9
2268:  MOVWF  xBB
226A:  MOVLW  04
226C:  MOVWF  xBC
226E:  CALL   0848
....................    lcd_putc(t[2]); 
2272:  MOVFF  35,BA
2276:  CALL   08AA
....................     
....................    if(UP) 
227A:  BSF    F92.5
227C:  BTFSS  F80.5
227E:  BRA    22BC
....................    { 
....................       if(unidad2==1) 
2280:  DECFSZ 2F,W
2282:  BRA    229E
....................       { 
....................          if(tempo_minutos_pro<240) 
2284:  MOVF   2A,W
2286:  SUBLW  EF
2288:  BNC   229E
....................          { 
....................             tempo_minutos_pro+=5;delay_ms(300); 
228A:  MOVLW  05
228C:  ADDWF  2A,F
228E:  MOVLW  02
2290:  MOVWF  xA9
2292:  MOVLW  96
2294:  MOVWF  xC0
2296:  CALL   06D8
229A:  DECFSZ xA9,F
229C:  BRA    2292
....................          } 
....................       } 
....................        
....................       if(unidad2==4) 
229E:  MOVF   2F,W
22A0:  SUBLW  04
22A2:  BNZ   22BC
....................       { 
....................          if(tempo_segundos_pro<59) 
22A4:  MOVF   2B,W
22A6:  SUBLW  3A
22A8:  BNC   22BC
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
22AA:  INCF   2B,F
22AC:  MOVLW  02
22AE:  MOVWF  xA9
22B0:  MOVLW  96
22B2:  MOVWF  xC0
22B4:  CALL   06D8
22B8:  DECFSZ xA9,F
22BA:  BRA    22B0
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
22BC:  BSF    F96.0
22BE:  BTFSS  F84.0
22C0:  BRA    22FA
....................    { 
....................       if(unidad2==1) 
22C2:  DECFSZ 2F,W
22C4:  BRA    22DE
....................       { 
....................          if(tempo_minutos_pro>0) 
22C6:  MOVF   2A,F
22C8:  BZ    22DE
....................          { 
....................             tempo_minutos_pro-=5;delay_ms(300); 
22CA:  MOVLW  05
22CC:  SUBWF  2A,F
22CE:  MOVLW  02
22D0:  MOVWF  xA9
22D2:  MOVLW  96
22D4:  MOVWF  xC0
22D6:  CALL   06D8
22DA:  DECFSZ xA9,F
22DC:  BRA    22D2
....................          } 
....................           
....................       } 
....................        
....................       if(unidad2==4) 
22DE:  MOVF   2F,W
22E0:  SUBLW  04
22E2:  BNZ   22FA
....................       { 
....................          if(tempo_segundos_pro>0) 
22E4:  MOVF   2B,F
22E6:  BZ    22FA
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
22E8:  DECF   2B,F
22EA:  MOVLW  02
22EC:  MOVWF  xA9
22EE:  MOVLW  96
22F0:  MOVWF  xC0
22F2:  CALL   06D8
22F6:  DECFSZ xA9,F
22F8:  BRA    22EE
....................          } 
....................           
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
22FA:  BSF    F96.1
22FC:  BTFSS  F84.1
22FE:  BRA    232C
....................    { 
....................       if(unidad2==1) 
2300:  DECFSZ 2F,W
2302:  BRA    230A
....................       { 
....................          unidad2=4; 
2304:  MOVLW  04
2306:  MOVWF  2F
....................       } 
....................       else 
2308:  BRA    2314
....................       { 
....................          if(unidad2==4) 
230A:  MOVF   2F,W
230C:  SUBLW  04
230E:  BNZ   2314
....................          { 
....................             unidad2=1; 
2310:  MOVLW  01
2312:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
2314:  MOVLW  02
2316:  MOVWF  xA9
2318:  MOVLW  FA
231A:  MOVWF  xC0
231C:  CALL   06D8
2320:  DECFSZ xA9,F
2322:  BRA    2318
....................       printf(lcd_putc,"\f"); 
2324:  MOVLW  0C
2326:  MOVWF  xBA
2328:  CALL   08AA
....................    } 
....................     
....................    if(IZQU) 
232C:  BSF    F96.2
232E:  BTFSS  F84.2
2330:  BRA    2406
....................    { 
....................       delay_ms(200); 
2332:  MOVLW  C8
2334:  MOVWF  xC0
2336:  CALL   06D8
....................       printf(lcd_putc,"\f"); 
233A:  MOVLW  0C
233C:  MOVWF  xBA
233E:  CALL   08AA
....................       lcd_gotoxy(1,2); 
2342:  MOVLW  01
2344:  MOVWF  xBB
2346:  MOVLW  02
2348:  MOVWF  xBC
234A:  CALL   0848
....................       printf(lcd_putc,"Tiempo Almacenado"); 
234E:  MOVLW  12
2350:  MOVWF  FF6
2352:  MOVLW  03
2354:  MOVWF  FF7
2356:  CALL   0908
....................       lcd_gotoxy(1,3); 
235A:  MOVLW  01
235C:  MOVWF  xBB
235E:  MOVLW  03
2360:  MOVWF  xBC
2362:  CALL   0848
....................       printf(lcd_putc,"  Correctamente  "); 
2366:  MOVLW  24
2368:  MOVWF  FF6
236A:  MOVLW  03
236C:  MOVWF  FF7
236E:  CALL   0908
....................       write_eeprom(20,tempo_minutos_pro); 
2372:  MOVLW  14
2374:  MOVWF  FA9
2376:  MOVFF  2A,FA8
237A:  BCF    FA6.6
237C:  BCF    FA6.7
237E:  BSF    FA6.2
2380:  MOVF   FF2,W
2382:  MOVWF  00
2384:  BCF    FF2.7
2386:  MOVLB  F
2388:  MOVLW  55
238A:  MOVWF  FA7
238C:  MOVLW  AA
238E:  MOVWF  FA7
2390:  BSF    FA6.1
2392:  BTFSC  FA6.1
2394:  BRA    2392
2396:  BCF    FA6.2
2398:  MOVF   00,W
239A:  IORWF  FF2,F
....................       delay_ms(30); 
239C:  MOVLW  1E
239E:  MOVLB  0
23A0:  MOVWF  xC0
23A2:  CALL   06D8
....................       write_eeprom(30,tempo_segundos_pro); 
23A6:  MOVLW  1E
23A8:  MOVWF  FA9
23AA:  MOVFF  2B,FA8
23AE:  BCF    FA6.6
23B0:  BCF    FA6.7
23B2:  BSF    FA6.2
23B4:  MOVF   FF2,W
23B6:  MOVWF  00
23B8:  BCF    FF2.7
23BA:  MOVLB  F
23BC:  MOVLW  55
23BE:  MOVWF  FA7
23C0:  MOVLW  AA
23C2:  MOVWF  FA7
23C4:  BSF    FA6.1
23C6:  BTFSC  FA6.1
23C8:  BRA    23C6
23CA:  BCF    FA6.2
23CC:  MOVF   00,W
23CE:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
23D0:  MOVFF  2A,28
23D4:  MOVFF  2B,29
....................       delay_ms(700); 
23D8:  MOVLW  04
23DA:  MOVLB  0
23DC:  MOVWF  xA9
23DE:  MOVLW  AF
23E0:  MOVWF  xC0
23E2:  CALL   06D8
23E6:  DECFSZ xA9,F
23E8:  BRA    23DE
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
23EA:  MOVLW  1E
23EC:  MOVWF  xC0
23EE:  CALL   06D8
23F2:  MOVLW  01
23F4:  MOVWF  19
23F6:  CLRF   32
23F8:  MOVLW  02
23FA:  MOVWF  1D
23FC:  MOVWF  1F
23FE:  MOVLW  0C
2400:  MOVWF  xBA
2402:  CALL   08AA
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2406:  MOVF   19,W
2408:  SUBLW  03
240A:  BTFSS  FD8.2
240C:  BRA    2706
....................    lcd_gotoxy(1,1); 
240E:  MOVLW  01
2410:  MOVWF  xBB
2412:  MOVWF  xBC
2414:  CALL   0848
....................    printf(lcd_putc,"      Ingrese       "); 
2418:  MOVLW  36
241A:  MOVWF  FF6
241C:  MOVLW  03
241E:  MOVWF  FF7
2420:  CALL   0908
....................    lcd_gotoxy(1,2); 
2424:  MOVLW  01
2426:  MOVWF  xBB
2428:  MOVLW  02
242A:  MOVWF  xBC
242C:  CALL   0848
....................    printf(lcd_putc," Contraseña Actual  "); 
2430:  MOVLW  4C
2432:  MOVWF  FF6
2434:  MOVLW  03
2436:  MOVWF  FF7
2438:  CALL   0908
....................    lcd_gotoxy(1,3); 
243C:  MOVLW  01
243E:  MOVWF  xBB
2440:  MOVLW  03
2442:  MOVWF  xBC
2444:  CALL   0848
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2448:  MOVLW  62
244A:  MOVWF  FF6
244C:  MOVLW  03
244E:  MOVWF  FF7
2450:  MOVLW  0A
2452:  MOVWF  xAD
2454:  CALL   094C
2458:  MOVFF  36,A9
245C:  MOVLW  1F
245E:  MOVWF  xAA
2460:  CALL   0992
2464:  MOVFF  37,A9
2468:  MOVLW  1F
246A:  MOVWF  xAA
246C:  CALL   0992
2470:  MOVFF  38,A9
2474:  MOVLW  1F
2476:  MOVWF  xAA
2478:  CALL   0992
247C:  MOVFF  39,A9
2480:  MOVLW  1F
2482:  MOVWF  xAA
2484:  CALL   0992
2488:  MOVLW  20
248A:  MOVWF  xBA
248C:  CALL   08AA
2490:  MOVLW  20
2492:  MOVWF  xBA
2494:  CALL   08AA
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2498:  BSF    F92.5
249A:  BTFSS  F80.5
249C:  BRA    24C0
....................       {  if(Flanco == 0)  
249E:  BTFSC  17.3
24A0:  BRA    24BE
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
24A2:  MOVLW  0B
24A4:  SUBWF  1C,W
24A6:  CLRF   03
24A8:  ADDLW  36
24AA:  MOVWF  FE9
24AC:  MOVLW  00
24AE:  ADDWFC 03,W
24B0:  MOVWF  FEA
24B2:  INCF   FEF,F
24B4:  BSF    17.3
24B6:  MOVLW  1E
24B8:  MOVWF  xC0
24BA:  CALL   06D8
....................          else 
24BE:  BRA    24C2
....................             {Flanco = 0;} 
24C0:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
24C2:  BSF    F96.0
24C4:  BTFSS  F84.0
24C6:  BRA    24EA
....................       {  if(Flanco2 == 0)  
24C8:  BTFSC  17.5
24CA:  BRA    24E8
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
24CC:  MOVLW  0B
24CE:  SUBWF  1C,W
24D0:  CLRF   03
24D2:  ADDLW  36
24D4:  MOVWF  FE9
24D6:  MOVLW  00
24D8:  ADDWFC 03,W
24DA:  MOVWF  FEA
24DC:  DECF   FEF,F
24DE:  BSF    17.5
24E0:  MOVLW  1E
24E2:  MOVWF  xC0
24E4:  CALL   06D8
....................          else 
24E8:  BRA    24EC
....................             {Flanco2 = 0;} 
24EA:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
24EC:  BSF    F96.1
24EE:  BTFSS  F84.1
24F0:  BRA    250C
....................       {  if(Flanco1 == 0)  
24F2:  BTFSC  17.4
24F4:  BRA    250A
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
24F6:  BSF    17.4
24F8:  INCF   1C,F
24FA:  MOVLW  1E
24FC:  MOVWF  xC0
24FE:  CALL   06D8
2502:  MOVLW  0C
2504:  MOVWF  xBA
2506:  CALL   08AA
....................          else 
250A:  BRA    250E
....................             {Flanco1 = 0;}    
250C:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
250E:  BSF    F96.2
2510:  BTFSS  F84.2
2512:  BRA    252E
....................       {  if(Flanco3 == 0)  
2514:  BTFSC  17.6
2516:  BRA    252C
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2518:  BSF    17.6
251A:  DECF   1C,F
251C:  MOVLW  1E
251E:  MOVWF  xC0
2520:  CALL   06D8
2524:  MOVLW  0C
2526:  MOVWF  xBA
2528:  CALL   08AA
....................          else 
252C:  BRA    2530
....................             {Flanco3 = 0;}     
252E:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2530:  MOVLW  0B
2532:  SUBWF  1C,W
2534:  CLRF   03
2536:  ADDLW  36
2538:  MOVWF  FE9
253A:  MOVLW  00
253C:  ADDWFC 03,W
253E:  MOVWF  FEA
2540:  BTFSC  FEF.7
2542:  BRA    2546
2544:  BRA    255A
....................        {clave[unidad-11]=9;} 
2546:  MOVLW  0B
2548:  SUBWF  1C,W
254A:  CLRF   03
254C:  ADDLW  36
254E:  MOVWF  FE9
2550:  MOVLW  00
2552:  ADDWFC 03,W
2554:  MOVWF  FEA
2556:  MOVLW  09
2558:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
255A:  MOVLW  0B
255C:  SUBWF  1C,W
255E:  CLRF   03
2560:  ADDLW  36
2562:  MOVWF  FE9
2564:  MOVLW  00
2566:  ADDWFC 03,W
2568:  MOVWF  FEA
256A:  BTFSC  FEF.7
256C:  BRA    2586
256E:  MOVF   FEF,W
2570:  SUBLW  09
2572:  BC    2586
....................        {clave[unidad-11]=0;} 
2574:  MOVLW  0B
2576:  SUBWF  1C,W
2578:  CLRF   03
257A:  ADDLW  36
257C:  MOVWF  FE9
257E:  MOVLW  00
2580:  ADDWFC 03,W
2582:  MOVWF  FEA
2584:  CLRF   FEF
....................        if(unidad<11) 
2586:  MOVF   1C,W
2588:  SUBLW  0A
258A:  BNC   25AC
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
258C:  MOVLW  01
258E:  MOVWF  19
2590:  CLRF   32
2592:  MOVLW  02
2594:  MOVWF  1D
2596:  MOVWF  1F
2598:  MOVLW  0B
259A:  MOVWF  1C
259C:  MOVLW  02
259E:  MOVWF  xA9
25A0:  MOVLW  FA
25A2:  MOVWF  xC0
25A4:  CALL   06D8
25A8:  DECFSZ xA9,F
25AA:  BRA    25A0
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
25AC:  MOVFF  1C,BB
25B0:  MOVLW  04
25B2:  MOVWF  xBC
25B4:  CALL   0848
....................        lcd_putc(t[2]); 
25B8:  MOVFF  35,BA
25BC:  CALL   08AA
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
25C0:  MOVF   1C,W
25C2:  SUBLW  0E
25C4:  BTFSC  FD8.0
25C6:  BRA    26E2
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
25C8:  MOVF   3A,W
25CA:  SUBWF  36,W
25CC:  BNZ   2668
25CE:  MOVF   3B,W
25D0:  SUBWF  37,W
25D2:  BNZ   2668
25D4:  MOVF   3C,W
25D6:  SUBWF  38,W
25D8:  BNZ   2668
25DA:  MOVF   3D,W
25DC:  SUBWF  39,W
25DE:  BNZ   2668
....................             {lcd_gotoxy(1,1); 
25E0:  MOVLW  01
25E2:  MOVWF  xBB
25E4:  MOVWF  xBC
25E6:  CALL   0848
....................             printf(lcd_putc,"                    "); 
25EA:  MOVLW  78
25EC:  MOVWF  FF6
25EE:  MOVLW  03
25F0:  MOVWF  FF7
25F2:  CALL   0908
....................             lcd_gotoxy(1,2); 
25F6:  MOVLW  01
25F8:  MOVWF  xBB
25FA:  MOVLW  02
25FC:  MOVWF  xBC
25FE:  CALL   0848
....................             printf(lcd_putc,"     Contraseña     "); 
2602:  MOVLW  8E
2604:  MOVWF  FF6
2606:  MOVLW  03
2608:  MOVWF  FF7
260A:  CALL   0908
....................             lcd_gotoxy(1,3); 
260E:  MOVLW  01
2610:  MOVWF  xBB
2612:  MOVLW  03
2614:  MOVWF  xBC
2616:  CALL   0848
....................             printf(lcd_putc,"      Correcta      "); 
261A:  MOVLW  A4
261C:  MOVWF  FF6
261E:  MOVLW  03
2620:  MOVWF  FF7
2622:  CALL   0908
....................             lcd_gotoxy(1,4); 
2626:  MOVLW  01
2628:  MOVWF  xBB
262A:  MOVLW  04
262C:  MOVWF  xBC
262E:  CALL   0848
....................             printf(lcd_putc,"                    "); 
2632:  MOVLW  BA
2634:  MOVWF  FF6
2636:  MOVLW  03
2638:  MOVWF  FF7
263A:  CALL   0908
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
263E:  MOVLW  02
2640:  MOVWF  xA9
2642:  MOVLW  FA
2644:  MOVWF  xC0
2646:  CALL   06D8
264A:  DECFSZ xA9,F
264C:  BRA    2642
264E:  MOVLW  3D
2650:  MOVWF  19
2652:  MOVLW  0B
2654:  MOVWF  1C
2656:  MOVLW  0C
2658:  MOVWF  xBA
265A:  CALL   08AA
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
265E:  CLRF   36
2660:  CLRF   37
2662:  CLRF   38
2664:  CLRF   39
....................          else 
2666:  BRA    26E2
....................          {lcd_gotoxy(1,1); 
2668:  MOVLW  01
266A:  MOVWF  xBB
266C:  MOVWF  xBC
266E:  CALL   0848
....................             printf(lcd_putc,"                    "); 
2672:  MOVLW  D0
2674:  MOVWF  FF6
2676:  MOVLW  03
2678:  MOVWF  FF7
267A:  CALL   0908
....................             lcd_gotoxy(1,2); 
267E:  MOVLW  01
2680:  MOVWF  xBB
2682:  MOVLW  02
2684:  MOVWF  xBC
2686:  CALL   0848
....................             printf(lcd_putc,"     Contraseña     "); 
268A:  MOVLW  E6
268C:  MOVWF  FF6
268E:  MOVLW  03
2690:  MOVWF  FF7
2692:  CALL   0908
....................             lcd_gotoxy(1,3); 
2696:  MOVLW  01
2698:  MOVWF  xBB
269A:  MOVLW  03
269C:  MOVWF  xBC
269E:  CALL   0848
....................             printf(lcd_putc,"     Incorrecta     "); 
26A2:  MOVLW  FC
26A4:  MOVWF  FF6
26A6:  MOVLW  03
26A8:  MOVWF  FF7
26AA:  CALL   0908
....................             lcd_gotoxy(1,4); 
26AE:  MOVLW  01
26B0:  MOVWF  xBB
26B2:  MOVLW  04
26B4:  MOVWF  xBC
26B6:  CALL   0848
....................             printf(lcd_putc,"                    "); 
26BA:  MOVLW  12
26BC:  MOVWF  FF6
26BE:  MOVLW  04
26C0:  MOVWF  FF7
26C2:  CALL   0908
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
26C6:  MOVLW  02
26C8:  MOVWF  xA9
26CA:  MOVLW  FA
26CC:  MOVWF  xC0
26CE:  CALL   06D8
26D2:  DECFSZ xA9,F
26D4:  BRA    26CA
26D6:  MOVLW  0B
26D8:  MOVWF  1C
26DA:  MOVLW  0C
26DC:  MOVWF  xBA
26DE:  CALL   08AA
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
26E2:  MOVF   1C,W
26E4:  SUBLW  0B
26E6:  BC    2706
26E8:  MOVF   1C,W
26EA:  SUBLW  0D
26EC:  BNC   2706
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
26EE:  MOVLW  01
26F0:  SUBWF  1C,W
26F2:  MOVWF  xA9
26F4:  MOVWF  xBB
26F6:  MOVLW  04
26F8:  MOVWF  xBC
26FA:  CALL   0848
....................             lcd_putc(t[1]); 
26FE:  MOVFF  34,BA
2702:  CALL   08AA
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2706:  MOVF   19,W
2708:  SUBLW  3D
270A:  BTFSS  FD8.2
270C:  BRA    2A1C
....................    lcd_gotoxy(1,1); 
270E:  MOVLW  01
2710:  MOVWF  xBB
2712:  MOVWF  xBC
2714:  CALL   0848
....................    printf(lcd_putc,"     Ingrese        "); 
2718:  MOVLW  28
271A:  MOVWF  FF6
271C:  MOVLW  04
271E:  MOVWF  FF7
2720:  CALL   0908
....................    lcd_gotoxy(1,2); 
2724:  MOVLW  01
2726:  MOVWF  xBB
2728:  MOVLW  02
272A:  MOVWF  xBC
272C:  CALL   0848
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2730:  MOVLW  3E
2732:  MOVWF  FF6
2734:  MOVLW  04
2736:  MOVWF  FF7
2738:  CALL   0908
....................    lcd_gotoxy(1,3); 
273C:  MOVLW  01
273E:  MOVWF  xBB
2740:  MOVLW  03
2742:  MOVWF  xBC
2744:  CALL   0848
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2748:  MOVLW  54
274A:  MOVWF  FF6
274C:  MOVLW  04
274E:  MOVWF  FF7
2750:  MOVLW  0A
2752:  MOVWF  xAD
2754:  CALL   094C
2758:  MOVFF  36,A9
275C:  MOVLW  1F
275E:  MOVWF  xAA
2760:  CALL   0992
2764:  MOVFF  37,A9
2768:  MOVLW  1F
276A:  MOVWF  xAA
276C:  CALL   0992
2770:  MOVFF  38,A9
2774:  MOVLW  1F
2776:  MOVWF  xAA
2778:  CALL   0992
277C:  MOVFF  39,A9
2780:  MOVLW  1F
2782:  MOVWF  xAA
2784:  CALL   0992
2788:  MOVLW  20
278A:  MOVWF  xBA
278C:  CALL   08AA
2790:  MOVLW  20
2792:  MOVWF  xBA
2794:  CALL   08AA
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2798:  BSF    F92.5
279A:  BTFSS  F80.5
279C:  BRA    27C0
....................       {  if(Flanco == 0)  
279E:  BTFSC  17.3
27A0:  BRA    27BE
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
27A2:  MOVLW  0B
27A4:  SUBWF  1C,W
27A6:  CLRF   03
27A8:  ADDLW  36
27AA:  MOVWF  FE9
27AC:  MOVLW  00
27AE:  ADDWFC 03,W
27B0:  MOVWF  FEA
27B2:  INCF   FEF,F
27B4:  BSF    17.3
27B6:  MOVLW  1E
27B8:  MOVWF  xC0
27BA:  CALL   06D8
....................          else 
27BE:  BRA    27C2
....................             {Flanco = 0;} 
27C0:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
27C2:  BSF    F96.0
27C4:  BTFSS  F84.0
27C6:  BRA    27EA
....................       {  if(Flanco2 == 0)  
27C8:  BTFSC  17.5
27CA:  BRA    27E8
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
27CC:  MOVLW  0B
27CE:  SUBWF  1C,W
27D0:  CLRF   03
27D2:  ADDLW  36
27D4:  MOVWF  FE9
27D6:  MOVLW  00
27D8:  ADDWFC 03,W
27DA:  MOVWF  FEA
27DC:  DECF   FEF,F
27DE:  BSF    17.5
27E0:  MOVLW  1E
27E2:  MOVWF  xC0
27E4:  CALL   06D8
....................          else 
27E8:  BRA    27EC
....................             {Flanco2 = 0;} 
27EA:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
27EC:  BSF    F96.1
27EE:  BTFSS  F84.1
27F0:  BRA    280C
....................       {  if(Flanco1 == 0)  
27F2:  BTFSC  17.4
27F4:  BRA    280A
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
27F6:  BSF    17.4
27F8:  INCF   1C,F
27FA:  MOVLW  1E
27FC:  MOVWF  xC0
27FE:  CALL   06D8
2802:  MOVLW  0C
2804:  MOVWF  xBA
2806:  CALL   08AA
....................          else 
280A:  BRA    280E
....................             {Flanco1 = 0;}    
280C:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
280E:  BSF    F96.2
2810:  BTFSS  F84.2
2812:  BRA    282E
....................       {  if(Flanco3 == 0)  
2814:  BTFSC  17.6
2816:  BRA    282C
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2818:  BSF    17.6
281A:  DECF   1C,F
281C:  MOVLW  1E
281E:  MOVWF  xC0
2820:  CALL   06D8
2824:  MOVLW  0C
2826:  MOVWF  xBA
2828:  CALL   08AA
....................          else 
282C:  BRA    2830
....................             {Flanco3 = 0;}     
282E:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2830:  MOVLW  0B
2832:  SUBWF  1C,W
2834:  CLRF   03
2836:  ADDLW  36
2838:  MOVWF  FE9
283A:  MOVLW  00
283C:  ADDWFC 03,W
283E:  MOVWF  FEA
2840:  BTFSC  FEF.7
2842:  BRA    2846
2844:  BRA    285A
....................        {clave[unidad-11]=9;} 
2846:  MOVLW  0B
2848:  SUBWF  1C,W
284A:  CLRF   03
284C:  ADDLW  36
284E:  MOVWF  FE9
2850:  MOVLW  00
2852:  ADDWFC 03,W
2854:  MOVWF  FEA
2856:  MOVLW  09
2858:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
285A:  MOVLW  0B
285C:  SUBWF  1C,W
285E:  CLRF   03
2860:  ADDLW  36
2862:  MOVWF  FE9
2864:  MOVLW  00
2866:  ADDWFC 03,W
2868:  MOVWF  FEA
286A:  BTFSC  FEF.7
286C:  BRA    2886
286E:  MOVF   FEF,W
2870:  SUBLW  09
2872:  BC    2886
....................        {clave[unidad-11]=0;} 
2874:  MOVLW  0B
2876:  SUBWF  1C,W
2878:  CLRF   03
287A:  ADDLW  36
287C:  MOVWF  FE9
287E:  MOVLW  00
2880:  ADDWFC 03,W
2882:  MOVWF  FEA
2884:  CLRF   FEF
....................        if(unidad<11) 
2886:  MOVF   1C,W
2888:  SUBLW  0A
288A:  BNC   2894
....................        {Menu=5;unidad=11;} 
288C:  MOVLW  05
288E:  MOVWF  19
2890:  MOVLW  0B
2892:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2894:  MOVFF  1C,BB
2898:  MOVLW  04
289A:  MOVWF  xBC
289C:  CALL   0848
....................        lcd_putc(t[2]); 
28A0:  MOVFF  35,BA
28A4:  CALL   08AA
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
28A8:  MOVF   1C,W
28AA:  SUBLW  0E
28AC:  BTFSC  FD8.0
28AE:  BRA    29F8
....................        { 
....................             lcd_gotoxy(1,1); 
28B0:  MOVLW  01
28B2:  MOVWF  xBB
28B4:  MOVWF  xBC
28B6:  CALL   0848
....................             printf(lcd_putc,"                    "); 
28BA:  MOVLW  6A
28BC:  MOVWF  FF6
28BE:  MOVLW  04
28C0:  MOVWF  FF7
28C2:  CALL   0908
....................             lcd_gotoxy(1,2); 
28C6:  MOVLW  01
28C8:  MOVWF  xBB
28CA:  MOVLW  02
28CC:  MOVWF  xBC
28CE:  CALL   0848
....................             printf(lcd_putc,"     Contraseña     "); 
28D2:  MOVLW  80
28D4:  MOVWF  FF6
28D6:  MOVLW  04
28D8:  MOVWF  FF7
28DA:  CALL   0908
....................             lcd_gotoxy(1,3); 
28DE:  MOVLW  01
28E0:  MOVWF  xBB
28E2:  MOVLW  03
28E4:  MOVWF  xBC
28E6:  CALL   0848
....................             printf(lcd_putc,"     Almacenada     "); 
28EA:  MOVLW  96
28EC:  MOVWF  FF6
28EE:  MOVLW  04
28F0:  MOVWF  FF7
28F2:  CALL   0908
....................             lcd_gotoxy(1,4); 
28F6:  MOVLW  01
28F8:  MOVWF  xBB
28FA:  MOVLW  04
28FC:  MOVWF  xBC
28FE:  CALL   0848
....................             printf(lcd_putc,"                    "); 
2902:  MOVLW  AC
2904:  MOVWF  FF6
2906:  MOVLW  04
2908:  MOVWF  FF7
290A:  CALL   0908
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
290E:  CLRF   FA9
2910:  MOVFF  36,FA8
2914:  BCF    FA6.6
2916:  BCF    FA6.7
2918:  BSF    FA6.2
291A:  MOVF   FF2,W
291C:  MOVWF  00
291E:  BCF    FF2.7
2920:  MOVLB  F
2922:  MOVLW  55
2924:  MOVWF  FA7
2926:  MOVLW  AA
2928:  MOVWF  FA7
292A:  BSF    FA6.1
292C:  BTFSC  FA6.1
292E:  BRA    292C
2930:  BCF    FA6.2
2932:  MOVF   00,W
2934:  IORWF  FF2,F
2936:  MOVLW  14
2938:  MOVLB  0
293A:  MOVWF  xC0
293C:  CALL   06D8
2940:  MOVLW  01
2942:  MOVWF  FA9
2944:  MOVFF  37,FA8
2948:  BCF    FA6.6
294A:  BCF    FA6.7
294C:  BSF    FA6.2
294E:  MOVF   FF2,W
2950:  MOVWF  00
2952:  BCF    FF2.7
2954:  MOVLB  F
2956:  MOVLW  55
2958:  MOVWF  FA7
295A:  MOVLW  AA
295C:  MOVWF  FA7
295E:  BSF    FA6.1
2960:  BTFSC  FA6.1
2962:  BRA    2960
2964:  BCF    FA6.2
2966:  MOVF   00,W
2968:  IORWF  FF2,F
296A:  MOVLW  14
296C:  MOVLB  0
296E:  MOVWF  xC0
2970:  CALL   06D8
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2974:  MOVLW  02
2976:  MOVWF  FA9
2978:  MOVFF  38,FA8
297C:  BCF    FA6.6
297E:  BCF    FA6.7
2980:  BSF    FA6.2
2982:  MOVF   FF2,W
2984:  MOVWF  00
2986:  BCF    FF2.7
2988:  MOVLB  F
298A:  MOVLW  55
298C:  MOVWF  FA7
298E:  MOVLW  AA
2990:  MOVWF  FA7
2992:  BSF    FA6.1
2994:  BTFSC  FA6.1
2996:  BRA    2994
2998:  BCF    FA6.2
299A:  MOVF   00,W
299C:  IORWF  FF2,F
299E:  MOVLW  14
29A0:  MOVLB  0
29A2:  MOVWF  xC0
29A4:  CALL   06D8
29A8:  MOVLW  03
29AA:  MOVWF  FA9
29AC:  MOVFF  39,FA8
29B0:  BCF    FA6.6
29B2:  BCF    FA6.7
29B4:  BSF    FA6.2
29B6:  MOVF   FF2,W
29B8:  MOVWF  00
29BA:  BCF    FF2.7
29BC:  MOVLB  F
29BE:  MOVLW  55
29C0:  MOVWF  FA7
29C2:  MOVLW  AA
29C4:  MOVWF  FA7
29C6:  BSF    FA6.1
29C8:  BTFSC  FA6.1
29CA:  BRA    29C8
29CC:  BCF    FA6.2
29CE:  MOVF   00,W
29D0:  IORWF  FF2,F
29D2:  MOVLW  14
29D4:  MOVLB  0
29D6:  MOVWF  xC0
29D8:  CALL   06D8
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
29DC:  MOVLW  02
29DE:  MOVWF  xA9
29E0:  MOVLW  FA
29E2:  MOVWF  xC0
29E4:  CALL   06D8
29E8:  DECFSZ xA9,F
29EA:  BRA    29E0
29EC:  MOVLW  01
29EE:  MOVWF  19
29F0:  CLRF   32
29F2:  MOVLW  02
29F4:  MOVWF  1D
29F6:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
29F8:  MOVF   1C,W
29FA:  SUBLW  0B
29FC:  BC    2A1C
29FE:  MOVF   1C,W
2A00:  SUBLW  0D
2A02:  BNC   2A1C
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2A04:  MOVLW  01
2A06:  SUBWF  1C,W
2A08:  MOVWF  xA9
2A0A:  MOVWF  xBB
2A0C:  MOVLW  04
2A0E:  MOVWF  xBC
2A10:  CALL   0848
....................             lcd_putc(t[1]); 
2A14:  MOVFF  34,BA
2A18:  CALL   08AA
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2A1C:  MOVF   19,W
2A1E:  SUBLW  04
2A20:  BTFSS  FD8.2
2A22:  BRA    2BC0
....................    lcd_gotoxy(1,1); 
2A24:  MOVLW  01
2A26:  MOVWF  xBB
2A28:  MOVWF  xBC
2A2A:  CALL   0848
....................    printf(lcd_putc,"  Duracion Actual   "); 
2A2E:  MOVLW  C2
2A30:  MOVWF  FF6
2A32:  MOVLW  04
2A34:  MOVWF  FF7
2A36:  CALL   0908
....................    lcd_gotoxy(1,2); 
2A3A:  MOVLW  01
2A3C:  MOVWF  xBB
2A3E:  MOVLW  02
2A40:  MOVWF  xBC
2A42:  CALL   0848
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2A46:  MOVLW  D8
2A48:  MOVWF  FF6
2A4A:  MOVLW  04
2A4C:  MOVWF  FF7
2A4E:  MOVLW  0B
2A50:  MOVWF  xAD
2A52:  CALL   094C
2A56:  MOVLW  08
2A58:  MOVWF  FE9
2A5A:  MOVFF  42,AA
2A5E:  MOVFF  41,A9
2A62:  GOTO   0B5E
2A66:  MOVLW  20
2A68:  MOVWF  xBA
2A6A:  CALL   08AA
2A6E:  MOVLW  20
2A70:  MOVWF  xBA
2A72:  CALL   08AA
2A76:  MOVLW  20
2A78:  MOVWF  xBA
2A7A:  CALL   08AA
....................    lcd_gotoxy(1,4); 
2A7E:  MOVLW  01
2A80:  MOVWF  xBB
2A82:  MOVLW  04
2A84:  MOVWF  xBC
2A86:  CALL   0848
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2A8A:  MOVLW  EC
2A8C:  MOVWF  FF6
2A8E:  MOVLW  04
2A90:  MOVWF  FF7
2A92:  CALL   0908
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2A96:  BSF    F92.5
2A98:  BTFSS  F80.5
2A9A:  BRA    2B8C
2A9C:  BSF    F96.1
2A9E:  BTFSS  F84.1
2AA0:  BRA    2B8C
....................       {   
....................          delay_ms(200); 
2AA2:  MOVLW  C8
2AA4:  MOVWF  xC0
2AA6:  CALL   06D8
....................          printf(lcd_putc,"\f"); 
2AAA:  MOVLW  0C
2AAC:  MOVWF  xBA
2AAE:  CALL   08AA
....................          lcd_gotoxy(1,2); 
2AB2:  MOVLW  01
2AB4:  MOVWF  xBB
2AB6:  MOVLW  02
2AB8:  MOVWF  xBC
2ABA:  CALL   0848
....................          printf(lcd_putc," Reset de tiempo "); 
2ABE:  MOVLW  02
2AC0:  MOVWF  FF6
2AC2:  MOVLW  05
2AC4:  MOVWF  FF7
2AC6:  CALL   0908
....................          lcd_gotoxy(1,3); 
2ACA:  MOVLW  01
2ACC:  MOVWF  xBB
2ACE:  MOVLW  03
2AD0:  MOVWF  xBC
2AD2:  CALL   0848
....................          printf(lcd_putc,"     Exitoso     "); 
2AD6:  MOVLW  14
2AD8:  MOVWF  FF6
2ADA:  MOVLW  05
2ADC:  MOVWF  FF7
2ADE:  CALL   0908
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2AE2:  MOVLW  32
2AE4:  MOVWF  FA9
2AE6:  CLRF   FA8
2AE8:  BCF    FA6.6
2AEA:  BCF    FA6.7
2AEC:  BSF    FA6.2
2AEE:  MOVF   FF2,W
2AF0:  MOVWF  00
2AF2:  BCF    FF2.7
2AF4:  MOVLB  F
2AF6:  MOVLW  55
2AF8:  MOVWF  FA7
2AFA:  MOVLW  AA
2AFC:  MOVWF  FA7
2AFE:  BSF    FA6.1
2B00:  BTFSC  FA6.1
2B02:  BRA    2B00
2B04:  BCF    FA6.2
2B06:  MOVF   00,W
2B08:  IORWF  FF2,F
2B0A:  MOVLW  33
2B0C:  MOVWF  FA9
2B0E:  CLRF   FA8
2B10:  BCF    FA6.6
2B12:  BCF    FA6.7
2B14:  BSF    FA6.2
2B16:  MOVF   FF2,W
2B18:  MOVWF  00
2B1A:  BCF    FF2.7
2B1C:  MOVLW  55
2B1E:  MOVWF  FA7
2B20:  MOVLW  AA
2B22:  MOVWF  FA7
2B24:  BSF    FA6.1
2B26:  BTFSC  FA6.1
2B28:  BRA    2B26
2B2A:  BCF    FA6.2
2B2C:  MOVF   00,W
2B2E:  IORWF  FF2,F
2B30:  MOVLW  34
2B32:  MOVWF  FA9
2B34:  CLRF   FA8
2B36:  BCF    FA6.6
2B38:  BCF    FA6.7
2B3A:  BSF    FA6.2
2B3C:  MOVF   FF2,W
2B3E:  MOVWF  00
2B40:  BCF    FF2.7
2B42:  MOVLW  55
2B44:  MOVWF  FA7
2B46:  MOVLW  AA
2B48:  MOVWF  FA7
2B4A:  BSF    FA6.1
2B4C:  BTFSC  FA6.1
2B4E:  BRA    2B4C
2B50:  BCF    FA6.2
2B52:  MOVF   00,W
2B54:  IORWF  FF2,F
....................          delay_ms(700); 
2B56:  MOVLW  04
2B58:  MOVLB  0
2B5A:  MOVWF  xA9
2B5C:  MOVLW  AF
2B5E:  MOVWF  xC0
2B60:  CALL   06D8
2B64:  DECFSZ xA9,F
2B66:  BRA    2B5C
....................          segundos=0;minutos=0;horas=0; 
2B68:  CLRF   22
2B6A:  CLRF   23
2B6C:  CLRF   42
2B6E:  CLRF   41
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2B70:  MOVLW  1E
2B72:  MOVWF  xC0
2B74:  CALL   06D8
2B78:  MOVLW  01
2B7A:  MOVWF  19
2B7C:  CLRF   32
2B7E:  MOVLW  02
2B80:  MOVWF  1D
2B82:  MOVWF  1F
2B84:  MOVLW  0C
2B86:  MOVWF  xBA
2B88:  CALL   08AA
....................       } 
....................              
....................       if(IZQU)// Si oprime Izquierda 
2B8C:  BSF    F96.2
2B8E:  BTFSS  F84.2
2B90:  BRA    2BBE
....................       { 
....................          if(Flanco3 == 0) 
2B92:  BTFSC  17.6
2B94:  BRA    2BBC
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2B96:  BSF    17.6
2B98:  MOVLW  02
2B9A:  MOVWF  xA9
2B9C:  MOVLW  FA
2B9E:  MOVWF  xC0
2BA0:  CALL   06D8
2BA4:  DECFSZ xA9,F
2BA6:  BRA    2B9C
2BA8:  MOVLW  01
2BAA:  MOVWF  19
2BAC:  CLRF   32
2BAE:  MOVLW  02
2BB0:  MOVWF  1D
2BB2:  MOVWF  1F
2BB4:  MOVLW  0C
2BB6:  MOVWF  xBA
2BB8:  CALL   08AA
....................          } 
....................       } 
....................       else 
2BBC:  BRA    2BC0
....................       { 
....................          Flanco3 = 0; 
2BBE:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
2BC0:  MOVF   19,W
2BC2:  SUBLW  05
2BC4:  BTFSS  FD8.2
2BC6:  BRA    2DE2
....................       lcd_gotoxy(1,1); 
2BC8:  MOVLW  01
2BCA:  MOVWF  xBB
2BCC:  MOVWF  xBC
2BCE:  CALL   0848
....................       printf(lcd_putc,"  Zero Point Config "); 
2BD2:  MOVLW  26
2BD4:  MOVWF  FF6
2BD6:  MOVLW  05
2BD8:  MOVWF  FF7
2BDA:  CALL   0908
....................       lcd_gotoxy(1,2); 
2BDE:  MOVLW  01
2BE0:  MOVWF  xBB
2BE2:  MOVLW  02
2BE4:  MOVWF  xBC
2BE6:  CALL   0848
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2BEA:  MOVLW  05
2BEC:  MOVWF  xA9
2BEE:  CALL   104C
2BF2:  MOVFF  00,A9
2BF6:  MOVFF  01,AA
2BFA:  MOVFF  02,AB
2BFE:  MOVFF  03,AC
2C02:  MOVFF  03,C0
2C06:  MOVFF  02,BF
2C0A:  MOVFF  01,BE
2C0E:  MOVFF  00,BD
2C12:  MOVLW  D7
2C14:  MOVWF  xC4
2C16:  MOVLW  A3
2C18:  MOVWF  xC3
2C1A:  CLRF   xC2
2C1C:  MOVLW  81
2C1E:  MOVWF  xC1
2C20:  CALL   11E2
2C24:  MOVFF  00,A9
2C28:  MOVFF  01,AA
2C2C:  MOVFF  02,AB
2C30:  MOVFF  03,AC
2C34:  MOVLW  3C
2C36:  MOVWF  FF6
2C38:  MOVLW  05
2C3A:  MOVWF  FF7
2C3C:  MOVLW  09
2C3E:  MOVWF  xAD
2C40:  CALL   094C
2C44:  MOVLW  02
2C46:  MOVWF  FE9
2C48:  MOVFF  AC,B0
2C4C:  MOVFF  AB,AF
2C50:  MOVFF  AA,AE
2C54:  MOVFF  A9,AD
2C58:  MOVWF  xB1
2C5A:  CALL   138E
2C5E:  MOVLW  4A
2C60:  MOVWF  FF6
2C62:  MOVLW  05
2C64:  MOVWF  FF7
2C66:  MOVLW  07
2C68:  MOVWF  xAD
2C6A:  CALL   094C
....................       lcd_gotoxy(1,3); 
2C6E:  MOVLW  01
2C70:  MOVWF  xBB
2C72:  MOVLW  03
2C74:  MOVWF  xBC
2C76:  CALL   0848
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
2C7A:  CLRF   xAE
2C7C:  CALL   07F6
2C80:  MOVFF  00,A9
2C84:  MOVFF  01,AA
2C88:  MOVFF  02,AB
2C8C:  MOVFF  03,AC
2C90:  MOVLW  52
2C92:  MOVWF  FF6
2C94:  MOVLW  05
2C96:  MOVWF  FF7
2C98:  MOVLW  08
2C9A:  MOVWF  xAD
2C9C:  CALL   094C
2CA0:  MOVLW  01
2CA2:  MOVWF  FE9
2CA4:  MOVFF  AC,B0
2CA8:  MOVFF  AB,AF
2CAC:  MOVFF  AA,AE
2CB0:  MOVFF  A9,AD
2CB4:  CLRF   xB1
2CB6:  CALL   138E
....................       lcd_gotoxy(1,4); 
2CBA:  MOVLW  01
2CBC:  MOVWF  xBB
2CBE:  MOVLW  04
2CC0:  MOVWF  xBC
2CC2:  CALL   0848
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2CC6:  MOVLW  60
2CC8:  MOVWF  FF6
2CCA:  MOVLW  05
2CCC:  MOVWF  FF7
2CCE:  MOVLW  07
2CD0:  MOVWF  xAD
2CD2:  CALL   094C
2CD6:  MOVLW  01
2CD8:  MOVWF  FE9
2CDA:  MOVFF  A8,B0
2CDE:  MOVFF  A7,AF
2CE2:  MOVFF  A6,AE
2CE6:  MOVFF  A5,AD
2CEA:  CLRF   xB1
2CEC:  CALL   138E
....................      
....................       if(RIGHT)// Si oprime derecha 
2CF0:  BSF    F96.1
2CF2:  BTFSS  F84.1
2CF4:  BRA    2DB2
....................       {  if(Flanco1 == 0)  
2CF6:  BTFSC  17.4
2CF8:  BRA    2DB0
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2CFA:  MOVLW  01
2CFC:  MOVWF  19
2CFE:  CLRF   32
2D00:  MOVLW  02
2D02:  MOVWF  1D
2D04:  MOVWF  1F
2D06:  MOVLW  0B
2D08:  MOVWF  1C
2D0A:  MOVLW  02
2D0C:  MOVWF  xA9
2D0E:  MOVLW  FA
2D10:  MOVWF  xC0
2D12:  CALL   06D8
2D16:  DECFSZ xA9,F
2D18:  BRA    2D0E
2D1A:  MOVLW  0C
2D1C:  MOVWF  xBA
2D1E:  CALL   08AA
....................             G=sensores(0); 
2D22:  CLRF   xAE
2D24:  CALL   07F6
2D28:  MOVFF  03,A8
2D2C:  MOVFF  02,A7
2D30:  MOVFF  01,A6
2D34:  MOVFF  00,A5
....................             G16=(int16)G; 
2D38:  MOVFF  A8,C0
2D3C:  MOVFF  A7,BF
2D40:  MOVFF  A6,BE
2D44:  MOVFF  A5,BD
2D48:  CALL   1514
2D4C:  MOVFF  02,44
2D50:  MOVFF  01,43
....................             G_l=G16; G_h=(G16>>8); 
2D54:  MOVFF  43,26
2D58:  MOVFF  44,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
2D5C:  MOVLW  3C
2D5E:  MOVWF  FA9
2D60:  MOVFF  26,FA8
2D64:  BCF    FA6.6
2D66:  BCF    FA6.7
2D68:  BSF    FA6.2
2D6A:  MOVF   FF2,W
2D6C:  MOVWF  00
2D6E:  BCF    FF2.7
2D70:  MOVLB  F
2D72:  MOVLW  55
2D74:  MOVWF  FA7
2D76:  MOVLW  AA
2D78:  MOVWF  FA7
2D7A:  BSF    FA6.1
2D7C:  BTFSC  FA6.1
2D7E:  BRA    2D7C
2D80:  BCF    FA6.2
2D82:  MOVF   00,W
2D84:  IORWF  FF2,F
2D86:  MOVLW  3D
2D88:  MOVWF  FA9
2D8A:  MOVFF  27,FA8
2D8E:  BCF    FA6.6
2D90:  BCF    FA6.7
2D92:  BSF    FA6.2
2D94:  MOVF   FF2,W
2D96:  MOVWF  00
2D98:  BCF    FF2.7
2D9A:  MOVLW  55
2D9C:  MOVWF  FA7
2D9E:  MOVLW  AA
2DA0:  MOVWF  FA7
2DA2:  BSF    FA6.1
2DA4:  BTFSC  FA6.1
2DA6:  BRA    2DA4
2DA8:  BCF    FA6.2
2DAA:  MOVF   00,W
2DAC:  IORWF  FF2,F
2DAE:  MOVLB  0
....................             }} 
....................          else 
2DB0:  BRA    2DB4
....................             {Flanco1 = 0;}    
2DB2:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
2DB4:  BSF    F96.2
2DB6:  BTFSS  F84.2
2DB8:  BRA    2DE0
....................       {  if(Flanco3 == 0)  
2DBA:  BTFSC  17.6
2DBC:  BRA    2DDE
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
2DBE:  MOVLW  01
2DC0:  MOVWF  19
2DC2:  CLRF   32
2DC4:  MOVLW  02
2DC6:  MOVWF  1D
2DC8:  MOVWF  1F
2DCA:  MOVLW  0B
2DCC:  MOVWF  1C
2DCE:  MOVLW  1E
2DD0:  MOVWF  xC0
2DD2:  CALL   06D8
2DD6:  MOVLW  0C
2DD8:  MOVWF  xBA
2DDA:  CALL   08AA
....................          else 
2DDE:  BRA    2DE2
....................             {Flanco3 = 0;}   
2DE0:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
2DE2:  MOVF   19,W
2DE4:  SUBLW  06
2DE6:  BTFSS  FD8.2
2DE8:  BRA    2F0E
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
2DEA:  BTG    18.4
2DEC:  BSF    17.4
2DEE:  MOVLW  01
2DF0:  MOVWF  19
2DF2:  CLRF   32
....................                        
....................             if(estadoalarma==1) 
2DF4:  BTFSS  18.4
2DF6:  BRA    2E58
....................             {estadoalarma=1; 
2DF8:  BSF    18.4
....................                lcd_gotoxy(1,1); 
2DFA:  MOVLW  01
2DFC:  MOVWF  xBB
2DFE:  MOVWF  xBC
2E00:  CALL   0848
....................                printf(lcd_putc,"                    "); 
2E04:  MOVLW  6E
2E06:  MOVWF  FF6
2E08:  MOVLW  05
2E0A:  MOVWF  FF7
2E0C:  CALL   0908
....................                lcd_gotoxy(1,2); 
2E10:  MOVLW  01
2E12:  MOVWF  xBB
2E14:  MOVLW  02
2E16:  MOVWF  xBC
2E18:  CALL   0848
....................                printf(lcd_putc,"        Activo      "); 
2E1C:  MOVLW  84
2E1E:  MOVWF  FF6
2E20:  MOVLW  05
2E22:  MOVWF  FF7
2E24:  CALL   0908
....................                lcd_gotoxy(1,3); 
2E28:  MOVLW  01
2E2A:  MOVWF  xBB
2E2C:  MOVLW  03
2E2E:  MOVWF  xBC
2E30:  CALL   0848
....................                printf(lcd_putc,"        Alarma      "); 
2E34:  MOVLW  9A
2E36:  MOVWF  FF6
2E38:  MOVLW  05
2E3A:  MOVWF  FF7
2E3C:  CALL   0908
....................                lcd_gotoxy(1,4); 
2E40:  MOVLW  01
2E42:  MOVWF  xBB
2E44:  MOVLW  04
2E46:  MOVWF  xBC
2E48:  CALL   0848
....................                printf(lcd_putc,"                    ");} 
2E4C:  MOVLW  B0
2E4E:  MOVWF  FF6
2E50:  MOVLW  05
2E52:  MOVWF  FF7
2E54:  CALL   0908
....................                 
....................             if(estadoalarma==0) 
2E58:  BTFSC  18.4
2E5A:  BRA    2EBC
....................             {estadoalarma=0; 
2E5C:  BCF    18.4
....................                lcd_gotoxy(1,1); 
2E5E:  MOVLW  01
2E60:  MOVWF  xBB
2E62:  MOVWF  xBC
2E64:  CALL   0848
....................                printf(lcd_putc,"                    "); 
2E68:  MOVLW  C6
2E6A:  MOVWF  FF6
2E6C:  MOVLW  05
2E6E:  MOVWF  FF7
2E70:  CALL   0908
....................                lcd_gotoxy(1,2); 
2E74:  MOVLW  01
2E76:  MOVWF  xBB
2E78:  MOVLW  02
2E7A:  MOVWF  xBC
2E7C:  CALL   0848
....................                printf(lcd_putc,"      Desactivo     "); 
2E80:  MOVLW  DC
2E82:  MOVWF  FF6
2E84:  MOVLW  05
2E86:  MOVWF  FF7
2E88:  CALL   0908
....................                lcd_gotoxy(1,3); 
2E8C:  MOVLW  01
2E8E:  MOVWF  xBB
2E90:  MOVLW  03
2E92:  MOVWF  xBC
2E94:  CALL   0848
....................                printf(lcd_putc,"       Alarma       "); 
2E98:  MOVLW  F2
2E9A:  MOVWF  FF6
2E9C:  MOVLW  05
2E9E:  MOVWF  FF7
2EA0:  CALL   0908
....................                lcd_gotoxy(1,4); 
2EA4:  MOVLW  01
2EA6:  MOVWF  xBB
2EA8:  MOVLW  04
2EAA:  MOVWF  xBC
2EAC:  CALL   0848
....................                printf(lcd_putc,"                    ");} 
2EB0:  MOVLW  08
2EB2:  MOVWF  FF6
2EB4:  MOVLW  06
2EB6:  MOVWF  FF7
2EB8:  CALL   0908
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2EBC:  MOVLW  00
2EBE:  BTFSC  18.4
2EC0:  MOVLW  01
2EC2:  MOVWF  xA9
2EC4:  MOVLW  05
2EC6:  MOVWF  FA9
2EC8:  MOVFF  A9,FA8
2ECC:  BCF    FA6.6
2ECE:  BCF    FA6.7
2ED0:  BSF    FA6.2
2ED2:  MOVF   FF2,W
2ED4:  MOVWF  00
2ED6:  BCF    FF2.7
2ED8:  MOVLB  F
2EDA:  MOVLW  55
2EDC:  MOVWF  FA7
2EDE:  MOVLW  AA
2EE0:  MOVWF  FA7
2EE2:  BSF    FA6.1
2EE4:  BTFSC  FA6.1
2EE6:  BRA    2EE4
2EE8:  BCF    FA6.2
2EEA:  MOVF   00,W
2EEC:  IORWF  FF2,F
2EEE:  MOVLW  04
2EF0:  MOVLB  0
2EF2:  MOVWF  xA9
2EF4:  MOVLW  FA
2EF6:  MOVWF  xC0
2EF8:  CALL   06D8
2EFC:  DECFSZ xA9,F
2EFE:  BRA    2EF4
2F00:  MOVLW  02
2F02:  MOVWF  1D
2F04:  MOVWF  1F
2F06:  MOVLW  0C
2F08:  MOVWF  xBA
2F0A:  CALL   08AA
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV 
2F0E:  MOVF   19,W
2F10:  SUBLW  32
2F12:  BTFSS  FD8.2
2F14:  BRA    33D8
....................  
....................    if(Lectura==1) 
2F16:  BTFSS  18.0
2F18:  BRA    2F34
....................    { 
....................       Lectura=0; 
2F1A:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
2F1C:  MOVLW  05
2F1E:  MOVWF  xA9
2F20:  CALL   104C
2F24:  MOVFF  03,A4
2F28:  MOVFF  02,A3
2F2C:  MOVFF  01,A2
2F30:  MOVFF  00,A1
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
2F34:  BTFSS  17.7
2F36:  BRA    2FD0
....................    { 
....................       if(estadoalarma==1) 
2F38:  BTFSS  18.4
2F3A:  BRA    2FC6
....................       { 
....................          printf(lcd_putc,"\f"); 
2F3C:  MOVLW  0C
2F3E:  MOVWF  xBA
2F40:  CALL   08AA
....................          lcd_gotoxy(1,2); 
2F44:  MOVLW  01
2F46:  MOVWF  xBB
2F48:  MOVLW  02
2F4A:  MOVWF  xBC
2F4C:  CALL   0848
....................          printf(lcd_putc,"  Temporizador  de  "); 
2F50:  MOVLW  1E
2F52:  MOVWF  FF6
2F54:  MOVLW  06
2F56:  MOVWF  FF7
2F58:  CALL   0908
....................          lcd_gotoxy(1,3); 
2F5C:  MOVLW  01
2F5E:  MOVWF  xBB
2F60:  MOVLW  03
2F62:  MOVWF  xBC
2F64:  CALL   0848
....................          printf(lcd_putc," Luz UV  Finalizado "); 
2F68:  MOVLW  34
2F6A:  MOVWF  FF6
2F6C:  MOVLW  06
2F6E:  MOVWF  FF7
2F70:  CALL   0908
....................          lcd_gotoxy(1,4); 
2F74:  MOVLW  01
2F76:  MOVWF  xBB
2F78:  MOVLW  04
2F7A:  MOVWF  xBC
2F7C:  CALL   0848
....................          printf(lcd_putc,"                    "); 
2F80:  MOVLW  4A
2F82:  MOVWF  FF6
2F84:  MOVLW  06
2F86:  MOVWF  FF7
2F88:  CALL   0908
....................          lcd_gotoxy(1,1); 
2F8C:  MOVLW  01
2F8E:  MOVWF  xBB
2F90:  MOVWF  xBC
2F92:  CALL   0848
....................          printf(lcd_putc,"                    "); 
2F96:  MOVLW  60
2F98:  MOVWF  FF6
2F9A:  MOVLW  06
2F9C:  MOVWF  FF7
2F9E:  CALL   0908
....................          for(i=0;i<5;i++) 
2FA2:  CLRF   2E
2FA4:  MOVF   2E,W
2FA6:  SUBLW  04
2FA8:  BNC   2FC6
....................          { 
....................             Buzzer_on; 
2FAA:  BSF    F8C.0
2FAC:  BCF    F95.0
....................             delay_ms(200); 
2FAE:  MOVLW  C8
2FB0:  MOVWF  xC0
2FB2:  CALL   06D8
....................             Buzzer_off; 
2FB6:  BCF    F8C.0
2FB8:  BCF    F95.0
....................             delay_ms(200); 
2FBA:  MOVLW  C8
2FBC:  MOVWF  xC0
2FBE:  CALL   06D8
....................          } 
2FC2:  INCF   2E,F
2FC4:  BRA    2FA4
....................       } 
....................       tiempo_cumplido=0; 
2FC6:  BCF    17.7
....................       printf(lcd_putc,"\f"); 
2FC8:  MOVLW  0C
2FCA:  MOVWF  xBA
2FCC:  CALL   08AA
....................    } 
....................     
....................    if(CaidaPresion>=0.37) 
2FD0:  MOVLW  A4
2FD2:  MOVWF  xC0
2FD4:  MOVLW  70
2FD6:  MOVWF  xBF
2FD8:  MOVLW  3D
2FDA:  MOVWF  xBE
2FDC:  MOVLW  7D
2FDE:  MOVWF  xBD
2FE0:  MOVFF  A4,C4
2FE4:  MOVFF  A3,C3
2FE8:  MOVFF  A2,C2
2FEC:  MOVFF  A1,C1
2FF0:  CALL   0FD6
2FF4:  BC    2FF8
2FF6:  BNZ   2FFE
....................    {  
....................       ActivaBuzzer=1; 
2FF8:  MOVLW  01
2FFA:  MOVWF  3E
....................    } 
....................    else 
2FFC:  BRA    3004
....................    { 
....................       ActivaBuzzer=0; 
2FFE:  CLRF   3E
....................       Buzzer_off; 
3000:  BCF    F8C.0
3002:  BCF    F95.0
....................    } 
....................        
....................    lcd_gotoxy(1,1); 
3004:  MOVLW  01
3006:  MOVWF  xBB
3008:  MOVWF  xBC
300A:  CALL   0848
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
300E:  MOVFF  A4,C0
3012:  MOVFF  A3,BF
3016:  MOVFF  A2,BE
301A:  MOVFF  A1,BD
301E:  MOVLW  D7
3020:  MOVWF  xC4
3022:  MOVLW  A3
3024:  MOVWF  xC3
3026:  CLRF   xC2
3028:  MOVLW  81
302A:  MOVWF  xC1
302C:  CALL   11E2
3030:  MOVFF  00,A9
3034:  MOVFF  01,AA
3038:  MOVFF  02,AB
303C:  MOVFF  03,AC
3040:  MOVLW  76
3042:  MOVWF  FF6
3044:  MOVLW  06
3046:  MOVWF  FF7
3048:  MOVLW  08
304A:  MOVWF  xAD
304C:  CALL   094C
3050:  MOVLW  02
3052:  MOVWF  FE9
3054:  MOVFF  AC,B0
3058:  MOVFF  AB,AF
305C:  MOVFF  AA,AE
3060:  MOVFF  A9,AD
3064:  MOVWF  xB1
3066:  CALL   138E
306A:  MOVLW  83
306C:  MOVWF  FF6
306E:  MOVLW  06
3070:  MOVWF  FF7
3072:  MOVLW  07
3074:  MOVWF  xAD
3076:  CALL   094C
....................    lcd_gotoxy(1,2); 
307A:  MOVLW  01
307C:  MOVWF  xBB
307E:  MOVLW  02
3080:  MOVWF  xBC
3082:  CALL   0848
....................    printf(lcd_putc,"Filtro:"); 
3086:  MOVLW  8C
3088:  MOVWF  FF6
308A:  MOVLW  06
308C:  MOVWF  FF7
308E:  CALL   0908
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
3092:  MOVFF  A4,C0
3096:  MOVFF  A3,BF
309A:  MOVFF  A2,BE
309E:  MOVFF  A1,BD
30A2:  MOVLW  A4
30A4:  MOVWF  xC4
30A6:  MOVLW  70
30A8:  MOVWF  xC3
30AA:  MOVLW  3D
30AC:  MOVWF  xC2
30AE:  MOVLW  7D
30B0:  MOVWF  xC1
30B2:  CALL   0C12
30B6:  MOVFF  00,A9
30BA:  MOVFF  01,AA
30BE:  MOVFF  02,AB
30C2:  MOVFF  03,AC
30C6:  MOVFF  03,C0
30CA:  MOVFF  02,BF
30CE:  MOVFF  01,BE
30D2:  MOVFF  00,BD
30D6:  CLRF   xC4
30D8:  CLRF   xC3
30DA:  MOVLW  30
30DC:  MOVWF  xC2
30DE:  MOVLW  82
30E0:  MOVWF  xC1
30E2:  CALL   11E2
30E6:  MOVFF  03,A0
30EA:  MOVFF  02,9F
30EE:  MOVFF  01,9E
30F2:  MOVFF  00,9D
....................    if(Saturacion>11) 
30F6:  CLRF   xC0
30F8:  CLRF   xBF
30FA:  MOVLW  30
30FC:  MOVWF  xBE
30FE:  MOVLW  82
3100:  MOVWF  xBD
3102:  MOVFF  A0,C4
3106:  MOVFF  9F,C3
310A:  MOVFF  9E,C2
310E:  MOVFF  9D,C1
3112:  CALL   0FD6
3116:  BNC   3124
....................    { 
....................       Saturacion=11; 
3118:  CLRF   xA0
311A:  CLRF   x9F
311C:  MOVLW  30
311E:  MOVWF  x9E
3120:  MOVLW  82
3122:  MOVWF  x9D
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
3124:  CLRF   2E
3126:  MOVFF  A0,AC
312A:  MOVFF  9F,AB
312E:  MOVFF  9E,AA
3132:  MOVFF  9D,A9
3136:  CALL   187E
313A:  MOVFF  00,A9
313E:  MOVFF  01,AA
3142:  MOVFF  02,AB
3146:  MOVFF  03,AC
314A:  CLRF   xC2
314C:  MOVFF  2E,C1
3150:  CALL   07C0
3154:  MOVFF  03,C0
3158:  MOVFF  02,BF
315C:  MOVFF  01,BE
3160:  MOVFF  00,BD
3164:  MOVFF  AC,C4
3168:  MOVFF  AB,C3
316C:  MOVFF  AA,C2
3170:  MOVFF  A9,C1
3174:  CALL   0FD6
3178:  BNC   3196
....................    { 
....................       lcd_gotoxy(i+8,2); 
317A:  MOVLW  08
317C:  ADDWF  2E,W
317E:  MOVWF  xA9
3180:  MOVWF  xBB
3182:  MOVLW  02
3184:  MOVWF  xBC
3186:  CALL   0848
....................       printf(lcd_putc,"Ñ"); 
318A:  MOVLW  D1
318C:  MOVWF  xBA
318E:  CALL   08AA
....................    } 
3192:  INCF   2E,F
3194:  BRA    3126
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
3196:  MOVFF  A0,AC
319A:  MOVFF  9F,AB
319E:  MOVFF  9E,AA
31A2:  MOVFF  9D,A9
31A6:  CALL   187E
31AA:  MOVFF  03,C0
31AE:  MOVFF  02,BF
31B2:  MOVFF  01,BE
31B6:  MOVFF  00,BD
31BA:  CALL   1514
31BE:  MOVFF  01,2E
31C2:  MOVF   2E,W
31C4:  SUBLW  0A
31C6:  BNC   31E4
....................    { 
....................       lcd_gotoxy(i+8,2); 
31C8:  MOVLW  08
31CA:  ADDWF  2E,W
31CC:  MOVWF  xA9
31CE:  MOVWF  xBB
31D0:  MOVLW  02
31D2:  MOVWF  xBC
31D4:  CALL   0848
....................       printf(lcd_putc," "); 
31D8:  MOVLW  20
31DA:  MOVWF  xBA
31DC:  CALL   08AA
....................    } 
31E0:  INCF   2E,F
31E2:  BRA    31C2
....................     
....................    lcd_gotoxy(9,3); 
31E4:  MOVLW  09
31E6:  MOVWF  xBB
31E8:  MOVLW  03
31EA:  MOVWF  xBC
31EC:  CALL   0848
....................    printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
31F0:  MOVLW  94
31F2:  MOVWF  FF6
31F4:  MOVLW  06
31F6:  MOVWF  FF7
31F8:  MOVLW  06
31FA:  MOVWF  xAD
31FC:  CALL   094C
3200:  MOVFF  28,A9
3204:  MOVLW  03
3206:  MOVWF  xAA
3208:  CALL   0AF8
320C:  MOVLW  3A
320E:  MOVWF  xBA
3210:  CALL   08AA
3214:  MOVFF  29,A9
3218:  MOVLW  01
321A:  MOVWF  xAA
321C:  CALL   0AF8
....................     
....................    if(estadomv==1) 
3220:  BTFSS  17.2
3222:  BRA    3246
....................    { 
....................       lcd_gotoxy(1,4); 
3224:  MOVLW  01
3226:  MOVWF  xBB
3228:  MOVLW  04
322A:  MOVWF  xBC
322C:  CALL   0848
....................       printf(lcd_putc,"Motor:ON ");       
3230:  MOVLW  A4
3232:  MOVWF  FF6
3234:  MOVLW  06
3236:  MOVWF  FF7
3238:  CALL   0908
....................       velocidades(1); 
323C:  MOVLW  01
323E:  MOVWF  xA9
3240:  CALL   1894
....................    } 
....................    else 
3244:  BRA    3264
....................    { 
....................       lcd_gotoxy(1,4); 
3246:  MOVLW  01
3248:  MOVWF  xBB
324A:  MOVLW  04
324C:  MOVWF  xBC
324E:  CALL   0848
....................       printf(lcd_putc,"Motor:OFF"); 
3252:  MOVLW  AE
3254:  MOVWF  FF6
3256:  MOVLW  06
3258:  MOVWF  FF7
325A:  CALL   0908
....................       velocidades(0);  
325E:  CLRF   xA9
3260:  CALL   1894
....................    } 
....................     
....................    if(estadouv==1) 
3264:  BTFSS  17.0
3266:  BRA    32B0
....................    { 
....................       lcd_gotoxy(13,4); 
3268:  MOVLW  0D
326A:  MOVWF  xBB
326C:  MOVLW  04
326E:  MOVWF  xBC
3270:  CALL   0848
....................       printf(lcd_putc,"UV:ON "); 
3274:  MOVLW  B8
3276:  MOVWF  FF6
3278:  MOVLW  06
327A:  MOVWF  FF7
327C:  CALL   0908
....................       estadomv=0; 
3280:  BCF    17.2
....................       velocidades(0); 
3282:  CLRF   xA9
3284:  CALL   1894
....................       estadofl=0; 
3288:  BCF    17.1
....................       Luz_Blanca_off; 
328A:  BCF    F8C.2
328C:  BCF    F95.2
....................       Luz_UV_on; 
328E:  BSF    F8C.1
3290:  BCF    F95.1
....................       tiempo_cumplido=0; 
3292:  BCF    17.7
....................       if(flaguv==0) 
3294:  BTFSC  18.1
3296:  BRA    32AE
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1; 
3298:  CALL   076A
329C:  MOVLW  C8
329E:  MOVWF  xC0
32A0:  CALL   06D8
32A4:  CALL   076A
32A8:  BSF    18.1
32AA:  MOVLW  01
32AC:  MOVWF  31
....................       } 
....................    } 
....................    else 
32AE:  BRA    32E8
....................    { 
....................       estadouv=0; 
32B0:  BCF    17.0
....................       lcd_gotoxy(13,4); 
32B2:  MOVLW  0D
32B4:  MOVWF  xBB
32B6:  MOVLW  04
32B8:  MOVWF  xBC
32BA:  CALL   0848
....................       printf(lcd_putc,"UV:OFF"); 
32BE:  MOVLW  C0
32C0:  MOVWF  FF6
32C2:  MOVLW  06
32C4:  MOVWF  FF7
32C6:  CALL   0908
....................       Luz_UV_off; 
32CA:  BCF    F8C.1
32CC:  BCF    F95.1
....................       if(flaguv==1) 
32CE:  BTFSS  18.1
32D0:  BRA    32E8
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1; 
32D2:  CALL   076A
32D6:  MOVLW  C8
32D8:  MOVWF  xC0
32DA:  CALL   06D8
32DE:  CALL   076A
32E2:  BCF    18.1
32E4:  MOVLW  01
32E6:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
32E8:  BTFSS  17.1
32EA:  BRA    3320
....................    { 
....................       lcd_gotoxy(1,3); 
32EC:  MOVLW  01
32EE:  MOVWF  xBB
32F0:  MOVLW  03
32F2:  MOVWF  xBC
32F4:  CALL   0848
....................       printf(lcd_putc,"Luz:ON "); 
32F8:  MOVLW  C8
32FA:  MOVWF  FF6
32FC:  MOVLW  06
32FE:  MOVWF  FF7
3300:  CALL   0908
....................       Luz_Blanca_on; 
3304:  BSF    F8C.2
3306:  BCF    F95.2
....................       if(flagfl==0) 
3308:  BTFSC  18.2
330A:  BRA    331E
....................       { 
....................          lcd_init();delay_ms(50);lcd_init();flagfl=1; 
330C:  CALL   076A
3310:  MOVLW  32
3312:  MOVWF  xC0
3314:  CALL   06D8
3318:  CALL   076A
331C:  BSF    18.2
....................       } 
....................    } 
....................    else 
331E:  BRA    3352
....................    { 
....................       lcd_gotoxy(1,3); 
3320:  MOVLW  01
3322:  MOVWF  xBB
3324:  MOVLW  03
3326:  MOVWF  xBC
3328:  CALL   0848
....................       printf(lcd_putc,"Luz:OFF"); 
332C:  MOVLW  D0
332E:  MOVWF  FF6
3330:  MOVLW  06
3332:  MOVWF  FF7
3334:  CALL   0908
....................       Luz_Blanca_off; 
3338:  BCF    F8C.2
333A:  BCF    F95.2
....................       if(flagfl==1) 
333C:  BTFSS  18.2
333E:  BRA    3352
....................       { 
....................          lcd_init();delay_ms(50);lcd_init();flagfl=0; 
3340:  CALL   076A
3344:  MOVLW  32
3346:  MOVWF  xC0
3348:  CALL   06D8
334C:  CALL   076A
3350:  BCF    18.2
....................       } 
....................    } 
....................     
....................   if(DOWN)//Si oprime hacia arriba 
3352:  BSF    F96.0
3354:  BTFSS  F84.0
3356:  BRA    3372
....................    { 
....................       if(Flanco == 0) 
3358:  BTFSC  17.3
335A:  BRA    3370
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
335C:  BTG    17.1
335E:  BSF    17.3
3360:  MOVLW  02
3362:  MOVWF  xA9
3364:  MOVLW  96
3366:  MOVWF  xC0
3368:  CALL   06D8
336C:  DECFSZ xA9,F
336E:  BRA    3364
....................       } 
....................    } 
....................    else 
3370:  BRA    3374
....................    { 
....................       Flanco = 0; 
3372:  BCF    17.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3374:  BSF    F96.1
3376:  BTFSS  F84.1
3378:  BRA    3394
....................    { 
....................       if(Flanco1 == 0) 
337A:  BTFSC  17.4
337C:  BRA    3392
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
337E:  BTG    17.2
3380:  BSF    17.4
3382:  MOVLW  02
3384:  MOVWF  xA9
3386:  MOVLW  96
3388:  MOVWF  xC0
338A:  CALL   06D8
338E:  DECFSZ xA9,F
3390:  BRA    3386
....................       } 
....................    } 
....................    else 
3392:  BRA    3396
....................    { 
....................       Flanco1 = 0; 
3394:  BCF    17.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3396:  BSF    F96.2
3398:  BTFSS  F84.2
339A:  BRA    33A6
....................    { 
....................       delay_ms(150);  
339C:  MOVLW  96
339E:  MOVWF  xC0
33A0:  CALL   06D8
....................       estadouv=!estadouv; 
33A4:  BTG    17.0
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
33A6:  BSF    F92.5
33A8:  BTFSS  F80.5
33AA:  BRA    33D8
....................    { 
....................       delay_ms(200); 
33AC:  MOVLW  C8
33AE:  MOVWF  xC0
33B0:  CALL   06D8
....................       printf(lcd_putc,"\f"); 
33B4:  MOVLW  0C
33B6:  MOVWF  xBA
33B8:  CALL   08AA
....................       delay_ms(300); 
33BC:  MOVLW  02
33BE:  MOVWF  xA9
33C0:  MOVLW  96
33C2:  MOVWF  xC0
33C4:  CALL   06D8
33C8:  DECFSZ xA9,F
33CA:  BRA    33C0
....................       Menu=1;  
33CC:  MOVLW  01
33CE:  MOVWF  19
....................       paso=0; 
33D0:  CLRF   32
....................       Flecha=2; 
33D2:  MOVLW  02
33D4:  MOVWF  1D
....................       Flecha2=2; 
33D6:  MOVWF  1F
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
33D8:  DECFSZ 31,W
33DA:  BRA    348A
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
33DC:  MOVLW  32
33DE:  MOVWF  FA9
33E0:  MOVFF  22,FA8
33E4:  BCF    FA6.6
33E6:  BCF    FA6.7
33E8:  BSF    FA6.2
33EA:  MOVF   FF2,W
33EC:  MOVWF  00
33EE:  BCF    FF2.7
33F0:  MOVLB  F
33F2:  MOVLW  55
33F4:  MOVWF  FA7
33F6:  MOVLW  AA
33F8:  MOVWF  FA7
33FA:  BSF    FA6.1
33FC:  BTFSC  FA6.1
33FE:  BRA    33FC
3400:  BCF    FA6.2
3402:  MOVF   00,W
3404:  IORWF  FF2,F
3406:  MOVLW  33
3408:  MOVWF  FA9
340A:  MOVFF  23,FA8
340E:  BCF    FA6.6
3410:  BCF    FA6.7
3412:  BSF    FA6.2
3414:  MOVF   FF2,W
3416:  MOVWF  00
3418:  BCF    FF2.7
341A:  MOVLW  55
341C:  MOVWF  FA7
341E:  MOVLW  AA
3420:  MOVWF  FA7
3422:  BSF    FA6.1
3424:  BTFSC  FA6.1
3426:  BRA    3424
3428:  BCF    FA6.2
342A:  MOVF   00,W
342C:  IORWF  FF2,F
....................       horasL=(int8)horas; 
342E:  MOVFF  41,24
....................       horasH=(int8)(horas>>8); 
3432:  MOVF   42,W
3434:  MOVWF  25
....................       write_eeprom(52,horasL); 
3436:  MOVLW  34
3438:  MOVWF  FA9
343A:  MOVFF  24,FA8
343E:  BCF    FA6.6
3440:  BCF    FA6.7
3442:  BSF    FA6.2
3444:  MOVFF  FF2,00
3448:  BCF    FF2.7
344A:  MOVLW  55
344C:  MOVWF  FA7
344E:  MOVLW  AA
3450:  MOVWF  FA7
3452:  BSF    FA6.1
3454:  BTFSC  FA6.1
3456:  BRA    3454
3458:  BCF    FA6.2
345A:  MOVF   00,W
345C:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
345E:  MOVLW  35
3460:  MOVWF  FA9
3462:  MOVFF  25,FA8
3466:  BCF    FA6.6
3468:  BCF    FA6.7
346A:  BSF    FA6.2
346C:  MOVFF  FF2,00
3470:  BCF    FF2.7
3472:  MOVLW  55
3474:  MOVWF  FA7
3476:  MOVLW  AA
3478:  MOVWF  FA7
347A:  BSF    FA6.1
347C:  BTFSC  FA6.1
347E:  BRA    347C
3480:  BCF    FA6.2
3482:  MOVF   00,W
3484:  IORWF  FF2,F
....................       guardaruv=0; 
3486:  CLRF   31
3488:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
348A:  MOVF   30,W
348C:  SUBLW  13
348E:  BC    34A6
....................    { 
....................       if(Menu!=0){ 
3490:  MOVF   19,F
3492:  BZ    34A4
....................          lcd_init();delay_ms(200);lcd_init(); 
3494:  CALL   076A
3498:  MOVLW  C8
349A:  MOVWF  xC0
349C:  CALL   06D8
34A0:  CALL   076A
....................       } 
....................       tiemporeset=0; 
34A4:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
34A6:  MOVF   22,W
34A8:  SUBLW  3B
34AA:  BC    34B0
....................    { 
....................       segundos=0;minutos++; 
34AC:  CLRF   22
34AE:  INCF   23,F
....................    } 
....................    if(minutos==60) 
34B0:  MOVF   23,W
34B2:  SUBLW  3C
34B4:  BNZ   34BE
....................    { 
....................       minutos=0;horas++; 
34B6:  CLRF   23
34B8:  INCF   41,F
34BA:  BTFSC  FD8.2
34BC:  INCF   42,F
....................    } 
....................     
....................    } 
34BE:  GOTO   1C46
.................... } 
....................  
34C2:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
