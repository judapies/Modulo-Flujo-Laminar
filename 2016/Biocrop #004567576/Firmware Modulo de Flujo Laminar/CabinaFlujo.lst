CCS PCH C Compiler, Version 4.104, 5967               15-jul-16 14:54

               Filename: C:\Users\JP Electronica\Desktop\Firmware Modulo de Flujo Laminar\CabinaFlujo.lst

               ROM used: 13686 bytes (42%)
                         Largest free fragment is 19078
               RAM used: 203 (10%) at main() level
                         240 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1862
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0626:  CLRF   FEA
0628:  MOVLW  DE
062A:  MOVWF  FE9
062C:  MOVF   FEF,W
062E:  BZ    064C
0630:  MOVLW  0F
0632:  MOVWF  01
0634:  CLRF   00
0636:  DECFSZ 00,F
0638:  BRA    0636
063A:  DECFSZ 01,F
063C:  BRA    0634
063E:  MOVLW  8F
0640:  MOVWF  00
0642:  DECFSZ 00,F
0644:  BRA    0642
0646:  NOP   
0648:  DECFSZ FEF,F
064A:  BRA    0630
064C:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
064E:  SWAPF  xDF,W
0650:  ANDLW  F0
0652:  MOVWF  00
0654:  MOVLW  0F
0656:  ANDWF  F81,W
0658:  IORWF  00,W
065A:  MOVWF  F81
....................       delay_cycles(30); 
065C:  MOVLW  09
065E:  MOVWF  00
0660:  DECFSZ 00,F
0662:  BRA    0660
0664:  BRA    0666
....................       lcd.enable = 1; 
0666:  BSF    F81.3
....................       delay_us(55); 
0668:  MOVLW  DB
066A:  MOVWF  00
066C:  DECFSZ 00,F
066E:  BRA    066C
0670:  BRA    0672
....................       lcd.enable = 0; 
0672:  BCF    F81.3
.................... } 
0674:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0676:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0678:  MOVLW  01
067A:  MOVWF  xDE
067C:  RCALL  0626
....................       lcd.rs = address; 
067E:  BTFSS  xDC.0
0680:  BCF    F81.1
0682:  BTFSC  xDC.0
0684:  BSF    F81.1
....................       delay_cycles(30); 
0686:  MOVLW  09
0688:  MOVWF  00
068A:  DECFSZ 00,F
068C:  BRA    068A
068E:  BRA    0690
....................       lcd.rw = 0; 
0690:  BCF    F81.2
....................       delay_cycles(30); 
0692:  MOVLW  09
0694:  MOVWF  00
0696:  DECFSZ 00,F
0698:  BRA    0696
069A:  BRA    069C
....................       lcd.enable = 0; 
069C:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
069E:  SWAPF  xDD,W
06A0:  MOVWF  xDE
06A2:  MOVLW  0F
06A4:  ANDWF  xDE,F
06A6:  MOVFF  DE,DF
06AA:  RCALL  064E
....................       lcd_send_nibble(n & 0xf); 
06AC:  MOVF   xDD,W
06AE:  ANDLW  0F
06B0:  MOVWF  xDE
06B2:  MOVWF  xDF
06B4:  RCALL  064E
.................... } 
06B6:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
06B8:  MOVLW  00
06BA:  MOVWF  F93
....................     lcd.rs = 0; 
06BC:  BCF    F81.1
....................     lcd.rw = 0; 
06BE:  BCF    F81.2
....................     lcd.enable = 0; 
06C0:  BCF    F81.3
....................     delay_ms(15); 
06C2:  MOVLW  0F
06C4:  MOVWF  xDE
06C6:  RCALL  0626
....................     for(i=1;i<=3;++i) { 
06C8:  MOVLW  01
06CA:  MOVWF  xC7
06CC:  MOVF   xC7,W
06CE:  SUBLW  03
06D0:  BNC   06E2
....................        lcd_send_nibble(3); 
06D2:  MOVLW  03
06D4:  MOVWF  xDF
06D6:  RCALL  064E
....................        delay_ms(5); 
06D8:  MOVLW  05
06DA:  MOVWF  xDE
06DC:  RCALL  0626
....................     } 
06DE:  INCF   xC7,F
06E0:  BRA    06CC
....................     lcd_send_nibble(2); 
06E2:  MOVLW  02
06E4:  MOVWF  xDF
06E6:  RCALL  064E
....................     for(i=0;i<=3;++i) 
06E8:  CLRF   xC7
06EA:  MOVF   xC7,W
06EC:  SUBLW  03
06EE:  BNC   070C
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
06F0:  CLRF   03
06F2:  MOVF   xC7,W
06F4:  MOVFF  FF2,C8
06F8:  BCF    FF2.7
06FA:  RCALL  0096
06FC:  BTFSC  xC8.7
06FE:  BSF    FF2.7
0700:  MOVWF  xC8
0702:  CLRF   xDC
0704:  MOVWF  xDD
0706:  RCALL  0676
0708:  INCF   xC7,F
070A:  BRA    06EA
.................... } 
070C:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0796:  MOVLW  01
0798:  SUBWF  xDA,W
079A:  ADDLW  FC
079C:  BC    07BC
079E:  ADDLW  04
07A0:  GOTO   07CC
....................      case 1 : address=0x80;break; 
07A4:  MOVLW  80
07A6:  MOVWF  xDB
07A8:  BRA    07BC
....................      case 2 : address=0xc0;break; 
07AA:  MOVLW  C0
07AC:  MOVWF  xDB
07AE:  BRA    07BC
....................      case 3 : address=0x94;break; 
07B0:  MOVLW  94
07B2:  MOVWF  xDB
07B4:  BRA    07BC
....................      case 4 : address=0xd4;break; 
07B6:  MOVLW  D4
07B8:  MOVWF  xDB
07BA:  BRA    07BC
....................    } 
....................    address+=x-1; 
07BC:  MOVLW  01
07BE:  SUBWF  xD9,W
07C0:  ADDWF  xDB,F
....................    lcd_send_byte(0,address); 
07C2:  CLRF   xDC
07C4:  MOVFF  DB,DD
07C8:  RCALL  0676
.................... } 
07CA:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
07F8:  MOVF   xD8,W
07FA:  SUBLW  F1
07FC:  BNZ   0802
....................    { 
....................       c=238; 
07FE:  MOVLW  EE
0800:  MOVWF  xD8
....................    } 
....................    if(c=='Ñ') 
0802:  MOVF   xD8,W
0804:  SUBLW  D1
0806:  BNZ   080C
....................    { 
....................       c=255; 
0808:  MOVLW  FF
080A:  MOVWF  xD8
....................    } 
....................     
....................    switch (c) { 
080C:  MOVF   xD8,W
080E:  XORLW  0C
0810:  BZ    081C
0812:  XORLW  06
0814:  BZ    0830
0816:  XORLW  02
0818:  BZ    083E
081A:  BRA    0848
....................      case '\f'   : lcd_send_byte(0,1); 
081C:  CLRF   xDC
081E:  MOVLW  01
0820:  MOVWF  xDD
0822:  RCALL  0676
....................                    lcdline=1; 
0824:  MOVLW  01
0826:  MOVWF  16
....................                    delay_ms(2); 
0828:  MOVLW  02
082A:  MOVWF  xDE
082C:  RCALL  0626
....................                                            break; 
082E:  BRA    0854
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0830:  INCF   16,F
0832:  MOVLW  01
0834:  MOVWF  xD9
0836:  MOVFF  16,DA
083A:  RCALL  0796
083C:  BRA    0854
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
083E:  CLRF   xDC
0840:  MOVLW  10
0842:  MOVWF  xDD
0844:  RCALL  0676
0846:  BRA    0854
....................      default     : lcd_send_byte(1,c);     break; 
0848:  MOVLW  01
084A:  MOVWF  xDC
084C:  MOVFF  D8,DD
0850:  RCALL  0676
0852:  BRA    0854
....................    } 
.................... } 
0854:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
151A:  BCF    xDA.0
....................    y = x; 
151C:  MOVFF  CE,D3
1520:  MOVFF  CD,D2
1524:  MOVFF  CC,D1
1528:  MOVFF  CB,D0
....................  
....................    if (x < 0) 
152C:  MOVFF  CE,DE
1530:  MOVFF  CD,DD
1534:  MOVFF  CC,DC
1538:  MOVFF  CB,DB
153C:  CLRF   xE2
153E:  CLRF   xE1
1540:  CLRF   xE0
1542:  CLRF   xDF
1544:  RCALL  0FA0
1546:  BNC   1550
....................    { 
....................       s = 1; 
1548:  BSF    xDA.0
....................       y = -y; 
154A:  MOVF   xD1,W
154C:  XORLW  80
154E:  MOVWF  xD1
....................    } 
....................  
....................    if (y <= 32768.0) 
1550:  MOVFF  D3,DE
1554:  MOVFF  D2,DD
1558:  MOVFF  D1,DC
155C:  MOVFF  D0,DB
1560:  CLRF   xE2
1562:  CLRF   xE1
1564:  CLRF   xE0
1566:  MOVLW  8E
1568:  MOVWF  xDF
156A:  RCALL  0FA0
156C:  BC    1570
156E:  BNZ   15A0
....................   res = (float32)(unsigned int16)y; 
1570:  MOVFF  D3,DE
1574:  MOVFF  D2,DD
1578:  MOVFF  D1,DC
157C:  MOVFF  D0,DB
1580:  RCALL  14E2
1582:  MOVFF  02,E0
1586:  MOVFF  01,DF
158A:  CALL   070E
158E:  MOVFF  03,D7
1592:  MOVFF  02,D6
1596:  MOVFF  01,D5
159A:  MOVFF  00,D4
....................  
....................  else if (y < 10000000.0) 
159E:  BRA    1728
15A0:  MOVFF  D3,DE
15A4:  MOVFF  D2,DD
15A8:  MOVFF  D1,DC
15AC:  MOVFF  D0,DB
15B0:  MOVLW  80
15B2:  MOVWF  xE2
15B4:  MOVLW  96
15B6:  MOVWF  xE1
15B8:  MOVLW  18
15BA:  MOVWF  xE0
15BC:  MOVLW  96
15BE:  MOVWF  xDF
15C0:  RCALL  0FA0
15C2:  BTFSS  FD8.0
15C4:  BRA    1718
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
15C6:  MOVFF  D3,DE
15CA:  MOVFF  D2,DD
15CE:  MOVFF  D1,DC
15D2:  MOVFF  D0,DB
15D6:  CLRF   xE2
15D8:  CLRF   xE1
15DA:  CLRF   xE0
15DC:  MOVLW  8E
15DE:  MOVWF  xDF
15E0:  CALL   0876
15E4:  MOVFF  03,DE
15E8:  MOVFF  02,DD
15EC:  MOVFF  01,DC
15F0:  MOVFF  00,DB
15F4:  RCALL  14E2
15F6:  MOVFF  02,D9
15FA:  MOVFF  01,D8
....................       y = 32768.0*(y/32768.0 - (float32)l); 
15FE:  MOVFF  D3,DE
1602:  MOVFF  D2,DD
1606:  MOVFF  D1,DC
160A:  MOVFF  D0,DB
160E:  CLRF   xE2
1610:  CLRF   xE1
1612:  CLRF   xE0
1614:  MOVLW  8E
1616:  MOVWF  xDF
1618:  CALL   0876
161C:  MOVFF  00,DB
1620:  MOVFF  01,DC
1624:  MOVFF  02,DD
1628:  MOVFF  03,DE
162C:  MOVFF  D9,E0
1630:  MOVFF  D8,DF
1634:  CALL   070E
1638:  BSF    FD8.1
163A:  MOVFF  DE,E2
163E:  MOVFF  DD,E1
1642:  MOVFF  DC,E0
1646:  MOVFF  DB,DF
164A:  MOVFF  03,E6
164E:  MOVFF  02,E5
1652:  MOVFF  01,E4
1656:  MOVFF  00,E3
165A:  CALL   09D0
165E:  CLRF   xDE
1660:  CLRF   xDD
1662:  CLRF   xDC
1664:  MOVLW  8E
1666:  MOVWF  xDB
1668:  MOVFF  03,E2
166C:  MOVFF  02,E1
1670:  MOVFF  01,E0
1674:  MOVFF  00,DF
1678:  RCALL  11B0
167A:  MOVFF  03,D3
167E:  MOVFF  02,D2
1682:  MOVFF  01,D1
1686:  MOVFF  00,D0
....................   res = 32768.0*(float32)l; 
168A:  MOVFF  D9,E0
168E:  MOVFF  D8,DF
1692:  CALL   070E
1696:  CLRF   xDE
1698:  CLRF   xDD
169A:  CLRF   xDC
169C:  MOVLW  8E
169E:  MOVWF  xDB
16A0:  MOVFF  03,E2
16A4:  MOVFF  02,E1
16A8:  MOVFF  01,E0
16AC:  MOVFF  00,DF
16B0:  RCALL  11B0
16B2:  MOVFF  03,D7
16B6:  MOVFF  02,D6
16BA:  MOVFF  01,D5
16BE:  MOVFF  00,D4
....................   res += (float32)(unsigned int16)y; 
16C2:  MOVFF  D3,DE
16C6:  MOVFF  D2,DD
16CA:  MOVFF  D1,DC
16CE:  MOVFF  D0,DB
16D2:  RCALL  14E2
16D4:  MOVFF  02,E0
16D8:  MOVFF  01,DF
16DC:  CALL   070E
16E0:  BCF    FD8.1
16E2:  MOVFF  D7,E2
16E6:  MOVFF  D6,E1
16EA:  MOVFF  D5,E0
16EE:  MOVFF  D4,DF
16F2:  MOVFF  03,E6
16F6:  MOVFF  02,E5
16FA:  MOVFF  01,E4
16FE:  MOVFF  00,E3
1702:  CALL   09D0
1706:  MOVFF  03,D7
170A:  MOVFF  02,D6
170E:  MOVFF  01,D5
1712:  MOVFF  00,D4
....................  } 
....................  
....................  else 
1716:  BRA    1728
....................   res = y; 
1718:  MOVFF  D3,D7
171C:  MOVFF  D2,D6
1720:  MOVFF  D1,D5
1724:  MOVFF  D0,D4
....................  
....................  y = y - (float32)(unsigned int16)y; 
1728:  MOVFF  D3,DE
172C:  MOVFF  D2,DD
1730:  MOVFF  D1,DC
1734:  MOVFF  D0,DB
1738:  RCALL  14E2
173A:  MOVFF  02,E0
173E:  MOVFF  01,DF
1742:  CALL   070E
1746:  BSF    FD8.1
1748:  MOVFF  D3,E2
174C:  MOVFF  D2,E1
1750:  MOVFF  D1,E0
1754:  MOVFF  D0,DF
1758:  MOVFF  03,E6
175C:  MOVFF  02,E5
1760:  MOVFF  01,E4
1764:  MOVFF  00,E3
1768:  CALL   09D0
176C:  MOVFF  03,D3
1770:  MOVFF  02,D2
1774:  MOVFF  01,D1
1778:  MOVFF  00,D0
....................  
....................  if (s) 
177C:  BTFSS  xDA.0
177E:  BRA    1786
....................   res = -res; 
1780:  MOVF   xD5,W
1782:  XORLW  80
1784:  MOVWF  xD5
....................  
....................  if (y != 0) 
1786:  MOVFF  D3,DE
178A:  MOVFF  D2,DD
178E:  MOVFF  D1,DC
1792:  MOVFF  D0,DB
1796:  CLRF   xE2
1798:  CLRF   xE1
179A:  CLRF   xE0
179C:  CLRF   xDF
179E:  RCALL  0FA0
17A0:  BZ    1812
....................  { 
....................   if (s == 1 && n == 0) 
17A2:  BTFSS  xDA.0
17A4:  BRA    17DA
17A6:  MOVF   xCF,F
17A8:  BNZ   17DA
....................    res -= 1.0; 
17AA:  BSF    FD8.1
17AC:  MOVFF  D7,E2
17B0:  MOVFF  D6,E1
17B4:  MOVFF  D5,E0
17B8:  MOVFF  D4,DF
17BC:  CLRF   xE6
17BE:  CLRF   xE5
17C0:  CLRF   xE4
17C2:  MOVLW  7F
17C4:  MOVWF  xE3
17C6:  CALL   09D0
17CA:  MOVFF  03,D7
17CE:  MOVFF  02,D6
17D2:  MOVFF  01,D5
17D6:  MOVFF  00,D4
....................  
....................   if (s == 0 && n == 1) 
17DA:  BTFSC  xDA.0
17DC:  BRA    1812
17DE:  DECFSZ xCF,W
17E0:  BRA    1812
....................    res += 1.0; 
17E2:  BCF    FD8.1
17E4:  MOVFF  D7,E2
17E8:  MOVFF  D6,E1
17EC:  MOVFF  D5,E0
17F0:  MOVFF  D4,DF
17F4:  CLRF   xE6
17F6:  CLRF   xE5
17F8:  CLRF   xE4
17FA:  MOVLW  7F
17FC:  MOVWF  xE3
17FE:  CALL   09D0
1802:  MOVFF  03,D7
1806:  MOVFF  02,D6
180A:  MOVFF  01,D5
180E:  MOVFF  00,D4
....................  } 
....................  if (x == 0) 
1812:  MOVFF  CE,DE
1816:  MOVFF  CD,DD
181A:  MOVFF  CC,DC
181E:  MOVFF  CB,DB
1822:  CLRF   xE2
1824:  CLRF   xE1
1826:  CLRF   xE0
1828:  CLRF   xDF
182A:  CALL   0FA0
182E:  BNZ   1838
....................     res = 0; 
1830:  CLRF   xD7
1832:  CLRF   xD6
1834:  CLRF   xD5
1836:  CLRF   xD4
....................  
....................  return (res); 
1838:  MOVFF  D4,00
183C:  MOVFF  D5,01
1840:  MOVFF  D6,02
1844:  MOVFF  D7,03
.................... } 
1848:  GOTO   1860 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
184C:  MOVFF  CA,CE
1850:  MOVFF  C9,CD
1854:  MOVFF  C8,CC
1858:  MOVFF  C7,CB
185C:  CLRF   xCF
185E:  BRA    151A
.................... } 
1860:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D0,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D0,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D1,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D1,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L2_off      output_bit(PIN_D3,0) 
.................... #define   Motor_L3_on       output_bit(PIN_D4,1) 
.................... #define   Motor_L3_off      output_bit(PIN_D4,0) 
.................... #define   Motor_L4_on       output_bit(PIN_D5,1) 
.................... #define   Motor_L4_off      output_bit(PIN_D5,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,flagmv=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,negativo=10; 
.................... signed int8   paso=0,Velocidad=1; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0,Diferencia=0.0,zero_fabrica=235.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Ajuste1=1.0,x_uno=0,G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   45,F
00BE:  BTFSC  FD8.2
00C0:  INCF   46,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   46,F
00C4:  BNZ   00CC
00C6:  MOVF   45,W
00C8:  SUBLW  C7
00CA:  BC    0100
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   46
00CE:  CLRF   45
00D0:  INCF   30,F
00D2:  BSF    18.0
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00D4:  BTFSS  17.0
00D6:  BRA    0100
....................    { 
....................       segundos++; 
00D8:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00DA:  BTFSC  17.7
00DC:  BRA    0100
....................       { 
....................          if(tempo_segundos>0) 
00DE:  MOVF   29,F
00E0:  BZ    00E6
....................          { 
....................             tempo_segundos--; 
00E2:  DECF   29,F
....................          } 
....................          else 
00E4:  BRA    0100
....................          { 
....................             if(tempo_minutos>0) 
00E6:  MOVF   28,F
00E8:  BZ    00F2
....................             { 
....................                tempo_minutos--; 
00EA:  DECF   28,F
....................                tempo_segundos=59; 
00EC:  MOVLW  3B
00EE:  MOVWF  29
....................             } 
....................             else 
00F0:  BRA    0100
....................             { 
....................                //tiempo_cumplido=1; 
....................                estadouv=0;Luz_UV_off; 
00F2:  BCF    17.0
00F4:  BCF    F8C.0
00F6:  BCF    F95.0
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
00F8:  MOVFF  2A,28
00FC:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0100:  BCF    F9E.0
0102:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0D98:  DECFSZ xC8,W
0D9A:  BRA    0DB0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0D9C:  MOVLW  02
0D9E:  MOVWF  xD9
0DA0:  MOVFF  C9,DA
0DA4:  RCALL  0796
0DA6:  MOVLW  06
0DA8:  MOVWF  FF6
0DAA:  MOVLW  01
0DAC:  MOVWF  FF7
0DAE:  RCALL  0856
....................    if(x==2) 
0DB0:  MOVF   xC8,W
0DB2:  SUBLW  02
0DB4:  BNZ   0DCA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad Motor    ");} 
0DB6:  MOVLW  02
0DB8:  MOVWF  xD9
0DBA:  MOVFF  C9,DA
0DBE:  RCALL  0796
0DC0:  MOVLW  1A
0DC2:  MOVWF  FF6
0DC4:  MOVLW  01
0DC6:  MOVWF  FF7
0DC8:  RCALL  0856
....................    if(x==3) 
0DCA:  MOVF   xC8,W
0DCC:  SUBLW  03
0DCE:  BNZ   0DE4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0DD0:  MOVLW  02
0DD2:  MOVWF  xD9
0DD4:  MOVFF  C9,DA
0DD8:  RCALL  0796
0DDA:  MOVLW  2E
0DDC:  MOVWF  FF6
0DDE:  MOVLW  01
0DE0:  MOVWF  FF7
0DE2:  RCALL  0856
....................    if(x==4) 
0DE4:  MOVF   xC8,W
0DE6:  SUBLW  04
0DE8:  BNZ   0DFE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0DEA:  MOVLW  02
0DEC:  MOVWF  xD9
0DEE:  MOVFF  C9,DA
0DF2:  RCALL  0796
0DF4:  MOVLW  42
0DF6:  MOVWF  FF6
0DF8:  MOVLW  01
0DFA:  MOVWF  FF7
0DFC:  RCALL  0856
....................    if(x==5) 
0DFE:  MOVF   xC8,W
0E00:  SUBLW  05
0E02:  BNZ   0E18
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0E04:  MOVLW  02
0E06:  MOVWF  xD9
0E08:  MOVFF  C9,DA
0E0C:  RCALL  0796
0E0E:  MOVLW  56
0E10:  MOVWF  FF6
0E12:  MOVLW  01
0E14:  MOVWF  FF7
0E16:  RCALL  0856
.................... } 
0E18:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
0E80:  MOVF   xC9,F
0E82:  BNZ   0E94
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_off;} 
0E84:  BCF    F8C.3
0E86:  BCF    F95.3
0E88:  BCF    F8C.4
0E8A:  BCF    F95.4
0E8C:  BCF    F8C.5
0E8E:  BCF    F95.5
0E90:  BCF    F8C.2
0E92:  BCF    F95.2
....................    if(x==1) 
0E94:  DECFSZ xC9,W
0E96:  BRA    0EA8
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_on;} 
0E98:  BCF    F8C.3
0E9A:  BCF    F95.3
0E9C:  BCF    F8C.4
0E9E:  BCF    F95.4
0EA0:  BCF    F8C.5
0EA2:  BCF    F95.5
0EA4:  BSF    F8C.2
0EA6:  BCF    F95.2
....................    if(x==2) 
0EA8:  MOVF   xC9,W
0EAA:  SUBLW  02
0EAC:  BNZ   0EBE
....................       {Motor_L3_off;Motor_L4_off;Motor_L1_off;Motor_L2_on;} 
0EAE:  BCF    F8C.4
0EB0:  BCF    F95.4
0EB2:  BCF    F8C.5
0EB4:  BCF    F95.5
0EB6:  BCF    F8C.2
0EB8:  BCF    F95.2
0EBA:  BSF    F8C.3
0EBC:  BCF    F95.3
....................    if(x==3) 
0EBE:  MOVF   xC9,W
0EC0:  SUBLW  03
0EC2:  BNZ   0ED4
....................       {Motor_L4_off;Motor_L1_off;Motor_L2_off;Motor_L3_on;} 
0EC4:  BCF    F8C.5
0EC6:  BCF    F95.5
0EC8:  BCF    F8C.2
0ECA:  BCF    F95.2
0ECC:  BCF    F8C.3
0ECE:  BCF    F95.3
0ED0:  BSF    F8C.4
0ED2:  BCF    F95.4
....................    if(x==4) 
0ED4:  MOVF   xC9,W
0ED6:  SUBLW  04
0ED8:  BNZ   0EEA
....................       {Motor_L2_off;Motor_L3_off;Motor_L1_off;Motor_L4_on;} 
0EDA:  BCF    F8C.3
0EDC:  BCF    F95.3
0EDE:  BCF    F8C.4
0EE0:  BCF    F95.4
0EE2:  BCF    F8C.2
0EE4:  BCF    F95.2
0EE6:  BSF    F8C.5
0EE8:  BCF    F95.5
.................... } 
0EEA:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0744:  RLCF   xCC,W
0746:  MOVWF  00
0748:  RLCF   00,F
074A:  MOVLW  FC
074C:  ANDWF  00,F
074E:  MOVFF  00,01
0752:  MOVF   FC2,W
0754:  ANDLW  C3
0756:  IORWF  00,W
0758:  MOVWF  FC2
075A:  MOVLW  0A
075C:  MOVWF  xDE
075E:  RCALL  0626
0760:  BSF    FC2.1
0762:  BTFSC  FC2.1
0764:  BRA    0762
0766:  MOVFF  FC4,03
076A:  MOVFF  FC3,DF
076E:  MOVFF  FC4,E0
0772:  RCALL  070E
0774:  MOVFF  03,D0
0778:  MOVFF  02,CF
077C:  MOVFF  01,CE
0780:  MOVFF  00,CD
0784:  MOVFF  CD,00
0788:  MOVFF  CE,01
078C:  MOVFF  CF,02
0790:  MOVFF  D0,03
.................... } 
0794:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1016:  CLRF   xCB
1018:  CLRF   xCA
101A:  CLRF   xC9
101C:  CLRF   xC8
....................    float promediopresion=0.0; 
....................    /*if(negativo==10) 
....................     { 
....................       x_uno=sensores(1)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(1)-Diferencia; 
....................     }*/ 
....................    V1=sensores(1);  
101E:  MOVLW  01
1020:  MOVWF  xCC
1022:  CALL   0744
1026:  MOVFF  03,9E
102A:  MOVFF  02,9D
102E:  MOVFF  01,9C
1032:  MOVFF  00,9B
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1036:  MOVFF  9E,DE
103A:  MOVFF  9D,DD
103E:  MOVFF  9C,DC
1042:  MOVFF  9B,DB
1046:  MOVFF  C6,E2
104A:  MOVFF  C5,E1
104E:  MOVFF  C4,E0
1052:  MOVFF  C3,DF
1056:  RCALL  0876
1058:  MOVFF  00,CC
105C:  MOVFF  01,CD
1060:  MOVFF  02,CE
1064:  MOVFF  03,CF
1068:  BSF    FD8.1
106A:  MOVFF  03,E2
106E:  MOVFF  02,E1
1072:  MOVFF  01,E0
1076:  MOVFF  00,DF
107A:  CLRF   xE6
107C:  CLRF   xE5
107E:  CLRF   xE4
1080:  MOVLW  7F
1082:  MOVWF  xE3
1084:  RCALL  09D0
1086:  MOVFF  03,A2
108A:  MOVFF  02,A1
108E:  MOVFF  01,A0
1092:  MOVFF  00,9F
....................     
....................    if(Presion<0.0) 
1096:  MOVFF  A2,DE
109A:  MOVFF  A1,DD
109E:  MOVFF  A0,DC
10A2:  MOVFF  9F,DB
10A6:  CLRF   xE2
10A8:  CLRF   xE1
10AA:  CLRF   xE0
10AC:  CLRF   xDF
10AE:  RCALL  0FA0
10B0:  BNC   10BA
....................    { 
....................       Presion=0.0; 
10B2:  CLRF   xA2
10B4:  CLRF   xA1
10B6:  CLRF   xA0
10B8:  CLRF   x9F
....................    } 
....................  
....................    if(r>media-1) 
10BA:  MOVLW  01
10BC:  SUBWF  xC7,W
10BE:  SUBWF  2C,W
10C0:  BZ    10C6
10C2:  BNC   10C6
....................    {r=0;} 
10C4:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
10C6:  MOVF   2C,W
10C8:  MULLW  04
10CA:  MOVF   FF3,W
10CC:  CLRF   03
10CE:  ADDLW  4B
10D0:  MOVWF  FE9
10D2:  MOVLW  00
10D4:  ADDWFC 03,W
10D6:  MOVWF  FEA
10D8:  MOVFF  9F,FEF
10DC:  MOVFF  A0,FEC
10E0:  MOVFF  A1,FEC
10E4:  MOVFF  A2,FEC
10E8:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
10EA:  CLRF   2D
10EC:  MOVLW  01
10EE:  SUBWF  xC7,W
10F0:  SUBWF  2D,W
10F2:  BZ    10F6
10F4:  BC    1160
....................    { 
....................       promediopresion+=PromPresion[q]; 
10F6:  MOVF   2D,W
10F8:  MULLW  04
10FA:  MOVF   FF3,W
10FC:  CLRF   03
10FE:  ADDLW  4B
1100:  MOVWF  FE9
1102:  MOVLW  00
1104:  ADDWFC 03,W
1106:  MOVWF  FEA
1108:  MOVFF  FEF,00
110C:  MOVFF  FEC,01
1110:  MOVFF  FEC,02
1114:  MOVFF  FEC,03
1118:  MOVFF  FEA,CD
111C:  MOVFF  FE9,CC
1120:  BCF    FD8.1
1122:  MOVFF  CB,E2
1126:  MOVFF  CA,E1
112A:  MOVFF  C9,E0
112E:  MOVFF  C8,DF
1132:  MOVFF  03,E6
1136:  MOVFF  02,E5
113A:  MOVFF  01,E4
113E:  MOVFF  00,E3
1142:  RCALL  09D0
1144:  MOVFF  CD,FEA
1148:  MOVFF  CC,FE9
114C:  MOVFF  03,CB
1150:  MOVFF  02,CA
1154:  MOVFF  01,C9
1158:  MOVFF  00,C8
....................    }  
115C:  INCF   2D,F
115E:  BRA    10EC
....................    promediopresion=promediopresion/media;    
1160:  CLRF   xE0
1162:  MOVFF  C7,DF
1166:  CALL   070E
116A:  MOVFF  CB,DE
116E:  MOVFF  CA,DD
1172:  MOVFF  C9,DC
1176:  MOVFF  C8,DB
117A:  MOVFF  03,E2
117E:  MOVFF  02,E1
1182:  MOVFF  01,E0
1186:  MOVFF  00,DF
118A:  CALL   0876
118E:  MOVFF  03,CB
1192:  MOVFF  02,CA
1196:  MOVFF  01,C9
119A:  MOVFF  00,C8
....................     
....................    return promediopresion; 
119E:  MOVFF  C8,00
11A2:  MOVFF  C9,01
11A6:  MOVFF  CA,02
11AA:  MOVFF  CB,03
.................... } 
11AE:  RETLW  00
....................  
.................... void Limita(void){ 
....................    if(Velocidad>4) 
*
0C3A:  BTFSC  34.7
0C3C:  BRA    0C48
0C3E:  MOVF   34,W
0C40:  SUBLW  04
0C42:  BC    0C48
....................       Velocidad=1; 
0C44:  MOVLW  01
0C46:  MOVWF  34
....................    if(Contrasena[0]>9) 
0C48:  MOVF   3C,W
0C4A:  SUBLW  09
0C4C:  BC    0C50
....................       Contrasena[0]=0; 
0C4E:  CLRF   3C
....................    if(Contrasena[1]>9) 
0C50:  MOVF   3D,W
0C52:  SUBLW  09
0C54:  BC    0C58
....................       Contrasena[1]=0; 
0C56:  CLRF   3D
....................    if(Contrasena[2]>9) 
0C58:  MOVF   3E,W
0C5A:  SUBLW  09
0C5C:  BC    0C60
....................       Contrasena[2]=0; 
0C5E:  CLRF   3E
....................    if(Contrasena[3]>9) 
0C60:  MOVF   3F,W
0C62:  SUBLW  09
0C64:  BC    0C68
....................       Contrasena[3]=0; 
0C66:  CLRF   3F
....................    if(tempo_minutos>60) 
0C68:  MOVF   28,W
0C6A:  SUBLW  3C
0C6C:  BC    0C70
....................       tempo_minutos=0; 
0C6E:  CLRF   28
....................    if(tempo_segundos) 
0C70:  MOVF   29,F
0C72:  BZ    0C76
....................       tempo_segundos=0; 
0C74:  CLRF   29
....................    if(segundos>60) 
0C76:  MOVF   22,W
0C78:  SUBLW  3C
0C7A:  BC    0C7E
....................       segundos=0; 
0C7C:  CLRF   22
....................    if(minutos>60) 
0C7E:  MOVF   23,W
0C80:  SUBLW  3C
0C82:  BC    0C86
....................       minutos=0;  
0C84:  CLRF   23
.................... } 
0C86:  GOTO   1CF6 (RETURN)
.................... void main () 
.................... { 
*
1862:  CLRF   FF8
1864:  BCF    FD0.7
1866:  BSF    07.7
1868:  CLRF   FEA
186A:  CLRF   FE9
186C:  BCF    17.0
186E:  BCF    17.1
1870:  BCF    17.2
1872:  BCF    17.3
1874:  BCF    17.4
1876:  BCF    17.5
1878:  BCF    17.6
187A:  BCF    17.7
187C:  BCF    18.0
187E:  BCF    18.1
1880:  BCF    18.2
1882:  BCF    18.3
1884:  CLRF   19
1886:  MOVLW  06
1888:  MOVWF  1A
188A:  MOVLW  02
188C:  MOVWF  1B
188E:  MOVLW  0B
1890:  MOVWF  1C
1892:  MOVLW  02
1894:  MOVWF  1D
1896:  MOVLW  03
1898:  MOVWF  1E
189A:  MOVLW  02
189C:  MOVWF  1F
189E:  MOVWF  20
18A0:  MOVLW  04
18A2:  MOVWF  21
18A4:  CLRF   22
18A6:  CLRF   23
18A8:  CLRF   24
18AA:  CLRF   25
18AC:  CLRF   26
18AE:  CLRF   27
18B0:  CLRF   28
18B2:  CLRF   29
18B4:  CLRF   2A
18B6:  CLRF   2B
18B8:  CLRF   2C
18BA:  CLRF   2D
18BC:  CLRF   2E
18BE:  MOVLW  01
18C0:  MOVWF  2F
18C2:  CLRF   30
18C4:  CLRF   31
18C6:  MOVLW  0A
18C8:  MOVWF  32
18CA:  CLRF   33
18CC:  MOVLW  01
18CE:  MOVWF  34
18D0:  CLRF   40
18D2:  CLRF   41
18D4:  CLRF   42
18D6:  CLRF   43
18D8:  CLRF   44
18DA:  CLRF   48
18DC:  CLRF   47
18DE:  CLRF   4A
18E0:  CLRF   49
18E2:  CLRF   x9E
18E4:  CLRF   x9D
18E6:  CLRF   x9C
18E8:  CLRF   x9B
18EA:  CLRF   xA2
18EC:  CLRF   xA1
18EE:  CLRF   xA0
18F0:  CLRF   x9F
18F2:  CLRF   xA6
18F4:  CLRF   xA5
18F6:  CLRF   xA4
18F8:  CLRF   xA3
18FA:  CLRF   xAA
18FC:  CLRF   xA9
18FE:  CLRF   xA8
1900:  CLRF   xA7
1902:  CLRF   xAE
1904:  CLRF   xAD
1906:  CLRF   xAC
1908:  CLRF   xAB
190A:  CLRF   xB2
190C:  CLRF   xB1
190E:  MOVLW  6B
1910:  MOVWF  xB0
1912:  MOVLW  86
1914:  MOVWF  xAF
1916:  CLRF   xB6
1918:  CLRF   xB5
191A:  CLRF   xB4
191C:  CLRF   xB3
191E:  CLRF   xBA
1920:  CLRF   xB9
1922:  CLRF   xB8
1924:  CLRF   xB7
1926:  CLRF   xBE
1928:  CLRF   xBD
192A:  CLRF   xBC
192C:  MOVLW  7F
192E:  MOVWF  xBB
1930:  CLRF   xC2
1932:  CLRF   xC1
1934:  CLRF   xC0
1936:  CLRF   xBF
1938:  CLRF   xC6
193A:  CLRF   xC5
193C:  CLRF   xC4
193E:  MOVLW  80
1940:  MOVWF  xC3
1942:  MOVF   FC1,W
1944:  ANDLW  C0
1946:  IORLW  0F
1948:  MOVWF  FC1
194A:  MOVLW  07
194C:  MOVWF  FB4
194E:  MOVLW  3E
1950:  MOVWF  35
1952:  MOVLW  20
1954:  MOVWF  36
1956:  MOVLW  5E
1958:  MOVWF  37
195A:  CLRF   38
195C:  CLRF   39
195E:  CLRF   3A
1960:  CLRF   3B
1962:  CLRF   3C
1964:  CLRF   3D
1966:  CLRF   3E
1968:  CLRF   3F
196A:  CLRF   4B
196C:  CLRF   4C
196E:  CLRF   4D
1970:  CLRF   4E
1972:  CLRF   4F
1974:  CLRF   50
1976:  CLRF   51
1978:  CLRF   52
197A:  CLRF   53
197C:  CLRF   54
197E:  CLRF   55
1980:  CLRF   56
1982:  CLRF   57
1984:  CLRF   58
1986:  CLRF   59
1988:  CLRF   5A
198A:  CLRF   5B
198C:  CLRF   5C
198E:  CLRF   5D
1990:  CLRF   5E
1992:  CLRF   5F
1994:  CLRF   x60
1996:  CLRF   x61
1998:  CLRF   x62
199A:  CLRF   x63
199C:  CLRF   x64
199E:  CLRF   x65
19A0:  CLRF   x66
19A2:  CLRF   x67
19A4:  CLRF   x68
19A6:  CLRF   x69
19A8:  CLRF   x6A
19AA:  CLRF   x6B
19AC:  CLRF   x6C
19AE:  CLRF   x6D
19B0:  CLRF   x6E
19B2:  CLRF   x6F
19B4:  CLRF   x70
19B6:  CLRF   x71
19B8:  CLRF   x72
19BA:  CLRF   x73
19BC:  CLRF   x74
19BE:  CLRF   x75
19C0:  CLRF   x76
19C2:  CLRF   x77
19C4:  CLRF   x78
19C6:  CLRF   x79
19C8:  CLRF   x7A
19CA:  CLRF   x7B
19CC:  CLRF   x7C
19CE:  CLRF   x7D
19D0:  CLRF   x7E
19D2:  CLRF   x7F
19D4:  CLRF   x80
19D6:  CLRF   x81
19D8:  CLRF   x82
19DA:  CLRF   x83
19DC:  CLRF   x84
19DE:  CLRF   x85
19E0:  CLRF   x86
19E2:  CLRF   x87
19E4:  CLRF   x88
19E6:  CLRF   x89
19E8:  CLRF   x8A
19EA:  CLRF   x8B
19EC:  CLRF   x8C
19EE:  CLRF   x8D
19F0:  CLRF   x8E
19F2:  CLRF   x8F
19F4:  CLRF   x90
19F6:  CLRF   x91
19F8:  CLRF   x92
19FA:  CLRF   x93
19FC:  CLRF   x94
19FE:  CLRF   x95
1A00:  CLRF   x96
1A02:  CLRF   x97
1A04:  CLRF   x98
1A06:  CLRF   x99
1A08:  CLRF   x9A
....................    output_d(0); 
1A0A:  CLRF   F95
1A0C:  CLRF   F8C
....................    lcd_init(); 
1A0E:  CALL   06B8
....................    enable_interrupts(global); 
1A12:  MOVLW  C0
1A14:  IORWF  FF2,F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1A16:  MOVLW  85
1A18:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1A1A:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
1A1C:  MOVF   FC1,W
1A1E:  ANDLW  C0
1A20:  IORLW  0D
1A22:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1A24:  BCF    FC0.0
1A26:  BSF    FC0.1
1A28:  BCF    FC0.2
1A2A:  BSF    FC0.7
1A2C:  BSF    FC2.0
....................    sensores(0); 
1A2E:  CLRF   xCC
1A30:  CALL   0744
....................    lcd_gotoxy(1,1); 
1A34:  MOVLW  01
1A36:  MOVWF  xD9
1A38:  MOVWF  xDA
1A3A:  CALL   0796
....................    printf(lcd_putc," MODULO  DE   FLUJO "); 
1A3E:  MOVLW  6A
1A40:  MOVWF  FF6
1A42:  MOVLW  01
1A44:  MOVWF  FF7
1A46:  CALL   0856
....................    lcd_gotoxy(1,2); 
1A4A:  MOVLW  01
1A4C:  MOVWF  xD9
1A4E:  MOVLW  02
1A50:  MOVWF  xDA
1A52:  CALL   0796
....................    printf(lcd_putc,"      LAMINAR       "); 
1A56:  MOVLW  80
1A58:  MOVWF  FF6
1A5A:  MOVLW  01
1A5C:  MOVWF  FF7
1A5E:  CALL   0856
....................    lcd_gotoxy(1,3); 
1A62:  MOVLW  01
1A64:  MOVWF  xD9
1A66:  MOVLW  03
1A68:  MOVWF  xDA
1A6A:  CALL   0796
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1A6E:  MOVLW  96
1A70:  MOVWF  FF6
1A72:  MOVLW  01
1A74:  MOVWF  FF7
1A76:  CALL   0856
....................    lcd_gotoxy(1,4); 
1A7A:  MOVLW  01
1A7C:  MOVWF  xD9
1A7E:  MOVLW  04
1A80:  MOVWF  xDA
1A82:  CALL   0796
....................    printf(lcd_putc," REF:  JPCFLVMD2434 "); 
1A86:  MOVLW  AC
1A88:  MOVWF  FF6
1A8A:  MOVLW  01
1A8C:  MOVWF  FF7
1A8E:  CALL   0856
....................    delay_ms(2000); 
1A92:  MOVLW  08
1A94:  MOVWF  xC7
1A96:  MOVLW  FA
1A98:  MOVWF  xDE
1A9A:  CALL   0626
1A9E:  DECFSZ xC7,F
1AA0:  BRA    1A96
....................    printf(lcd_putc,"\f"); 
1AA2:  MOVLW  0C
1AA4:  MOVWF  xD8
1AA6:  CALL   07F8
....................     
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................    Velocidad=read_eeprom(5); 
1AAA:  MOVFF  FF2,C7
1AAE:  BCF    FF2.7
1AB0:  MOVLW  05
1AB2:  MOVWF  FA9
1AB4:  BCF    FA6.6
1AB6:  BCF    FA6.7
1AB8:  BSF    FA6.0
1ABA:  MOVF   FA8,W
1ABC:  BTFSC  xC7.7
1ABE:  BSF    FF2.7
1AC0:  MOVWF  34
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1AC2:  MOVFF  FF2,C7
1AC6:  BCF    FF2.7
1AC8:  CLRF   FA9
1ACA:  BCF    FA6.6
1ACC:  BCF    FA6.7
1ACE:  BSF    FA6.0
1AD0:  MOVF   FA8,W
1AD2:  BTFSC  xC7.7
1AD4:  BSF    FF2.7
1AD6:  MOVWF  3C
1AD8:  MOVLW  14
1ADA:  MOVWF  xDE
1ADC:  CALL   0626
1AE0:  MOVFF  FF2,C7
1AE4:  BCF    FF2.7
1AE6:  MOVLW  01
1AE8:  MOVWF  FA9
1AEA:  BCF    FA6.6
1AEC:  BCF    FA6.7
1AEE:  BSF    FA6.0
1AF0:  MOVF   FA8,W
1AF2:  BTFSC  xC7.7
1AF4:  BSF    FF2.7
1AF6:  MOVWF  3D
1AF8:  MOVLW  14
1AFA:  MOVWF  xDE
1AFC:  CALL   0626
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1B00:  MOVFF  FF2,C7
1B04:  BCF    FF2.7
1B06:  MOVLW  02
1B08:  MOVWF  FA9
1B0A:  BCF    FA6.6
1B0C:  BCF    FA6.7
1B0E:  BSF    FA6.0
1B10:  MOVF   FA8,W
1B12:  BTFSC  xC7.7
1B14:  BSF    FF2.7
1B16:  MOVWF  3E
1B18:  MOVLW  14
1B1A:  MOVWF  xDE
1B1C:  CALL   0626
1B20:  MOVFF  FF2,C7
1B24:  BCF    FF2.7
1B26:  MOVLW  03
1B28:  MOVWF  FA9
1B2A:  BCF    FA6.6
1B2C:  BCF    FA6.7
1B2E:  BSF    FA6.0
1B30:  MOVF   FA8,W
1B32:  BTFSC  xC7.7
1B34:  BSF    FF2.7
1B36:  MOVWF  3F
1B38:  MOVLW  14
1B3A:  MOVWF  xDE
1B3C:  CALL   0626
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(21); 
1B40:  MOVFF  FF2,C7
1B44:  BCF    FF2.7
1B46:  MOVLW  14
1B48:  MOVWF  FA9
1B4A:  BCF    FA6.6
1B4C:  BCF    FA6.7
1B4E:  BSF    FA6.0
1B50:  MOVF   FA8,W
1B52:  BTFSC  xC7.7
1B54:  BSF    FF2.7
1B56:  MOVWF  28
1B58:  MOVFF  FF2,C7
1B5C:  BCF    FF2.7
1B5E:  MOVLW  15
1B60:  MOVWF  FA9
1B62:  BCF    FA6.6
1B64:  BCF    FA6.7
1B66:  BSF    FA6.0
1B68:  MOVF   FA8,W
1B6A:  BTFSC  xC7.7
1B6C:  BSF    FF2.7
1B6E:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1B70:  MOVFF  FF2,C7
1B74:  BCF    FF2.7
1B76:  MOVLW  32
1B78:  MOVWF  FA9
1B7A:  BCF    FA6.6
1B7C:  BCF    FA6.7
1B7E:  BSF    FA6.0
1B80:  MOVF   FA8,W
1B82:  BTFSC  xC7.7
1B84:  BSF    FF2.7
1B86:  MOVWF  22
1B88:  MOVFF  FF2,C7
1B8C:  BCF    FF2.7
1B8E:  MOVLW  33
1B90:  MOVWF  FA9
1B92:  BCF    FA6.6
1B94:  BCF    FA6.7
1B96:  BSF    FA6.0
1B98:  MOVF   FA8,W
1B9A:  BTFSC  xC7.7
1B9C:  BSF    FF2.7
1B9E:  MOVWF  23
1BA0:  MOVFF  FF2,C7
1BA4:  BCF    FF2.7
1BA6:  MOVLW  34
1BA8:  MOVWF  FA9
1BAA:  BCF    FA6.6
1BAC:  BCF    FA6.7
1BAE:  BSF    FA6.0
1BB0:  MOVF   FA8,W
1BB2:  BTFSC  xC7.7
1BB4:  BSF    FF2.7
1BB6:  MOVWF  24
1BB8:  MOVFF  FF2,C7
1BBC:  BCF    FF2.7
1BBE:  MOVLW  35
1BC0:  MOVWF  FA9
1BC2:  BCF    FA6.6
1BC4:  BCF    FA6.7
1BC6:  BSF    FA6.0
1BC8:  MOVF   FA8,W
1BCA:  BTFSC  xC7.7
1BCC:  BSF    FF2.7
1BCE:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1BD0:  MOVFF  FF2,C7
1BD4:  BCF    FF2.7
1BD6:  MOVLW  3C
1BD8:  MOVWF  FA9
1BDA:  BCF    FA6.6
1BDC:  BCF    FA6.7
1BDE:  BSF    FA6.0
1BE0:  MOVF   FA8,W
1BE2:  BTFSC  xC7.7
1BE4:  BSF    FF2.7
1BE6:  MOVWF  26
....................    G_h=read_eeprom(61); 
1BE8:  MOVFF  FF2,C7
1BEC:  BCF    FF2.7
1BEE:  MOVLW  3D
1BF0:  MOVWF  FA9
1BF2:  BCF    FA6.6
1BF4:  BCF    FA6.7
1BF6:  BSF    FA6.0
1BF8:  MOVF   FA8,W
1BFA:  BTFSC  xC7.7
1BFC:  BSF    FF2.7
1BFE:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1C00:  MOVFF  27,4A
1C04:  MOVFF  26,49
....................    G=G16; 
1C08:  MOVFF  4A,E0
1C0C:  MOVFF  49,DF
1C10:  CALL   070E
1C14:  MOVFF  03,C6
1C18:  MOVFF  02,C5
1C1C:  MOVFF  01,C4
1C20:  MOVFF  00,C3
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
1C24:  MOVFF  FF2,C7
1C28:  BCF    FF2.7
1C2A:  MOVLW  3C
1C2C:  MOVWF  FA9
1C2E:  BCF    FA6.6
1C30:  BCF    FA6.7
1C32:  BSF    FA6.0
1C34:  MOVF   FA8,W
1C36:  BTFSC  xC7.7
1C38:  BSF    FF2.7
1C3A:  MOVWF  43
....................    Temporal1=read_eeprom(61); 
1C3C:  MOVFF  FF2,C7
1C40:  BCF    FF2.7
1C42:  MOVLW  3D
1C44:  MOVWF  FA9
1C46:  BCF    FA6.6
1C48:  BCF    FA6.7
1C4A:  BSF    FA6.0
1C4C:  MOVF   FA8,W
1C4E:  BTFSC  xC7.7
1C50:  BSF    FF2.7
1C52:  CLRF   xE0
1C54:  MOVWF  xDF
1C56:  CALL   070E
1C5A:  MOVFF  03,B6
1C5E:  MOVFF  02,B5
1C62:  MOVFF  01,B4
1C66:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
1C6A:  MOVFF  B6,DE
1C6E:  MOVFF  B5,DD
1C72:  MOVFF  B4,DC
1C76:  MOVFF  B3,DB
1C7A:  CLRF   xE2
1C7C:  CLRF   xE1
1C7E:  MOVLW  48
1C80:  MOVWF  xE0
1C82:  MOVLW  85
1C84:  MOVWF  xDF
1C86:  CALL   0876
1C8A:  MOVFF  03,B6
1C8E:  MOVFF  02,B5
1C92:  MOVFF  01,B4
1C96:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
1C9A:  CLRF   xE0
1C9C:  MOVFF  43,DF
1CA0:  CALL   070E
1CA4:  BCF    FD8.1
1CA6:  MOVFF  03,E2
1CAA:  MOVFF  02,E1
1CAE:  MOVFF  01,E0
1CB2:  MOVFF  00,DF
1CB6:  MOVFF  B6,E6
1CBA:  MOVFF  B5,E5
1CBE:  MOVFF  B4,E4
1CC2:  MOVFF  B3,E3
1CC6:  CALL   09D0
1CCA:  MOVFF  03,AE
1CCE:  MOVFF  02,AD
1CD2:  MOVFF  01,AC
1CD6:  MOVFF  00,AB
....................     
....................    negativo=read_eeprom(70); 
1CDA:  MOVFF  FF2,C7
1CDE:  BCF    FF2.7
1CE0:  MOVLW  46
1CE2:  MOVWF  FA9
1CE4:  BCF    FA6.6
1CE6:  BCF    FA6.7
1CE8:  BSF    FA6.0
1CEA:  MOVF   FA8,W
1CEC:  BTFSC  xC7.7
1CEE:  BSF    FF2.7
1CF0:  MOVWF  32
....................    Limita(); 
1CF2:  GOTO   0C3A
....................    horas=make16(horasH,horasL); 
1CF6:  MOVFF  25,48
1CFA:  MOVFF  24,47
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1CFE:  MOVFF  28,2A
1D02:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1D06:  MOVF   19,F
1D08:  BTFSS  FD8.2
1D0A:  BRA    20B4
....................    lcd_gotoxy(1,1); 
1D0C:  MOVLW  01
1D0E:  MOVWF  xD9
1D10:  MOVWF  xDA
1D12:  CALL   0796
....................    printf(lcd_putc,"     Ingrese        "); 
1D16:  MOVLW  C2
1D18:  MOVWF  FF6
1D1A:  MOVLW  01
1D1C:  MOVWF  FF7
1D1E:  CALL   0856
....................    lcd_gotoxy(1,2); 
1D22:  MOVLW  01
1D24:  MOVWF  xD9
1D26:  MOVLW  02
1D28:  MOVWF  xDA
1D2A:  CALL   0796
....................    printf(lcd_putc,"    Contraseña      "); 
1D2E:  MOVLW  D8
1D30:  MOVWF  FF6
1D32:  MOVLW  01
1D34:  MOVWF  FF7
1D36:  CALL   0856
....................    lcd_gotoxy(1,3); 
1D3A:  MOVLW  01
1D3C:  MOVWF  xD9
1D3E:  MOVLW  03
1D40:  MOVWF  xDA
1D42:  CALL   0796
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1D46:  MOVLW  EE
1D48:  MOVWF  FF6
1D4A:  MOVLW  01
1D4C:  MOVWF  FF7
1D4E:  MOVLW  0A
1D50:  MOVWF  xCB
1D52:  CALL   0C8A
1D56:  MOVFF  38,C7
1D5A:  MOVLW  1F
1D5C:  MOVWF  xC8
1D5E:  CALL   0CD0
1D62:  MOVFF  39,C7
1D66:  MOVLW  1F
1D68:  MOVWF  xC8
1D6A:  CALL   0CD0
1D6E:  MOVFF  3A,C7
1D72:  MOVLW  1F
1D74:  MOVWF  xC8
1D76:  CALL   0CD0
1D7A:  MOVFF  3B,C7
1D7E:  MOVLW  1F
1D80:  MOVWF  xC8
1D82:  CALL   0CD0
1D86:  MOVLW  20
1D88:  MOVWF  xD8
1D8A:  CALL   07F8
1D8E:  MOVLW  20
1D90:  MOVWF  xD8
1D92:  CALL   07F8
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1D96:  BSF    F92.5
1D98:  BTFSS  F80.5
1D9A:  BRA    1DBE
....................       {  if(Flanco == 0)  
1D9C:  BTFSC  17.3
1D9E:  BRA    1DBC
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1DA0:  MOVLW  0B
1DA2:  SUBWF  1C,W
1DA4:  CLRF   03
1DA6:  ADDLW  38
1DA8:  MOVWF  FE9
1DAA:  MOVLW  00
1DAC:  ADDWFC 03,W
1DAE:  MOVWF  FEA
1DB0:  INCF   FEF,F
1DB2:  BSF    17.3
1DB4:  MOVLW  1E
1DB6:  MOVWF  xDE
1DB8:  CALL   0626
....................          else 
1DBC:  BRA    1DC0
....................             {Flanco = 0;} 
1DBE:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1DC0:  BSF    F96.0
1DC2:  BTFSS  F84.0
1DC4:  BRA    1DE8
....................       {  if(Flanco2 == 0)  
1DC6:  BTFSC  17.5
1DC8:  BRA    1DE6
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1DCA:  MOVLW  0B
1DCC:  SUBWF  1C,W
1DCE:  CLRF   03
1DD0:  ADDLW  38
1DD2:  MOVWF  FE9
1DD4:  MOVLW  00
1DD6:  ADDWFC 03,W
1DD8:  MOVWF  FEA
1DDA:  DECF   FEF,F
1DDC:  BSF    17.5
1DDE:  MOVLW  1E
1DE0:  MOVWF  xDE
1DE2:  CALL   0626
....................          else 
1DE6:  BRA    1DEA
....................             {Flanco2 = 0;} 
1DE8:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1DEA:  BSF    F96.1
1DEC:  BTFSS  F84.1
1DEE:  BRA    1E0A
....................       {  if(Flanco1 == 0)  
1DF0:  BTFSC  17.4
1DF2:  BRA    1E08
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1DF4:  BSF    17.4
1DF6:  INCF   1C,F
1DF8:  MOVLW  1E
1DFA:  MOVWF  xDE
1DFC:  CALL   0626
1E00:  MOVLW  0C
1E02:  MOVWF  xD8
1E04:  CALL   07F8
....................          else 
1E08:  BRA    1E0C
....................             {Flanco1 = 0;}    
1E0A:  BCF    17.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
1E0C:  BSF    F96.2
1E0E:  BTFSS  F84.2
1E10:  BRA    1E2C
....................       {  if(Flanco3 == 0)  
1E12:  BTFSC  17.6
1E14:  BRA    1E2A
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
1E16:  BSF    17.6
1E18:  DECF   1C,F
1E1A:  MOVLW  1E
1E1C:  MOVWF  xDE
1E1E:  CALL   0626
1E22:  MOVLW  0C
1E24:  MOVWF  xD8
1E26:  CALL   07F8
....................          else 
1E2A:  BRA    1E2E
....................             {Flanco3 = 0;}     
1E2C:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1E2E:  MOVLW  0B
1E30:  SUBWF  1C,W
1E32:  CLRF   03
1E34:  ADDLW  38
1E36:  MOVWF  FE9
1E38:  MOVLW  00
1E3A:  ADDWFC 03,W
1E3C:  MOVWF  FEA
1E3E:  BTFSC  FEF.7
1E40:  BRA    1E44
1E42:  BRA    1E58
....................        {clave[unidad-11]=9;} 
1E44:  MOVLW  0B
1E46:  SUBWF  1C,W
1E48:  CLRF   03
1E4A:  ADDLW  38
1E4C:  MOVWF  FE9
1E4E:  MOVLW  00
1E50:  ADDWFC 03,W
1E52:  MOVWF  FEA
1E54:  MOVLW  09
1E56:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1E58:  MOVLW  0B
1E5A:  SUBWF  1C,W
1E5C:  CLRF   03
1E5E:  ADDLW  38
1E60:  MOVWF  FE9
1E62:  MOVLW  00
1E64:  ADDWFC 03,W
1E66:  MOVWF  FEA
1E68:  BTFSC  FEF.7
1E6A:  BRA    1E84
1E6C:  MOVF   FEF,W
1E6E:  SUBLW  09
1E70:  BC    1E84
....................        {clave[unidad-11]=0;} 
1E72:  MOVLW  0B
1E74:  SUBWF  1C,W
1E76:  CLRF   03
1E78:  ADDLW  38
1E7A:  MOVWF  FE9
1E7C:  MOVLW  00
1E7E:  ADDWFC 03,W
1E80:  MOVWF  FEA
1E82:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1E84:  MOVF   1C,W
1E86:  SUBLW  0A
1E88:  BNC   1E8E
....................        {unidad=11;} 
1E8A:  MOVLW  0B
1E8C:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1E8E:  MOVFF  1C,D9
1E92:  MOVLW  04
1E94:  MOVWF  xDA
1E96:  CALL   0796
....................        lcd_putc(t[2]); 
1E9A:  MOVFF  37,D8
1E9E:  CALL   07F8
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1EA2:  MOVF   1C,W
1EA4:  SUBLW  0E
1EA6:  BTFSC  FD8.0
1EA8:  BRA    2090
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1EAA:  MOVF   38,W
1EAC:  SUBLW  03
1EAE:  BNZ   1F8A
1EB0:  MOVF   39,W
1EB2:  SUBLW  08
1EB4:  BNZ   1F8A
1EB6:  MOVF   3A,W
1EB8:  SUBLW  09
1EBA:  BNZ   1F8A
1EBC:  MOVF   3B,W
1EBE:  SUBLW  02
1EC0:  BNZ   1F8A
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1EC2:  CLRF   FA9
1EC4:  CLRF   FA8
1EC6:  BCF    FA6.6
1EC8:  BCF    FA6.7
1ECA:  BSF    FA6.2
1ECC:  MOVF   FF2,W
1ECE:  MOVWF  00
1ED0:  BCF    FF2.7
1ED2:  MOVLB  F
1ED4:  MOVLW  55
1ED6:  MOVWF  FA7
1ED8:  MOVLW  AA
1EDA:  MOVWF  FA7
1EDC:  BSF    FA6.1
1EDE:  BTFSC  FA6.1
1EE0:  BRA    1EDE
1EE2:  BCF    FA6.2
1EE4:  MOVF   00,W
1EE6:  IORWF  FF2,F
1EE8:  MOVLW  14
1EEA:  MOVLB  0
1EEC:  MOVWF  xDE
1EEE:  CALL   0626
1EF2:  MOVLW  01
1EF4:  MOVWF  FA9
1EF6:  CLRF   FA8
1EF8:  BCF    FA6.6
1EFA:  BCF    FA6.7
1EFC:  BSF    FA6.2
1EFE:  MOVF   FF2,W
1F00:  MOVWF  00
1F02:  BCF    FF2.7
1F04:  MOVLB  F
1F06:  MOVLW  55
1F08:  MOVWF  FA7
1F0A:  MOVLW  AA
1F0C:  MOVWF  FA7
1F0E:  BSF    FA6.1
1F10:  BTFSC  FA6.1
1F12:  BRA    1F10
1F14:  BCF    FA6.2
1F16:  MOVF   00,W
1F18:  IORWF  FF2,F
1F1A:  MOVLW  14
1F1C:  MOVLB  0
1F1E:  MOVWF  xDE
1F20:  CALL   0626
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1F24:  MOVLW  02
1F26:  MOVWF  FA9
1F28:  CLRF   FA8
1F2A:  BCF    FA6.6
1F2C:  BCF    FA6.7
1F2E:  BSF    FA6.2
1F30:  MOVF   FF2,W
1F32:  MOVWF  00
1F34:  BCF    FF2.7
1F36:  MOVLB  F
1F38:  MOVLW  55
1F3A:  MOVWF  FA7
1F3C:  MOVLW  AA
1F3E:  MOVWF  FA7
1F40:  BSF    FA6.1
1F42:  BTFSC  FA6.1
1F44:  BRA    1F42
1F46:  BCF    FA6.2
1F48:  MOVF   00,W
1F4A:  IORWF  FF2,F
1F4C:  MOVLW  14
1F4E:  MOVLB  0
1F50:  MOVWF  xDE
1F52:  CALL   0626
1F56:  MOVLW  03
1F58:  MOVWF  FA9
1F5A:  CLRF   FA8
1F5C:  BCF    FA6.6
1F5E:  BCF    FA6.7
1F60:  BSF    FA6.2
1F62:  MOVF   FF2,W
1F64:  MOVWF  00
1F66:  BCF    FF2.7
1F68:  MOVLB  F
1F6A:  MOVLW  55
1F6C:  MOVWF  FA7
1F6E:  MOVLW  AA
1F70:  MOVWF  FA7
1F72:  BSF    FA6.1
1F74:  BTFSC  FA6.1
1F76:  BRA    1F74
1F78:  BCF    FA6.2
1F7A:  MOVF   00,W
1F7C:  IORWF  FF2,F
1F7E:  MOVLW  14
1F80:  MOVLB  0
1F82:  MOVWF  xDE
1F84:  CALL   0626
....................              reset_cpu();} 
1F88:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1F8A:  MOVF   3C,W
1F8C:  SUBWF  38,W
1F8E:  BNZ   2022
1F90:  MOVF   3D,W
1F92:  SUBWF  39,W
1F94:  BNZ   2022
1F96:  MOVF   3E,W
1F98:  SUBWF  3A,W
1F9A:  BNZ   2022
1F9C:  MOVF   3F,W
1F9E:  SUBWF  3B,W
1FA0:  BNZ   2022
....................             {lcd_gotoxy(1,1); 
1FA2:  MOVLW  01
1FA4:  MOVWF  xD9
1FA6:  MOVWF  xDA
1FA8:  CALL   0796
....................             printf(lcd_putc,"                   "); 
1FAC:  MOVLW  04
1FAE:  MOVWF  FF6
1FB0:  MOVLW  02
1FB2:  MOVWF  FF7
1FB4:  CALL   0856
....................             lcd_gotoxy(1,2); 
1FB8:  MOVLW  01
1FBA:  MOVWF  xD9
1FBC:  MOVLW  02
1FBE:  MOVWF  xDA
1FC0:  CALL   0796
....................             printf(lcd_putc,"     Contraseña    "); 
1FC4:  MOVLW  18
1FC6:  MOVWF  FF6
1FC8:  MOVLW  02
1FCA:  MOVWF  FF7
1FCC:  CALL   0856
....................             lcd_gotoxy(1,3); 
1FD0:  MOVLW  01
1FD2:  MOVWF  xD9
1FD4:  MOVLW  03
1FD6:  MOVWF  xDA
1FD8:  CALL   0796
....................             printf(lcd_putc,"      Correcta     "); 
1FDC:  MOVLW  2C
1FDE:  MOVWF  FF6
1FE0:  MOVLW  02
1FE2:  MOVWF  FF7
1FE4:  CALL   0856
....................             lcd_gotoxy(1,4); 
1FE8:  MOVLW  01
1FEA:  MOVWF  xD9
1FEC:  MOVLW  04
1FEE:  MOVWF  xDA
1FF0:  CALL   0796
....................             printf(lcd_putc,"                   "); 
1FF4:  MOVLW  40
1FF6:  MOVWF  FF6
1FF8:  MOVLW  02
1FFA:  MOVWF  FF7
1FFC:  CALL   0856
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
2000:  MOVLW  04
2002:  MOVWF  xC7
2004:  MOVLW  FA
2006:  MOVWF  xDE
2008:  CALL   0626
200C:  DECFSZ xC7,F
200E:  BRA    2004
2010:  MOVLW  64
2012:  MOVWF  19
2014:  MOVLW  0B
2016:  MOVWF  1C
2018:  MOVLW  0C
201A:  MOVWF  xD8
201C:  CALL   07F8
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2020:  BRA    2090
....................          {lcd_gotoxy(1,1); 
2022:  MOVLW  01
2024:  MOVWF  xD9
2026:  MOVWF  xDA
2028:  CALL   0796
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
202C:  MOVLW  01
202E:  MOVWF  xD9
2030:  MOVLW  02
2032:  MOVWF  xDA
2034:  CALL   0796
....................             printf(lcd_putc,"     Contraseña    "); 
2038:  MOVLW  54
203A:  MOVWF  FF6
203C:  MOVLW  02
203E:  MOVWF  FF7
2040:  CALL   0856
....................             lcd_gotoxy(1,3); 
2044:  MOVLW  01
2046:  MOVWF  xD9
2048:  MOVLW  03
204A:  MOVWF  xDA
204C:  CALL   0796
....................             printf(lcd_putc,"     Incorrecta    "); 
2050:  MOVLW  68
2052:  MOVWF  FF6
2054:  MOVLW  02
2056:  MOVWF  FF7
2058:  CALL   0856
....................             lcd_gotoxy(1,4); 
205C:  MOVLW  01
205E:  MOVWF  xD9
2060:  MOVLW  04
2062:  MOVWF  xDA
2064:  CALL   0796
....................             printf(lcd_putc,"                   "); 
2068:  MOVLW  7C
206A:  MOVWF  FF6
206C:  MOVLW  02
206E:  MOVWF  FF7
2070:  CALL   0856
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
2074:  MOVLW  04
2076:  MOVWF  xC7
2078:  MOVLW  FA
207A:  MOVWF  xDE
207C:  CALL   0626
2080:  DECFSZ xC7,F
2082:  BRA    2078
2084:  MOVLW  0B
2086:  MOVWF  1C
2088:  MOVLW  0C
208A:  MOVWF  xD8
208C:  CALL   07F8
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
2090:  MOVF   1C,W
2092:  SUBLW  0B
2094:  BC    20B4
2096:  MOVF   1C,W
2098:  SUBLW  0D
209A:  BNC   20B4
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
209C:  MOVLW  01
209E:  SUBWF  1C,W
20A0:  MOVWF  xC7
20A2:  MOVWF  xD9
20A4:  MOVLW  04
20A6:  MOVWF  xDA
20A8:  CALL   0796
....................             lcd_putc(t[1]); 
20AC:  MOVFF  36,D8
20B0:  CALL   07F8
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
20B4:  DECFSZ 19,W
20B6:  BRA    22A8
....................    lcd_gotoxy(1,1); 
20B8:  MOVLW  01
20BA:  MOVWF  xD9
20BC:  MOVWF  xDA
20BE:  CALL   0796
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
20C2:  MOVLW  90
20C4:  MOVWF  FF6
20C6:  MOVLW  02
20C8:  MOVWF  FF7
20CA:  CALL   0856
....................       if(paso<0) 
20CE:  BTFSC  33.7
20D0:  BRA    20D4
20D2:  BRA    20D6
....................         {paso=0;} 
20D4:  CLRF   33
....................          
....................       if(UP)//Si oprime hacia arriba 
20D6:  BSF    F92.5
20D8:  BTFSS  F80.5
20DA:  BRA    20F6
....................       { 
....................          if(Flanco == 0) 
20DC:  BTFSC  17.3
20DE:  BRA    20F4
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
20E0:  DECF   1F,F
20E2:  DECF   1D,F
20E4:  MOVLW  01
20E6:  ADDWF  1D,W
20E8:  MOVWF  1E
20EA:  BSF    17.3
20EC:  MOVLW  1E
20EE:  MOVWF  xDE
20F0:  CALL   0626
....................          } 
....................       } 
....................       else 
20F4:  BRA    20F8
....................       { 
....................          Flanco = 0; 
20F6:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
20F8:  BSF    F96.0
20FA:  BTFSS  F84.0
20FC:  BRA    2118
....................       { 
....................          if(Flanco2 == 0) 
20FE:  BTFSC  17.5
2100:  BRA    2116
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
2102:  INCF   1F,F
2104:  INCF   1D,F
2106:  MOVLW  01
2108:  SUBWF  1D,W
210A:  MOVWF  1E
210C:  BSF    17.5
210E:  MOVLW  1E
2110:  MOVWF  xDE
2112:  CALL   0626
....................          } 
....................       } 
....................       else 
2116:  BRA    211A
....................       { 
....................          Flanco2 = 0; 
2118:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
211A:  MOVF   1F,W
211C:  SUBWF  21,W
211E:  BC    2130
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2120:  INCF   33,F
2122:  MOVFF  1F,21
2126:  MOVLW  02
2128:  SUBWF  21,W
212A:  MOVWF  20
212C:  MOVLW  04
212E:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
2130:  MOVF   20,W
2132:  SUBWF  1F,W
2134:  BC    2146
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2136:  DECF   33,F
2138:  MOVFF  1F,20
213C:  MOVLW  02
213E:  ADDWF  20,W
2140:  MOVWF  21
2142:  MOVLW  02
2144:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
2146:  MOVF   1F,W
2148:  SUBWF  1A,W
214A:  BC    215E
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
214C:  MOVFF  1B,1F
2150:  MOVLW  02
2152:  MOVWF  1D
2154:  CLRF   33
2156:  MOVFF  1F,20
215A:  ADDWF  20,W
215C:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
215E:  MOVF   1B,W
2160:  SUBWF  1F,W
2162:  BC    217A
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
2164:  MOVFF  1A,1F
2168:  MOVLW  04
216A:  MOVWF  1D
216C:  SUBWF  1A,W
216E:  MOVWF  33
2170:  MOVFF  1F,21
2174:  MOVLW  02
2176:  SUBWF  21,W
2178:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
217A:  MOVLW  01
217C:  ADDWF  33,W
217E:  MOVWF  xC7
2180:  MOVWF  xC8
2182:  MOVLW  02
2184:  MOVWF  xC9
2186:  CALL   0D98
....................         mensajes(2+paso,3); 
218A:  MOVLW  02
218C:  ADDWF  33,W
218E:  MOVWF  xC7
2190:  MOVWF  xC8
2192:  MOVLW  03
2194:  MOVWF  xC9
2196:  CALL   0D98
....................         mensajes(3+paso,4); 
219A:  MOVLW  03
219C:  ADDWF  33,W
219E:  MOVWF  xC7
21A0:  MOVWF  xC8
21A2:  MOVLW  04
21A4:  MOVWF  xC9
21A6:  CALL   0D98
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
21AA:  MOVLW  01
21AC:  MOVWF  xD9
21AE:  MOVFF  1D,DA
21B2:  CALL   0796
....................         lcd_putc(t[0]); 
21B6:  MOVFF  35,D8
21BA:  CALL   07F8
....................  
....................         if(Flecha==2) 
21BE:  MOVF   1D,W
21C0:  SUBLW  02
21C2:  BNZ   21EC
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
21C4:  MOVLW  01
21C6:  MOVWF  xD9
21C8:  MOVLW  04
21CA:  MOVWF  xDA
21CC:  CALL   0796
....................             lcd_putc(t[1]); 
21D0:  MOVFF  36,D8
21D4:  CALL   07F8
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21D8:  MOVLW  01
21DA:  MOVWF  xD9
21DC:  MOVLW  03
21DE:  MOVWF  xDA
21E0:  CALL   0796
....................             lcd_putc(t[1]); 
21E4:  MOVFF  36,D8
21E8:  CALL   07F8
....................           } 
....................          
....................         if(Flecha==4) 
21EC:  MOVF   1D,W
21EE:  SUBLW  04
21F0:  BNZ   221A
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
21F2:  MOVLW  01
21F4:  MOVWF  xD9
21F6:  MOVLW  02
21F8:  MOVWF  xDA
21FA:  CALL   0796
....................             lcd_putc(t[1]); 
21FE:  MOVFF  36,D8
2202:  CALL   07F8
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2206:  MOVLW  01
2208:  MOVWF  xD9
220A:  MOVLW  03
220C:  MOVWF  xDA
220E:  CALL   0796
....................             lcd_putc(t[1]); 
2212:  MOVFF  36,D8
2216:  CALL   07F8
....................           } 
....................          
....................         if(Flecha==3) 
221A:  MOVF   1D,W
221C:  SUBLW  03
221E:  BNZ   2248
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2220:  MOVLW  01
2222:  MOVWF  xD9
2224:  MOVLW  04
2226:  MOVWF  xDA
2228:  CALL   0796
....................             lcd_putc(t[1]); 
222C:  MOVFF  36,D8
2230:  CALL   07F8
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2234:  MOVLW  01
2236:  MOVWF  xD9
2238:  MOVLW  02
223A:  MOVWF  xDA
223C:  CALL   0796
....................             lcd_putc(t[1]); 
2240:  MOVFF  36,D8
2244:  CALL   07F8
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
2248:  BSF    F96.1
224A:  BTFSS  F84.1
224C:  BRA    2284
....................        { 
....................          if(Flanco1 == 0) 
224E:  BTFSC  17.4
2250:  BRA    2282
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2252:  BSF    17.4
2254:  MOVFF  1F,19
2258:  MOVLW  03
225A:  MOVWF  1D
225C:  MOVLW  02
225E:  MOVWF  xC7
2260:  MOVLW  96
2262:  MOVWF  xDE
2264:  CALL   0626
2268:  DECFSZ xC7,F
226A:  BRA    2260
226C:  MOVLW  0C
226E:  MOVWF  xD8
2270:  CALL   07F8
....................             if(Menu==6) 
2274:  MOVF   19,W
2276:  SUBLW  06
2278:  BNZ   2282
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
227A:  CLRF   38
227C:  CLRF   39
227E:  CLRF   3A
2280:  CLRF   3B
....................             } 
....................          } 
....................        } 
....................        else 
2282:  BRA    2286
....................        { 
....................          Flanco1 = 0; 
2284:  BCF    17.4
....................        } 
....................              
....................        if(LEFT) 
2286:  BSF    F96.2
2288:  BTFSS  F84.2
228A:  BRA    22A8
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
228C:  MOVLW  64
228E:  MOVWF  19
2290:  MOVLW  0C
2292:  MOVWF  xD8
2294:  CALL   07F8
2298:  MOVLW  02
229A:  MOVWF  xC7
229C:  MOVLW  FA
229E:  MOVWF  xDE
22A0:  CALL   0626
22A4:  DECFSZ xC7,F
22A6:  BRA    229C
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
22A8:  MOVF   19,W
22AA:  SUBLW  02
22AC:  BTFSS  FD8.2
22AE:  BRA    24E2
....................     
....................    lcd_gotoxy(1,1); 
22B0:  MOVLW  01
22B2:  MOVWF  xD9
22B4:  MOVWF  xDA
22B6:  CALL   0796
....................    printf(lcd_putc,"    Temporizador     "); 
22BA:  MOVLW  A6
22BC:  MOVWF  FF6
22BE:  MOVLW  02
22C0:  MOVWF  FF7
22C2:  CALL   0856
....................    lcd_gotoxy(1,2); 
22C6:  MOVLW  01
22C8:  MOVWF  xD9
22CA:  MOVLW  02
22CC:  MOVWF  xDA
22CE:  CALL   0796
....................    printf(lcd_putc,"       Luz UV        "); 
22D2:  MOVLW  BC
22D4:  MOVWF  FF6
22D6:  MOVLW  02
22D8:  MOVWF  FF7
22DA:  CALL   0856
....................    lcd_gotoxy(6,3); 
22DE:  MOVLW  06
22E0:  MOVWF  xD9
22E2:  MOVLW  03
22E4:  MOVWF  xDA
22E6:  CALL   0796
....................    printf(lcd_putc,"%02u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
22EA:  MOVFF  2A,C7
22EE:  MOVLW  01
22F0:  MOVWF  xC8
22F2:  CALL   0E1A
22F6:  MOVLW  3A
22F8:  MOVWF  xD8
22FA:  CALL   07F8
22FE:  MOVFF  2B,C7
2302:  MOVLW  01
2304:  MOVWF  xC8
2306:  CALL   0E1A
230A:  MOVLW  DB
230C:  MOVWF  FF6
230E:  MOVLW  02
2310:  MOVWF  FF7
2312:  MOVLW  08
2314:  MOVWF  xCB
2316:  CALL   0C8A
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
231A:  MOVLW  06
231C:  ADDWF  2F,W
231E:  MOVWF  xC7
2320:  MOVWF  xD9
2322:  MOVLW  04
2324:  MOVWF  xDA
2326:  CALL   0796
....................    lcd_putc(t[2]); 
232A:  MOVFF  37,D8
232E:  CALL   07F8
....................     
....................    if(UP) 
2332:  BSF    F92.5
2334:  BTFSS  F80.5
2336:  BRA    2372
....................    { 
....................       if(unidad2==1) 
2338:  DECFSZ 2F,W
233A:  BRA    2354
....................       { 
....................          if(tempo_minutos_pro<61) 
233C:  MOVF   2A,W
233E:  SUBLW  3C
2340:  BNC   2354
....................          { 
....................             tempo_minutos_pro++;delay_ms(300); 
2342:  INCF   2A,F
2344:  MOVLW  02
2346:  MOVWF  xC7
2348:  MOVLW  96
234A:  MOVWF  xDE
234C:  CALL   0626
2350:  DECFSZ xC7,F
2352:  BRA    2348
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
2354:  MOVF   2F,W
2356:  SUBLW  03
2358:  BNZ   2372
....................       { 
....................          if(tempo_segundos_pro<60) 
235A:  MOVF   2B,W
235C:  SUBLW  3B
235E:  BNC   2372
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
2360:  INCF   2B,F
2362:  MOVLW  02
2364:  MOVWF  xC7
2366:  MOVLW  96
2368:  MOVWF  xDE
236A:  CALL   0626
236E:  DECFSZ xC7,F
2370:  BRA    2366
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2372:  BSF    F96.0
2374:  BTFSS  F84.0
2376:  BRA    23E2
....................    { 
....................       if(unidad2==1) 
2378:  DECFSZ 2F,W
237A:  BRA    23AC
....................       { 
....................          if(tempo_minutos_pro>0) 
237C:  MOVF   2A,F
237E:  BZ    2392
....................          { 
....................             tempo_minutos_pro--;delay_ms(300); 
2380:  DECF   2A,F
2382:  MOVLW  02
2384:  MOVWF  xC7
2386:  MOVLW  96
2388:  MOVWF  xDE
238A:  CALL   0626
238E:  DECFSZ xC7,F
2390:  BRA    2386
....................          } 
....................           
....................          if(tempo_minutos_pro>60) 
2392:  MOVF   2A,W
2394:  SUBLW  3C
2396:  BC    23AC
....................          { 
....................             tempo_minutos_pro=60;delay_ms(300); 
2398:  MOVLW  3C
239A:  MOVWF  2A
239C:  MOVLW  02
239E:  MOVWF  xC7
23A0:  MOVLW  96
23A2:  MOVWF  xDE
23A4:  CALL   0626
23A8:  DECFSZ xC7,F
23AA:  BRA    23A0
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
23AC:  MOVF   2F,W
23AE:  SUBLW  03
23B0:  BNZ   23E2
....................       { 
....................          if(tempo_segundos_pro>0) 
23B2:  MOVF   2B,F
23B4:  BZ    23C8
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
23B6:  DECF   2B,F
23B8:  MOVLW  02
23BA:  MOVWF  xC7
23BC:  MOVLW  96
23BE:  MOVWF  xDE
23C0:  CALL   0626
23C4:  DECFSZ xC7,F
23C6:  BRA    23BC
....................          } 
....................           
....................          if(tempo_segundos_pro>60) 
23C8:  MOVF   2B,W
23CA:  SUBLW  3C
23CC:  BC    23E2
....................          { 
....................             tempo_segundos_pro=60;delay_ms(300); 
23CE:  MOVLW  3C
23D0:  MOVWF  2B
23D2:  MOVLW  02
23D4:  MOVWF  xC7
23D6:  MOVLW  96
23D8:  MOVWF  xDE
23DA:  CALL   0626
23DE:  DECFSZ xC7,F
23E0:  BRA    23D6
....................          } 
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
23E2:  BSF    F96.1
23E4:  BTFSS  F84.1
23E6:  BRA    2414
....................    { 
....................       if(unidad2==1) 
23E8:  DECFSZ 2F,W
23EA:  BRA    23F2
....................       { 
....................          unidad2=3; 
23EC:  MOVLW  03
23EE:  MOVWF  2F
....................       } 
....................       else 
23F0:  BRA    23FC
....................       { 
....................          if(unidad2==3) 
23F2:  MOVF   2F,W
23F4:  SUBLW  03
23F6:  BNZ   23FC
....................          { 
....................             unidad2=1; 
23F8:  MOVLW  01
23FA:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
23FC:  MOVLW  02
23FE:  MOVWF  xC7
2400:  MOVLW  FA
2402:  MOVWF  xDE
2404:  CALL   0626
2408:  DECFSZ xC7,F
240A:  BRA    2400
....................       printf(lcd_putc,"\f"); 
240C:  MOVLW  0C
240E:  MOVWF  xD8
2410:  CALL   07F8
....................    } 
....................     
....................    if(LEFT) 
2414:  BSF    F96.2
2416:  BTFSS  F84.2
2418:  BRA    24E2
....................    { 
....................       delay_ms(200); 
241A:  MOVLW  C8
241C:  MOVWF  xDE
241E:  CALL   0626
....................       printf(lcd_putc,"\f"); 
2422:  MOVLW  0C
2424:  MOVWF  xD8
2426:  CALL   07F8
....................       lcd_gotoxy(1,2); 
242A:  MOVLW  01
242C:  MOVWF  xD9
242E:  MOVLW  02
2430:  MOVWF  xDA
2432:  CALL   0796
....................       printf(lcd_putc,"Tiempo Almacenado"); 
2436:  MOVLW  E4
2438:  MOVWF  FF6
243A:  MOVLW  02
243C:  MOVWF  FF7
243E:  CALL   0856
....................       lcd_gotoxy(1,3); 
2442:  MOVLW  01
2444:  MOVWF  xD9
2446:  MOVLW  03
2448:  MOVWF  xDA
244A:  CALL   0796
....................       printf(lcd_putc,"  Correctamente  "); 
244E:  MOVLW  F6
2450:  MOVWF  FF6
2452:  MOVLW  02
2454:  MOVWF  FF7
2456:  CALL   0856
....................       write_eeprom(20,tempo_minutos_pro);write_eeprom(21,tempo_segundos_pro); 
245A:  MOVLW  14
245C:  MOVWF  FA9
245E:  MOVFF  2A,FA8
2462:  BCF    FA6.6
2464:  BCF    FA6.7
2466:  BSF    FA6.2
2468:  MOVF   FF2,W
246A:  MOVWF  00
246C:  BCF    FF2.7
246E:  MOVLB  F
2470:  MOVLW  55
2472:  MOVWF  FA7
2474:  MOVLW  AA
2476:  MOVWF  FA7
2478:  BSF    FA6.1
247A:  BTFSC  FA6.1
247C:  BRA    247A
247E:  BCF    FA6.2
2480:  MOVF   00,W
2482:  IORWF  FF2,F
2484:  MOVLW  15
2486:  MOVWF  FA9
2488:  MOVFF  2B,FA8
248C:  BCF    FA6.6
248E:  BCF    FA6.7
2490:  BSF    FA6.2
2492:  MOVF   FF2,W
2494:  MOVWF  00
2496:  BCF    FF2.7
2498:  MOVLW  55
249A:  MOVWF  FA7
249C:  MOVLW  AA
249E:  MOVWF  FA7
24A0:  BSF    FA6.1
24A2:  BTFSC  FA6.1
24A4:  BRA    24A2
24A6:  BCF    FA6.2
24A8:  MOVF   00,W
24AA:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
24AC:  MOVFF  2A,28
24B0:  MOVFF  2B,29
....................       delay_ms(700); 
24B4:  MOVLW  04
24B6:  MOVLB  0
24B8:  MOVWF  xC7
24BA:  MOVLW  AF
24BC:  MOVWF  xDE
24BE:  CALL   0626
24C2:  DECFSZ xC7,F
24C4:  BRA    24BA
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
24C6:  MOVLW  1E
24C8:  MOVWF  xDE
24CA:  CALL   0626
24CE:  MOVLW  01
24D0:  MOVWF  19
24D2:  CLRF   33
24D4:  MOVLW  02
24D6:  MOVWF  1D
24D8:  MOVWF  1F
24DA:  MOVLW  0C
24DC:  MOVWF  xD8
24DE:  CALL   07F8
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de estado de Motor Ventilador 
24E2:  MOVF   19,W
24E4:  SUBLW  03
24E6:  BTFSS  FD8.2
24E8:  BRA    26B4
....................    lcd_gotoxy(1,1); 
24EA:  MOVLW  01
24EC:  MOVWF  xD9
24EE:  MOVWF  xDA
24F0:  CALL   0796
....................    printf(lcd_putc,"Seleccione Velocidad"); 
24F4:  MOVLW  08
24F6:  MOVWF  FF6
24F8:  MOVLW  03
24FA:  MOVWF  FF7
24FC:  CALL   0856
....................    lcd_gotoxy(1,2); 
2500:  MOVLW  01
2502:  MOVWF  xD9
2504:  MOVLW  02
2506:  MOVWF  xDA
2508:  CALL   0796
....................    printf(lcd_putc,"    de Ventilador   "); 
250C:  MOVLW  1E
250E:  MOVWF  FF6
2510:  MOVLW  03
2512:  MOVWF  FF7
2514:  CALL   0856
....................    lcd_gotoxy(8,3); 
2518:  MOVLW  08
251A:  MOVWF  xD9
251C:  MOVLW  03
251E:  MOVWF  xDA
2520:  CALL   0796
....................    printf(lcd_putc,"%i ",Velocidad); 
2524:  MOVFF  34,C7
2528:  MOVLW  1F
252A:  MOVWF  xC8
252C:  CALL   0CD0
2530:  MOVLW  20
2532:  MOVWF  xD8
2534:  CALL   07F8
....................  
....................    if(UP)//Si oprime hacia arriba 
2538:  BSF    F92.5
253A:  BTFSS  F80.5
253C:  BRA    2550
....................       {  if(Flanco == 0)  
253E:  BTFSC  17.3
2540:  BRA    254E
....................             {Velocidad++;Flanco = 1;delay_ms(30);}} 
2542:  INCF   34,F
2544:  BSF    17.3
2546:  MOVLW  1E
2548:  MOVWF  xDE
254A:  CALL   0626
....................          else 
254E:  BRA    2552
....................             {Flanco = 0;} 
2550:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2552:  BSF    F96.0
2554:  BTFSS  F84.0
2556:  BRA    256A
....................       {  if(Flanco2 == 0)  
2558:  BTFSC  17.5
255A:  BRA    2568
....................             {Velocidad--;Flanco2 = 1;delay_ms(30);}} 
255C:  DECF   34,F
255E:  BSF    17.5
2560:  MOVLW  1E
2562:  MOVWF  xDE
2564:  CALL   0626
....................          else 
2568:  BRA    256C
....................             {Flanco2 = 0;} 
256A:  BCF    17.5
....................        
....................              
....................       if(LEFT)//Si oprime Izquierda 
256C:  BSF    F96.2
256E:  BTFSS  F84.2
2570:  BRA    2596
....................       {  if(Flanco3 == 0)  
2572:  BTFSC  17.6
2574:  BRA    2594
....................             {Flecha=2;Flecha2=2;Flanco3 = 1;Menu=1; paso=0;delay_ms(500);}} 
2576:  MOVLW  02
2578:  MOVWF  1D
257A:  MOVWF  1F
257C:  BSF    17.6
257E:  MOVLW  01
2580:  MOVWF  19
2582:  CLRF   33
2584:  MOVLW  02
2586:  MOVWF  xC7
2588:  MOVLW  FA
258A:  MOVWF  xDE
258C:  CALL   0626
2590:  DECFSZ xC7,F
2592:  BRA    2588
....................          else 
2594:  BRA    2598
....................             {Flanco3 = 0;} 
2596:  BCF    17.6
....................          if(Velocidad<1) 
2598:  BTFSC  34.7
259A:  BRA    25A2
259C:  MOVF   34,W
259E:  SUBLW  00
25A0:  BNC   25A6
....................             {Velocidad=4;} 
25A2:  MOVLW  04
25A4:  MOVWF  34
....................          if(Velocidad>4) 
25A6:  BTFSC  34.7
25A8:  BRA    25B4
25AA:  MOVF   34,W
25AC:  SUBLW  04
25AE:  BC    25B4
....................             {Velocidad=1;}     
25B0:  MOVLW  01
25B2:  MOVWF  34
....................                      
....................       if(RIGHT)// Si oprime Derecha 
25B4:  BSF    F96.1
25B6:  BTFSS  F84.1
25B8:  BRA    269E
....................       {  if(Flanco1 == 0)  
25BA:  BTFSC  17.4
25BC:  BRA    269C
....................             {Flanco1 = 1;Menu=1;paso=0; write_eeprom(5,Velocidad); 
25BE:  BSF    17.4
25C0:  MOVLW  01
25C2:  MOVWF  19
25C4:  CLRF   33
25C6:  MOVLW  05
25C8:  MOVWF  FA9
25CA:  MOVFF  34,FA8
25CE:  BCF    FA6.6
25D0:  BCF    FA6.7
25D2:  BSF    FA6.2
25D4:  MOVF   FF2,W
25D6:  MOVWF  00
25D8:  BCF    FF2.7
25DA:  MOVLB  F
25DC:  MOVLW  55
25DE:  MOVWF  FA7
25E0:  MOVLW  AA
25E2:  MOVWF  FA7
25E4:  BSF    FA6.1
25E6:  BTFSC  FA6.1
25E8:  BRA    25E6
25EA:  BCF    FA6.2
25EC:  MOVF   00,W
25EE:  IORWF  FF2,F
....................                 
....................              if(estadomv==1) 
25F0:  BTFSS  17.2
25F2:  BRA    25FE
....................                {velocidades(Velocidad);} 
25F4:  MOVFF  34,C9
25F8:  MOVLB  0
25FA:  CALL   0E80
....................                 
....................                lcd_gotoxy(1,1); 
25FE:  MOVLW  01
2600:  MOVLB  0
2602:  MOVWF  xD9
2604:  MOVWF  xDA
2606:  CALL   0796
....................                printf(lcd_putc,"                    "); 
260A:  MOVLW  34
260C:  MOVWF  FF6
260E:  MOVLW  03
2610:  MOVWF  FF7
2612:  CALL   0856
....................                lcd_gotoxy(1,2); 
2616:  MOVLW  01
2618:  MOVWF  xD9
261A:  MOVLW  02
261C:  MOVWF  xDA
261E:  CALL   0796
....................                printf(lcd_putc,"   Ha seleccionado  "); 
2622:  MOVLW  4A
2624:  MOVWF  FF6
2626:  MOVLW  03
2628:  MOVWF  FF7
262A:  CALL   0856
....................                lcd_gotoxy(1,3); 
262E:  MOVLW  01
2630:  MOVWF  xD9
2632:  MOVLW  03
2634:  MOVWF  xDA
2636:  CALL   0796
....................                printf(lcd_putc,"  la velocidad  %i  ",Velocidad); 
263A:  MOVLW  60
263C:  MOVWF  FF6
263E:  MOVLW  03
2640:  MOVWF  FF7
2642:  MOVLW  10
2644:  MOVWF  xCB
2646:  CALL   0C8A
264A:  MOVFF  34,C7
264E:  MOVLW  1F
2650:  MOVWF  xC8
2652:  CALL   0CD0
2656:  MOVLW  20
2658:  MOVWF  xD8
265A:  CALL   07F8
265E:  MOVLW  20
2660:  MOVWF  xD8
2662:  CALL   07F8
....................                lcd_gotoxy(1,4); 
2666:  MOVLW  01
2668:  MOVWF  xD9
266A:  MOVLW  04
266C:  MOVWF  xDA
266E:  CALL   0796
....................                printf(lcd_putc,"                    "); 
2672:  MOVLW  76
2674:  MOVWF  FF6
2676:  MOVLW  03
2678:  MOVWF  FF7
267A:  CALL   0856
....................               
....................             delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
267E:  MOVLW  04
2680:  MOVWF  xC7
2682:  MOVLW  FA
2684:  MOVWF  xDE
2686:  CALL   0626
268A:  DECFSZ xC7,F
268C:  BRA    2682
268E:  MOVLW  02
2690:  MOVWF  1D
2692:  MOVWF  1F
2694:  MOVLW  0C
2696:  MOVWF  xD8
2698:  CALL   07F8
....................          else 
269C:  BRA    26A0
....................             {Flanco1 = 0;}    
269E:  BCF    17.4
....................  
....................         lcd_gotoxy(6,Flecha);// Para mostrar la flecha de seleccion 
26A0:  MOVLW  06
26A2:  MOVWF  xD9
26A4:  MOVFF  1D,DA
26A8:  CALL   0796
....................         lcd_putc(t[0]); 
26AC:  MOVFF  35,D8
26B0:  CALL   07F8
....................          
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu para Cambio de Contraseña 
26B4:  MOVF   19,W
26B6:  SUBLW  04
26B8:  BTFSS  FD8.2
26BA:  BRA    29B4
....................    lcd_gotoxy(1,1); 
26BC:  MOVLW  01
26BE:  MOVWF  xD9
26C0:  MOVWF  xDA
26C2:  CALL   0796
....................    printf(lcd_putc,"      Ingrese       "); 
26C6:  MOVLW  8C
26C8:  MOVWF  FF6
26CA:  MOVLW  03
26CC:  MOVWF  FF7
26CE:  CALL   0856
....................    lcd_gotoxy(1,2); 
26D2:  MOVLW  01
26D4:  MOVWF  xD9
26D6:  MOVLW  02
26D8:  MOVWF  xDA
26DA:  CALL   0796
....................    printf(lcd_putc," Contraseña Actual  "); 
26DE:  MOVLW  A2
26E0:  MOVWF  FF6
26E2:  MOVLW  03
26E4:  MOVWF  FF7
26E6:  CALL   0856
....................    lcd_gotoxy(1,3); 
26EA:  MOVLW  01
26EC:  MOVWF  xD9
26EE:  MOVLW  03
26F0:  MOVWF  xDA
26F2:  CALL   0796
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
26F6:  MOVLW  B8
26F8:  MOVWF  FF6
26FA:  MOVLW  03
26FC:  MOVWF  FF7
26FE:  MOVLW  0A
2700:  MOVWF  xCB
2702:  CALL   0C8A
2706:  MOVFF  38,C7
270A:  MOVLW  1F
270C:  MOVWF  xC8
270E:  CALL   0CD0
2712:  MOVFF  39,C7
2716:  MOVLW  1F
2718:  MOVWF  xC8
271A:  CALL   0CD0
271E:  MOVFF  3A,C7
2722:  MOVLW  1F
2724:  MOVWF  xC8
2726:  CALL   0CD0
272A:  MOVFF  3B,C7
272E:  MOVLW  1F
2730:  MOVWF  xC8
2732:  CALL   0CD0
2736:  MOVLW  20
2738:  MOVWF  xD8
273A:  CALL   07F8
273E:  MOVLW  20
2740:  MOVWF  xD8
2742:  CALL   07F8
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2746:  BSF    F92.5
2748:  BTFSS  F80.5
274A:  BRA    276E
....................       {  if(Flanco == 0)  
274C:  BTFSC  17.3
274E:  BRA    276C
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2750:  MOVLW  0B
2752:  SUBWF  1C,W
2754:  CLRF   03
2756:  ADDLW  38
2758:  MOVWF  FE9
275A:  MOVLW  00
275C:  ADDWFC 03,W
275E:  MOVWF  FEA
2760:  INCF   FEF,F
2762:  BSF    17.3
2764:  MOVLW  1E
2766:  MOVWF  xDE
2768:  CALL   0626
....................          else 
276C:  BRA    2770
....................             {Flanco = 0;} 
276E:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2770:  BSF    F96.0
2772:  BTFSS  F84.0
2774:  BRA    2798
....................       {  if(Flanco2 == 0)  
2776:  BTFSC  17.5
2778:  BRA    2796
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
277A:  MOVLW  0B
277C:  SUBWF  1C,W
277E:  CLRF   03
2780:  ADDLW  38
2782:  MOVWF  FE9
2784:  MOVLW  00
2786:  ADDWFC 03,W
2788:  MOVWF  FEA
278A:  DECF   FEF,F
278C:  BSF    17.5
278E:  MOVLW  1E
2790:  MOVWF  xDE
2792:  CALL   0626
....................          else 
2796:  BRA    279A
....................             {Flanco2 = 0;} 
2798:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
279A:  BSF    F96.1
279C:  BTFSS  F84.1
279E:  BRA    27BA
....................       {  if(Flanco1 == 0)  
27A0:  BTFSC  17.4
27A2:  BRA    27B8
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
27A4:  BSF    17.4
27A6:  INCF   1C,F
27A8:  MOVLW  1E
27AA:  MOVWF  xDE
27AC:  CALL   0626
27B0:  MOVLW  0C
27B2:  MOVWF  xD8
27B4:  CALL   07F8
....................          else 
27B8:  BRA    27BC
....................             {Flanco1 = 0;}    
27BA:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
27BC:  BSF    F96.2
27BE:  BTFSS  F84.2
27C0:  BRA    27DC
....................       {  if(Flanco3 == 0)  
27C2:  BTFSC  17.6
27C4:  BRA    27DA
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
27C6:  BSF    17.6
27C8:  DECF   1C,F
27CA:  MOVLW  1E
27CC:  MOVWF  xDE
27CE:  CALL   0626
27D2:  MOVLW  0C
27D4:  MOVWF  xD8
27D6:  CALL   07F8
....................          else 
27DA:  BRA    27DE
....................             {Flanco3 = 0;}     
27DC:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
27DE:  MOVLW  0B
27E0:  SUBWF  1C,W
27E2:  CLRF   03
27E4:  ADDLW  38
27E6:  MOVWF  FE9
27E8:  MOVLW  00
27EA:  ADDWFC 03,W
27EC:  MOVWF  FEA
27EE:  BTFSC  FEF.7
27F0:  BRA    27F4
27F2:  BRA    2808
....................        {clave[unidad-11]=9;} 
27F4:  MOVLW  0B
27F6:  SUBWF  1C,W
27F8:  CLRF   03
27FA:  ADDLW  38
27FC:  MOVWF  FE9
27FE:  MOVLW  00
2800:  ADDWFC 03,W
2802:  MOVWF  FEA
2804:  MOVLW  09
2806:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2808:  MOVLW  0B
280A:  SUBWF  1C,W
280C:  CLRF   03
280E:  ADDLW  38
2810:  MOVWF  FE9
2812:  MOVLW  00
2814:  ADDWFC 03,W
2816:  MOVWF  FEA
2818:  BTFSC  FEF.7
281A:  BRA    2834
281C:  MOVF   FEF,W
281E:  SUBLW  09
2820:  BC    2834
....................        {clave[unidad-11]=0;} 
2822:  MOVLW  0B
2824:  SUBWF  1C,W
2826:  CLRF   03
2828:  ADDLW  38
282A:  MOVWF  FE9
282C:  MOVLW  00
282E:  ADDWFC 03,W
2830:  MOVWF  FEA
2832:  CLRF   FEF
....................        if(unidad<11) 
2834:  MOVF   1C,W
2836:  SUBLW  0A
2838:  BNC   285A
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
283A:  MOVLW  01
283C:  MOVWF  19
283E:  CLRF   33
2840:  MOVLW  02
2842:  MOVWF  1D
2844:  MOVWF  1F
2846:  MOVLW  0B
2848:  MOVWF  1C
284A:  MOVLW  02
284C:  MOVWF  xC7
284E:  MOVLW  FA
2850:  MOVWF  xDE
2852:  CALL   0626
2856:  DECFSZ xC7,F
2858:  BRA    284E
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
285A:  MOVFF  1C,D9
285E:  MOVLW  04
2860:  MOVWF  xDA
2862:  CALL   0796
....................        lcd_putc(t[2]); 
2866:  MOVFF  37,D8
286A:  CALL   07F8
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
286E:  MOVF   1C,W
2870:  SUBLW  0E
2872:  BTFSC  FD8.0
2874:  BRA    2990
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2876:  MOVF   3C,W
2878:  SUBWF  38,W
287A:  BNZ   2916
287C:  MOVF   3D,W
287E:  SUBWF  39,W
2880:  BNZ   2916
2882:  MOVF   3E,W
2884:  SUBWF  3A,W
2886:  BNZ   2916
2888:  MOVF   3F,W
288A:  SUBWF  3B,W
288C:  BNZ   2916
....................             {lcd_gotoxy(1,1); 
288E:  MOVLW  01
2890:  MOVWF  xD9
2892:  MOVWF  xDA
2894:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2898:  MOVLW  CE
289A:  MOVWF  FF6
289C:  MOVLW  03
289E:  MOVWF  FF7
28A0:  CALL   0856
....................             lcd_gotoxy(1,2); 
28A4:  MOVLW  01
28A6:  MOVWF  xD9
28A8:  MOVLW  02
28AA:  MOVWF  xDA
28AC:  CALL   0796
....................             printf(lcd_putc,"     Contraseña     "); 
28B0:  MOVLW  E4
28B2:  MOVWF  FF6
28B4:  MOVLW  03
28B6:  MOVWF  FF7
28B8:  CALL   0856
....................             lcd_gotoxy(1,3); 
28BC:  MOVLW  01
28BE:  MOVWF  xD9
28C0:  MOVLW  03
28C2:  MOVWF  xDA
28C4:  CALL   0796
....................             printf(lcd_putc,"      Correcta      "); 
28C8:  MOVLW  FA
28CA:  MOVWF  FF6
28CC:  MOVLW  03
28CE:  MOVWF  FF7
28D0:  CALL   0856
....................             lcd_gotoxy(1,4); 
28D4:  MOVLW  01
28D6:  MOVWF  xD9
28D8:  MOVLW  04
28DA:  MOVWF  xDA
28DC:  CALL   0796
....................             printf(lcd_putc,"                    "); 
28E0:  MOVLW  10
28E2:  MOVWF  FF6
28E4:  MOVLW  04
28E6:  MOVWF  FF7
28E8:  CALL   0856
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
28EC:  MOVLW  02
28EE:  MOVWF  xC7
28F0:  MOVLW  FA
28F2:  MOVWF  xDE
28F4:  CALL   0626
28F8:  DECFSZ xC7,F
28FA:  BRA    28F0
28FC:  MOVLW  3D
28FE:  MOVWF  19
2900:  MOVLW  0B
2902:  MOVWF  1C
2904:  MOVLW  0C
2906:  MOVWF  xD8
2908:  CALL   07F8
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
290C:  CLRF   38
290E:  CLRF   39
2910:  CLRF   3A
2912:  CLRF   3B
....................          else 
2914:  BRA    2990
....................          {lcd_gotoxy(1,1); 
2916:  MOVLW  01
2918:  MOVWF  xD9
291A:  MOVWF  xDA
291C:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2920:  MOVLW  26
2922:  MOVWF  FF6
2924:  MOVLW  04
2926:  MOVWF  FF7
2928:  CALL   0856
....................             lcd_gotoxy(1,2); 
292C:  MOVLW  01
292E:  MOVWF  xD9
2930:  MOVLW  02
2932:  MOVWF  xDA
2934:  CALL   0796
....................             printf(lcd_putc,"     Contraseña     "); 
2938:  MOVLW  3C
293A:  MOVWF  FF6
293C:  MOVLW  04
293E:  MOVWF  FF7
2940:  CALL   0856
....................             lcd_gotoxy(1,3); 
2944:  MOVLW  01
2946:  MOVWF  xD9
2948:  MOVLW  03
294A:  MOVWF  xDA
294C:  CALL   0796
....................             printf(lcd_putc,"     Incorrecta     "); 
2950:  MOVLW  52
2952:  MOVWF  FF6
2954:  MOVLW  04
2956:  MOVWF  FF7
2958:  CALL   0856
....................             lcd_gotoxy(1,4); 
295C:  MOVLW  01
295E:  MOVWF  xD9
2960:  MOVLW  04
2962:  MOVWF  xDA
2964:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2968:  MOVLW  68
296A:  MOVWF  FF6
296C:  MOVLW  04
296E:  MOVWF  FF7
2970:  CALL   0856
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2974:  MOVLW  02
2976:  MOVWF  xC7
2978:  MOVLW  FA
297A:  MOVWF  xDE
297C:  CALL   0626
2980:  DECFSZ xC7,F
2982:  BRA    2978
2984:  MOVLW  0B
2986:  MOVWF  1C
2988:  MOVLW  0C
298A:  MOVWF  xD8
298C:  CALL   07F8
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2990:  MOVF   1C,W
2992:  SUBLW  0B
2994:  BC    29B4
2996:  MOVF   1C,W
2998:  SUBLW  0D
299A:  BNC   29B4
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
299C:  MOVLW  01
299E:  SUBWF  1C,W
29A0:  MOVWF  xC7
29A2:  MOVWF  xD9
29A4:  MOVLW  04
29A6:  MOVWF  xDA
29A8:  CALL   0796
....................             lcd_putc(t[1]); 
29AC:  MOVFF  36,D8
29B0:  CALL   07F8
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
29B4:  MOVF   19,W
29B6:  SUBLW  3D
29B8:  BTFSS  FD8.2
29BA:  BRA    2CCA
....................    lcd_gotoxy(1,1); 
29BC:  MOVLW  01
29BE:  MOVWF  xD9
29C0:  MOVWF  xDA
29C2:  CALL   0796
....................    printf(lcd_putc,"     Ingrese        "); 
29C6:  MOVLW  7E
29C8:  MOVWF  FF6
29CA:  MOVLW  04
29CC:  MOVWF  FF7
29CE:  CALL   0856
....................    lcd_gotoxy(1,2); 
29D2:  MOVLW  01
29D4:  MOVWF  xD9
29D6:  MOVLW  02
29D8:  MOVWF  xDA
29DA:  CALL   0796
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
29DE:  MOVLW  94
29E0:  MOVWF  FF6
29E2:  MOVLW  04
29E4:  MOVWF  FF7
29E6:  CALL   0856
....................    lcd_gotoxy(1,3); 
29EA:  MOVLW  01
29EC:  MOVWF  xD9
29EE:  MOVLW  03
29F0:  MOVWF  xDA
29F2:  CALL   0796
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
29F6:  MOVLW  AA
29F8:  MOVWF  FF6
29FA:  MOVLW  04
29FC:  MOVWF  FF7
29FE:  MOVLW  0A
2A00:  MOVWF  xCB
2A02:  CALL   0C8A
2A06:  MOVFF  38,C7
2A0A:  MOVLW  1F
2A0C:  MOVWF  xC8
2A0E:  CALL   0CD0
2A12:  MOVFF  39,C7
2A16:  MOVLW  1F
2A18:  MOVWF  xC8
2A1A:  CALL   0CD0
2A1E:  MOVFF  3A,C7
2A22:  MOVLW  1F
2A24:  MOVWF  xC8
2A26:  CALL   0CD0
2A2A:  MOVFF  3B,C7
2A2E:  MOVLW  1F
2A30:  MOVWF  xC8
2A32:  CALL   0CD0
2A36:  MOVLW  20
2A38:  MOVWF  xD8
2A3A:  CALL   07F8
2A3E:  MOVLW  20
2A40:  MOVWF  xD8
2A42:  CALL   07F8
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2A46:  BSF    F92.5
2A48:  BTFSS  F80.5
2A4A:  BRA    2A6E
....................       {  if(Flanco == 0)  
2A4C:  BTFSC  17.3
2A4E:  BRA    2A6C
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2A50:  MOVLW  0B
2A52:  SUBWF  1C,W
2A54:  CLRF   03
2A56:  ADDLW  38
2A58:  MOVWF  FE9
2A5A:  MOVLW  00
2A5C:  ADDWFC 03,W
2A5E:  MOVWF  FEA
2A60:  INCF   FEF,F
2A62:  BSF    17.3
2A64:  MOVLW  1E
2A66:  MOVWF  xDE
2A68:  CALL   0626
....................          else 
2A6C:  BRA    2A70
....................             {Flanco = 0;} 
2A6E:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2A70:  BSF    F96.0
2A72:  BTFSS  F84.0
2A74:  BRA    2A98
....................       {  if(Flanco2 == 0)  
2A76:  BTFSC  17.5
2A78:  BRA    2A96
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2A7A:  MOVLW  0B
2A7C:  SUBWF  1C,W
2A7E:  CLRF   03
2A80:  ADDLW  38
2A82:  MOVWF  FE9
2A84:  MOVLW  00
2A86:  ADDWFC 03,W
2A88:  MOVWF  FEA
2A8A:  DECF   FEF,F
2A8C:  BSF    17.5
2A8E:  MOVLW  1E
2A90:  MOVWF  xDE
2A92:  CALL   0626
....................          else 
2A96:  BRA    2A9A
....................             {Flanco2 = 0;} 
2A98:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
2A9A:  BSF    F96.1
2A9C:  BTFSS  F84.1
2A9E:  BRA    2ABA
....................       {  if(Flanco1 == 0)  
2AA0:  BTFSC  17.4
2AA2:  BRA    2AB8
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2AA4:  BSF    17.4
2AA6:  INCF   1C,F
2AA8:  MOVLW  1E
2AAA:  MOVWF  xDE
2AAC:  CALL   0626
2AB0:  MOVLW  0C
2AB2:  MOVWF  xD8
2AB4:  CALL   07F8
....................          else 
2AB8:  BRA    2ABC
....................             {Flanco1 = 0;}    
2ABA:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2ABC:  BSF    F96.2
2ABE:  BTFSS  F84.2
2AC0:  BRA    2ADC
....................       {  if(Flanco3 == 0)  
2AC2:  BTFSC  17.6
2AC4:  BRA    2ADA
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2AC6:  BSF    17.6
2AC8:  DECF   1C,F
2ACA:  MOVLW  1E
2ACC:  MOVWF  xDE
2ACE:  CALL   0626
2AD2:  MOVLW  0C
2AD4:  MOVWF  xD8
2AD6:  CALL   07F8
....................          else 
2ADA:  BRA    2ADE
....................             {Flanco3 = 0;}     
2ADC:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2ADE:  MOVLW  0B
2AE0:  SUBWF  1C,W
2AE2:  CLRF   03
2AE4:  ADDLW  38
2AE6:  MOVWF  FE9
2AE8:  MOVLW  00
2AEA:  ADDWFC 03,W
2AEC:  MOVWF  FEA
2AEE:  BTFSC  FEF.7
2AF0:  BRA    2AF4
2AF2:  BRA    2B08
....................        {clave[unidad-11]=9;} 
2AF4:  MOVLW  0B
2AF6:  SUBWF  1C,W
2AF8:  CLRF   03
2AFA:  ADDLW  38
2AFC:  MOVWF  FE9
2AFE:  MOVLW  00
2B00:  ADDWFC 03,W
2B02:  MOVWF  FEA
2B04:  MOVLW  09
2B06:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2B08:  MOVLW  0B
2B0A:  SUBWF  1C,W
2B0C:  CLRF   03
2B0E:  ADDLW  38
2B10:  MOVWF  FE9
2B12:  MOVLW  00
2B14:  ADDWFC 03,W
2B16:  MOVWF  FEA
2B18:  BTFSC  FEF.7
2B1A:  BRA    2B34
2B1C:  MOVF   FEF,W
2B1E:  SUBLW  09
2B20:  BC    2B34
....................        {clave[unidad-11]=0;} 
2B22:  MOVLW  0B
2B24:  SUBWF  1C,W
2B26:  CLRF   03
2B28:  ADDLW  38
2B2A:  MOVWF  FE9
2B2C:  MOVLW  00
2B2E:  ADDWFC 03,W
2B30:  MOVWF  FEA
2B32:  CLRF   FEF
....................        if(unidad<11) 
2B34:  MOVF   1C,W
2B36:  SUBLW  0A
2B38:  BNC   2B42
....................        {Menu=5;unidad=11;} 
2B3A:  MOVLW  05
2B3C:  MOVWF  19
2B3E:  MOVLW  0B
2B40:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2B42:  MOVFF  1C,D9
2B46:  MOVLW  04
2B48:  MOVWF  xDA
2B4A:  CALL   0796
....................        lcd_putc(t[2]); 
2B4E:  MOVFF  37,D8
2B52:  CALL   07F8
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2B56:  MOVF   1C,W
2B58:  SUBLW  0E
2B5A:  BTFSC  FD8.0
2B5C:  BRA    2CA6
....................        { 
....................             lcd_gotoxy(1,1); 
2B5E:  MOVLW  01
2B60:  MOVWF  xD9
2B62:  MOVWF  xDA
2B64:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2B68:  MOVLW  C0
2B6A:  MOVWF  FF6
2B6C:  MOVLW  04
2B6E:  MOVWF  FF7
2B70:  CALL   0856
....................             lcd_gotoxy(1,2); 
2B74:  MOVLW  01
2B76:  MOVWF  xD9
2B78:  MOVLW  02
2B7A:  MOVWF  xDA
2B7C:  CALL   0796
....................             printf(lcd_putc,"     Contraseña     "); 
2B80:  MOVLW  D6
2B82:  MOVWF  FF6
2B84:  MOVLW  04
2B86:  MOVWF  FF7
2B88:  CALL   0856
....................             lcd_gotoxy(1,3); 
2B8C:  MOVLW  01
2B8E:  MOVWF  xD9
2B90:  MOVLW  03
2B92:  MOVWF  xDA
2B94:  CALL   0796
....................             printf(lcd_putc,"     Almacenada     "); 
2B98:  MOVLW  EC
2B9A:  MOVWF  FF6
2B9C:  MOVLW  04
2B9E:  MOVWF  FF7
2BA0:  CALL   0856
....................             lcd_gotoxy(1,4); 
2BA4:  MOVLW  01
2BA6:  MOVWF  xD9
2BA8:  MOVLW  04
2BAA:  MOVWF  xDA
2BAC:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2BB0:  MOVLW  02
2BB2:  MOVWF  FF6
2BB4:  MOVLW  05
2BB6:  MOVWF  FF7
2BB8:  CALL   0856
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2BBC:  CLRF   FA9
2BBE:  MOVFF  38,FA8
2BC2:  BCF    FA6.6
2BC4:  BCF    FA6.7
2BC6:  BSF    FA6.2
2BC8:  MOVF   FF2,W
2BCA:  MOVWF  00
2BCC:  BCF    FF2.7
2BCE:  MOVLB  F
2BD0:  MOVLW  55
2BD2:  MOVWF  FA7
2BD4:  MOVLW  AA
2BD6:  MOVWF  FA7
2BD8:  BSF    FA6.1
2BDA:  BTFSC  FA6.1
2BDC:  BRA    2BDA
2BDE:  BCF    FA6.2
2BE0:  MOVF   00,W
2BE2:  IORWF  FF2,F
2BE4:  MOVLW  14
2BE6:  MOVLB  0
2BE8:  MOVWF  xDE
2BEA:  CALL   0626
2BEE:  MOVLW  01
2BF0:  MOVWF  FA9
2BF2:  MOVFF  39,FA8
2BF6:  BCF    FA6.6
2BF8:  BCF    FA6.7
2BFA:  BSF    FA6.2
2BFC:  MOVF   FF2,W
2BFE:  MOVWF  00
2C00:  BCF    FF2.7
2C02:  MOVLB  F
2C04:  MOVLW  55
2C06:  MOVWF  FA7
2C08:  MOVLW  AA
2C0A:  MOVWF  FA7
2C0C:  BSF    FA6.1
2C0E:  BTFSC  FA6.1
2C10:  BRA    2C0E
2C12:  BCF    FA6.2
2C14:  MOVF   00,W
2C16:  IORWF  FF2,F
2C18:  MOVLW  14
2C1A:  MOVLB  0
2C1C:  MOVWF  xDE
2C1E:  CALL   0626
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2C22:  MOVLW  02
2C24:  MOVWF  FA9
2C26:  MOVFF  3A,FA8
2C2A:  BCF    FA6.6
2C2C:  BCF    FA6.7
2C2E:  BSF    FA6.2
2C30:  MOVF   FF2,W
2C32:  MOVWF  00
2C34:  BCF    FF2.7
2C36:  MOVLB  F
2C38:  MOVLW  55
2C3A:  MOVWF  FA7
2C3C:  MOVLW  AA
2C3E:  MOVWF  FA7
2C40:  BSF    FA6.1
2C42:  BTFSC  FA6.1
2C44:  BRA    2C42
2C46:  BCF    FA6.2
2C48:  MOVF   00,W
2C4A:  IORWF  FF2,F
2C4C:  MOVLW  14
2C4E:  MOVLB  0
2C50:  MOVWF  xDE
2C52:  CALL   0626
2C56:  MOVLW  03
2C58:  MOVWF  FA9
2C5A:  MOVFF  3B,FA8
2C5E:  BCF    FA6.6
2C60:  BCF    FA6.7
2C62:  BSF    FA6.2
2C64:  MOVF   FF2,W
2C66:  MOVWF  00
2C68:  BCF    FF2.7
2C6A:  MOVLB  F
2C6C:  MOVLW  55
2C6E:  MOVWF  FA7
2C70:  MOVLW  AA
2C72:  MOVWF  FA7
2C74:  BSF    FA6.1
2C76:  BTFSC  FA6.1
2C78:  BRA    2C76
2C7A:  BCF    FA6.2
2C7C:  MOVF   00,W
2C7E:  IORWF  FF2,F
2C80:  MOVLW  14
2C82:  MOVLB  0
2C84:  MOVWF  xDE
2C86:  CALL   0626
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2C8A:  MOVLW  02
2C8C:  MOVWF  xC7
2C8E:  MOVLW  FA
2C90:  MOVWF  xDE
2C92:  CALL   0626
2C96:  DECFSZ xC7,F
2C98:  BRA    2C8E
2C9A:  MOVLW  01
2C9C:  MOVWF  19
2C9E:  CLRF   33
2CA0:  MOVLW  02
2CA2:  MOVWF  1D
2CA4:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2CA6:  MOVF   1C,W
2CA8:  SUBLW  0B
2CAA:  BC    2CCA
2CAC:  MOVF   1C,W
2CAE:  SUBLW  0D
2CB0:  BNC   2CCA
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2CB2:  MOVLW  01
2CB4:  SUBWF  1C,W
2CB6:  MOVWF  xC7
2CB8:  MOVWF  xD9
2CBA:  MOVLW  04
2CBC:  MOVWF  xDA
2CBE:  CALL   0796
....................             lcd_putc(t[1]); 
2CC2:  MOVFF  36,D8
2CC6:  CALL   07F8
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de tiempo de trabajo de Luz UV 
2CCA:  MOVF   19,W
2CCC:  SUBLW  05
2CCE:  BNZ   2D42
....................    lcd_gotoxy(1,1); 
2CD0:  MOVLW  01
2CD2:  MOVWF  xD9
2CD4:  MOVWF  xDA
2CD6:  CALL   0796
....................    printf(lcd_putc,"  Duracion Actual   "); 
2CDA:  MOVLW  18
2CDC:  MOVWF  FF6
2CDE:  MOVLW  05
2CE0:  MOVWF  FF7
2CE2:  CALL   0856
....................    lcd_gotoxy(1,2); 
2CE6:  MOVLW  01
2CE8:  MOVWF  xD9
2CEA:  MOVLW  02
2CEC:  MOVWF  xDA
2CEE:  CALL   0796
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2CF2:  MOVLW  2E
2CF4:  MOVWF  FF6
2CF6:  MOVLW  05
2CF8:  MOVWF  FF7
2CFA:  MOVLW  0B
2CFC:  MOVWF  xCB
2CFE:  CALL   0C8A
2D02:  MOVLW  08
2D04:  MOVWF  FE9
2D06:  MOVFF  48,C8
2D0A:  MOVFF  47,C7
2D0E:  GOTO   0EEC
2D12:  MOVLW  20
2D14:  MOVWF  xD8
2D16:  CALL   07F8
2D1A:  MOVLW  20
2D1C:  MOVWF  xD8
2D1E:  CALL   07F8
2D22:  MOVLW  20
2D24:  MOVWF  xD8
2D26:  CALL   07F8
....................    lcd_gotoxy(1,4); 
2D2A:  MOVLW  01
2D2C:  MOVWF  xD9
2D2E:  MOVLW  04
2D30:  MOVWF  xDA
2D32:  CALL   0796
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2D36:  MOVLW  42
2D38:  MOVWF  FF6
2D3A:  MOVLW  05
2D3C:  MOVWF  FF7
2D3E:  CALL   0856
....................     
....................    } 
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2D42:  BSF    F92.5
2D44:  BTFSS  F80.5
2D46:  BRA    2E38
2D48:  BSF    F96.1
2D4A:  BTFSS  F84.1
2D4C:  BRA    2E38
....................       {   
....................          delay_ms(200); 
2D4E:  MOVLW  C8
2D50:  MOVWF  xDE
2D52:  CALL   0626
....................          printf(lcd_putc,"\f"); 
2D56:  MOVLW  0C
2D58:  MOVWF  xD8
2D5A:  CALL   07F8
....................          lcd_gotoxy(1,2); 
2D5E:  MOVLW  01
2D60:  MOVWF  xD9
2D62:  MOVLW  02
2D64:  MOVWF  xDA
2D66:  CALL   0796
....................          printf(lcd_putc," Reset de tiempo "); 
2D6A:  MOVLW  58
2D6C:  MOVWF  FF6
2D6E:  MOVLW  05
2D70:  MOVWF  FF7
2D72:  CALL   0856
....................          lcd_gotoxy(1,3); 
2D76:  MOVLW  01
2D78:  MOVWF  xD9
2D7A:  MOVLW  03
2D7C:  MOVWF  xDA
2D7E:  CALL   0796
....................          printf(lcd_putc,"     Exitoso     "); 
2D82:  MOVLW  6A
2D84:  MOVWF  FF6
2D86:  MOVLW  05
2D88:  MOVWF  FF7
2D8A:  CALL   0856
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2D8E:  MOVLW  32
2D90:  MOVWF  FA9
2D92:  CLRF   FA8
2D94:  BCF    FA6.6
2D96:  BCF    FA6.7
2D98:  BSF    FA6.2
2D9A:  MOVF   FF2,W
2D9C:  MOVWF  00
2D9E:  BCF    FF2.7
2DA0:  MOVLB  F
2DA2:  MOVLW  55
2DA4:  MOVWF  FA7
2DA6:  MOVLW  AA
2DA8:  MOVWF  FA7
2DAA:  BSF    FA6.1
2DAC:  BTFSC  FA6.1
2DAE:  BRA    2DAC
2DB0:  BCF    FA6.2
2DB2:  MOVF   00,W
2DB4:  IORWF  FF2,F
2DB6:  MOVLW  33
2DB8:  MOVWF  FA9
2DBA:  CLRF   FA8
2DBC:  BCF    FA6.6
2DBE:  BCF    FA6.7
2DC0:  BSF    FA6.2
2DC2:  MOVF   FF2,W
2DC4:  MOVWF  00
2DC6:  BCF    FF2.7
2DC8:  MOVLW  55
2DCA:  MOVWF  FA7
2DCC:  MOVLW  AA
2DCE:  MOVWF  FA7
2DD0:  BSF    FA6.1
2DD2:  BTFSC  FA6.1
2DD4:  BRA    2DD2
2DD6:  BCF    FA6.2
2DD8:  MOVF   00,W
2DDA:  IORWF  FF2,F
2DDC:  MOVLW  34
2DDE:  MOVWF  FA9
2DE0:  CLRF   FA8
2DE2:  BCF    FA6.6
2DE4:  BCF    FA6.7
2DE6:  BSF    FA6.2
2DE8:  MOVF   FF2,W
2DEA:  MOVWF  00
2DEC:  BCF    FF2.7
2DEE:  MOVLW  55
2DF0:  MOVWF  FA7
2DF2:  MOVLW  AA
2DF4:  MOVWF  FA7
2DF6:  BSF    FA6.1
2DF8:  BTFSC  FA6.1
2DFA:  BRA    2DF8
2DFC:  BCF    FA6.2
2DFE:  MOVF   00,W
2E00:  IORWF  FF2,F
....................          delay_ms(700); 
2E02:  MOVLW  04
2E04:  MOVLB  0
2E06:  MOVWF  xC7
2E08:  MOVLW  AF
2E0A:  MOVWF  xDE
2E0C:  CALL   0626
2E10:  DECFSZ xC7,F
2E12:  BRA    2E08
....................          segundos=0;minutos=0;horas=0; 
2E14:  CLRF   22
2E16:  CLRF   23
2E18:  CLRF   48
2E1A:  CLRF   47
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E1C:  MOVLW  1E
2E1E:  MOVWF  xDE
2E20:  CALL   0626
2E24:  MOVLW  01
2E26:  MOVWF  19
2E28:  CLRF   33
2E2A:  MOVLW  02
2E2C:  MOVWF  1D
2E2E:  MOVWF  1F
2E30:  MOVLW  0C
2E32:  MOVWF  xD8
2E34:  CALL   07F8
....................       } 
....................              
....................       if(LEFT)// Si oprime Izquierda 
2E38:  BSF    F96.2
2E3A:  BTFSS  F84.2
2E3C:  BRA    2E6A
....................       { 
....................          if(Flanco3 == 0) 
2E3E:  BTFSC  17.6
2E40:  BRA    2E68
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E42:  BSF    17.6
2E44:  MOVLW  02
2E46:  MOVWF  xC7
2E48:  MOVLW  FA
2E4A:  MOVWF  xDE
2E4C:  CALL   0626
2E50:  DECFSZ xC7,F
2E52:  BRA    2E48
2E54:  MOVLW  01
2E56:  MOVWF  19
2E58:  CLRF   33
2E5A:  MOVLW  02
2E5C:  MOVWF  1D
2E5E:  MOVWF  1F
2E60:  MOVLW  0C
2E62:  MOVWF  xD8
2E64:  CALL   07F8
....................          } 
....................       } 
....................       else 
2E68:  BRA    2E6C
....................       { 
....................          Flanco3 = 0; 
2E6A:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de Punto Cero 
2E6C:  MOVF   19,W
2E6E:  SUBLW  06
2E70:  BTFSS  FD8.2
2E72:  BRA    3092
....................       lcd_gotoxy(1,1); 
2E74:  MOVLW  01
2E76:  MOVWF  xD9
2E78:  MOVWF  xDA
2E7A:  CALL   0796
....................       printf(lcd_putc,"  Zero Point Config "); 
2E7E:  MOVLW  7C
2E80:  MOVWF  FF6
2E82:  MOVLW  05
2E84:  MOVWF  FF7
2E86:  CALL   0856
....................       lcd_gotoxy(1,2); 
2E8A:  MOVLW  01
2E8C:  MOVWF  xD9
2E8E:  MOVLW  02
2E90:  MOVWF  xDA
2E92:  CALL   0796
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2E96:  MOVLW  05
2E98:  MOVWF  xC7
2E9A:  CALL   1016
2E9E:  MOVFF  00,C7
2EA2:  MOVFF  01,C8
2EA6:  MOVFF  02,C9
2EAA:  MOVFF  03,CA
2EAE:  MOVFF  03,DE
2EB2:  MOVFF  02,DD
2EB6:  MOVFF  01,DC
2EBA:  MOVFF  00,DB
2EBE:  MOVLW  D7
2EC0:  MOVWF  xE2
2EC2:  MOVLW  A3
2EC4:  MOVWF  xE1
2EC6:  CLRF   xE0
2EC8:  MOVLW  81
2ECA:  MOVWF  xDF
2ECC:  CALL   11B0
2ED0:  MOVFF  00,C7
2ED4:  MOVFF  01,C8
2ED8:  MOVFF  02,C9
2EDC:  MOVFF  03,CA
2EE0:  MOVLW  92
2EE2:  MOVWF  FF6
2EE4:  MOVLW  05
2EE6:  MOVWF  FF7
2EE8:  MOVLW  09
2EEA:  MOVWF  xCB
2EEC:  CALL   0C8A
2EF0:  MOVLW  02
2EF2:  MOVWF  FE9
2EF4:  MOVFF  CA,CE
2EF8:  MOVFF  C9,CD
2EFC:  MOVFF  C8,CC
2F00:  MOVFF  C7,CB
2F04:  MOVWF  xCF
2F06:  CALL   135C
2F0A:  MOVLW  A0
2F0C:  MOVWF  FF6
2F0E:  MOVLW  05
2F10:  MOVWF  FF7
2F12:  MOVLW  07
2F14:  MOVWF  xCB
2F16:  CALL   0C8A
....................       lcd_gotoxy(1,3); 
2F1A:  MOVLW  01
2F1C:  MOVWF  xD9
2F1E:  MOVLW  03
2F20:  MOVWF  xDA
2F22:  CALL   0796
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(1)); 
2F26:  MOVLW  01
2F28:  MOVWF  xCC
2F2A:  CALL   0744
2F2E:  MOVFF  00,C7
2F32:  MOVFF  01,C8
2F36:  MOVFF  02,C9
2F3A:  MOVFF  03,CA
2F3E:  MOVLW  A8
2F40:  MOVWF  FF6
2F42:  MOVLW  05
2F44:  MOVWF  FF7
2F46:  MOVLW  08
2F48:  MOVWF  xCB
2F4A:  CALL   0C8A
2F4E:  MOVLW  01
2F50:  MOVWF  FE9
2F52:  MOVFF  CA,CE
2F56:  MOVFF  C9,CD
2F5A:  MOVFF  C8,CC
2F5E:  MOVFF  C7,CB
2F62:  CLRF   xCF
2F64:  CALL   135C
....................       lcd_gotoxy(1,4); 
2F68:  MOVLW  01
2F6A:  MOVWF  xD9
2F6C:  MOVLW  04
2F6E:  MOVWF  xDA
2F70:  CALL   0796
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2F74:  MOVLW  B6
2F76:  MOVWF  FF6
2F78:  MOVLW  05
2F7A:  MOVWF  FF7
2F7C:  MOVLW  07
2F7E:  MOVWF  xCB
2F80:  CALL   0C8A
2F84:  MOVLW  01
2F86:  MOVWF  FE9
2F88:  MOVFF  C6,CE
2F8C:  MOVFF  C5,CD
2F90:  MOVFF  C4,CC
2F94:  MOVFF  C3,CB
2F98:  CLRF   xCF
2F9A:  CALL   135C
....................      
....................       if(RIGHT)// Si oprime derecha 
2F9E:  BSF    F96.1
2FA0:  BTFSS  F84.1
2FA2:  BRA    3062
....................       {  if(Flanco1 == 0)  
2FA4:  BTFSC  17.4
2FA6:  BRA    3060
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2FA8:  MOVLW  01
2FAA:  MOVWF  19
2FAC:  CLRF   33
2FAE:  MOVLW  02
2FB0:  MOVWF  1D
2FB2:  MOVWF  1F
2FB4:  MOVLW  0B
2FB6:  MOVWF  1C
2FB8:  MOVLW  02
2FBA:  MOVWF  xC7
2FBC:  MOVLW  FA
2FBE:  MOVWF  xDE
2FC0:  CALL   0626
2FC4:  DECFSZ xC7,F
2FC6:  BRA    2FBC
2FC8:  MOVLW  0C
2FCA:  MOVWF  xD8
2FCC:  CALL   07F8
....................             G=sensores(1); 
2FD0:  MOVLW  01
2FD2:  MOVWF  xCC
2FD4:  CALL   0744
2FD8:  MOVFF  03,C6
2FDC:  MOVFF  02,C5
2FE0:  MOVFF  01,C4
2FE4:  MOVFF  00,C3
....................             G16=(int16)G; 
2FE8:  MOVFF  C6,DE
2FEC:  MOVFF  C5,DD
2FF0:  MOVFF  C4,DC
2FF4:  MOVFF  C3,DB
2FF8:  CALL   14E2
2FFC:  MOVFF  02,4A
3000:  MOVFF  01,49
....................             G_l=G16; G_h=(G16>>8); 
3004:  MOVFF  49,26
3008:  MOVFF  4A,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
300C:  MOVLW  3C
300E:  MOVWF  FA9
3010:  MOVFF  26,FA8
3014:  BCF    FA6.6
3016:  BCF    FA6.7
3018:  BSF    FA6.2
301A:  MOVF   FF2,W
301C:  MOVWF  00
301E:  BCF    FF2.7
3020:  MOVLB  F
3022:  MOVLW  55
3024:  MOVWF  FA7
3026:  MOVLW  AA
3028:  MOVWF  FA7
302A:  BSF    FA6.1
302C:  BTFSC  FA6.1
302E:  BRA    302C
3030:  BCF    FA6.2
3032:  MOVF   00,W
3034:  IORWF  FF2,F
3036:  MOVLW  3D
3038:  MOVWF  FA9
303A:  MOVFF  27,FA8
303E:  BCF    FA6.6
3040:  BCF    FA6.7
3042:  BSF    FA6.2
3044:  MOVF   FF2,W
3046:  MOVWF  00
3048:  BCF    FF2.7
304A:  MOVLW  55
304C:  MOVWF  FA7
304E:  MOVLW  AA
3050:  MOVWF  FA7
3052:  BSF    FA6.1
3054:  BTFSC  FA6.1
3056:  BRA    3054
3058:  BCF    FA6.2
305A:  MOVF   00,W
305C:  IORWF  FF2,F
305E:  MOVLB  0
....................             }} 
....................          else 
3060:  BRA    3064
....................             {Flanco1 = 0;}    
3062:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
3064:  BSF    F96.2
3066:  BTFSS  F84.2
3068:  BRA    3090
....................       {  if(Flanco3 == 0)  
306A:  BTFSC  17.6
306C:  BRA    308E
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
306E:  MOVLW  01
3070:  MOVWF  19
3072:  CLRF   33
3074:  MOVLW  02
3076:  MOVWF  1D
3078:  MOVWF  1F
307A:  MOVLW  0B
307C:  MOVWF  1C
307E:  MOVLW  1E
3080:  MOVWF  xDE
3082:  CALL   0626
3086:  MOVLW  0C
3088:  MOVWF  xD8
308A:  CALL   07F8
....................          else 
308E:  BRA    3092
....................             {Flanco3 = 0;}   
3090:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
3092:  MOVF   19,W
3094:  SUBLW  64
3096:  BTFSS  FD8.2
3098:  BRA    349E
....................     
....................    if(Lectura==1) 
309A:  BTFSS  18.0
309C:  BRA    30B8
....................    { 
....................       Lectura=0; 
309E:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
30A0:  MOVLW  05
30A2:  MOVWF  xC7
30A4:  CALL   1016
30A8:  MOVFF  03,AA
30AC:  MOVFF  02,A9
30B0:  MOVFF  01,A8
30B4:  MOVFF  00,A7
....................    } 
....................     
....................    lcd_gotoxy(1,1); 
30B8:  MOVLW  01
30BA:  MOVWF  xD9
30BC:  MOVWF  xDA
30BE:  CALL   0796
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
30C2:  MOVFF  AA,DE
30C6:  MOVFF  A9,DD
30CA:  MOVFF  A8,DC
30CE:  MOVFF  A7,DB
30D2:  MOVLW  D7
30D4:  MOVWF  xE2
30D6:  MOVLW  A3
30D8:  MOVWF  xE1
30DA:  CLRF   xE0
30DC:  MOVLW  81
30DE:  MOVWF  xDF
30E0:  CALL   11B0
30E4:  MOVFF  00,C7
30E8:  MOVFF  01,C8
30EC:  MOVFF  02,C9
30F0:  MOVFF  03,CA
30F4:  MOVLW  C4
30F6:  MOVWF  FF6
30F8:  MOVLW  05
30FA:  MOVWF  FF7
30FC:  MOVLW  08
30FE:  MOVWF  xCB
3100:  CALL   0C8A
3104:  MOVLW  02
3106:  MOVWF  FE9
3108:  MOVFF  CA,CE
310C:  MOVFF  C9,CD
3110:  MOVFF  C8,CC
3114:  MOVFF  C7,CB
3118:  MOVWF  xCF
311A:  CALL   135C
311E:  MOVLW  D1
3120:  MOVWF  FF6
3122:  MOVLW  05
3124:  MOVWF  FF7
3126:  MOVLW  07
3128:  MOVWF  xCB
312A:  CALL   0C8A
....................    lcd_gotoxy(1,2); 
312E:  MOVLW  01
3130:  MOVWF  xD9
3132:  MOVLW  02
3134:  MOVWF  xDA
3136:  CALL   0796
....................    printf(lcd_putc,"Filtro:"); 
313A:  MOVLW  DA
313C:  MOVWF  FF6
313E:  MOVLW  05
3140:  MOVWF  FF7
3142:  CALL   0856
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
3146:  MOVFF  AA,DE
314A:  MOVFF  A9,DD
314E:  MOVFF  A8,DC
3152:  MOVFF  A7,DB
3156:  MOVLW  A4
3158:  MOVWF  xE2
315A:  MOVLW  70
315C:  MOVWF  xE1
315E:  MOVLW  3D
3160:  MOVWF  xE0
3162:  MOVLW  7D
3164:  MOVWF  xDF
3166:  CALL   0876
316A:  MOVFF  00,C7
316E:  MOVFF  01,C8
3172:  MOVFF  02,C9
3176:  MOVFF  03,CA
317A:  MOVFF  03,DE
317E:  MOVFF  02,DD
3182:  MOVFF  01,DC
3186:  MOVFF  00,DB
318A:  CLRF   xE2
318C:  CLRF   xE1
318E:  MOVLW  30
3190:  MOVWF  xE0
3192:  MOVLW  82
3194:  MOVWF  xDF
3196:  CALL   11B0
319A:  MOVFF  03,A6
319E:  MOVFF  02,A5
31A2:  MOVFF  01,A4
31A6:  MOVFF  00,A3
....................    if(Saturacion>11) 
31AA:  CLRF   xDE
31AC:  CLRF   xDD
31AE:  MOVLW  30
31B0:  MOVWF  xDC
31B2:  MOVLW  82
31B4:  MOVWF  xDB
31B6:  MOVFF  A6,E2
31BA:  MOVFF  A5,E1
31BE:  MOVFF  A4,E0
31C2:  MOVFF  A3,DF
31C6:  CALL   0FA0
31CA:  BNC   31D8
....................    { 
....................       Saturacion=11; 
31CC:  CLRF   xA6
31CE:  CLRF   xA5
31D0:  MOVLW  30
31D2:  MOVWF  xA4
31D4:  MOVLW  82
31D6:  MOVWF  xA3
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
31D8:  CLRF   2E
31DA:  MOVFF  A6,CA
31DE:  MOVFF  A5,C9
31E2:  MOVFF  A4,C8
31E6:  MOVFF  A3,C7
31EA:  CALL   184C
31EE:  MOVFF  00,C7
31F2:  MOVFF  01,C8
31F6:  MOVFF  02,C9
31FA:  MOVFF  03,CA
31FE:  CLRF   xE0
3200:  MOVFF  2E,DF
3204:  CALL   070E
3208:  MOVFF  03,DE
320C:  MOVFF  02,DD
3210:  MOVFF  01,DC
3214:  MOVFF  00,DB
3218:  MOVFF  CA,E2
321C:  MOVFF  C9,E1
3220:  MOVFF  C8,E0
3224:  MOVFF  C7,DF
3228:  CALL   0FA0
322C:  BNC   324A
....................    { 
....................       lcd_gotoxy(i+8,2); 
322E:  MOVLW  08
3230:  ADDWF  2E,W
3232:  MOVWF  xC7
3234:  MOVWF  xD9
3236:  MOVLW  02
3238:  MOVWF  xDA
323A:  CALL   0796
....................       printf(lcd_putc,"Ñ"); 
323E:  MOVLW  D1
3240:  MOVWF  xD8
3242:  CALL   07F8
....................    } 
3246:  INCF   2E,F
3248:  BRA    31DA
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
324A:  MOVFF  A6,CA
324E:  MOVFF  A5,C9
3252:  MOVFF  A4,C8
3256:  MOVFF  A3,C7
325A:  CALL   184C
325E:  MOVFF  03,DE
3262:  MOVFF  02,DD
3266:  MOVFF  01,DC
326A:  MOVFF  00,DB
326E:  CALL   14E2
3272:  MOVFF  01,2E
3276:  MOVF   2E,W
3278:  SUBLW  0A
327A:  BNC   3298
....................    { 
....................       lcd_gotoxy(i+8,2); 
327C:  MOVLW  08
327E:  ADDWF  2E,W
3280:  MOVWF  xC7
3282:  MOVWF  xD9
3284:  MOVLW  02
3286:  MOVWF  xDA
3288:  CALL   0796
....................       printf(lcd_putc," "); 
328C:  MOVLW  20
328E:  MOVWF  xD8
3290:  CALL   07F8
....................    } 
3294:  INCF   2E,F
3296:  BRA    3276
....................     
....................    lcd_gotoxy(10,3); 
3298:  MOVLW  0A
329A:  MOVWF  xD9
329C:  MOVLW  03
329E:  MOVWF  xDA
32A0:  CALL   0796
....................    printf(lcd_putc,"Tempo:%02u:%02u",tempo_minutos,tempo_segundos); 
32A4:  MOVLW  E2
32A6:  MOVWF  FF6
32A8:  MOVLW  05
32AA:  MOVWF  FF7
32AC:  MOVLW  06
32AE:  MOVWF  xCB
32B0:  CALL   0C8A
32B4:  MOVFF  28,C7
32B8:  MOVLW  01
32BA:  MOVWF  xC8
32BC:  CALL   0E1A
32C0:  MOVLW  3A
32C2:  MOVWF  xD8
32C4:  CALL   07F8
32C8:  MOVFF  29,C7
32CC:  MOVLW  01
32CE:  MOVWF  xC8
32D0:  CALL   0E1A
....................     
....................    if(estadomv==1) 
32D4:  BTFSS  17.2
32D6:  BRA    3312
....................    { 
....................       lcd_gotoxy(1,4); 
32D8:  MOVLW  01
32DA:  MOVWF  xD9
32DC:  MOVLW  04
32DE:  MOVWF  xDA
32E0:  CALL   0796
....................       printf(lcd_putc,"Motor:ON "); 
32E4:  MOVLW  F2
32E6:  MOVWF  FF6
32E8:  MOVLW  05
32EA:  MOVWF  FF7
32EC:  CALL   0856
....................       velocidades(read_eeprom(5)); 
32F0:  MOVFF  FF2,C7
32F4:  BCF    FF2.7
32F6:  MOVLW  05
32F8:  MOVWF  FA9
32FA:  BCF    FA6.6
32FC:  BCF    FA6.7
32FE:  BSF    FA6.0
3300:  MOVF   FA8,W
3302:  BTFSC  xC7.7
3304:  BSF    FF2.7
3306:  MOVWF  xC8
3308:  MOVFF  C8,C9
330C:  CALL   0E80
....................    } 
....................    else 
3310:  BRA    3330
....................    { 
....................       lcd_gotoxy(1,4); 
3312:  MOVLW  01
3314:  MOVWF  xD9
3316:  MOVLW  04
3318:  MOVWF  xDA
331A:  CALL   0796
....................       printf(lcd_putc,"Motor:OFF"); 
331E:  MOVLW  FC
3320:  MOVWF  FF6
3322:  MOVLW  05
3324:  MOVWF  FF7
3326:  CALL   0856
....................       velocidades(0);  
332A:  CLRF   xC9
332C:  CALL   0E80
....................    } 
....................     
....................    if(estadouv==1) 
3330:  BTFSS  17.0
3332:  BRA    3378
....................    { 
....................       lcd_gotoxy(13,4); 
3334:  MOVLW  0D
3336:  MOVWF  xD9
3338:  MOVLW  04
333A:  MOVWF  xDA
333C:  CALL   0796
....................       printf(lcd_putc,"UV:ON "); 
3340:  MOVLW  06
3342:  MOVWF  FF6
3344:  MOVLW  06
3346:  MOVWF  FF7
3348:  CALL   0856
....................       estadomv=0; 
334C:  BCF    17.2
....................       velocidades(0); 
334E:  CLRF   xC9
3350:  CALL   0E80
....................       estadofl=0; 
3354:  BCF    17.1
....................       Luz_Blanca_off; 
3356:  BCF    F8C.1
3358:  BCF    F95.1
....................       Luz_UV_on; 
335A:  BSF    F8C.0
335C:  BCF    F95.0
....................       tiempo_cumplido=0; 
335E:  BCF    17.7
....................       if(flaguv==0) 
3360:  BTFSC  18.1
3362:  BRA    3376
....................       { 
....................          delay_ms(50);lcd_init();flaguv=1;guardaruv=1; 
3364:  MOVLW  32
3366:  MOVWF  xDE
3368:  CALL   0626
336C:  CALL   06B8
3370:  BSF    18.1
3372:  MOVLW  01
3374:  MOVWF  31
....................       } 
....................    } 
....................    else 
3376:  BRA    33AC
....................    { 
....................       estadouv=0; 
3378:  BCF    17.0
....................       lcd_gotoxy(13,4); 
337A:  MOVLW  0D
337C:  MOVWF  xD9
337E:  MOVLW  04
3380:  MOVWF  xDA
3382:  CALL   0796
....................       printf(lcd_putc,"UV:OFF"); 
3386:  MOVLW  0E
3388:  MOVWF  FF6
338A:  MOVLW  06
338C:  MOVWF  FF7
338E:  CALL   0856
....................       Luz_UV_off; 
3392:  BCF    F8C.0
3394:  BCF    F95.0
....................       if(flaguv==1) 
3396:  BTFSS  18.1
3398:  BRA    33AC
....................       { 
....................          delay_ms(50);lcd_init();flaguv=0;guardaruv=1; 
339A:  MOVLW  32
339C:  MOVWF  xDE
339E:  CALL   0626
33A2:  CALL   06B8
33A6:  BCF    18.1
33A8:  MOVLW  01
33AA:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
33AC:  BTFSS  17.1
33AE:  BRA    33E0
....................    { 
....................       lcd_gotoxy(1,3); 
33B0:  MOVLW  01
33B2:  MOVWF  xD9
33B4:  MOVLW  03
33B6:  MOVWF  xDA
33B8:  CALL   0796
....................       printf(lcd_putc,"Luz:ON "); 
33BC:  MOVLW  16
33BE:  MOVWF  FF6
33C0:  MOVLW  06
33C2:  MOVWF  FF7
33C4:  CALL   0856
....................       Luz_Blanca_on; 
33C8:  BSF    F8C.1
33CA:  BCF    F95.1
....................       if(flagfl==0) 
33CC:  BTFSC  18.2
33CE:  BRA    33DE
....................       { 
....................          delay_ms(50);lcd_init();flagfl=1; 
33D0:  MOVLW  32
33D2:  MOVWF  xDE
33D4:  CALL   0626
33D8:  CALL   06B8
33DC:  BSF    18.2
....................       } 
....................    } 
....................    else 
33DE:  BRA    340E
....................    { 
....................       lcd_gotoxy(1,3); 
33E0:  MOVLW  01
33E2:  MOVWF  xD9
33E4:  MOVLW  03
33E6:  MOVWF  xDA
33E8:  CALL   0796
....................       printf(lcd_putc,"Luz:OFF"); 
33EC:  MOVLW  1E
33EE:  MOVWF  FF6
33F0:  MOVLW  06
33F2:  MOVWF  FF7
33F4:  CALL   0856
....................       Luz_Blanca_off; 
33F8:  BCF    F8C.1
33FA:  BCF    F95.1
....................       if(flagfl==1) 
33FC:  BTFSS  18.2
33FE:  BRA    340E
....................       { 
....................          delay_ms(50);lcd_init();flagfl=0; 
3400:  MOVLW  32
3402:  MOVWF  xDE
3404:  CALL   0626
3408:  CALL   06B8
340C:  BCF    18.2
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia arriba 
340E:  BSF    F92.5
3410:  BTFSS  F80.5
3412:  BRA    342E
....................    { 
....................       if(Flanco == 0) 
3414:  BTFSC  17.3
3416:  BRA    342C
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
3418:  BTG    17.1
341A:  BSF    17.3
341C:  MOVLW  02
341E:  MOVWF  xC7
3420:  MOVLW  96
3422:  MOVWF  xDE
3424:  CALL   0626
3428:  DECFSZ xC7,F
342A:  BRA    3420
....................       } 
....................    } 
....................    else 
342C:  BRA    3430
....................    { 
....................       Flanco = 0; 
342E:  BCF    17.3
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia abajo 
3430:  BSF    F96.0
3432:  BTFSS  F84.0
3434:  BRA    3450
....................    { 
....................       if(Flanco1 == 0) 
3436:  BTFSC  17.4
3438:  BRA    344E
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
343A:  BTG    17.2
343C:  BSF    17.4
343E:  MOVLW  02
3440:  MOVWF  xC7
3442:  MOVLW  96
3444:  MOVWF  xDE
3446:  CALL   0626
344A:  DECFSZ xC7,F
344C:  BRA    3442
....................       } 
....................    } 
....................    else 
344E:  BRA    3452
....................    { 
....................       Flanco1 = 0; 
3450:  BCF    17.4
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia izquierda 
3452:  BSF    F96.1
3454:  BTFSS  F84.1
3456:  BRA    347C
....................    { 
....................       printf(lcd_putc,"\f");delay_ms(300);Menu=1; paso=0;Flecha=2;Flecha2=2;    
3458:  MOVLW  0C
345A:  MOVWF  xD8
345C:  CALL   07F8
3460:  MOVLW  02
3462:  MOVWF  xC7
3464:  MOVLW  96
3466:  MOVWF  xDE
3468:  CALL   0626
346C:  DECFSZ xC7,F
346E:  BRA    3464
3470:  MOVLW  01
3472:  MOVWF  19
3474:  CLRF   33
3476:  MOVLW  02
3478:  MOVWF  1D
347A:  MOVWF  1F
....................    } 
....................     
....................    if(LEFT)//Si oprime hacia izquierda 
347C:  BSF    F96.2
347E:  BTFSS  F84.2
3480:  BRA    349C
....................    { 
....................       if(Flanco2 == 0) 
3482:  BTFSC  17.5
3484:  BRA    349A
....................       { 
....................          estadouv=!estadouv;Flanco2 = 1;delay_ms(300); 
3486:  BTG    17.0
3488:  BSF    17.5
348A:  MOVLW  02
348C:  MOVWF  xC7
348E:  MOVLW  96
3490:  MOVWF  xDE
3492:  CALL   0626
3496:  DECFSZ xC7,F
3498:  BRA    348E
....................       } 
....................    } 
....................    else 
349A:  BRA    349E
....................    { 
....................       Flanco2 = 0; 
349C:  BCF    17.5
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
349E:  DECFSZ 31,W
34A0:  BRA    3550
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
34A2:  MOVLW  32
34A4:  MOVWF  FA9
34A6:  MOVFF  22,FA8
34AA:  BCF    FA6.6
34AC:  BCF    FA6.7
34AE:  BSF    FA6.2
34B0:  MOVF   FF2,W
34B2:  MOVWF  00
34B4:  BCF    FF2.7
34B6:  MOVLB  F
34B8:  MOVLW  55
34BA:  MOVWF  FA7
34BC:  MOVLW  AA
34BE:  MOVWF  FA7
34C0:  BSF    FA6.1
34C2:  BTFSC  FA6.1
34C4:  BRA    34C2
34C6:  BCF    FA6.2
34C8:  MOVF   00,W
34CA:  IORWF  FF2,F
34CC:  MOVLW  33
34CE:  MOVWF  FA9
34D0:  MOVFF  23,FA8
34D4:  BCF    FA6.6
34D6:  BCF    FA6.7
34D8:  BSF    FA6.2
34DA:  MOVF   FF2,W
34DC:  MOVWF  00
34DE:  BCF    FF2.7
34E0:  MOVLW  55
34E2:  MOVWF  FA7
34E4:  MOVLW  AA
34E6:  MOVWF  FA7
34E8:  BSF    FA6.1
34EA:  BTFSC  FA6.1
34EC:  BRA    34EA
34EE:  BCF    FA6.2
34F0:  MOVF   00,W
34F2:  IORWF  FF2,F
....................       horasL=(int8)horas; 
34F4:  MOVFF  47,24
....................       horasH=(int8)(horas>>8); 
34F8:  MOVF   48,W
34FA:  MOVWF  25
....................       write_eeprom(52,horasL); 
34FC:  MOVLW  34
34FE:  MOVWF  FA9
3500:  MOVFF  24,FA8
3504:  BCF    FA6.6
3506:  BCF    FA6.7
3508:  BSF    FA6.2
350A:  MOVFF  FF2,00
350E:  BCF    FF2.7
3510:  MOVLW  55
3512:  MOVWF  FA7
3514:  MOVLW  AA
3516:  MOVWF  FA7
3518:  BSF    FA6.1
351A:  BTFSC  FA6.1
351C:  BRA    351A
351E:  BCF    FA6.2
3520:  MOVF   00,W
3522:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
3524:  MOVLW  35
3526:  MOVWF  FA9
3528:  MOVFF  25,FA8
352C:  BCF    FA6.6
352E:  BCF    FA6.7
3530:  BSF    FA6.2
3532:  MOVFF  FF2,00
3536:  BCF    FF2.7
3538:  MOVLW  55
353A:  MOVWF  FA7
353C:  MOVLW  AA
353E:  MOVWF  FA7
3540:  BSF    FA6.1
3542:  BTFSC  FA6.1
3544:  BRA    3542
3546:  BCF    FA6.2
3548:  MOVF   00,W
354A:  IORWF  FF2,F
....................       guardaruv=0; 
354C:  CLRF   31
354E:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
3550:  MOVF   30,W
3552:  SUBLW  13
3554:  BC    355C
....................    { 
....................       lcd_init(); 
3556:  CALL   06B8
....................       tiemporeset=0; 
355A:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
355C:  MOVF   22,W
355E:  SUBLW  3B
3560:  BC    3566
....................    { 
....................       segundos=0;minutos++; 
3562:  CLRF   22
3564:  INCF   23,F
....................    } 
....................    if(minutos==60) 
3566:  MOVF   23,W
3568:  SUBLW  3C
356A:  BNZ   3574
....................    { 
....................       minutos=0;horas++; 
356C:  CLRF   23
356E:  INCF   47,F
3570:  BTFSC  FD8.2
3572:  INCF   48,F
....................    } 
....................     
....................    } 
3574:  GOTO   1D06
.................... } 
....................  
3578:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
