CCS PCH C Compiler, Version 4.104, 5967               29-nov.-17 14:42

               Filename: H:\JP\JP\Laboratorio\Modulo Flujo Laminar\2017\Modulo Flujo Laminar Abaco #004567XX\Firmware Modulo de Flujo Laminar\CabinaFlujo.lst

               ROM used: 13478 bytes (41%)
                         Largest free fragment is 19286
               RAM used: 203 (10%) at main() level
                         240 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   17D0
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
05EE:  CLRF   FEA
05F0:  MOVLW  DE
05F2:  MOVWF  FE9
05F4:  MOVF   FEF,W
05F6:  BZ    0614
05F8:  MOVLW  0F
05FA:  MOVWF  01
05FC:  CLRF   00
05FE:  DECFSZ 00,F
0600:  BRA    05FE
0602:  DECFSZ 01,F
0604:  BRA    05FC
0606:  MOVLW  8F
0608:  MOVWF  00
060A:  DECFSZ 00,F
060C:  BRA    060A
060E:  NOP   
0610:  DECFSZ FEF,F
0612:  BRA    05F8
0614:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0616:  SWAPF  xDF,W
0618:  ANDLW  F0
061A:  MOVWF  00
061C:  MOVLW  0F
061E:  ANDWF  F81,W
0620:  IORWF  00,W
0622:  MOVWF  F81
....................       delay_cycles(30); 
0624:  MOVLW  09
0626:  MOVWF  00
0628:  DECFSZ 00,F
062A:  BRA    0628
062C:  BRA    062E
....................       lcd.enable = 1; 
062E:  BSF    F81.3
....................       delay_us(55); 
0630:  MOVLW  DB
0632:  MOVWF  00
0634:  DECFSZ 00,F
0636:  BRA    0634
0638:  BRA    063A
....................       lcd.enable = 0; 
063A:  BCF    F81.3
.................... } 
063C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
063E:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0640:  MOVLW  01
0642:  MOVWF  xDE
0644:  RCALL  05EE
....................       lcd.rs = address; 
0646:  BTFSS  xDC.0
0648:  BCF    F81.1
064A:  BTFSC  xDC.0
064C:  BSF    F81.1
....................       delay_cycles(30); 
064E:  MOVLW  09
0650:  MOVWF  00
0652:  DECFSZ 00,F
0654:  BRA    0652
0656:  BRA    0658
....................       lcd.rw = 0; 
0658:  BCF    F81.2
....................       delay_cycles(30); 
065A:  MOVLW  09
065C:  MOVWF  00
065E:  DECFSZ 00,F
0660:  BRA    065E
0662:  BRA    0664
....................       lcd.enable = 0; 
0664:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0666:  SWAPF  xDD,W
0668:  MOVWF  xDE
066A:  MOVLW  0F
066C:  ANDWF  xDE,F
066E:  MOVFF  DE,DF
0672:  RCALL  0616
....................       lcd_send_nibble(n & 0xf); 
0674:  MOVF   xDD,W
0676:  ANDLW  0F
0678:  MOVWF  xDE
067A:  MOVWF  xDF
067C:  RCALL  0616
.................... } 
067E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0680:  MOVLW  00
0682:  MOVWF  F93
....................     lcd.rs = 0; 
0684:  BCF    F81.1
....................     lcd.rw = 0; 
0686:  BCF    F81.2
....................     lcd.enable = 0; 
0688:  BCF    F81.3
....................     delay_ms(15); 
068A:  MOVLW  0F
068C:  MOVWF  xDE
068E:  RCALL  05EE
....................     for(i=1;i<=3;++i) { 
0690:  MOVLW  01
0692:  MOVWF  xC7
0694:  MOVF   xC7,W
0696:  SUBLW  03
0698:  BNC   06AA
....................        lcd_send_nibble(3); 
069A:  MOVLW  03
069C:  MOVWF  xDF
069E:  RCALL  0616
....................        delay_ms(5); 
06A0:  MOVLW  05
06A2:  MOVWF  xDE
06A4:  RCALL  05EE
....................     } 
06A6:  INCF   xC7,F
06A8:  BRA    0694
....................     lcd_send_nibble(2); 
06AA:  MOVLW  02
06AC:  MOVWF  xDF
06AE:  RCALL  0616
....................     for(i=0;i<=3;++i) 
06B0:  CLRF   xC7
06B2:  MOVF   xC7,W
06B4:  SUBLW  03
06B6:  BNC   06D4
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
06B8:  CLRF   03
06BA:  MOVF   xC7,W
06BC:  MOVFF  FF2,C8
06C0:  BCF    FF2.7
06C2:  RCALL  0096
06C4:  BTFSC  xC8.7
06C6:  BSF    FF2.7
06C8:  MOVWF  xC8
06CA:  CLRF   xDC
06CC:  MOVWF  xDD
06CE:  RCALL  063E
06D0:  INCF   xC7,F
06D2:  BRA    06B2
.................... } 
06D4:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
075E:  MOVLW  01
0760:  SUBWF  xDA,W
0762:  ADDLW  FC
0764:  BC    0784
0766:  ADDLW  04
0768:  GOTO   0794
....................      case 1 : address=0x80;break; 
076C:  MOVLW  80
076E:  MOVWF  xDB
0770:  BRA    0784
....................      case 2 : address=0xc0;break; 
0772:  MOVLW  C0
0774:  MOVWF  xDB
0776:  BRA    0784
....................      case 3 : address=0x94;break; 
0778:  MOVLW  94
077A:  MOVWF  xDB
077C:  BRA    0784
....................      case 4 : address=0xd4;break; 
077E:  MOVLW  D4
0780:  MOVWF  xDB
0782:  BRA    0784
....................    } 
....................    address+=x-1; 
0784:  MOVLW  01
0786:  SUBWF  xD9,W
0788:  ADDWF  xDB,F
....................    lcd_send_byte(0,address); 
078A:  CLRF   xDC
078C:  MOVFF  DB,DD
0790:  RCALL  063E
.................... } 
0792:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
07C0:  MOVF   xD8,W
07C2:  SUBLW  F1
07C4:  BNZ   07CA
....................    { 
....................       c=238; 
07C6:  MOVLW  EE
07C8:  MOVWF  xD8
....................    } 
....................    if(c=='Ñ') 
07CA:  MOVF   xD8,W
07CC:  SUBLW  D1
07CE:  BNZ   07D4
....................    { 
....................       c=255; 
07D0:  MOVLW  FF
07D2:  MOVWF  xD8
....................    } 
....................     
....................    switch (c) { 
07D4:  MOVF   xD8,W
07D6:  XORLW  0C
07D8:  BZ    07E4
07DA:  XORLW  06
07DC:  BZ    07F8
07DE:  XORLW  02
07E0:  BZ    0806
07E2:  BRA    0810
....................      case '\f'   : lcd_send_byte(0,1); 
07E4:  CLRF   xDC
07E6:  MOVLW  01
07E8:  MOVWF  xDD
07EA:  RCALL  063E
....................                    lcdline=1; 
07EC:  MOVLW  01
07EE:  MOVWF  16
....................                    delay_ms(2); 
07F0:  MOVLW  02
07F2:  MOVWF  xDE
07F4:  RCALL  05EE
....................                                            break; 
07F6:  BRA    081C
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
07F8:  INCF   16,F
07FA:  MOVLW  01
07FC:  MOVWF  xD9
07FE:  MOVFF  16,DA
0802:  RCALL  075E
0804:  BRA    081C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0806:  CLRF   xDC
0808:  MOVLW  10
080A:  MOVWF  xDD
080C:  RCALL  063E
080E:  BRA    081C
....................      default     : lcd_send_byte(1,c);     break; 
0810:  MOVLW  01
0812:  MOVWF  xDC
0814:  MOVFF  D8,DD
0818:  RCALL  063E
081A:  BRA    081C
....................    } 
.................... } 
081C:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1476:  BCF    xDA.0
....................    y = x; 
1478:  MOVFF  CE,D3
147C:  MOVFF  CD,D2
1480:  MOVFF  CC,D1
1484:  MOVFF  CB,D0
....................  
....................    if (x < 0) 
1488:  MOVFF  CE,DE
148C:  MOVFF  CD,DD
1490:  MOVFF  CC,DC
1494:  MOVFF  CB,DB
1498:  CLRF   xE2
149A:  CLRF   xE1
149C:  CLRF   xE0
149E:  CLRF   xDF
14A0:  RCALL  0EFC
14A2:  BNC   14AC
....................    { 
....................       s = 1; 
14A4:  BSF    xDA.0
....................       y = -y; 
14A6:  MOVF   xD1,W
14A8:  XORLW  80
14AA:  MOVWF  xD1
....................    } 
....................  
....................    if (y <= 32768.0) 
14AC:  MOVFF  D3,DE
14B0:  MOVFF  D2,DD
14B4:  MOVFF  D1,DC
14B8:  MOVFF  D0,DB
14BC:  CLRF   xE2
14BE:  CLRF   xE1
14C0:  CLRF   xE0
14C2:  MOVLW  8E
14C4:  MOVWF  xDF
14C6:  RCALL  0EFC
14C8:  BC    14CC
14CA:  BNZ   14FC
....................   res = (float32)(unsigned int16)y; 
14CC:  MOVFF  D3,DE
14D0:  MOVFF  D2,DD
14D4:  MOVFF  D1,DC
14D8:  MOVFF  D0,DB
14DC:  RCALL  143E
14DE:  MOVFF  02,E0
14E2:  MOVFF  01,DF
14E6:  CALL   06D6
14EA:  MOVFF  03,D7
14EE:  MOVFF  02,D6
14F2:  MOVFF  01,D5
14F6:  MOVFF  00,D4
....................  
....................  else if (y < 10000000.0) 
14FA:  BRA    1684
14FC:  MOVFF  D3,DE
1500:  MOVFF  D2,DD
1504:  MOVFF  D1,DC
1508:  MOVFF  D0,DB
150C:  MOVLW  80
150E:  MOVWF  xE2
1510:  MOVLW  96
1512:  MOVWF  xE1
1514:  MOVLW  18
1516:  MOVWF  xE0
1518:  MOVLW  96
151A:  MOVWF  xDF
151C:  RCALL  0EFC
151E:  BTFSS  FD8.0
1520:  BRA    1674
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1522:  MOVFF  D3,DE
1526:  MOVFF  D2,DD
152A:  MOVFF  D1,DC
152E:  MOVFF  D0,DB
1532:  CLRF   xE2
1534:  CLRF   xE1
1536:  CLRF   xE0
1538:  MOVLW  8E
153A:  MOVWF  xDF
153C:  CALL   083E
1540:  MOVFF  03,DE
1544:  MOVFF  02,DD
1548:  MOVFF  01,DC
154C:  MOVFF  00,DB
1550:  RCALL  143E
1552:  MOVFF  02,D9
1556:  MOVFF  01,D8
....................       y = 32768.0*(y/32768.0 - (float32)l); 
155A:  MOVFF  D3,DE
155E:  MOVFF  D2,DD
1562:  MOVFF  D1,DC
1566:  MOVFF  D0,DB
156A:  CLRF   xE2
156C:  CLRF   xE1
156E:  CLRF   xE0
1570:  MOVLW  8E
1572:  MOVWF  xDF
1574:  CALL   083E
1578:  MOVFF  00,DB
157C:  MOVFF  01,DC
1580:  MOVFF  02,DD
1584:  MOVFF  03,DE
1588:  MOVFF  D9,E0
158C:  MOVFF  D8,DF
1590:  CALL   06D6
1594:  BSF    FD8.1
1596:  MOVFF  DE,E2
159A:  MOVFF  DD,E1
159E:  MOVFF  DC,E0
15A2:  MOVFF  DB,DF
15A6:  MOVFF  03,E6
15AA:  MOVFF  02,E5
15AE:  MOVFF  01,E4
15B2:  MOVFF  00,E3
15B6:  CALL   0998
15BA:  CLRF   xDE
15BC:  CLRF   xDD
15BE:  CLRF   xDC
15C0:  MOVLW  8E
15C2:  MOVWF  xDB
15C4:  MOVFF  03,E2
15C8:  MOVFF  02,E1
15CC:  MOVFF  01,E0
15D0:  MOVFF  00,DF
15D4:  RCALL  110C
15D6:  MOVFF  03,D3
15DA:  MOVFF  02,D2
15DE:  MOVFF  01,D1
15E2:  MOVFF  00,D0
....................   res = 32768.0*(float32)l; 
15E6:  MOVFF  D9,E0
15EA:  MOVFF  D8,DF
15EE:  CALL   06D6
15F2:  CLRF   xDE
15F4:  CLRF   xDD
15F6:  CLRF   xDC
15F8:  MOVLW  8E
15FA:  MOVWF  xDB
15FC:  MOVFF  03,E2
1600:  MOVFF  02,E1
1604:  MOVFF  01,E0
1608:  MOVFF  00,DF
160C:  RCALL  110C
160E:  MOVFF  03,D7
1612:  MOVFF  02,D6
1616:  MOVFF  01,D5
161A:  MOVFF  00,D4
....................   res += (float32)(unsigned int16)y; 
161E:  MOVFF  D3,DE
1622:  MOVFF  D2,DD
1626:  MOVFF  D1,DC
162A:  MOVFF  D0,DB
162E:  RCALL  143E
1630:  MOVFF  02,E0
1634:  MOVFF  01,DF
1638:  CALL   06D6
163C:  BCF    FD8.1
163E:  MOVFF  D7,E2
1642:  MOVFF  D6,E1
1646:  MOVFF  D5,E0
164A:  MOVFF  D4,DF
164E:  MOVFF  03,E6
1652:  MOVFF  02,E5
1656:  MOVFF  01,E4
165A:  MOVFF  00,E3
165E:  CALL   0998
1662:  MOVFF  03,D7
1666:  MOVFF  02,D6
166A:  MOVFF  01,D5
166E:  MOVFF  00,D4
....................  } 
....................  
....................  else 
1672:  BRA    1684
....................   res = y; 
1674:  MOVFF  D3,D7
1678:  MOVFF  D2,D6
167C:  MOVFF  D1,D5
1680:  MOVFF  D0,D4
....................  
....................  y = y - (float32)(unsigned int16)y; 
1684:  MOVFF  D3,DE
1688:  MOVFF  D2,DD
168C:  MOVFF  D1,DC
1690:  MOVFF  D0,DB
1694:  RCALL  143E
1696:  MOVFF  02,E0
169A:  MOVFF  01,DF
169E:  CALL   06D6
16A2:  BSF    FD8.1
16A4:  MOVFF  D3,E2
16A8:  MOVFF  D2,E1
16AC:  MOVFF  D1,E0
16B0:  MOVFF  D0,DF
16B4:  MOVFF  03,E6
16B8:  MOVFF  02,E5
16BC:  MOVFF  01,E4
16C0:  MOVFF  00,E3
16C4:  CALL   0998
16C8:  MOVFF  03,D3
16CC:  MOVFF  02,D2
16D0:  MOVFF  01,D1
16D4:  MOVFF  00,D0
....................  
....................  if (s) 
16D8:  BTFSS  xDA.0
16DA:  BRA    16E2
....................   res = -res; 
16DC:  MOVF   xD5,W
16DE:  XORLW  80
16E0:  MOVWF  xD5
....................  
....................  if (y != 0) 
16E2:  MOVFF  D3,DE
16E6:  MOVFF  D2,DD
16EA:  MOVFF  D1,DC
16EE:  MOVFF  D0,DB
16F2:  CLRF   xE2
16F4:  CLRF   xE1
16F6:  CLRF   xE0
16F8:  CLRF   xDF
16FA:  RCALL  0EFC
16FC:  BZ    176E
....................  { 
....................   if (s == 1 && n == 0) 
16FE:  BTFSS  xDA.0
1700:  BRA    1736
1702:  MOVF   xCF,F
1704:  BNZ   1736
....................    res -= 1.0; 
1706:  BSF    FD8.1
1708:  MOVFF  D7,E2
170C:  MOVFF  D6,E1
1710:  MOVFF  D5,E0
1714:  MOVFF  D4,DF
1718:  CLRF   xE6
171A:  CLRF   xE5
171C:  CLRF   xE4
171E:  MOVLW  7F
1720:  MOVWF  xE3
1722:  CALL   0998
1726:  MOVFF  03,D7
172A:  MOVFF  02,D6
172E:  MOVFF  01,D5
1732:  MOVFF  00,D4
....................  
....................   if (s == 0 && n == 1) 
1736:  BTFSC  xDA.0
1738:  BRA    176E
173A:  DECFSZ xCF,W
173C:  BRA    176E
....................    res += 1.0; 
173E:  BCF    FD8.1
1740:  MOVFF  D7,E2
1744:  MOVFF  D6,E1
1748:  MOVFF  D5,E0
174C:  MOVFF  D4,DF
1750:  CLRF   xE6
1752:  CLRF   xE5
1754:  CLRF   xE4
1756:  MOVLW  7F
1758:  MOVWF  xE3
175A:  CALL   0998
175E:  MOVFF  03,D7
1762:  MOVFF  02,D6
1766:  MOVFF  01,D5
176A:  MOVFF  00,D4
....................  } 
....................  if (x == 0) 
176E:  MOVFF  CE,DE
1772:  MOVFF  CD,DD
1776:  MOVFF  CC,DC
177A:  MOVFF  CB,DB
177E:  CLRF   xE2
1780:  CLRF   xE1
1782:  CLRF   xE0
1784:  CLRF   xDF
1786:  CALL   0EFC
178A:  BNZ   1794
....................     res = 0; 
178C:  CLRF   xD7
178E:  CLRF   xD6
1790:  CLRF   xD5
1792:  CLRF   xD4
....................  
....................  return (res); 
1794:  MOVFF  D4,00
1798:  MOVFF  D5,01
179C:  MOVFF  D6,02
17A0:  MOVFF  D7,03
.................... } 
17A4:  GOTO   17BC (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
17A8:  MOVFF  CA,CE
17AC:  MOVFF  C9,CD
17B0:  MOVFF  C8,CC
17B4:  MOVFF  C7,CB
17B8:  CLRF   xCF
17BA:  BRA    1476
.................... } 
17BC:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D0,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D0,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D1,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D1,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Rele_on           output_bit(PIN_D2,1) 
.................... #define   Rele_off          output_bit(PIN_D2,0) 
.................... #define   Motor_L3_on       output_bit(PIN_D4,1) 
.................... #define   Motor_L3_off      output_bit(PIN_D4,0) 
.................... #define   Motor_L4_on       output_bit(PIN_D5,1) 
.................... #define   Motor_L4_off      output_bit(PIN_D5,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,flagmv=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,negativo=10; 
.................... signed int8   paso=0,Velocidad=1; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0,Diferencia=0.0,zero_fabrica=235.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Ajuste1=1.0,x_uno=0,G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   45,F
00BE:  BTFSC  FD8.2
00C0:  INCF   46,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   46,F
00C4:  BNZ   00CC
00C6:  MOVF   45,W
00C8:  SUBLW  C7
00CA:  BC    0100
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   46
00CE:  CLRF   45
00D0:  INCF   30,F
00D2:  BSF    18.0
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00D4:  BTFSS  17.0
00D6:  BRA    0100
....................    { 
....................       segundos++; 
00D8:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00DA:  BTFSC  17.7
00DC:  BRA    0100
....................       { 
....................          if(tempo_segundos>0) 
00DE:  MOVF   29,F
00E0:  BZ    00E6
....................          { 
....................             tempo_segundos--; 
00E2:  DECF   29,F
....................          } 
....................          else 
00E4:  BRA    0100
....................          { 
....................             if(tempo_minutos>0) 
00E6:  MOVF   28,F
00E8:  BZ    00F2
....................             { 
....................                tempo_minutos--; 
00EA:  DECF   28,F
....................                tempo_segundos=59; 
00EC:  MOVLW  3B
00EE:  MOVWF  29
....................             } 
....................             else 
00F0:  BRA    0100
....................             { 
....................                //tiempo_cumplido=1; 
....................                estadouv=0;Luz_UV_off; 
00F2:  BCF    17.0
00F4:  BCF    F8C.0
00F6:  BCF    F95.0
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
00F8:  MOVFF  2A,28
00FC:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0100:  BCF    F9E.0
0102:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0D60:  DECFSZ xC8,W
0D62:  BRA    0D78
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0D64:  MOVLW  02
0D66:  MOVWF  xD9
0D68:  MOVFF  C9,DA
0D6C:  RCALL  075E
0D6E:  MOVLW  06
0D70:  MOVWF  FF6
0D72:  MOVLW  01
0D74:  MOVWF  FF7
0D76:  RCALL  081E
....................    if(x==2) 
0D78:  MOVF   xC8,W
0D7A:  SUBLW  02
0D7C:  BNZ   0D92
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0D7E:  MOVLW  02
0D80:  MOVWF  xD9
0D82:  MOVFF  C9,DA
0D86:  RCALL  075E
0D88:  MOVLW  1A
0D8A:  MOVWF  FF6
0D8C:  MOVLW  01
0D8E:  MOVWF  FF7
0D90:  RCALL  081E
....................    if(x==3) 
0D92:  MOVF   xC8,W
0D94:  SUBLW  03
0D96:  BNZ   0DAC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0D98:  MOVLW  02
0D9A:  MOVWF  xD9
0D9C:  MOVFF  C9,DA
0DA0:  RCALL  075E
0DA2:  MOVLW  2E
0DA4:  MOVWF  FF6
0DA6:  MOVLW  01
0DA8:  MOVWF  FF7
0DAA:  RCALL  081E
....................    if(x==4) 
0DAC:  MOVF   xC8,W
0DAE:  SUBLW  04
0DB0:  BNZ   0DC6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0DB2:  MOVLW  02
0DB4:  MOVWF  xD9
0DB6:  MOVFF  C9,DA
0DBA:  RCALL  075E
0DBC:  MOVLW  42
0DBE:  MOVWF  FF6
0DC0:  MOVLW  01
0DC2:  MOVWF  FF7
0DC4:  RCALL  081E
....................    if(x==5) 
0DC6:  MOVF   xC8,W
0DC8:  SUBLW  05
0DCA:  BNZ   0DE0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Seleccion Velocidad");} 
0DCC:  MOVLW  02
0DCE:  MOVWF  xD9
0DD0:  MOVFF  C9,DA
0DD4:  RCALL  075E
0DD6:  MOVLW  56
0DD8:  MOVWF  FF6
0DDA:  MOVLW  01
0DDC:  MOVWF  FF7
0DDE:  RCALL  081E
.................... } 
0DE0:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
17BE:  MOVF   xC7,F
17C0:  BNZ   17C6
....................       {Motor_L1_off;} 
17C2:  BCF    F8C.3
17C4:  BCF    F95.3
....................    if(x==1) 
17C6:  DECFSZ xC7,W
17C8:  BRA    17CE
....................       {Motor_L1_on;} 
17CA:  BSF    F8C.3
17CC:  BCF    F95.3
.................... } 
17CE:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
070C:  RLCF   xCC,W
070E:  MOVWF  00
0710:  RLCF   00,F
0712:  MOVLW  FC
0714:  ANDWF  00,F
0716:  MOVFF  00,01
071A:  MOVF   FC2,W
071C:  ANDLW  C3
071E:  IORWF  00,W
0720:  MOVWF  FC2
0722:  MOVLW  0A
0724:  MOVWF  xDE
0726:  RCALL  05EE
0728:  BSF    FC2.1
072A:  BTFSC  FC2.1
072C:  BRA    072A
072E:  MOVFF  FC4,03
0732:  MOVFF  FC3,DF
0736:  MOVFF  FC4,E0
073A:  RCALL  06D6
073C:  MOVFF  03,D0
0740:  MOVFF  02,CF
0744:  MOVFF  01,CE
0748:  MOVFF  00,CD
074C:  MOVFF  CD,00
0750:  MOVFF  CE,01
0754:  MOVFF  CF,02
0758:  MOVFF  D0,03
.................... } 
075C:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
0F72:  CLRF   xCB
0F74:  CLRF   xCA
0F76:  CLRF   xC9
0F78:  CLRF   xC8
....................    float promediopresion=0.0; 
....................    /*if(negativo==10) 
....................     { 
....................       x_uno=sensores(1)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(1)-Diferencia; 
....................     }*/ 
....................    V1=sensores(1);  
0F7A:  MOVLW  01
0F7C:  MOVWF  xCC
0F7E:  CALL   070C
0F82:  MOVFF  03,9E
0F86:  MOVFF  02,9D
0F8A:  MOVFF  01,9C
0F8E:  MOVFF  00,9B
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
0F92:  MOVFF  9E,DE
0F96:  MOVFF  9D,DD
0F9A:  MOVFF  9C,DC
0F9E:  MOVFF  9B,DB
0FA2:  MOVFF  C6,E2
0FA6:  MOVFF  C5,E1
0FAA:  MOVFF  C4,E0
0FAE:  MOVFF  C3,DF
0FB2:  RCALL  083E
0FB4:  MOVFF  00,CC
0FB8:  MOVFF  01,CD
0FBC:  MOVFF  02,CE
0FC0:  MOVFF  03,CF
0FC4:  BSF    FD8.1
0FC6:  MOVFF  03,E2
0FCA:  MOVFF  02,E1
0FCE:  MOVFF  01,E0
0FD2:  MOVFF  00,DF
0FD6:  CLRF   xE6
0FD8:  CLRF   xE5
0FDA:  CLRF   xE4
0FDC:  MOVLW  7F
0FDE:  MOVWF  xE3
0FE0:  RCALL  0998
0FE2:  MOVFF  03,A2
0FE6:  MOVFF  02,A1
0FEA:  MOVFF  01,A0
0FEE:  MOVFF  00,9F
....................     
....................    if(Presion<0.0) 
0FF2:  MOVFF  A2,DE
0FF6:  MOVFF  A1,DD
0FFA:  MOVFF  A0,DC
0FFE:  MOVFF  9F,DB
1002:  CLRF   xE2
1004:  CLRF   xE1
1006:  CLRF   xE0
1008:  CLRF   xDF
100A:  RCALL  0EFC
100C:  BNC   1016
....................    { 
....................       Presion=0.0; 
100E:  CLRF   xA2
1010:  CLRF   xA1
1012:  CLRF   xA0
1014:  CLRF   x9F
....................    } 
....................  
....................    if(r>media-1) 
1016:  MOVLW  01
1018:  SUBWF  xC7,W
101A:  SUBWF  2C,W
101C:  BZ    1022
101E:  BNC   1022
....................    {r=0;} 
1020:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
1022:  MOVF   2C,W
1024:  MULLW  04
1026:  MOVF   FF3,W
1028:  CLRF   03
102A:  ADDLW  4B
102C:  MOVWF  FE9
102E:  MOVLW  00
1030:  ADDWFC 03,W
1032:  MOVWF  FEA
1034:  MOVFF  9F,FEF
1038:  MOVFF  A0,FEC
103C:  MOVFF  A1,FEC
1040:  MOVFF  A2,FEC
1044:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1046:  CLRF   2D
1048:  MOVLW  01
104A:  SUBWF  xC7,W
104C:  SUBWF  2D,W
104E:  BZ    1052
1050:  BC    10BC
....................    { 
....................       promediopresion+=PromPresion[q]; 
1052:  MOVF   2D,W
1054:  MULLW  04
1056:  MOVF   FF3,W
1058:  CLRF   03
105A:  ADDLW  4B
105C:  MOVWF  FE9
105E:  MOVLW  00
1060:  ADDWFC 03,W
1062:  MOVWF  FEA
1064:  MOVFF  FEF,00
1068:  MOVFF  FEC,01
106C:  MOVFF  FEC,02
1070:  MOVFF  FEC,03
1074:  MOVFF  FEA,CD
1078:  MOVFF  FE9,CC
107C:  BCF    FD8.1
107E:  MOVFF  CB,E2
1082:  MOVFF  CA,E1
1086:  MOVFF  C9,E0
108A:  MOVFF  C8,DF
108E:  MOVFF  03,E6
1092:  MOVFF  02,E5
1096:  MOVFF  01,E4
109A:  MOVFF  00,E3
109E:  RCALL  0998
10A0:  MOVFF  CD,FEA
10A4:  MOVFF  CC,FE9
10A8:  MOVFF  03,CB
10AC:  MOVFF  02,CA
10B0:  MOVFF  01,C9
10B4:  MOVFF  00,C8
....................    }  
10B8:  INCF   2D,F
10BA:  BRA    1048
....................    promediopresion=promediopresion/media;    
10BC:  CLRF   xE0
10BE:  MOVFF  C7,DF
10C2:  CALL   06D6
10C6:  MOVFF  CB,DE
10CA:  MOVFF  CA,DD
10CE:  MOVFF  C9,DC
10D2:  MOVFF  C8,DB
10D6:  MOVFF  03,E2
10DA:  MOVFF  02,E1
10DE:  MOVFF  01,E0
10E2:  MOVFF  00,DF
10E6:  CALL   083E
10EA:  MOVFF  03,CB
10EE:  MOVFF  02,CA
10F2:  MOVFF  01,C9
10F6:  MOVFF  00,C8
....................     
....................    return promediopresion; 
10FA:  MOVFF  C8,00
10FE:  MOVFF  C9,01
1102:  MOVFF  CA,02
1106:  MOVFF  CB,03
.................... } 
110A:  RETLW  00
....................  
.................... void Limita(void){ 
....................    if(Velocidad>4) 
*
0C02:  BTFSC  34.7
0C04:  BRA    0C10
0C06:  MOVF   34,W
0C08:  SUBLW  04
0C0A:  BC    0C10
....................       Velocidad=1; 
0C0C:  MOVLW  01
0C0E:  MOVWF  34
....................    if(Contrasena[0]>9) 
0C10:  MOVF   3C,W
0C12:  SUBLW  09
0C14:  BC    0C18
....................       Contrasena[0]=0; 
0C16:  CLRF   3C
....................    if(Contrasena[1]>9) 
0C18:  MOVF   3D,W
0C1A:  SUBLW  09
0C1C:  BC    0C20
....................       Contrasena[1]=0; 
0C1E:  CLRF   3D
....................    if(Contrasena[2]>9) 
0C20:  MOVF   3E,W
0C22:  SUBLW  09
0C24:  BC    0C28
....................       Contrasena[2]=0; 
0C26:  CLRF   3E
....................    if(Contrasena[3]>9) 
0C28:  MOVF   3F,W
0C2A:  SUBLW  09
0C2C:  BC    0C30
....................       Contrasena[3]=0; 
0C2E:  CLRF   3F
....................    if(tempo_minutos>60) 
0C30:  MOVF   28,W
0C32:  SUBLW  3C
0C34:  BC    0C38
....................       tempo_minutos=0; 
0C36:  CLRF   28
....................    if(tempo_segundos) 
0C38:  MOVF   29,F
0C3A:  BZ    0C3E
....................       tempo_segundos=0; 
0C3C:  CLRF   29
....................    if(segundos>60) 
0C3E:  MOVF   22,W
0C40:  SUBLW  3C
0C42:  BC    0C46
....................       segundos=0; 
0C44:  CLRF   22
....................    if(minutos>60) 
0C46:  MOVF   23,W
0C48:  SUBLW  3C
0C4A:  BC    0C4E
....................       minutos=0;  
0C4C:  CLRF   23
.................... } 
0C4E:  GOTO   1C64 (RETURN)
.................... void main () 
.................... { 
*
17D0:  CLRF   FF8
17D2:  BCF    FD0.7
17D4:  BSF    07.7
17D6:  CLRF   FEA
17D8:  CLRF   FE9
17DA:  BCF    17.0
17DC:  BCF    17.1
17DE:  BCF    17.2
17E0:  BCF    17.3
17E2:  BCF    17.4
17E4:  BCF    17.5
17E6:  BCF    17.6
17E8:  BCF    17.7
17EA:  BCF    18.0
17EC:  BCF    18.1
17EE:  BCF    18.2
17F0:  BCF    18.3
17F2:  CLRF   19
17F4:  MOVLW  06
17F6:  MOVWF  1A
17F8:  MOVLW  02
17FA:  MOVWF  1B
17FC:  MOVLW  0B
17FE:  MOVWF  1C
1800:  MOVLW  02
1802:  MOVWF  1D
1804:  MOVLW  03
1806:  MOVWF  1E
1808:  MOVLW  02
180A:  MOVWF  1F
180C:  MOVWF  20
180E:  MOVLW  04
1810:  MOVWF  21
1812:  CLRF   22
1814:  CLRF   23
1816:  CLRF   24
1818:  CLRF   25
181A:  CLRF   26
181C:  CLRF   27
181E:  CLRF   28
1820:  CLRF   29
1822:  CLRF   2A
1824:  CLRF   2B
1826:  CLRF   2C
1828:  CLRF   2D
182A:  CLRF   2E
182C:  MOVLW  01
182E:  MOVWF  2F
1830:  CLRF   30
1832:  CLRF   31
1834:  MOVLW  0A
1836:  MOVWF  32
1838:  CLRF   33
183A:  MOVLW  01
183C:  MOVWF  34
183E:  CLRF   40
1840:  CLRF   41
1842:  CLRF   42
1844:  CLRF   43
1846:  CLRF   44
1848:  CLRF   48
184A:  CLRF   47
184C:  CLRF   4A
184E:  CLRF   49
1850:  CLRF   x9E
1852:  CLRF   x9D
1854:  CLRF   x9C
1856:  CLRF   x9B
1858:  CLRF   xA2
185A:  CLRF   xA1
185C:  CLRF   xA0
185E:  CLRF   x9F
1860:  CLRF   xA6
1862:  CLRF   xA5
1864:  CLRF   xA4
1866:  CLRF   xA3
1868:  CLRF   xAA
186A:  CLRF   xA9
186C:  CLRF   xA8
186E:  CLRF   xA7
1870:  CLRF   xAE
1872:  CLRF   xAD
1874:  CLRF   xAC
1876:  CLRF   xAB
1878:  CLRF   xB2
187A:  CLRF   xB1
187C:  MOVLW  6B
187E:  MOVWF  xB0
1880:  MOVLW  86
1882:  MOVWF  xAF
1884:  CLRF   xB6
1886:  CLRF   xB5
1888:  CLRF   xB4
188A:  CLRF   xB3
188C:  CLRF   xBA
188E:  CLRF   xB9
1890:  CLRF   xB8
1892:  CLRF   xB7
1894:  CLRF   xBE
1896:  CLRF   xBD
1898:  CLRF   xBC
189A:  MOVLW  7F
189C:  MOVWF  xBB
189E:  CLRF   xC2
18A0:  CLRF   xC1
18A2:  CLRF   xC0
18A4:  CLRF   xBF
18A6:  CLRF   xC6
18A8:  CLRF   xC5
18AA:  CLRF   xC4
18AC:  MOVLW  80
18AE:  MOVWF  xC3
18B0:  MOVF   FC1,W
18B2:  ANDLW  C0
18B4:  IORLW  0F
18B6:  MOVWF  FC1
18B8:  MOVLW  07
18BA:  MOVWF  FB4
18BC:  MOVLW  3E
18BE:  MOVWF  35
18C0:  MOVLW  20
18C2:  MOVWF  36
18C4:  MOVLW  5E
18C6:  MOVWF  37
18C8:  CLRF   38
18CA:  CLRF   39
18CC:  CLRF   3A
18CE:  CLRF   3B
18D0:  CLRF   3C
18D2:  CLRF   3D
18D4:  CLRF   3E
18D6:  CLRF   3F
18D8:  CLRF   4B
18DA:  CLRF   4C
18DC:  CLRF   4D
18DE:  CLRF   4E
18E0:  CLRF   4F
18E2:  CLRF   50
18E4:  CLRF   51
18E6:  CLRF   52
18E8:  CLRF   53
18EA:  CLRF   54
18EC:  CLRF   55
18EE:  CLRF   56
18F0:  CLRF   57
18F2:  CLRF   58
18F4:  CLRF   59
18F6:  CLRF   5A
18F8:  CLRF   5B
18FA:  CLRF   5C
18FC:  CLRF   5D
18FE:  CLRF   5E
1900:  CLRF   5F
1902:  CLRF   x60
1904:  CLRF   x61
1906:  CLRF   x62
1908:  CLRF   x63
190A:  CLRF   x64
190C:  CLRF   x65
190E:  CLRF   x66
1910:  CLRF   x67
1912:  CLRF   x68
1914:  CLRF   x69
1916:  CLRF   x6A
1918:  CLRF   x6B
191A:  CLRF   x6C
191C:  CLRF   x6D
191E:  CLRF   x6E
1920:  CLRF   x6F
1922:  CLRF   x70
1924:  CLRF   x71
1926:  CLRF   x72
1928:  CLRF   x73
192A:  CLRF   x74
192C:  CLRF   x75
192E:  CLRF   x76
1930:  CLRF   x77
1932:  CLRF   x78
1934:  CLRF   x79
1936:  CLRF   x7A
1938:  CLRF   x7B
193A:  CLRF   x7C
193C:  CLRF   x7D
193E:  CLRF   x7E
1940:  CLRF   x7F
1942:  CLRF   x80
1944:  CLRF   x81
1946:  CLRF   x82
1948:  CLRF   x83
194A:  CLRF   x84
194C:  CLRF   x85
194E:  CLRF   x86
1950:  CLRF   x87
1952:  CLRF   x88
1954:  CLRF   x89
1956:  CLRF   x8A
1958:  CLRF   x8B
195A:  CLRF   x8C
195C:  CLRF   x8D
195E:  CLRF   x8E
1960:  CLRF   x8F
1962:  CLRF   x90
1964:  CLRF   x91
1966:  CLRF   x92
1968:  CLRF   x93
196A:  CLRF   x94
196C:  CLRF   x95
196E:  CLRF   x96
1970:  CLRF   x97
1972:  CLRF   x98
1974:  CLRF   x99
1976:  CLRF   x9A
....................    output_d(0); 
1978:  CLRF   F95
197A:  CLRF   F8C
....................    lcd_init(); 
197C:  CALL   0680
....................    enable_interrupts(global); 
1980:  MOVLW  C0
1982:  IORWF  FF2,F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1984:  MOVLW  85
1986:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1988:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
198A:  MOVF   FC1,W
198C:  ANDLW  C0
198E:  IORLW  0D
1990:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1992:  BCF    FC0.0
1994:  BSF    FC0.1
1996:  BCF    FC0.2
1998:  BSF    FC0.7
199A:  BSF    FC2.0
....................    sensores(0); 
199C:  CLRF   xCC
199E:  CALL   070C
....................    lcd_gotoxy(1,1); 
19A2:  MOVLW  01
19A4:  MOVWF  xD9
19A6:  MOVWF  xDA
19A8:  CALL   075E
....................    printf(lcd_putc," MODULO  DE   FLUJO "); 
19AC:  MOVLW  6A
19AE:  MOVWF  FF6
19B0:  MOVLW  01
19B2:  MOVWF  FF7
19B4:  CALL   081E
....................    lcd_gotoxy(1,2); 
19B8:  MOVLW  01
19BA:  MOVWF  xD9
19BC:  MOVLW  02
19BE:  MOVWF  xDA
19C0:  CALL   075E
....................    printf(lcd_putc,"      LAMINAR       "); 
19C4:  MOVLW  80
19C6:  MOVWF  FF6
19C8:  MOVLW  01
19CA:  MOVWF  FF7
19CC:  CALL   081E
....................    lcd_gotoxy(1,3); 
19D0:  MOVLW  01
19D2:  MOVWF  xD9
19D4:  MOVLW  03
19D6:  MOVWF  xDA
19D8:  CALL   075E
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
19DC:  MOVLW  96
19DE:  MOVWF  FF6
19E0:  MOVLW  01
19E2:  MOVWF  FF7
19E4:  CALL   081E
....................    lcd_gotoxy(1,4); 
19E8:  MOVLW  01
19EA:  MOVWF  xD9
19EC:  MOVLW  04
19EE:  MOVWF  xDA
19F0:  CALL   075E
....................    printf(lcd_putc," REF:  JPCFLVMD2434 "); 
19F4:  MOVLW  AC
19F6:  MOVWF  FF6
19F8:  MOVLW  01
19FA:  MOVWF  FF7
19FC:  CALL   081E
....................    delay_ms(2000); 
1A00:  MOVLW  08
1A02:  MOVWF  xC7
1A04:  MOVLW  FA
1A06:  MOVWF  xDE
1A08:  CALL   05EE
1A0C:  DECFSZ xC7,F
1A0E:  BRA    1A04
....................    printf(lcd_putc,"\f"); 
1A10:  MOVLW  0C
1A12:  MOVWF  xD8
1A14:  CALL   07C0
....................     
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................    Velocidad=read_eeprom(5); 
1A18:  MOVFF  FF2,C7
1A1C:  BCF    FF2.7
1A1E:  MOVLW  05
1A20:  MOVWF  FA9
1A22:  BCF    FA6.6
1A24:  BCF    FA6.7
1A26:  BSF    FA6.0
1A28:  MOVF   FA8,W
1A2A:  BTFSC  xC7.7
1A2C:  BSF    FF2.7
1A2E:  MOVWF  34
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1A30:  MOVFF  FF2,C7
1A34:  BCF    FF2.7
1A36:  CLRF   FA9
1A38:  BCF    FA6.6
1A3A:  BCF    FA6.7
1A3C:  BSF    FA6.0
1A3E:  MOVF   FA8,W
1A40:  BTFSC  xC7.7
1A42:  BSF    FF2.7
1A44:  MOVWF  3C
1A46:  MOVLW  14
1A48:  MOVWF  xDE
1A4A:  CALL   05EE
1A4E:  MOVFF  FF2,C7
1A52:  BCF    FF2.7
1A54:  MOVLW  01
1A56:  MOVWF  FA9
1A58:  BCF    FA6.6
1A5A:  BCF    FA6.7
1A5C:  BSF    FA6.0
1A5E:  MOVF   FA8,W
1A60:  BTFSC  xC7.7
1A62:  BSF    FF2.7
1A64:  MOVWF  3D
1A66:  MOVLW  14
1A68:  MOVWF  xDE
1A6A:  CALL   05EE
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1A6E:  MOVFF  FF2,C7
1A72:  BCF    FF2.7
1A74:  MOVLW  02
1A76:  MOVWF  FA9
1A78:  BCF    FA6.6
1A7A:  BCF    FA6.7
1A7C:  BSF    FA6.0
1A7E:  MOVF   FA8,W
1A80:  BTFSC  xC7.7
1A82:  BSF    FF2.7
1A84:  MOVWF  3E
1A86:  MOVLW  14
1A88:  MOVWF  xDE
1A8A:  CALL   05EE
1A8E:  MOVFF  FF2,C7
1A92:  BCF    FF2.7
1A94:  MOVLW  03
1A96:  MOVWF  FA9
1A98:  BCF    FA6.6
1A9A:  BCF    FA6.7
1A9C:  BSF    FA6.0
1A9E:  MOVF   FA8,W
1AA0:  BTFSC  xC7.7
1AA2:  BSF    FF2.7
1AA4:  MOVWF  3F
1AA6:  MOVLW  14
1AA8:  MOVWF  xDE
1AAA:  CALL   05EE
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(21); 
1AAE:  MOVFF  FF2,C7
1AB2:  BCF    FF2.7
1AB4:  MOVLW  14
1AB6:  MOVWF  FA9
1AB8:  BCF    FA6.6
1ABA:  BCF    FA6.7
1ABC:  BSF    FA6.0
1ABE:  MOVF   FA8,W
1AC0:  BTFSC  xC7.7
1AC2:  BSF    FF2.7
1AC4:  MOVWF  28
1AC6:  MOVFF  FF2,C7
1ACA:  BCF    FF2.7
1ACC:  MOVLW  15
1ACE:  MOVWF  FA9
1AD0:  BCF    FA6.6
1AD2:  BCF    FA6.7
1AD4:  BSF    FA6.0
1AD6:  MOVF   FA8,W
1AD8:  BTFSC  xC7.7
1ADA:  BSF    FF2.7
1ADC:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1ADE:  MOVFF  FF2,C7
1AE2:  BCF    FF2.7
1AE4:  MOVLW  32
1AE6:  MOVWF  FA9
1AE8:  BCF    FA6.6
1AEA:  BCF    FA6.7
1AEC:  BSF    FA6.0
1AEE:  MOVF   FA8,W
1AF0:  BTFSC  xC7.7
1AF2:  BSF    FF2.7
1AF4:  MOVWF  22
1AF6:  MOVFF  FF2,C7
1AFA:  BCF    FF2.7
1AFC:  MOVLW  33
1AFE:  MOVWF  FA9
1B00:  BCF    FA6.6
1B02:  BCF    FA6.7
1B04:  BSF    FA6.0
1B06:  MOVF   FA8,W
1B08:  BTFSC  xC7.7
1B0A:  BSF    FF2.7
1B0C:  MOVWF  23
1B0E:  MOVFF  FF2,C7
1B12:  BCF    FF2.7
1B14:  MOVLW  34
1B16:  MOVWF  FA9
1B18:  BCF    FA6.6
1B1A:  BCF    FA6.7
1B1C:  BSF    FA6.0
1B1E:  MOVF   FA8,W
1B20:  BTFSC  xC7.7
1B22:  BSF    FF2.7
1B24:  MOVWF  24
1B26:  MOVFF  FF2,C7
1B2A:  BCF    FF2.7
1B2C:  MOVLW  35
1B2E:  MOVWF  FA9
1B30:  BCF    FA6.6
1B32:  BCF    FA6.7
1B34:  BSF    FA6.0
1B36:  MOVF   FA8,W
1B38:  BTFSC  xC7.7
1B3A:  BSF    FF2.7
1B3C:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1B3E:  MOVFF  FF2,C7
1B42:  BCF    FF2.7
1B44:  MOVLW  3C
1B46:  MOVWF  FA9
1B48:  BCF    FA6.6
1B4A:  BCF    FA6.7
1B4C:  BSF    FA6.0
1B4E:  MOVF   FA8,W
1B50:  BTFSC  xC7.7
1B52:  BSF    FF2.7
1B54:  MOVWF  26
....................    G_h=read_eeprom(61); 
1B56:  MOVFF  FF2,C7
1B5A:  BCF    FF2.7
1B5C:  MOVLW  3D
1B5E:  MOVWF  FA9
1B60:  BCF    FA6.6
1B62:  BCF    FA6.7
1B64:  BSF    FA6.0
1B66:  MOVF   FA8,W
1B68:  BTFSC  xC7.7
1B6A:  BSF    FF2.7
1B6C:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1B6E:  MOVFF  27,4A
1B72:  MOVFF  26,49
....................    G=G16; 
1B76:  MOVFF  4A,E0
1B7A:  MOVFF  49,DF
1B7E:  CALL   06D6
1B82:  MOVFF  03,C6
1B86:  MOVFF  02,C5
1B8A:  MOVFF  01,C4
1B8E:  MOVFF  00,C3
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
1B92:  MOVFF  FF2,C7
1B96:  BCF    FF2.7
1B98:  MOVLW  3C
1B9A:  MOVWF  FA9
1B9C:  BCF    FA6.6
1B9E:  BCF    FA6.7
1BA0:  BSF    FA6.0
1BA2:  MOVF   FA8,W
1BA4:  BTFSC  xC7.7
1BA6:  BSF    FF2.7
1BA8:  MOVWF  43
....................    Temporal1=read_eeprom(61); 
1BAA:  MOVFF  FF2,C7
1BAE:  BCF    FF2.7
1BB0:  MOVLW  3D
1BB2:  MOVWF  FA9
1BB4:  BCF    FA6.6
1BB6:  BCF    FA6.7
1BB8:  BSF    FA6.0
1BBA:  MOVF   FA8,W
1BBC:  BTFSC  xC7.7
1BBE:  BSF    FF2.7
1BC0:  CLRF   xE0
1BC2:  MOVWF  xDF
1BC4:  CALL   06D6
1BC8:  MOVFF  03,B6
1BCC:  MOVFF  02,B5
1BD0:  MOVFF  01,B4
1BD4:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
1BD8:  MOVFF  B6,DE
1BDC:  MOVFF  B5,DD
1BE0:  MOVFF  B4,DC
1BE4:  MOVFF  B3,DB
1BE8:  CLRF   xE2
1BEA:  CLRF   xE1
1BEC:  MOVLW  48
1BEE:  MOVWF  xE0
1BF0:  MOVLW  85
1BF2:  MOVWF  xDF
1BF4:  CALL   083E
1BF8:  MOVFF  03,B6
1BFC:  MOVFF  02,B5
1C00:  MOVFF  01,B4
1C04:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
1C08:  CLRF   xE0
1C0A:  MOVFF  43,DF
1C0E:  CALL   06D6
1C12:  BCF    FD8.1
1C14:  MOVFF  03,E2
1C18:  MOVFF  02,E1
1C1C:  MOVFF  01,E0
1C20:  MOVFF  00,DF
1C24:  MOVFF  B6,E6
1C28:  MOVFF  B5,E5
1C2C:  MOVFF  B4,E4
1C30:  MOVFF  B3,E3
1C34:  CALL   0998
1C38:  MOVFF  03,AE
1C3C:  MOVFF  02,AD
1C40:  MOVFF  01,AC
1C44:  MOVFF  00,AB
....................     
....................    negativo=read_eeprom(70); 
1C48:  MOVFF  FF2,C7
1C4C:  BCF    FF2.7
1C4E:  MOVLW  46
1C50:  MOVWF  FA9
1C52:  BCF    FA6.6
1C54:  BCF    FA6.7
1C56:  BSF    FA6.0
1C58:  MOVF   FA8,W
1C5A:  BTFSC  xC7.7
1C5C:  BSF    FF2.7
1C5E:  MOVWF  32
....................    Limita(); 
1C60:  GOTO   0C02
....................    horas=make16(horasH,horasL); 
1C64:  MOVFF  25,48
1C68:  MOVFF  24,47
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1C6C:  MOVFF  28,2A
1C70:  MOVFF  29,2B
....................    delay_ms(20); 
1C74:  MOVLW  14
1C76:  MOVWF  xDE
1C78:  CALL   05EE
....................    Velocidad=read_eeprom(90); 
1C7C:  MOVFF  FF2,C7
1C80:  BCF    FF2.7
1C82:  MOVLW  5A
1C84:  MOVWF  FA9
1C86:  BCF    FA6.6
1C88:  BCF    FA6.7
1C8A:  BSF    FA6.0
1C8C:  MOVF   FA8,W
1C8E:  BTFSC  xC7.7
1C90:  BSF    FF2.7
1C92:  MOVWF  34
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
....................    if(Velocidad==10) 
1C94:  MOVF   34,W
1C96:  SUBLW  0A
1C98:  BNZ   1CA0
....................    { 
....................       Rele_on; 
1C9A:  BSF    F8C.2
1C9C:  BCF    F95.2
....................    } 
....................    else 
1C9E:  BRA    1CA4
....................    { 
....................       Rele_off; 
1CA0:  BCF    F8C.2
1CA2:  BCF    F95.2
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1CA4:  MOVF   19,F
1CA6:  BTFSS  FD8.2
1CA8:  BRA    2052
....................    lcd_gotoxy(1,1); 
1CAA:  MOVLW  01
1CAC:  MOVWF  xD9
1CAE:  MOVWF  xDA
1CB0:  CALL   075E
....................    printf(lcd_putc,"     Ingrese        "); 
1CB4:  MOVLW  C2
1CB6:  MOVWF  FF6
1CB8:  MOVLW  01
1CBA:  MOVWF  FF7
1CBC:  CALL   081E
....................    lcd_gotoxy(1,2); 
1CC0:  MOVLW  01
1CC2:  MOVWF  xD9
1CC4:  MOVLW  02
1CC6:  MOVWF  xDA
1CC8:  CALL   075E
....................    printf(lcd_putc,"    Contraseña      "); 
1CCC:  MOVLW  D8
1CCE:  MOVWF  FF6
1CD0:  MOVLW  01
1CD2:  MOVWF  FF7
1CD4:  CALL   081E
....................    lcd_gotoxy(1,3); 
1CD8:  MOVLW  01
1CDA:  MOVWF  xD9
1CDC:  MOVLW  03
1CDE:  MOVWF  xDA
1CE0:  CALL   075E
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1CE4:  MOVLW  EE
1CE6:  MOVWF  FF6
1CE8:  MOVLW  01
1CEA:  MOVWF  FF7
1CEC:  MOVLW  0A
1CEE:  MOVWF  xCB
1CF0:  CALL   0C52
1CF4:  MOVFF  38,C7
1CF8:  MOVLW  1F
1CFA:  MOVWF  xC8
1CFC:  CALL   0C98
1D00:  MOVFF  39,C7
1D04:  MOVLW  1F
1D06:  MOVWF  xC8
1D08:  CALL   0C98
1D0C:  MOVFF  3A,C7
1D10:  MOVLW  1F
1D12:  MOVWF  xC8
1D14:  CALL   0C98
1D18:  MOVFF  3B,C7
1D1C:  MOVLW  1F
1D1E:  MOVWF  xC8
1D20:  CALL   0C98
1D24:  MOVLW  20
1D26:  MOVWF  xD8
1D28:  CALL   07C0
1D2C:  MOVLW  20
1D2E:  MOVWF  xD8
1D30:  CALL   07C0
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1D34:  BSF    F92.5
1D36:  BTFSS  F80.5
1D38:  BRA    1D5C
....................       {  if(Flanco == 0)  
1D3A:  BTFSC  17.3
1D3C:  BRA    1D5A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1D3E:  MOVLW  0B
1D40:  SUBWF  1C,W
1D42:  CLRF   03
1D44:  ADDLW  38
1D46:  MOVWF  FE9
1D48:  MOVLW  00
1D4A:  ADDWFC 03,W
1D4C:  MOVWF  FEA
1D4E:  INCF   FEF,F
1D50:  BSF    17.3
1D52:  MOVLW  1E
1D54:  MOVWF  xDE
1D56:  CALL   05EE
....................          else 
1D5A:  BRA    1D5E
....................             {Flanco = 0;} 
1D5C:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1D5E:  BSF    F96.0
1D60:  BTFSS  F84.0
1D62:  BRA    1D86
....................       {  if(Flanco2 == 0)  
1D64:  BTFSC  17.5
1D66:  BRA    1D84
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1D68:  MOVLW  0B
1D6A:  SUBWF  1C,W
1D6C:  CLRF   03
1D6E:  ADDLW  38
1D70:  MOVWF  FE9
1D72:  MOVLW  00
1D74:  ADDWFC 03,W
1D76:  MOVWF  FEA
1D78:  DECF   FEF,F
1D7A:  BSF    17.5
1D7C:  MOVLW  1E
1D7E:  MOVWF  xDE
1D80:  CALL   05EE
....................          else 
1D84:  BRA    1D88
....................             {Flanco2 = 0;} 
1D86:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1D88:  BSF    F96.1
1D8A:  BTFSS  F84.1
1D8C:  BRA    1DA8
....................       {  if(Flanco1 == 0)  
1D8E:  BTFSC  17.4
1D90:  BRA    1DA6
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1D92:  BSF    17.4
1D94:  INCF   1C,F
1D96:  MOVLW  1E
1D98:  MOVWF  xDE
1D9A:  CALL   05EE
1D9E:  MOVLW  0C
1DA0:  MOVWF  xD8
1DA2:  CALL   07C0
....................          else 
1DA6:  BRA    1DAA
....................             {Flanco1 = 0;}    
1DA8:  BCF    17.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
1DAA:  BSF    F96.2
1DAC:  BTFSS  F84.2
1DAE:  BRA    1DCA
....................       {  if(Flanco3 == 0)  
1DB0:  BTFSC  17.6
1DB2:  BRA    1DC8
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
1DB4:  BSF    17.6
1DB6:  DECF   1C,F
1DB8:  MOVLW  1E
1DBA:  MOVWF  xDE
1DBC:  CALL   05EE
1DC0:  MOVLW  0C
1DC2:  MOVWF  xD8
1DC4:  CALL   07C0
....................          else 
1DC8:  BRA    1DCC
....................             {Flanco3 = 0;}     
1DCA:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1DCC:  MOVLW  0B
1DCE:  SUBWF  1C,W
1DD0:  CLRF   03
1DD2:  ADDLW  38
1DD4:  MOVWF  FE9
1DD6:  MOVLW  00
1DD8:  ADDWFC 03,W
1DDA:  MOVWF  FEA
1DDC:  BTFSC  FEF.7
1DDE:  BRA    1DE2
1DE0:  BRA    1DF6
....................        {clave[unidad-11]=9;} 
1DE2:  MOVLW  0B
1DE4:  SUBWF  1C,W
1DE6:  CLRF   03
1DE8:  ADDLW  38
1DEA:  MOVWF  FE9
1DEC:  MOVLW  00
1DEE:  ADDWFC 03,W
1DF0:  MOVWF  FEA
1DF2:  MOVLW  09
1DF4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1DF6:  MOVLW  0B
1DF8:  SUBWF  1C,W
1DFA:  CLRF   03
1DFC:  ADDLW  38
1DFE:  MOVWF  FE9
1E00:  MOVLW  00
1E02:  ADDWFC 03,W
1E04:  MOVWF  FEA
1E06:  BTFSC  FEF.7
1E08:  BRA    1E22
1E0A:  MOVF   FEF,W
1E0C:  SUBLW  09
1E0E:  BC    1E22
....................        {clave[unidad-11]=0;} 
1E10:  MOVLW  0B
1E12:  SUBWF  1C,W
1E14:  CLRF   03
1E16:  ADDLW  38
1E18:  MOVWF  FE9
1E1A:  MOVLW  00
1E1C:  ADDWFC 03,W
1E1E:  MOVWF  FEA
1E20:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1E22:  MOVF   1C,W
1E24:  SUBLW  0A
1E26:  BNC   1E2C
....................        {unidad=11;} 
1E28:  MOVLW  0B
1E2A:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1E2C:  MOVFF  1C,D9
1E30:  MOVLW  04
1E32:  MOVWF  xDA
1E34:  CALL   075E
....................        lcd_putc(t[2]); 
1E38:  MOVFF  37,D8
1E3C:  CALL   07C0
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1E40:  MOVF   1C,W
1E42:  SUBLW  0E
1E44:  BTFSC  FD8.0
1E46:  BRA    202E
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1E48:  MOVF   38,W
1E4A:  SUBLW  03
1E4C:  BNZ   1F28
1E4E:  MOVF   39,W
1E50:  SUBLW  08
1E52:  BNZ   1F28
1E54:  MOVF   3A,W
1E56:  SUBLW  09
1E58:  BNZ   1F28
1E5A:  MOVF   3B,W
1E5C:  SUBLW  02
1E5E:  BNZ   1F28
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1E60:  CLRF   FA9
1E62:  CLRF   FA8
1E64:  BCF    FA6.6
1E66:  BCF    FA6.7
1E68:  BSF    FA6.2
1E6A:  MOVF   FF2,W
1E6C:  MOVWF  00
1E6E:  BCF    FF2.7
1E70:  MOVLB  F
1E72:  MOVLW  55
1E74:  MOVWF  FA7
1E76:  MOVLW  AA
1E78:  MOVWF  FA7
1E7A:  BSF    FA6.1
1E7C:  BTFSC  FA6.1
1E7E:  BRA    1E7C
1E80:  BCF    FA6.2
1E82:  MOVF   00,W
1E84:  IORWF  FF2,F
1E86:  MOVLW  14
1E88:  MOVLB  0
1E8A:  MOVWF  xDE
1E8C:  CALL   05EE
1E90:  MOVLW  01
1E92:  MOVWF  FA9
1E94:  CLRF   FA8
1E96:  BCF    FA6.6
1E98:  BCF    FA6.7
1E9A:  BSF    FA6.2
1E9C:  MOVF   FF2,W
1E9E:  MOVWF  00
1EA0:  BCF    FF2.7
1EA2:  MOVLB  F
1EA4:  MOVLW  55
1EA6:  MOVWF  FA7
1EA8:  MOVLW  AA
1EAA:  MOVWF  FA7
1EAC:  BSF    FA6.1
1EAE:  BTFSC  FA6.1
1EB0:  BRA    1EAE
1EB2:  BCF    FA6.2
1EB4:  MOVF   00,W
1EB6:  IORWF  FF2,F
1EB8:  MOVLW  14
1EBA:  MOVLB  0
1EBC:  MOVWF  xDE
1EBE:  CALL   05EE
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1EC2:  MOVLW  02
1EC4:  MOVWF  FA9
1EC6:  CLRF   FA8
1EC8:  BCF    FA6.6
1ECA:  BCF    FA6.7
1ECC:  BSF    FA6.2
1ECE:  MOVF   FF2,W
1ED0:  MOVWF  00
1ED2:  BCF    FF2.7
1ED4:  MOVLB  F
1ED6:  MOVLW  55
1ED8:  MOVWF  FA7
1EDA:  MOVLW  AA
1EDC:  MOVWF  FA7
1EDE:  BSF    FA6.1
1EE0:  BTFSC  FA6.1
1EE2:  BRA    1EE0
1EE4:  BCF    FA6.2
1EE6:  MOVF   00,W
1EE8:  IORWF  FF2,F
1EEA:  MOVLW  14
1EEC:  MOVLB  0
1EEE:  MOVWF  xDE
1EF0:  CALL   05EE
1EF4:  MOVLW  03
1EF6:  MOVWF  FA9
1EF8:  CLRF   FA8
1EFA:  BCF    FA6.6
1EFC:  BCF    FA6.7
1EFE:  BSF    FA6.2
1F00:  MOVF   FF2,W
1F02:  MOVWF  00
1F04:  BCF    FF2.7
1F06:  MOVLB  F
1F08:  MOVLW  55
1F0A:  MOVWF  FA7
1F0C:  MOVLW  AA
1F0E:  MOVWF  FA7
1F10:  BSF    FA6.1
1F12:  BTFSC  FA6.1
1F14:  BRA    1F12
1F16:  BCF    FA6.2
1F18:  MOVF   00,W
1F1A:  IORWF  FF2,F
1F1C:  MOVLW  14
1F1E:  MOVLB  0
1F20:  MOVWF  xDE
1F22:  CALL   05EE
....................              reset_cpu();} 
1F26:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1F28:  MOVF   3C,W
1F2A:  SUBWF  38,W
1F2C:  BNZ   1FC0
1F2E:  MOVF   3D,W
1F30:  SUBWF  39,W
1F32:  BNZ   1FC0
1F34:  MOVF   3E,W
1F36:  SUBWF  3A,W
1F38:  BNZ   1FC0
1F3A:  MOVF   3F,W
1F3C:  SUBWF  3B,W
1F3E:  BNZ   1FC0
....................             {lcd_gotoxy(1,1); 
1F40:  MOVLW  01
1F42:  MOVWF  xD9
1F44:  MOVWF  xDA
1F46:  CALL   075E
....................             printf(lcd_putc,"                   "); 
1F4A:  MOVLW  04
1F4C:  MOVWF  FF6
1F4E:  MOVLW  02
1F50:  MOVWF  FF7
1F52:  CALL   081E
....................             lcd_gotoxy(1,2); 
1F56:  MOVLW  01
1F58:  MOVWF  xD9
1F5A:  MOVLW  02
1F5C:  MOVWF  xDA
1F5E:  CALL   075E
....................             printf(lcd_putc,"     Contraseña    "); 
1F62:  MOVLW  18
1F64:  MOVWF  FF6
1F66:  MOVLW  02
1F68:  MOVWF  FF7
1F6A:  CALL   081E
....................             lcd_gotoxy(1,3); 
1F6E:  MOVLW  01
1F70:  MOVWF  xD9
1F72:  MOVLW  03
1F74:  MOVWF  xDA
1F76:  CALL   075E
....................             printf(lcd_putc,"      Correcta     "); 
1F7A:  MOVLW  2C
1F7C:  MOVWF  FF6
1F7E:  MOVLW  02
1F80:  MOVWF  FF7
1F82:  CALL   081E
....................             lcd_gotoxy(1,4); 
1F86:  MOVLW  01
1F88:  MOVWF  xD9
1F8A:  MOVLW  04
1F8C:  MOVWF  xDA
1F8E:  CALL   075E
....................             printf(lcd_putc,"                   "); 
1F92:  MOVLW  40
1F94:  MOVWF  FF6
1F96:  MOVLW  02
1F98:  MOVWF  FF7
1F9A:  CALL   081E
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
1F9E:  MOVLW  04
1FA0:  MOVWF  xC7
1FA2:  MOVLW  FA
1FA4:  MOVWF  xDE
1FA6:  CALL   05EE
1FAA:  DECFSZ xC7,F
1FAC:  BRA    1FA2
1FAE:  MOVLW  64
1FB0:  MOVWF  19
1FB2:  MOVLW  0B
1FB4:  MOVWF  1C
1FB6:  MOVLW  0C
1FB8:  MOVWF  xD8
1FBA:  CALL   07C0
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1FBE:  BRA    202E
....................          {lcd_gotoxy(1,1); 
1FC0:  MOVLW  01
1FC2:  MOVWF  xD9
1FC4:  MOVWF  xDA
1FC6:  CALL   075E
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1FCA:  MOVLW  01
1FCC:  MOVWF  xD9
1FCE:  MOVLW  02
1FD0:  MOVWF  xDA
1FD2:  CALL   075E
....................             printf(lcd_putc,"     Contraseña    "); 
1FD6:  MOVLW  54
1FD8:  MOVWF  FF6
1FDA:  MOVLW  02
1FDC:  MOVWF  FF7
1FDE:  CALL   081E
....................             lcd_gotoxy(1,3); 
1FE2:  MOVLW  01
1FE4:  MOVWF  xD9
1FE6:  MOVLW  03
1FE8:  MOVWF  xDA
1FEA:  CALL   075E
....................             printf(lcd_putc,"     Incorrecta    "); 
1FEE:  MOVLW  68
1FF0:  MOVWF  FF6
1FF2:  MOVLW  02
1FF4:  MOVWF  FF7
1FF6:  CALL   081E
....................             lcd_gotoxy(1,4); 
1FFA:  MOVLW  01
1FFC:  MOVWF  xD9
1FFE:  MOVLW  04
2000:  MOVWF  xDA
2002:  CALL   075E
....................             printf(lcd_putc,"                   "); 
2006:  MOVLW  7C
2008:  MOVWF  FF6
200A:  MOVLW  02
200C:  MOVWF  FF7
200E:  CALL   081E
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
2012:  MOVLW  04
2014:  MOVWF  xC7
2016:  MOVLW  FA
2018:  MOVWF  xDE
201A:  CALL   05EE
201E:  DECFSZ xC7,F
2020:  BRA    2016
2022:  MOVLW  0B
2024:  MOVWF  1C
2026:  MOVLW  0C
2028:  MOVWF  xD8
202A:  CALL   07C0
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
202E:  MOVF   1C,W
2030:  SUBLW  0B
2032:  BC    2052
2034:  MOVF   1C,W
2036:  SUBLW  0D
2038:  BNC   2052
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
203A:  MOVLW  01
203C:  SUBWF  1C,W
203E:  MOVWF  xC7
2040:  MOVWF  xD9
2042:  MOVLW  04
2044:  MOVWF  xDA
2046:  CALL   075E
....................             lcd_putc(t[1]); 
204A:  MOVFF  36,D8
204E:  CALL   07C0
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2052:  DECFSZ 19,W
2054:  BRA    2246
....................    lcd_gotoxy(1,1); 
2056:  MOVLW  01
2058:  MOVWF  xD9
205A:  MOVWF  xDA
205C:  CALL   075E
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
2060:  MOVLW  90
2062:  MOVWF  FF6
2064:  MOVLW  02
2066:  MOVWF  FF7
2068:  CALL   081E
....................       if(paso<0) 
206C:  BTFSC  33.7
206E:  BRA    2072
2070:  BRA    2074
....................         {paso=0;} 
2072:  CLRF   33
....................          
....................       if(UP)//Si oprime hacia arriba 
2074:  BSF    F92.5
2076:  BTFSS  F80.5
2078:  BRA    2094
....................       { 
....................          if(Flanco == 0) 
207A:  BTFSC  17.3
207C:  BRA    2092
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
207E:  DECF   1F,F
2080:  DECF   1D,F
2082:  MOVLW  01
2084:  ADDWF  1D,W
2086:  MOVWF  1E
2088:  BSF    17.3
208A:  MOVLW  1E
208C:  MOVWF  xDE
208E:  CALL   05EE
....................          } 
....................       } 
....................       else 
2092:  BRA    2096
....................       { 
....................          Flanco = 0; 
2094:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2096:  BSF    F96.0
2098:  BTFSS  F84.0
209A:  BRA    20B6
....................       { 
....................          if(Flanco2 == 0) 
209C:  BTFSC  17.5
209E:  BRA    20B4
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
20A0:  INCF   1F,F
20A2:  INCF   1D,F
20A4:  MOVLW  01
20A6:  SUBWF  1D,W
20A8:  MOVWF  1E
20AA:  BSF    17.5
20AC:  MOVLW  1E
20AE:  MOVWF  xDE
20B0:  CALL   05EE
....................          } 
....................       } 
....................       else 
20B4:  BRA    20B8
....................       { 
....................          Flanco2 = 0; 
20B6:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
20B8:  MOVF   1F,W
20BA:  SUBWF  21,W
20BC:  BC    20CE
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
20BE:  INCF   33,F
20C0:  MOVFF  1F,21
20C4:  MOVLW  02
20C6:  SUBWF  21,W
20C8:  MOVWF  20
20CA:  MOVLW  04
20CC:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
20CE:  MOVF   20,W
20D0:  SUBWF  1F,W
20D2:  BC    20E4
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
20D4:  DECF   33,F
20D6:  MOVFF  1F,20
20DA:  MOVLW  02
20DC:  ADDWF  20,W
20DE:  MOVWF  21
20E0:  MOVLW  02
20E2:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
20E4:  MOVF   1F,W
20E6:  SUBWF  1A,W
20E8:  BC    20FC
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
20EA:  MOVFF  1B,1F
20EE:  MOVLW  02
20F0:  MOVWF  1D
20F2:  CLRF   33
20F4:  MOVFF  1F,20
20F8:  ADDWF  20,W
20FA:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
20FC:  MOVF   1B,W
20FE:  SUBWF  1F,W
2100:  BC    2118
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
2102:  MOVFF  1A,1F
2106:  MOVLW  04
2108:  MOVWF  1D
210A:  SUBWF  1A,W
210C:  MOVWF  33
210E:  MOVFF  1F,21
2112:  MOVLW  02
2114:  SUBWF  21,W
2116:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
2118:  MOVLW  01
211A:  ADDWF  33,W
211C:  MOVWF  xC7
211E:  MOVWF  xC8
2120:  MOVLW  02
2122:  MOVWF  xC9
2124:  CALL   0D60
....................         mensajes(2+paso,3); 
2128:  MOVLW  02
212A:  ADDWF  33,W
212C:  MOVWF  xC7
212E:  MOVWF  xC8
2130:  MOVLW  03
2132:  MOVWF  xC9
2134:  CALL   0D60
....................         mensajes(3+paso,4); 
2138:  MOVLW  03
213A:  ADDWF  33,W
213C:  MOVWF  xC7
213E:  MOVWF  xC8
2140:  MOVLW  04
2142:  MOVWF  xC9
2144:  CALL   0D60
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2148:  MOVLW  01
214A:  MOVWF  xD9
214C:  MOVFF  1D,DA
2150:  CALL   075E
....................         lcd_putc(t[0]); 
2154:  MOVFF  35,D8
2158:  CALL   07C0
....................  
....................         if(Flecha==2) 
215C:  MOVF   1D,W
215E:  SUBLW  02
2160:  BNZ   218A
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2162:  MOVLW  01
2164:  MOVWF  xD9
2166:  MOVLW  04
2168:  MOVWF  xDA
216A:  CALL   075E
....................             lcd_putc(t[1]); 
216E:  MOVFF  36,D8
2172:  CALL   07C0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2176:  MOVLW  01
2178:  MOVWF  xD9
217A:  MOVLW  03
217C:  MOVWF  xDA
217E:  CALL   075E
....................             lcd_putc(t[1]); 
2182:  MOVFF  36,D8
2186:  CALL   07C0
....................           } 
....................          
....................         if(Flecha==4) 
218A:  MOVF   1D,W
218C:  SUBLW  04
218E:  BNZ   21B8
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2190:  MOVLW  01
2192:  MOVWF  xD9
2194:  MOVLW  02
2196:  MOVWF  xDA
2198:  CALL   075E
....................             lcd_putc(t[1]); 
219C:  MOVFF  36,D8
21A0:  CALL   07C0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21A4:  MOVLW  01
21A6:  MOVWF  xD9
21A8:  MOVLW  03
21AA:  MOVWF  xDA
21AC:  CALL   075E
....................             lcd_putc(t[1]); 
21B0:  MOVFF  36,D8
21B4:  CALL   07C0
....................           } 
....................          
....................         if(Flecha==3) 
21B8:  MOVF   1D,W
21BA:  SUBLW  03
21BC:  BNZ   21E6
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
21BE:  MOVLW  01
21C0:  MOVWF  xD9
21C2:  MOVLW  04
21C4:  MOVWF  xDA
21C6:  CALL   075E
....................             lcd_putc(t[1]); 
21CA:  MOVFF  36,D8
21CE:  CALL   07C0
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
21D2:  MOVLW  01
21D4:  MOVWF  xD9
21D6:  MOVLW  02
21D8:  MOVWF  xDA
21DA:  CALL   075E
....................             lcd_putc(t[1]); 
21DE:  MOVFF  36,D8
21E2:  CALL   07C0
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
21E6:  BSF    F96.1
21E8:  BTFSS  F84.1
21EA:  BRA    2222
....................        { 
....................          if(Flanco1 == 0) 
21EC:  BTFSC  17.4
21EE:  BRA    2220
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
21F0:  BSF    17.4
21F2:  MOVFF  1F,19
21F6:  MOVLW  03
21F8:  MOVWF  1D
21FA:  MOVLW  02
21FC:  MOVWF  xC7
21FE:  MOVLW  96
2200:  MOVWF  xDE
2202:  CALL   05EE
2206:  DECFSZ xC7,F
2208:  BRA    21FE
220A:  MOVLW  0C
220C:  MOVWF  xD8
220E:  CALL   07C0
....................             if(Menu==6) 
2212:  MOVF   19,W
2214:  SUBLW  06
2216:  BNZ   2220
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2218:  CLRF   38
221A:  CLRF   39
221C:  CLRF   3A
221E:  CLRF   3B
....................             } 
....................          } 
....................        } 
....................        else 
2220:  BRA    2224
....................        { 
....................          Flanco1 = 0; 
2222:  BCF    17.4
....................        } 
....................              
....................        if(LEFT) 
2224:  BSF    F96.2
2226:  BTFSS  F84.2
2228:  BRA    2246
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
222A:  MOVLW  64
222C:  MOVWF  19
222E:  MOVLW  0C
2230:  MOVWF  xD8
2232:  CALL   07C0
2236:  MOVLW  02
2238:  MOVWF  xC7
223A:  MOVLW  FA
223C:  MOVWF  xDE
223E:  CALL   05EE
2242:  DECFSZ xC7,F
2244:  BRA    223A
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2246:  MOVF   19,W
2248:  SUBLW  02
224A:  BTFSS  FD8.2
224C:  BRA    2480
....................     
....................    lcd_gotoxy(1,1); 
224E:  MOVLW  01
2250:  MOVWF  xD9
2252:  MOVWF  xDA
2254:  CALL   075E
....................    printf(lcd_putc,"    Temporizador     "); 
2258:  MOVLW  A6
225A:  MOVWF  FF6
225C:  MOVLW  02
225E:  MOVWF  FF7
2260:  CALL   081E
....................    lcd_gotoxy(1,2); 
2264:  MOVLW  01
2266:  MOVWF  xD9
2268:  MOVLW  02
226A:  MOVWF  xDA
226C:  CALL   075E
....................    printf(lcd_putc,"       Luz UV        "); 
2270:  MOVLW  BC
2272:  MOVWF  FF6
2274:  MOVLW  02
2276:  MOVWF  FF7
2278:  CALL   081E
....................    lcd_gotoxy(6,3); 
227C:  MOVLW  06
227E:  MOVWF  xD9
2280:  MOVLW  03
2282:  MOVWF  xDA
2284:  CALL   075E
....................    printf(lcd_putc,"%02u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2288:  MOVFF  2A,C7
228C:  MOVLW  01
228E:  MOVWF  xC8
2290:  CALL   0DE2
2294:  MOVLW  3A
2296:  MOVWF  xD8
2298:  CALL   07C0
229C:  MOVFF  2B,C7
22A0:  MOVLW  01
22A2:  MOVWF  xC8
22A4:  CALL   0DE2
22A8:  MOVLW  DB
22AA:  MOVWF  FF6
22AC:  MOVLW  02
22AE:  MOVWF  FF7
22B0:  MOVLW  08
22B2:  MOVWF  xCB
22B4:  CALL   0C52
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
22B8:  MOVLW  06
22BA:  ADDWF  2F,W
22BC:  MOVWF  xC7
22BE:  MOVWF  xD9
22C0:  MOVLW  04
22C2:  MOVWF  xDA
22C4:  CALL   075E
....................    lcd_putc(t[2]); 
22C8:  MOVFF  37,D8
22CC:  CALL   07C0
....................     
....................    if(UP) 
22D0:  BSF    F92.5
22D2:  BTFSS  F80.5
22D4:  BRA    2310
....................    { 
....................       if(unidad2==1) 
22D6:  DECFSZ 2F,W
22D8:  BRA    22F2
....................       { 
....................          if(tempo_minutos_pro<59) 
22DA:  MOVF   2A,W
22DC:  SUBLW  3A
22DE:  BNC   22F2
....................          { 
....................             tempo_minutos_pro++;delay_ms(300); 
22E0:  INCF   2A,F
22E2:  MOVLW  02
22E4:  MOVWF  xC7
22E6:  MOVLW  96
22E8:  MOVWF  xDE
22EA:  CALL   05EE
22EE:  DECFSZ xC7,F
22F0:  BRA    22E6
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
22F2:  MOVF   2F,W
22F4:  SUBLW  03
22F6:  BNZ   2310
....................       { 
....................          if(tempo_segundos_pro<59) 
22F8:  MOVF   2B,W
22FA:  SUBLW  3A
22FC:  BNC   2310
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
22FE:  INCF   2B,F
2300:  MOVLW  02
2302:  MOVWF  xC7
2304:  MOVLW  96
2306:  MOVWF  xDE
2308:  CALL   05EE
230C:  DECFSZ xC7,F
230E:  BRA    2304
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2310:  BSF    F96.0
2312:  BTFSS  F84.0
2314:  BRA    2380
....................    { 
....................       if(unidad2==1) 
2316:  DECFSZ 2F,W
2318:  BRA    234A
....................       { 
....................          if(tempo_minutos_pro>0) 
231A:  MOVF   2A,F
231C:  BZ    2330
....................          { 
....................             tempo_minutos_pro--;delay_ms(300); 
231E:  DECF   2A,F
2320:  MOVLW  02
2322:  MOVWF  xC7
2324:  MOVLW  96
2326:  MOVWF  xDE
2328:  CALL   05EE
232C:  DECFSZ xC7,F
232E:  BRA    2324
....................          } 
....................           
....................          if(tempo_minutos_pro>59) 
2330:  MOVF   2A,W
2332:  SUBLW  3B
2334:  BC    234A
....................          { 
....................             tempo_minutos_pro=59;delay_ms(300); 
2336:  MOVLW  3B
2338:  MOVWF  2A
233A:  MOVLW  02
233C:  MOVWF  xC7
233E:  MOVLW  96
2340:  MOVWF  xDE
2342:  CALL   05EE
2346:  DECFSZ xC7,F
2348:  BRA    233E
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
234A:  MOVF   2F,W
234C:  SUBLW  03
234E:  BNZ   2380
....................       { 
....................          if(tempo_segundos_pro>0) 
2350:  MOVF   2B,F
2352:  BZ    2366
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
2354:  DECF   2B,F
2356:  MOVLW  02
2358:  MOVWF  xC7
235A:  MOVLW  96
235C:  MOVWF  xDE
235E:  CALL   05EE
2362:  DECFSZ xC7,F
2364:  BRA    235A
....................          } 
....................           
....................          if(tempo_segundos_pro>59) 
2366:  MOVF   2B,W
2368:  SUBLW  3B
236A:  BC    2380
....................          { 
....................             tempo_segundos_pro=59;delay_ms(300); 
236C:  MOVLW  3B
236E:  MOVWF  2B
2370:  MOVLW  02
2372:  MOVWF  xC7
2374:  MOVLW  96
2376:  MOVWF  xDE
2378:  CALL   05EE
237C:  DECFSZ xC7,F
237E:  BRA    2374
....................          } 
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2380:  BSF    F96.1
2382:  BTFSS  F84.1
2384:  BRA    23B2
....................    { 
....................       if(unidad2==1) 
2386:  DECFSZ 2F,W
2388:  BRA    2390
....................       { 
....................          unidad2=3; 
238A:  MOVLW  03
238C:  MOVWF  2F
....................       } 
....................       else 
238E:  BRA    239A
....................       { 
....................          if(unidad2==3) 
2390:  MOVF   2F,W
2392:  SUBLW  03
2394:  BNZ   239A
....................          { 
....................             unidad2=1; 
2396:  MOVLW  01
2398:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
239A:  MOVLW  02
239C:  MOVWF  xC7
239E:  MOVLW  FA
23A0:  MOVWF  xDE
23A2:  CALL   05EE
23A6:  DECFSZ xC7,F
23A8:  BRA    239E
....................       printf(lcd_putc,"\f"); 
23AA:  MOVLW  0C
23AC:  MOVWF  xD8
23AE:  CALL   07C0
....................    } 
....................     
....................    if(LEFT) 
23B2:  BSF    F96.2
23B4:  BTFSS  F84.2
23B6:  BRA    2480
....................    { 
....................       delay_ms(200); 
23B8:  MOVLW  C8
23BA:  MOVWF  xDE
23BC:  CALL   05EE
....................       printf(lcd_putc,"\f"); 
23C0:  MOVLW  0C
23C2:  MOVWF  xD8
23C4:  CALL   07C0
....................       lcd_gotoxy(1,2); 
23C8:  MOVLW  01
23CA:  MOVWF  xD9
23CC:  MOVLW  02
23CE:  MOVWF  xDA
23D0:  CALL   075E
....................       printf(lcd_putc,"Tiempo Almacenado"); 
23D4:  MOVLW  E4
23D6:  MOVWF  FF6
23D8:  MOVLW  02
23DA:  MOVWF  FF7
23DC:  CALL   081E
....................       lcd_gotoxy(1,3); 
23E0:  MOVLW  01
23E2:  MOVWF  xD9
23E4:  MOVLW  03
23E6:  MOVWF  xDA
23E8:  CALL   075E
....................       printf(lcd_putc,"  Correctamente  "); 
23EC:  MOVLW  F6
23EE:  MOVWF  FF6
23F0:  MOVLW  02
23F2:  MOVWF  FF7
23F4:  CALL   081E
....................       write_eeprom(20,tempo_minutos_pro);write_eeprom(21,tempo_segundos_pro); 
23F8:  MOVLW  14
23FA:  MOVWF  FA9
23FC:  MOVFF  2A,FA8
2400:  BCF    FA6.6
2402:  BCF    FA6.7
2404:  BSF    FA6.2
2406:  MOVF   FF2,W
2408:  MOVWF  00
240A:  BCF    FF2.7
240C:  MOVLB  F
240E:  MOVLW  55
2410:  MOVWF  FA7
2412:  MOVLW  AA
2414:  MOVWF  FA7
2416:  BSF    FA6.1
2418:  BTFSC  FA6.1
241A:  BRA    2418
241C:  BCF    FA6.2
241E:  MOVF   00,W
2420:  IORWF  FF2,F
2422:  MOVLW  15
2424:  MOVWF  FA9
2426:  MOVFF  2B,FA8
242A:  BCF    FA6.6
242C:  BCF    FA6.7
242E:  BSF    FA6.2
2430:  MOVF   FF2,W
2432:  MOVWF  00
2434:  BCF    FF2.7
2436:  MOVLW  55
2438:  MOVWF  FA7
243A:  MOVLW  AA
243C:  MOVWF  FA7
243E:  BSF    FA6.1
2440:  BTFSC  FA6.1
2442:  BRA    2440
2444:  BCF    FA6.2
2446:  MOVF   00,W
2448:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
244A:  MOVFF  2A,28
244E:  MOVFF  2B,29
....................       delay_ms(700); 
2452:  MOVLW  04
2454:  MOVLB  0
2456:  MOVWF  xC7
2458:  MOVLW  AF
245A:  MOVWF  xDE
245C:  CALL   05EE
2460:  DECFSZ xC7,F
2462:  BRA    2458
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2464:  MOVLW  1E
2466:  MOVWF  xDE
2468:  CALL   05EE
246C:  MOVLW  01
246E:  MOVWF  19
2470:  CLRF   33
2472:  MOVLW  02
2474:  MOVWF  1D
2476:  MOVWF  1F
2478:  MOVLW  0C
247A:  MOVWF  xD8
247C:  CALL   07C0
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2480:  MOVF   19,W
2482:  SUBLW  03
2484:  BTFSS  FD8.2
2486:  BRA    2780
....................    lcd_gotoxy(1,1); 
2488:  MOVLW  01
248A:  MOVWF  xD9
248C:  MOVWF  xDA
248E:  CALL   075E
....................    printf(lcd_putc,"      Ingrese       "); 
2492:  MOVLW  08
2494:  MOVWF  FF6
2496:  MOVLW  03
2498:  MOVWF  FF7
249A:  CALL   081E
....................    lcd_gotoxy(1,2); 
249E:  MOVLW  01
24A0:  MOVWF  xD9
24A2:  MOVLW  02
24A4:  MOVWF  xDA
24A6:  CALL   075E
....................    printf(lcd_putc," Contraseña Actual  "); 
24AA:  MOVLW  1E
24AC:  MOVWF  FF6
24AE:  MOVLW  03
24B0:  MOVWF  FF7
24B2:  CALL   081E
....................    lcd_gotoxy(1,3); 
24B6:  MOVLW  01
24B8:  MOVWF  xD9
24BA:  MOVLW  03
24BC:  MOVWF  xDA
24BE:  CALL   075E
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
24C2:  MOVLW  34
24C4:  MOVWF  FF6
24C6:  MOVLW  03
24C8:  MOVWF  FF7
24CA:  MOVLW  0A
24CC:  MOVWF  xCB
24CE:  CALL   0C52
24D2:  MOVFF  38,C7
24D6:  MOVLW  1F
24D8:  MOVWF  xC8
24DA:  CALL   0C98
24DE:  MOVFF  39,C7
24E2:  MOVLW  1F
24E4:  MOVWF  xC8
24E6:  CALL   0C98
24EA:  MOVFF  3A,C7
24EE:  MOVLW  1F
24F0:  MOVWF  xC8
24F2:  CALL   0C98
24F6:  MOVFF  3B,C7
24FA:  MOVLW  1F
24FC:  MOVWF  xC8
24FE:  CALL   0C98
2502:  MOVLW  20
2504:  MOVWF  xD8
2506:  CALL   07C0
250A:  MOVLW  20
250C:  MOVWF  xD8
250E:  CALL   07C0
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2512:  BSF    F92.5
2514:  BTFSS  F80.5
2516:  BRA    253A
....................       {  if(Flanco == 0)  
2518:  BTFSC  17.3
251A:  BRA    2538
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
251C:  MOVLW  0B
251E:  SUBWF  1C,W
2520:  CLRF   03
2522:  ADDLW  38
2524:  MOVWF  FE9
2526:  MOVLW  00
2528:  ADDWFC 03,W
252A:  MOVWF  FEA
252C:  INCF   FEF,F
252E:  BSF    17.3
2530:  MOVLW  1E
2532:  MOVWF  xDE
2534:  CALL   05EE
....................          else 
2538:  BRA    253C
....................             {Flanco = 0;} 
253A:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
253C:  BSF    F96.0
253E:  BTFSS  F84.0
2540:  BRA    2564
....................       {  if(Flanco2 == 0)  
2542:  BTFSC  17.5
2544:  BRA    2562
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2546:  MOVLW  0B
2548:  SUBWF  1C,W
254A:  CLRF   03
254C:  ADDLW  38
254E:  MOVWF  FE9
2550:  MOVLW  00
2552:  ADDWFC 03,W
2554:  MOVWF  FEA
2556:  DECF   FEF,F
2558:  BSF    17.5
255A:  MOVLW  1E
255C:  MOVWF  xDE
255E:  CALL   05EE
....................          else 
2562:  BRA    2566
....................             {Flanco2 = 0;} 
2564:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
2566:  BSF    F96.1
2568:  BTFSS  F84.1
256A:  BRA    2586
....................       {  if(Flanco1 == 0)  
256C:  BTFSC  17.4
256E:  BRA    2584
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2570:  BSF    17.4
2572:  INCF   1C,F
2574:  MOVLW  1E
2576:  MOVWF  xDE
2578:  CALL   05EE
257C:  MOVLW  0C
257E:  MOVWF  xD8
2580:  CALL   07C0
....................          else 
2584:  BRA    2588
....................             {Flanco1 = 0;}    
2586:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2588:  BSF    F96.2
258A:  BTFSS  F84.2
258C:  BRA    25A8
....................       {  if(Flanco3 == 0)  
258E:  BTFSC  17.6
2590:  BRA    25A6
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2592:  BSF    17.6
2594:  DECF   1C,F
2596:  MOVLW  1E
2598:  MOVWF  xDE
259A:  CALL   05EE
259E:  MOVLW  0C
25A0:  MOVWF  xD8
25A2:  CALL   07C0
....................          else 
25A6:  BRA    25AA
....................             {Flanco3 = 0;}     
25A8:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
25AA:  MOVLW  0B
25AC:  SUBWF  1C,W
25AE:  CLRF   03
25B0:  ADDLW  38
25B2:  MOVWF  FE9
25B4:  MOVLW  00
25B6:  ADDWFC 03,W
25B8:  MOVWF  FEA
25BA:  BTFSC  FEF.7
25BC:  BRA    25C0
25BE:  BRA    25D4
....................        {clave[unidad-11]=9;} 
25C0:  MOVLW  0B
25C2:  SUBWF  1C,W
25C4:  CLRF   03
25C6:  ADDLW  38
25C8:  MOVWF  FE9
25CA:  MOVLW  00
25CC:  ADDWFC 03,W
25CE:  MOVWF  FEA
25D0:  MOVLW  09
25D2:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
25D4:  MOVLW  0B
25D6:  SUBWF  1C,W
25D8:  CLRF   03
25DA:  ADDLW  38
25DC:  MOVWF  FE9
25DE:  MOVLW  00
25E0:  ADDWFC 03,W
25E2:  MOVWF  FEA
25E4:  BTFSC  FEF.7
25E6:  BRA    2600
25E8:  MOVF   FEF,W
25EA:  SUBLW  09
25EC:  BC    2600
....................        {clave[unidad-11]=0;} 
25EE:  MOVLW  0B
25F0:  SUBWF  1C,W
25F2:  CLRF   03
25F4:  ADDLW  38
25F6:  MOVWF  FE9
25F8:  MOVLW  00
25FA:  ADDWFC 03,W
25FC:  MOVWF  FEA
25FE:  CLRF   FEF
....................        if(unidad<11) 
2600:  MOVF   1C,W
2602:  SUBLW  0A
2604:  BNC   2626
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
2606:  MOVLW  01
2608:  MOVWF  19
260A:  CLRF   33
260C:  MOVLW  02
260E:  MOVWF  1D
2610:  MOVWF  1F
2612:  MOVLW  0B
2614:  MOVWF  1C
2616:  MOVLW  02
2618:  MOVWF  xC7
261A:  MOVLW  FA
261C:  MOVWF  xDE
261E:  CALL   05EE
2622:  DECFSZ xC7,F
2624:  BRA    261A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2626:  MOVFF  1C,D9
262A:  MOVLW  04
262C:  MOVWF  xDA
262E:  CALL   075E
....................        lcd_putc(t[2]); 
2632:  MOVFF  37,D8
2636:  CALL   07C0
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
263A:  MOVF   1C,W
263C:  SUBLW  0E
263E:  BTFSC  FD8.0
2640:  BRA    275C
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2642:  MOVF   3C,W
2644:  SUBWF  38,W
2646:  BNZ   26E2
2648:  MOVF   3D,W
264A:  SUBWF  39,W
264C:  BNZ   26E2
264E:  MOVF   3E,W
2650:  SUBWF  3A,W
2652:  BNZ   26E2
2654:  MOVF   3F,W
2656:  SUBWF  3B,W
2658:  BNZ   26E2
....................             {lcd_gotoxy(1,1); 
265A:  MOVLW  01
265C:  MOVWF  xD9
265E:  MOVWF  xDA
2660:  CALL   075E
....................             printf(lcd_putc,"                    "); 
2664:  MOVLW  4A
2666:  MOVWF  FF6
2668:  MOVLW  03
266A:  MOVWF  FF7
266C:  CALL   081E
....................             lcd_gotoxy(1,2); 
2670:  MOVLW  01
2672:  MOVWF  xD9
2674:  MOVLW  02
2676:  MOVWF  xDA
2678:  CALL   075E
....................             printf(lcd_putc,"     Contraseña     "); 
267C:  MOVLW  60
267E:  MOVWF  FF6
2680:  MOVLW  03
2682:  MOVWF  FF7
2684:  CALL   081E
....................             lcd_gotoxy(1,3); 
2688:  MOVLW  01
268A:  MOVWF  xD9
268C:  MOVLW  03
268E:  MOVWF  xDA
2690:  CALL   075E
....................             printf(lcd_putc,"      Correcta      "); 
2694:  MOVLW  76
2696:  MOVWF  FF6
2698:  MOVLW  03
269A:  MOVWF  FF7
269C:  CALL   081E
....................             lcd_gotoxy(1,4); 
26A0:  MOVLW  01
26A2:  MOVWF  xD9
26A4:  MOVLW  04
26A6:  MOVWF  xDA
26A8:  CALL   075E
....................             printf(lcd_putc,"                    "); 
26AC:  MOVLW  8C
26AE:  MOVWF  FF6
26B0:  MOVLW  03
26B2:  MOVWF  FF7
26B4:  CALL   081E
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
26B8:  MOVLW  02
26BA:  MOVWF  xC7
26BC:  MOVLW  FA
26BE:  MOVWF  xDE
26C0:  CALL   05EE
26C4:  DECFSZ xC7,F
26C6:  BRA    26BC
26C8:  MOVLW  3D
26CA:  MOVWF  19
26CC:  MOVLW  0B
26CE:  MOVWF  1C
26D0:  MOVLW  0C
26D2:  MOVWF  xD8
26D4:  CALL   07C0
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
26D8:  CLRF   38
26DA:  CLRF   39
26DC:  CLRF   3A
26DE:  CLRF   3B
....................          else 
26E0:  BRA    275C
....................          {lcd_gotoxy(1,1); 
26E2:  MOVLW  01
26E4:  MOVWF  xD9
26E6:  MOVWF  xDA
26E8:  CALL   075E
....................             printf(lcd_putc,"                    "); 
26EC:  MOVLW  A2
26EE:  MOVWF  FF6
26F0:  MOVLW  03
26F2:  MOVWF  FF7
26F4:  CALL   081E
....................             lcd_gotoxy(1,2); 
26F8:  MOVLW  01
26FA:  MOVWF  xD9
26FC:  MOVLW  02
26FE:  MOVWF  xDA
2700:  CALL   075E
....................             printf(lcd_putc,"     Contraseña     "); 
2704:  MOVLW  B8
2706:  MOVWF  FF6
2708:  MOVLW  03
270A:  MOVWF  FF7
270C:  CALL   081E
....................             lcd_gotoxy(1,3); 
2710:  MOVLW  01
2712:  MOVWF  xD9
2714:  MOVLW  03
2716:  MOVWF  xDA
2718:  CALL   075E
....................             printf(lcd_putc,"     Incorrecta     "); 
271C:  MOVLW  CE
271E:  MOVWF  FF6
2720:  MOVLW  03
2722:  MOVWF  FF7
2724:  CALL   081E
....................             lcd_gotoxy(1,4); 
2728:  MOVLW  01
272A:  MOVWF  xD9
272C:  MOVLW  04
272E:  MOVWF  xDA
2730:  CALL   075E
....................             printf(lcd_putc,"                    "); 
2734:  MOVLW  E4
2736:  MOVWF  FF6
2738:  MOVLW  03
273A:  MOVWF  FF7
273C:  CALL   081E
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2740:  MOVLW  02
2742:  MOVWF  xC7
2744:  MOVLW  FA
2746:  MOVWF  xDE
2748:  CALL   05EE
274C:  DECFSZ xC7,F
274E:  BRA    2744
2750:  MOVLW  0B
2752:  MOVWF  1C
2754:  MOVLW  0C
2756:  MOVWF  xD8
2758:  CALL   07C0
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
275C:  MOVF   1C,W
275E:  SUBLW  0B
2760:  BC    2780
2762:  MOVF   1C,W
2764:  SUBLW  0D
2766:  BNC   2780
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2768:  MOVLW  01
276A:  SUBWF  1C,W
276C:  MOVWF  xC7
276E:  MOVWF  xD9
2770:  MOVLW  04
2772:  MOVWF  xDA
2774:  CALL   075E
....................             lcd_putc(t[1]); 
2778:  MOVFF  36,D8
277C:  CALL   07C0
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2780:  MOVF   19,W
2782:  SUBLW  3D
2784:  BTFSS  FD8.2
2786:  BRA    2A96
....................    lcd_gotoxy(1,1); 
2788:  MOVLW  01
278A:  MOVWF  xD9
278C:  MOVWF  xDA
278E:  CALL   075E
....................    printf(lcd_putc,"     Ingrese        "); 
2792:  MOVLW  FA
2794:  MOVWF  FF6
2796:  MOVLW  03
2798:  MOVWF  FF7
279A:  CALL   081E
....................    lcd_gotoxy(1,2); 
279E:  MOVLW  01
27A0:  MOVWF  xD9
27A2:  MOVLW  02
27A4:  MOVWF  xDA
27A6:  CALL   075E
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
27AA:  MOVLW  10
27AC:  MOVWF  FF6
27AE:  MOVLW  04
27B0:  MOVWF  FF7
27B2:  CALL   081E
....................    lcd_gotoxy(1,3); 
27B6:  MOVLW  01
27B8:  MOVWF  xD9
27BA:  MOVLW  03
27BC:  MOVWF  xDA
27BE:  CALL   075E
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
27C2:  MOVLW  26
27C4:  MOVWF  FF6
27C6:  MOVLW  04
27C8:  MOVWF  FF7
27CA:  MOVLW  0A
27CC:  MOVWF  xCB
27CE:  CALL   0C52
27D2:  MOVFF  38,C7
27D6:  MOVLW  1F
27D8:  MOVWF  xC8
27DA:  CALL   0C98
27DE:  MOVFF  39,C7
27E2:  MOVLW  1F
27E4:  MOVWF  xC8
27E6:  CALL   0C98
27EA:  MOVFF  3A,C7
27EE:  MOVLW  1F
27F0:  MOVWF  xC8
27F2:  CALL   0C98
27F6:  MOVFF  3B,C7
27FA:  MOVLW  1F
27FC:  MOVWF  xC8
27FE:  CALL   0C98
2802:  MOVLW  20
2804:  MOVWF  xD8
2806:  CALL   07C0
280A:  MOVLW  20
280C:  MOVWF  xD8
280E:  CALL   07C0
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2812:  BSF    F92.5
2814:  BTFSS  F80.5
2816:  BRA    283A
....................       {  if(Flanco == 0)  
2818:  BTFSC  17.3
281A:  BRA    2838
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
281C:  MOVLW  0B
281E:  SUBWF  1C,W
2820:  CLRF   03
2822:  ADDLW  38
2824:  MOVWF  FE9
2826:  MOVLW  00
2828:  ADDWFC 03,W
282A:  MOVWF  FEA
282C:  INCF   FEF,F
282E:  BSF    17.3
2830:  MOVLW  1E
2832:  MOVWF  xDE
2834:  CALL   05EE
....................          else 
2838:  BRA    283C
....................             {Flanco = 0;} 
283A:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
283C:  BSF    F96.0
283E:  BTFSS  F84.0
2840:  BRA    2864
....................       {  if(Flanco2 == 0)  
2842:  BTFSC  17.5
2844:  BRA    2862
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2846:  MOVLW  0B
2848:  SUBWF  1C,W
284A:  CLRF   03
284C:  ADDLW  38
284E:  MOVWF  FE9
2850:  MOVLW  00
2852:  ADDWFC 03,W
2854:  MOVWF  FEA
2856:  DECF   FEF,F
2858:  BSF    17.5
285A:  MOVLW  1E
285C:  MOVWF  xDE
285E:  CALL   05EE
....................          else 
2862:  BRA    2866
....................             {Flanco2 = 0;} 
2864:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
2866:  BSF    F96.1
2868:  BTFSS  F84.1
286A:  BRA    2886
....................       {  if(Flanco1 == 0)  
286C:  BTFSC  17.4
286E:  BRA    2884
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2870:  BSF    17.4
2872:  INCF   1C,F
2874:  MOVLW  1E
2876:  MOVWF  xDE
2878:  CALL   05EE
287C:  MOVLW  0C
287E:  MOVWF  xD8
2880:  CALL   07C0
....................          else 
2884:  BRA    2888
....................             {Flanco1 = 0;}    
2886:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2888:  BSF    F96.2
288A:  BTFSS  F84.2
288C:  BRA    28A8
....................       {  if(Flanco3 == 0)  
288E:  BTFSC  17.6
2890:  BRA    28A6
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2892:  BSF    17.6
2894:  DECF   1C,F
2896:  MOVLW  1E
2898:  MOVWF  xDE
289A:  CALL   05EE
289E:  MOVLW  0C
28A0:  MOVWF  xD8
28A2:  CALL   07C0
....................          else 
28A6:  BRA    28AA
....................             {Flanco3 = 0;}     
28A8:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
28AA:  MOVLW  0B
28AC:  SUBWF  1C,W
28AE:  CLRF   03
28B0:  ADDLW  38
28B2:  MOVWF  FE9
28B4:  MOVLW  00
28B6:  ADDWFC 03,W
28B8:  MOVWF  FEA
28BA:  BTFSC  FEF.7
28BC:  BRA    28C0
28BE:  BRA    28D4
....................        {clave[unidad-11]=9;} 
28C0:  MOVLW  0B
28C2:  SUBWF  1C,W
28C4:  CLRF   03
28C6:  ADDLW  38
28C8:  MOVWF  FE9
28CA:  MOVLW  00
28CC:  ADDWFC 03,W
28CE:  MOVWF  FEA
28D0:  MOVLW  09
28D2:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
28D4:  MOVLW  0B
28D6:  SUBWF  1C,W
28D8:  CLRF   03
28DA:  ADDLW  38
28DC:  MOVWF  FE9
28DE:  MOVLW  00
28E0:  ADDWFC 03,W
28E2:  MOVWF  FEA
28E4:  BTFSC  FEF.7
28E6:  BRA    2900
28E8:  MOVF   FEF,W
28EA:  SUBLW  09
28EC:  BC    2900
....................        {clave[unidad-11]=0;} 
28EE:  MOVLW  0B
28F0:  SUBWF  1C,W
28F2:  CLRF   03
28F4:  ADDLW  38
28F6:  MOVWF  FE9
28F8:  MOVLW  00
28FA:  ADDWFC 03,W
28FC:  MOVWF  FEA
28FE:  CLRF   FEF
....................        if(unidad<11) 
2900:  MOVF   1C,W
2902:  SUBLW  0A
2904:  BNC   290E
....................        {Menu=5;unidad=11;} 
2906:  MOVLW  05
2908:  MOVWF  19
290A:  MOVLW  0B
290C:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
290E:  MOVFF  1C,D9
2912:  MOVLW  04
2914:  MOVWF  xDA
2916:  CALL   075E
....................        lcd_putc(t[2]); 
291A:  MOVFF  37,D8
291E:  CALL   07C0
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2922:  MOVF   1C,W
2924:  SUBLW  0E
2926:  BTFSC  FD8.0
2928:  BRA    2A72
....................        { 
....................             lcd_gotoxy(1,1); 
292A:  MOVLW  01
292C:  MOVWF  xD9
292E:  MOVWF  xDA
2930:  CALL   075E
....................             printf(lcd_putc,"                    "); 
2934:  MOVLW  3C
2936:  MOVWF  FF6
2938:  MOVLW  04
293A:  MOVWF  FF7
293C:  CALL   081E
....................             lcd_gotoxy(1,2); 
2940:  MOVLW  01
2942:  MOVWF  xD9
2944:  MOVLW  02
2946:  MOVWF  xDA
2948:  CALL   075E
....................             printf(lcd_putc,"     Contraseña     "); 
294C:  MOVLW  52
294E:  MOVWF  FF6
2950:  MOVLW  04
2952:  MOVWF  FF7
2954:  CALL   081E
....................             lcd_gotoxy(1,3); 
2958:  MOVLW  01
295A:  MOVWF  xD9
295C:  MOVLW  03
295E:  MOVWF  xDA
2960:  CALL   075E
....................             printf(lcd_putc,"     Almacenada     "); 
2964:  MOVLW  68
2966:  MOVWF  FF6
2968:  MOVLW  04
296A:  MOVWF  FF7
296C:  CALL   081E
....................             lcd_gotoxy(1,4); 
2970:  MOVLW  01
2972:  MOVWF  xD9
2974:  MOVLW  04
2976:  MOVWF  xDA
2978:  CALL   075E
....................             printf(lcd_putc,"                    "); 
297C:  MOVLW  7E
297E:  MOVWF  FF6
2980:  MOVLW  04
2982:  MOVWF  FF7
2984:  CALL   081E
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2988:  CLRF   FA9
298A:  MOVFF  38,FA8
298E:  BCF    FA6.6
2990:  BCF    FA6.7
2992:  BSF    FA6.2
2994:  MOVF   FF2,W
2996:  MOVWF  00
2998:  BCF    FF2.7
299A:  MOVLB  F
299C:  MOVLW  55
299E:  MOVWF  FA7
29A0:  MOVLW  AA
29A2:  MOVWF  FA7
29A4:  BSF    FA6.1
29A6:  BTFSC  FA6.1
29A8:  BRA    29A6
29AA:  BCF    FA6.2
29AC:  MOVF   00,W
29AE:  IORWF  FF2,F
29B0:  MOVLW  14
29B2:  MOVLB  0
29B4:  MOVWF  xDE
29B6:  CALL   05EE
29BA:  MOVLW  01
29BC:  MOVWF  FA9
29BE:  MOVFF  39,FA8
29C2:  BCF    FA6.6
29C4:  BCF    FA6.7
29C6:  BSF    FA6.2
29C8:  MOVF   FF2,W
29CA:  MOVWF  00
29CC:  BCF    FF2.7
29CE:  MOVLB  F
29D0:  MOVLW  55
29D2:  MOVWF  FA7
29D4:  MOVLW  AA
29D6:  MOVWF  FA7
29D8:  BSF    FA6.1
29DA:  BTFSC  FA6.1
29DC:  BRA    29DA
29DE:  BCF    FA6.2
29E0:  MOVF   00,W
29E2:  IORWF  FF2,F
29E4:  MOVLW  14
29E6:  MOVLB  0
29E8:  MOVWF  xDE
29EA:  CALL   05EE
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
29EE:  MOVLW  02
29F0:  MOVWF  FA9
29F2:  MOVFF  3A,FA8
29F6:  BCF    FA6.6
29F8:  BCF    FA6.7
29FA:  BSF    FA6.2
29FC:  MOVF   FF2,W
29FE:  MOVWF  00
2A00:  BCF    FF2.7
2A02:  MOVLB  F
2A04:  MOVLW  55
2A06:  MOVWF  FA7
2A08:  MOVLW  AA
2A0A:  MOVWF  FA7
2A0C:  BSF    FA6.1
2A0E:  BTFSC  FA6.1
2A10:  BRA    2A0E
2A12:  BCF    FA6.2
2A14:  MOVF   00,W
2A16:  IORWF  FF2,F
2A18:  MOVLW  14
2A1A:  MOVLB  0
2A1C:  MOVWF  xDE
2A1E:  CALL   05EE
2A22:  MOVLW  03
2A24:  MOVWF  FA9
2A26:  MOVFF  3B,FA8
2A2A:  BCF    FA6.6
2A2C:  BCF    FA6.7
2A2E:  BSF    FA6.2
2A30:  MOVF   FF2,W
2A32:  MOVWF  00
2A34:  BCF    FF2.7
2A36:  MOVLB  F
2A38:  MOVLW  55
2A3A:  MOVWF  FA7
2A3C:  MOVLW  AA
2A3E:  MOVWF  FA7
2A40:  BSF    FA6.1
2A42:  BTFSC  FA6.1
2A44:  BRA    2A42
2A46:  BCF    FA6.2
2A48:  MOVF   00,W
2A4A:  IORWF  FF2,F
2A4C:  MOVLW  14
2A4E:  MOVLB  0
2A50:  MOVWF  xDE
2A52:  CALL   05EE
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2A56:  MOVLW  02
2A58:  MOVWF  xC7
2A5A:  MOVLW  FA
2A5C:  MOVWF  xDE
2A5E:  CALL   05EE
2A62:  DECFSZ xC7,F
2A64:  BRA    2A5A
2A66:  MOVLW  01
2A68:  MOVWF  19
2A6A:  CLRF   33
2A6C:  MOVLW  02
2A6E:  MOVWF  1D
2A70:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2A72:  MOVF   1C,W
2A74:  SUBLW  0B
2A76:  BC    2A96
2A78:  MOVF   1C,W
2A7A:  SUBLW  0D
2A7C:  BNC   2A96
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2A7E:  MOVLW  01
2A80:  SUBWF  1C,W
2A82:  MOVWF  xC7
2A84:  MOVWF  xD9
2A86:  MOVLW  04
2A88:  MOVWF  xDA
2A8A:  CALL   075E
....................             lcd_putc(t[1]); 
2A8E:  MOVFF  36,D8
2A92:  CALL   07C0
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2A96:  MOVF   19,W
2A98:  SUBLW  04
2A9A:  BNZ   2B0E
....................    lcd_gotoxy(1,1); 
2A9C:  MOVLW  01
2A9E:  MOVWF  xD9
2AA0:  MOVWF  xDA
2AA2:  CALL   075E
....................    printf(lcd_putc,"  Duracion Actual   "); 
2AA6:  MOVLW  94
2AA8:  MOVWF  FF6
2AAA:  MOVLW  04
2AAC:  MOVWF  FF7
2AAE:  CALL   081E
....................    lcd_gotoxy(1,2); 
2AB2:  MOVLW  01
2AB4:  MOVWF  xD9
2AB6:  MOVLW  02
2AB8:  MOVWF  xDA
2ABA:  CALL   075E
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2ABE:  MOVLW  AA
2AC0:  MOVWF  FF6
2AC2:  MOVLW  04
2AC4:  MOVWF  FF7
2AC6:  MOVLW  0B
2AC8:  MOVWF  xCB
2ACA:  CALL   0C52
2ACE:  MOVLW  08
2AD0:  MOVWF  FE9
2AD2:  MOVFF  48,C8
2AD6:  MOVFF  47,C7
2ADA:  GOTO   0E48
2ADE:  MOVLW  20
2AE0:  MOVWF  xD8
2AE2:  CALL   07C0
2AE6:  MOVLW  20
2AE8:  MOVWF  xD8
2AEA:  CALL   07C0
2AEE:  MOVLW  20
2AF0:  MOVWF  xD8
2AF2:  CALL   07C0
....................    lcd_gotoxy(1,4); 
2AF6:  MOVLW  01
2AF8:  MOVWF  xD9
2AFA:  MOVLW  04
2AFC:  MOVWF  xDA
2AFE:  CALL   075E
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2B02:  MOVLW  BE
2B04:  MOVWF  FF6
2B06:  MOVLW  04
2B08:  MOVWF  FF7
2B0A:  CALL   081E
....................     
....................    } 
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2B0E:  BSF    F92.5
2B10:  BTFSS  F80.5
2B12:  BRA    2C04
2B14:  BSF    F96.1
2B16:  BTFSS  F84.1
2B18:  BRA    2C04
....................       {   
....................          delay_ms(200); 
2B1A:  MOVLW  C8
2B1C:  MOVWF  xDE
2B1E:  CALL   05EE
....................          printf(lcd_putc,"\f"); 
2B22:  MOVLW  0C
2B24:  MOVWF  xD8
2B26:  CALL   07C0
....................          lcd_gotoxy(1,2); 
2B2A:  MOVLW  01
2B2C:  MOVWF  xD9
2B2E:  MOVLW  02
2B30:  MOVWF  xDA
2B32:  CALL   075E
....................          printf(lcd_putc," Reset de tiempo "); 
2B36:  MOVLW  D4
2B38:  MOVWF  FF6
2B3A:  MOVLW  04
2B3C:  MOVWF  FF7
2B3E:  CALL   081E
....................          lcd_gotoxy(1,3); 
2B42:  MOVLW  01
2B44:  MOVWF  xD9
2B46:  MOVLW  03
2B48:  MOVWF  xDA
2B4A:  CALL   075E
....................          printf(lcd_putc,"     Exitoso     "); 
2B4E:  MOVLW  E6
2B50:  MOVWF  FF6
2B52:  MOVLW  04
2B54:  MOVWF  FF7
2B56:  CALL   081E
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2B5A:  MOVLW  32
2B5C:  MOVWF  FA9
2B5E:  CLRF   FA8
2B60:  BCF    FA6.6
2B62:  BCF    FA6.7
2B64:  BSF    FA6.2
2B66:  MOVF   FF2,W
2B68:  MOVWF  00
2B6A:  BCF    FF2.7
2B6C:  MOVLB  F
2B6E:  MOVLW  55
2B70:  MOVWF  FA7
2B72:  MOVLW  AA
2B74:  MOVWF  FA7
2B76:  BSF    FA6.1
2B78:  BTFSC  FA6.1
2B7A:  BRA    2B78
2B7C:  BCF    FA6.2
2B7E:  MOVF   00,W
2B80:  IORWF  FF2,F
2B82:  MOVLW  33
2B84:  MOVWF  FA9
2B86:  CLRF   FA8
2B88:  BCF    FA6.6
2B8A:  BCF    FA6.7
2B8C:  BSF    FA6.2
2B8E:  MOVF   FF2,W
2B90:  MOVWF  00
2B92:  BCF    FF2.7
2B94:  MOVLW  55
2B96:  MOVWF  FA7
2B98:  MOVLW  AA
2B9A:  MOVWF  FA7
2B9C:  BSF    FA6.1
2B9E:  BTFSC  FA6.1
2BA0:  BRA    2B9E
2BA2:  BCF    FA6.2
2BA4:  MOVF   00,W
2BA6:  IORWF  FF2,F
2BA8:  MOVLW  34
2BAA:  MOVWF  FA9
2BAC:  CLRF   FA8
2BAE:  BCF    FA6.6
2BB0:  BCF    FA6.7
2BB2:  BSF    FA6.2
2BB4:  MOVF   FF2,W
2BB6:  MOVWF  00
2BB8:  BCF    FF2.7
2BBA:  MOVLW  55
2BBC:  MOVWF  FA7
2BBE:  MOVLW  AA
2BC0:  MOVWF  FA7
2BC2:  BSF    FA6.1
2BC4:  BTFSC  FA6.1
2BC6:  BRA    2BC4
2BC8:  BCF    FA6.2
2BCA:  MOVF   00,W
2BCC:  IORWF  FF2,F
....................          delay_ms(700); 
2BCE:  MOVLW  04
2BD0:  MOVLB  0
2BD2:  MOVWF  xC7
2BD4:  MOVLW  AF
2BD6:  MOVWF  xDE
2BD8:  CALL   05EE
2BDC:  DECFSZ xC7,F
2BDE:  BRA    2BD4
....................          segundos=0;minutos=0;horas=0; 
2BE0:  CLRF   22
2BE2:  CLRF   23
2BE4:  CLRF   48
2BE6:  CLRF   47
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2BE8:  MOVLW  1E
2BEA:  MOVWF  xDE
2BEC:  CALL   05EE
2BF0:  MOVLW  01
2BF2:  MOVWF  19
2BF4:  CLRF   33
2BF6:  MOVLW  02
2BF8:  MOVWF  1D
2BFA:  MOVWF  1F
2BFC:  MOVLW  0C
2BFE:  MOVWF  xD8
2C00:  CALL   07C0
....................       } 
....................              
....................       if(LEFT)// Si oprime Izquierda 
2C04:  BSF    F96.2
2C06:  BTFSS  F84.2
2C08:  BRA    2C36
....................       { 
....................          if(Flanco3 == 0) 
2C0A:  BTFSC  17.6
2C0C:  BRA    2C34
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2C0E:  BSF    17.6
2C10:  MOVLW  02
2C12:  MOVWF  xC7
2C14:  MOVLW  FA
2C16:  MOVWF  xDE
2C18:  CALL   05EE
2C1C:  DECFSZ xC7,F
2C1E:  BRA    2C14
2C20:  MOVLW  01
2C22:  MOVWF  19
2C24:  CLRF   33
2C26:  MOVLW  02
2C28:  MOVWF  1D
2C2A:  MOVWF  1F
2C2C:  MOVLW  0C
2C2E:  MOVWF  xD8
2C30:  CALL   07C0
....................          } 
....................       } 
....................       else 
2C34:  BRA    2C38
....................       { 
....................          Flanco3 = 0; 
2C36:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
2C38:  MOVF   19,W
2C3A:  SUBLW  05
2C3C:  BTFSS  FD8.2
2C3E:  BRA    2E5E
....................       lcd_gotoxy(1,1); 
2C40:  MOVLW  01
2C42:  MOVWF  xD9
2C44:  MOVWF  xDA
2C46:  CALL   075E
....................       printf(lcd_putc,"  Zero Point Config "); 
2C4A:  MOVLW  F8
2C4C:  MOVWF  FF6
2C4E:  MOVLW  04
2C50:  MOVWF  FF7
2C52:  CALL   081E
....................       lcd_gotoxy(1,2); 
2C56:  MOVLW  01
2C58:  MOVWF  xD9
2C5A:  MOVLW  02
2C5C:  MOVWF  xDA
2C5E:  CALL   075E
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2C62:  MOVLW  05
2C64:  MOVWF  xC7
2C66:  CALL   0F72
2C6A:  MOVFF  00,C7
2C6E:  MOVFF  01,C8
2C72:  MOVFF  02,C9
2C76:  MOVFF  03,CA
2C7A:  MOVFF  03,DE
2C7E:  MOVFF  02,DD
2C82:  MOVFF  01,DC
2C86:  MOVFF  00,DB
2C8A:  MOVLW  D7
2C8C:  MOVWF  xE2
2C8E:  MOVLW  A3
2C90:  MOVWF  xE1
2C92:  CLRF   xE0
2C94:  MOVLW  81
2C96:  MOVWF  xDF
2C98:  CALL   110C
2C9C:  MOVFF  00,C7
2CA0:  MOVFF  01,C8
2CA4:  MOVFF  02,C9
2CA8:  MOVFF  03,CA
2CAC:  MOVLW  0E
2CAE:  MOVWF  FF6
2CB0:  MOVLW  05
2CB2:  MOVWF  FF7
2CB4:  MOVLW  09
2CB6:  MOVWF  xCB
2CB8:  CALL   0C52
2CBC:  MOVLW  02
2CBE:  MOVWF  FE9
2CC0:  MOVFF  CA,CE
2CC4:  MOVFF  C9,CD
2CC8:  MOVFF  C8,CC
2CCC:  MOVFF  C7,CB
2CD0:  MOVWF  xCF
2CD2:  CALL   12B8
2CD6:  MOVLW  1C
2CD8:  MOVWF  FF6
2CDA:  MOVLW  05
2CDC:  MOVWF  FF7
2CDE:  MOVLW  07
2CE0:  MOVWF  xCB
2CE2:  CALL   0C52
....................       lcd_gotoxy(1,3); 
2CE6:  MOVLW  01
2CE8:  MOVWF  xD9
2CEA:  MOVLW  03
2CEC:  MOVWF  xDA
2CEE:  CALL   075E
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(1)); 
2CF2:  MOVLW  01
2CF4:  MOVWF  xCC
2CF6:  CALL   070C
2CFA:  MOVFF  00,C7
2CFE:  MOVFF  01,C8
2D02:  MOVFF  02,C9
2D06:  MOVFF  03,CA
2D0A:  MOVLW  24
2D0C:  MOVWF  FF6
2D0E:  MOVLW  05
2D10:  MOVWF  FF7
2D12:  MOVLW  08
2D14:  MOVWF  xCB
2D16:  CALL   0C52
2D1A:  MOVLW  01
2D1C:  MOVWF  FE9
2D1E:  MOVFF  CA,CE
2D22:  MOVFF  C9,CD
2D26:  MOVFF  C8,CC
2D2A:  MOVFF  C7,CB
2D2E:  CLRF   xCF
2D30:  CALL   12B8
....................       lcd_gotoxy(1,4); 
2D34:  MOVLW  01
2D36:  MOVWF  xD9
2D38:  MOVLW  04
2D3A:  MOVWF  xDA
2D3C:  CALL   075E
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2D40:  MOVLW  32
2D42:  MOVWF  FF6
2D44:  MOVLW  05
2D46:  MOVWF  FF7
2D48:  MOVLW  07
2D4A:  MOVWF  xCB
2D4C:  CALL   0C52
2D50:  MOVLW  01
2D52:  MOVWF  FE9
2D54:  MOVFF  C6,CE
2D58:  MOVFF  C5,CD
2D5C:  MOVFF  C4,CC
2D60:  MOVFF  C3,CB
2D64:  CLRF   xCF
2D66:  CALL   12B8
....................      
....................       if(RIGHT)// Si oprime derecha 
2D6A:  BSF    F96.1
2D6C:  BTFSS  F84.1
2D6E:  BRA    2E2E
....................       {  if(Flanco1 == 0)  
2D70:  BTFSC  17.4
2D72:  BRA    2E2C
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2D74:  MOVLW  01
2D76:  MOVWF  19
2D78:  CLRF   33
2D7A:  MOVLW  02
2D7C:  MOVWF  1D
2D7E:  MOVWF  1F
2D80:  MOVLW  0B
2D82:  MOVWF  1C
2D84:  MOVLW  02
2D86:  MOVWF  xC7
2D88:  MOVLW  FA
2D8A:  MOVWF  xDE
2D8C:  CALL   05EE
2D90:  DECFSZ xC7,F
2D92:  BRA    2D88
2D94:  MOVLW  0C
2D96:  MOVWF  xD8
2D98:  CALL   07C0
....................             G=sensores(1); 
2D9C:  MOVLW  01
2D9E:  MOVWF  xCC
2DA0:  CALL   070C
2DA4:  MOVFF  03,C6
2DA8:  MOVFF  02,C5
2DAC:  MOVFF  01,C4
2DB0:  MOVFF  00,C3
....................             G16=(int16)G; 
2DB4:  MOVFF  C6,DE
2DB8:  MOVFF  C5,DD
2DBC:  MOVFF  C4,DC
2DC0:  MOVFF  C3,DB
2DC4:  CALL   143E
2DC8:  MOVFF  02,4A
2DCC:  MOVFF  01,49
....................             G_l=G16; G_h=(G16>>8); 
2DD0:  MOVFF  49,26
2DD4:  MOVFF  4A,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
2DD8:  MOVLW  3C
2DDA:  MOVWF  FA9
2DDC:  MOVFF  26,FA8
2DE0:  BCF    FA6.6
2DE2:  BCF    FA6.7
2DE4:  BSF    FA6.2
2DE6:  MOVF   FF2,W
2DE8:  MOVWF  00
2DEA:  BCF    FF2.7
2DEC:  MOVLB  F
2DEE:  MOVLW  55
2DF0:  MOVWF  FA7
2DF2:  MOVLW  AA
2DF4:  MOVWF  FA7
2DF6:  BSF    FA6.1
2DF8:  BTFSC  FA6.1
2DFA:  BRA    2DF8
2DFC:  BCF    FA6.2
2DFE:  MOVF   00,W
2E00:  IORWF  FF2,F
2E02:  MOVLW  3D
2E04:  MOVWF  FA9
2E06:  MOVFF  27,FA8
2E0A:  BCF    FA6.6
2E0C:  BCF    FA6.7
2E0E:  BSF    FA6.2
2E10:  MOVF   FF2,W
2E12:  MOVWF  00
2E14:  BCF    FF2.7
2E16:  MOVLW  55
2E18:  MOVWF  FA7
2E1A:  MOVLW  AA
2E1C:  MOVWF  FA7
2E1E:  BSF    FA6.1
2E20:  BTFSC  FA6.1
2E22:  BRA    2E20
2E24:  BCF    FA6.2
2E26:  MOVF   00,W
2E28:  IORWF  FF2,F
2E2A:  MOVLB  0
....................             }} 
....................          else 
2E2C:  BRA    2E30
....................             {Flanco1 = 0;}    
2E2E:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2E30:  BSF    F96.2
2E32:  BTFSS  F84.2
2E34:  BRA    2E5C
....................       {  if(Flanco3 == 0)  
2E36:  BTFSC  17.6
2E38:  BRA    2E5A
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
2E3A:  MOVLW  01
2E3C:  MOVWF  19
2E3E:  CLRF   33
2E40:  MOVLW  02
2E42:  MOVWF  1D
2E44:  MOVWF  1F
2E46:  MOVLW  0B
2E48:  MOVWF  1C
2E4A:  MOVLW  1E
2E4C:  MOVWF  xDE
2E4E:  CALL   05EE
2E52:  MOVLW  0C
2E54:  MOVWF  xD8
2E56:  CALL   07C0
....................          else 
2E5A:  BRA    2E5E
....................             {Flanco3 = 0;}   
2E5C:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de Seleccion de Velocidad 
2E5E:  MOVF   19,W
2E60:  SUBLW  06
2E62:  BTFSS  FD8.2
2E64:  BRA    2FCA
....................    lcd_gotoxy(1,1); 
2E66:  MOVLW  01
2E68:  MOVWF  xD9
2E6A:  MOVWF  xDA
2E6C:  CALL   075E
....................    printf(lcd_putc,"    Seleccione    "); 
2E70:  MOVLW  40
2E72:  MOVWF  FF6
2E74:  MOVLW  05
2E76:  MOVWF  FF7
2E78:  CALL   081E
....................    lcd_gotoxy(1,2); 
2E7C:  MOVLW  01
2E7E:  MOVWF  xD9
2E80:  MOVLW  02
2E82:  MOVWF  xDA
2E84:  CALL   075E
....................    printf(lcd_putc,"    Velocidad     "); 
2E88:  MOVLW  54
2E8A:  MOVWF  FF6
2E8C:  MOVLW  05
2E8E:  MOVWF  FF7
2E90:  CALL   081E
....................  
....................    if(Velocidad==5) 
2E94:  MOVF   34,W
2E96:  SUBLW  05
2E98:  BNZ   2EB4
....................    { 
....................       lcd_gotoxy(1,4); 
2E9A:  MOVLW  01
2E9C:  MOVWF  xD9
2E9E:  MOVLW  04
2EA0:  MOVWF  xDA
2EA2:  CALL   075E
....................       printf(lcd_putc,"    Variable     "); 
2EA6:  MOVLW  68
2EA8:  MOVWF  FF6
2EAA:  MOVLW  05
2EAC:  MOVWF  FF7
2EAE:  CALL   081E
....................    } 
....................    else 
2EB2:  BRA    2ECC
....................    { 
....................       lcd_gotoxy(1,4); 
2EB4:  MOVLW  01
2EB6:  MOVWF  xD9
2EB8:  MOVLW  04
2EBA:  MOVWF  xDA
2EBC:  CALL   075E
....................       printf(lcd_putc,"     Maxima      "); 
2EC0:  MOVLW  7A
2EC2:  MOVWF  FF6
2EC4:  MOVLW  05
2EC6:  MOVWF  FF7
2EC8:  CALL   081E
....................    } 
....................  
....................    if(UP) 
2ECC:  BSF    F92.5
2ECE:  BTFSS  F80.5
2ED0:  BRA    2EDE
....................    { 
....................       delay_ms(200); 
2ED2:  MOVLW  C8
2ED4:  MOVWF  xDE
2ED6:  CALL   05EE
....................       Velocidad=5; 
2EDA:  MOVLW  05
2EDC:  MOVWF  34
....................    } 
....................     
....................    if(DOWN) 
2EDE:  BSF    F96.0
2EE0:  BTFSS  F84.0
2EE2:  BRA    2EF0
....................    { 
....................       delay_ms(200); 
2EE4:  MOVLW  C8
2EE6:  MOVWF  xDE
2EE8:  CALL   05EE
....................       Velocidad=10; 
2EEC:  MOVLW  0A
2EEE:  MOVWF  34
....................    } 
....................        
....................       if(RIGHT)//Si oprime hacia arriba 
2EF0:  BSF    F96.1
2EF2:  BTFSS  F84.1
2EF4:  BRA    2F96
....................       {   
....................          delay_ms(200); 
2EF6:  MOVLW  C8
2EF8:  MOVWF  xDE
2EFA:  CALL   05EE
....................          if(Velocidad==5) 
2EFE:  MOVF   34,W
2F00:  SUBLW  05
2F02:  BNZ   2F30
....................          { 
....................             write_eeprom(90,5); 
2F04:  MOVLW  5A
2F06:  MOVWF  FA9
2F08:  MOVLW  05
2F0A:  MOVWF  FA8
2F0C:  BCF    FA6.6
2F0E:  BCF    FA6.7
2F10:  BSF    FA6.2
2F12:  MOVF   FF2,W
2F14:  MOVWF  00
2F16:  BCF    FF2.7
2F18:  MOVLB  F
2F1A:  MOVLW  55
2F1C:  MOVWF  FA7
2F1E:  MOVLW  AA
2F20:  MOVWF  FA7
2F22:  BSF    FA6.1
2F24:  BTFSC  FA6.1
2F26:  BRA    2F24
2F28:  BCF    FA6.2
2F2A:  MOVF   00,W
2F2C:  IORWF  FF2,F
2F2E:  MOVLB  0
....................          } 
....................           
....................          if(Velocidad==10) 
2F30:  MOVF   34,W
2F32:  SUBLW  0A
2F34:  BNZ   2F62
....................          { 
....................             write_eeprom(90,10); 
2F36:  MOVLW  5A
2F38:  MOVWF  FA9
2F3A:  MOVLW  0A
2F3C:  MOVWF  FA8
2F3E:  BCF    FA6.6
2F40:  BCF    FA6.7
2F42:  BSF    FA6.2
2F44:  MOVF   FF2,W
2F46:  MOVWF  00
2F48:  BCF    FF2.7
2F4A:  MOVLB  F
2F4C:  MOVLW  55
2F4E:  MOVWF  FA7
2F50:  MOVLW  AA
2F52:  MOVWF  FA7
2F54:  BSF    FA6.1
2F56:  BTFSC  FA6.1
2F58:  BRA    2F56
2F5A:  BCF    FA6.2
2F5C:  MOVF   00,W
2F5E:  IORWF  FF2,F
2F60:  MOVLB  0
....................          } 
....................          delay_ms(700); 
2F62:  MOVLW  04
2F64:  MOVWF  xC7
2F66:  MOVLW  AF
2F68:  MOVWF  xDE
2F6A:  CALL   05EE
2F6E:  DECFSZ xC7,F
2F70:  BRA    2F66
....................          segundos=0;minutos=0;horas=0; 
2F72:  CLRF   22
2F74:  CLRF   23
2F76:  CLRF   48
2F78:  CLRF   47
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2F7A:  MOVLW  1E
2F7C:  MOVWF  xDE
2F7E:  CALL   05EE
2F82:  MOVLW  01
2F84:  MOVWF  19
2F86:  CLRF   33
2F88:  MOVLW  02
2F8A:  MOVWF  1D
2F8C:  MOVWF  1F
2F8E:  MOVLW  0C
2F90:  MOVWF  xD8
2F92:  CALL   07C0
....................       } 
....................              
....................       if(LEFT)// Si oprime Izquierda 
2F96:  BSF    F96.2
2F98:  BTFSS  F84.2
2F9A:  BRA    2FC8
....................       { 
....................          if(Flanco3 == 0) 
2F9C:  BTFSC  17.6
2F9E:  BRA    2FC6
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2FA0:  BSF    17.6
2FA2:  MOVLW  02
2FA4:  MOVWF  xC7
2FA6:  MOVLW  FA
2FA8:  MOVWF  xDE
2FAA:  CALL   05EE
2FAE:  DECFSZ xC7,F
2FB0:  BRA    2FA6
2FB2:  MOVLW  01
2FB4:  MOVWF  19
2FB6:  CLRF   33
2FB8:  MOVLW  02
2FBA:  MOVWF  1D
2FBC:  MOVWF  1F
2FBE:  MOVLW  0C
2FC0:  MOVWF  xD8
2FC2:  CALL   07C0
....................          } 
....................       } 
....................       else 
2FC6:  BRA    2FCA
....................       { 
....................          Flanco3 = 0; 
2FC8:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
2FCA:  MOVF   19,W
2FCC:  SUBLW  64
2FCE:  BTFSS  FD8.2
2FD0:  BRA    33CE
....................     
....................    if(Lectura==1) 
2FD2:  BTFSS  18.0
2FD4:  BRA    2FF0
....................    { 
....................       Lectura=0; 
2FD6:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
2FD8:  MOVLW  05
2FDA:  MOVWF  xC7
2FDC:  CALL   0F72
2FE0:  MOVFF  03,AA
2FE4:  MOVFF  02,A9
2FE8:  MOVFF  01,A8
2FEC:  MOVFF  00,A7
....................    } 
....................     
....................    lcd_gotoxy(1,1); 
2FF0:  MOVLW  01
2FF2:  MOVWF  xD9
2FF4:  MOVWF  xDA
2FF6:  CALL   075E
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
2FFA:  MOVFF  AA,DE
2FFE:  MOVFF  A9,DD
3002:  MOVFF  A8,DC
3006:  MOVFF  A7,DB
300A:  MOVLW  D7
300C:  MOVWF  xE2
300E:  MOVLW  A3
3010:  MOVWF  xE1
3012:  CLRF   xE0
3014:  MOVLW  81
3016:  MOVWF  xDF
3018:  CALL   110C
301C:  MOVFF  00,C7
3020:  MOVFF  01,C8
3024:  MOVFF  02,C9
3028:  MOVFF  03,CA
302C:  MOVLW  8C
302E:  MOVWF  FF6
3030:  MOVLW  05
3032:  MOVWF  FF7
3034:  MOVLW  08
3036:  MOVWF  xCB
3038:  CALL   0C52
303C:  MOVLW  02
303E:  MOVWF  FE9
3040:  MOVFF  CA,CE
3044:  MOVFF  C9,CD
3048:  MOVFF  C8,CC
304C:  MOVFF  C7,CB
3050:  MOVWF  xCF
3052:  CALL   12B8
3056:  MOVLW  99
3058:  MOVWF  FF6
305A:  MOVLW  05
305C:  MOVWF  FF7
305E:  MOVLW  07
3060:  MOVWF  xCB
3062:  CALL   0C52
....................    lcd_gotoxy(1,2); 
3066:  MOVLW  01
3068:  MOVWF  xD9
306A:  MOVLW  02
306C:  MOVWF  xDA
306E:  CALL   075E
....................    printf(lcd_putc,"Filtro:"); 
3072:  MOVLW  A2
3074:  MOVWF  FF6
3076:  MOVLW  05
3078:  MOVWF  FF7
307A:  CALL   081E
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
307E:  MOVFF  AA,DE
3082:  MOVFF  A9,DD
3086:  MOVFF  A8,DC
308A:  MOVFF  A7,DB
308E:  MOVLW  A4
3090:  MOVWF  xE2
3092:  MOVLW  70
3094:  MOVWF  xE1
3096:  MOVLW  3D
3098:  MOVWF  xE0
309A:  MOVLW  7D
309C:  MOVWF  xDF
309E:  CALL   083E
30A2:  MOVFF  00,C7
30A6:  MOVFF  01,C8
30AA:  MOVFF  02,C9
30AE:  MOVFF  03,CA
30B2:  MOVFF  03,DE
30B6:  MOVFF  02,DD
30BA:  MOVFF  01,DC
30BE:  MOVFF  00,DB
30C2:  CLRF   xE2
30C4:  CLRF   xE1
30C6:  MOVLW  30
30C8:  MOVWF  xE0
30CA:  MOVLW  82
30CC:  MOVWF  xDF
30CE:  CALL   110C
30D2:  MOVFF  03,A6
30D6:  MOVFF  02,A5
30DA:  MOVFF  01,A4
30DE:  MOVFF  00,A3
....................    if(Saturacion>11) 
30E2:  CLRF   xDE
30E4:  CLRF   xDD
30E6:  MOVLW  30
30E8:  MOVWF  xDC
30EA:  MOVLW  82
30EC:  MOVWF  xDB
30EE:  MOVFF  A6,E2
30F2:  MOVFF  A5,E1
30F6:  MOVFF  A4,E0
30FA:  MOVFF  A3,DF
30FE:  CALL   0EFC
3102:  BNC   3110
....................    { 
....................       Saturacion=11; 
3104:  CLRF   xA6
3106:  CLRF   xA5
3108:  MOVLW  30
310A:  MOVWF  xA4
310C:  MOVLW  82
310E:  MOVWF  xA3
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
3110:  CLRF   2E
3112:  MOVFF  A6,CA
3116:  MOVFF  A5,C9
311A:  MOVFF  A4,C8
311E:  MOVFF  A3,C7
3122:  CALL   17A8
3126:  MOVFF  00,C7
312A:  MOVFF  01,C8
312E:  MOVFF  02,C9
3132:  MOVFF  03,CA
3136:  CLRF   xE0
3138:  MOVFF  2E,DF
313C:  CALL   06D6
3140:  MOVFF  03,DE
3144:  MOVFF  02,DD
3148:  MOVFF  01,DC
314C:  MOVFF  00,DB
3150:  MOVFF  CA,E2
3154:  MOVFF  C9,E1
3158:  MOVFF  C8,E0
315C:  MOVFF  C7,DF
3160:  CALL   0EFC
3164:  BNC   3182
....................    { 
....................       lcd_gotoxy(i+8,2); 
3166:  MOVLW  08
3168:  ADDWF  2E,W
316A:  MOVWF  xC7
316C:  MOVWF  xD9
316E:  MOVLW  02
3170:  MOVWF  xDA
3172:  CALL   075E
....................       printf(lcd_putc,"Ñ"); 
3176:  MOVLW  D1
3178:  MOVWF  xD8
317A:  CALL   07C0
....................    } 
317E:  INCF   2E,F
3180:  BRA    3112
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
3182:  MOVFF  A6,CA
3186:  MOVFF  A5,C9
318A:  MOVFF  A4,C8
318E:  MOVFF  A3,C7
3192:  CALL   17A8
3196:  MOVFF  03,DE
319A:  MOVFF  02,DD
319E:  MOVFF  01,DC
31A2:  MOVFF  00,DB
31A6:  CALL   143E
31AA:  MOVFF  01,2E
31AE:  MOVF   2E,W
31B0:  SUBLW  0A
31B2:  BNC   31D0
....................    { 
....................       lcd_gotoxy(i+8,2); 
31B4:  MOVLW  08
31B6:  ADDWF  2E,W
31B8:  MOVWF  xC7
31BA:  MOVWF  xD9
31BC:  MOVLW  02
31BE:  MOVWF  xDA
31C0:  CALL   075E
....................       printf(lcd_putc," "); 
31C4:  MOVLW  20
31C6:  MOVWF  xD8
31C8:  CALL   07C0
....................    } 
31CC:  INCF   2E,F
31CE:  BRA    31AE
....................     
....................    lcd_gotoxy(10,3); 
31D0:  MOVLW  0A
31D2:  MOVWF  xD9
31D4:  MOVLW  03
31D6:  MOVWF  xDA
31D8:  CALL   075E
....................    printf(lcd_putc,"Tempo:%02u:%02u",tempo_minutos,tempo_segundos); 
31DC:  MOVLW  AA
31DE:  MOVWF  FF6
31E0:  MOVLW  05
31E2:  MOVWF  FF7
31E4:  MOVLW  06
31E6:  MOVWF  xCB
31E8:  CALL   0C52
31EC:  MOVFF  28,C7
31F0:  MOVLW  01
31F2:  MOVWF  xC8
31F4:  CALL   0DE2
31F8:  MOVLW  3A
31FA:  MOVWF  xD8
31FC:  CALL   07C0
3200:  MOVFF  29,C7
3204:  MOVLW  01
3206:  MOVWF  xC8
3208:  CALL   0DE2
....................     
....................    if(estadomv==1) 
320C:  BTFSS  17.2
320E:  BRA    3232
....................    { 
....................       lcd_gotoxy(1,4); 
3210:  MOVLW  01
3212:  MOVWF  xD9
3214:  MOVLW  04
3216:  MOVWF  xDA
3218:  CALL   075E
....................       printf(lcd_putc,"Motor:ON "); 
321C:  MOVLW  BA
321E:  MOVWF  FF6
3220:  MOVLW  05
3222:  MOVWF  FF7
3224:  CALL   081E
....................       velocidades(1); 
3228:  MOVLW  01
322A:  MOVWF  xC7
322C:  CALL   17BE
....................    } 
....................    else 
3230:  BRA    3250
....................    { 
....................       lcd_gotoxy(1,4); 
3232:  MOVLW  01
3234:  MOVWF  xD9
3236:  MOVLW  04
3238:  MOVWF  xDA
323A:  CALL   075E
....................       printf(lcd_putc,"Motor:OFF"); 
323E:  MOVLW  C4
3240:  MOVWF  FF6
3242:  MOVLW  05
3244:  MOVWF  FF7
3246:  CALL   081E
....................       velocidades(0);  
324A:  CLRF   xC7
324C:  CALL   17BE
....................    } 
....................     
....................    if(estadouv==1) 
3250:  BTFSS  17.0
3252:  BRA    32A0
....................    { 
....................       lcd_gotoxy(13,4); 
3254:  MOVLW  0D
3256:  MOVWF  xD9
3258:  MOVLW  04
325A:  MOVWF  xDA
325C:  CALL   075E
....................       printf(lcd_putc,"UV:ON "); 
3260:  MOVLW  CE
3262:  MOVWF  FF6
3264:  MOVLW  05
3266:  MOVWF  FF7
3268:  CALL   081E
....................       estadomv=0; 
326C:  BCF    17.2
....................       velocidades(0); 
326E:  CLRF   xC7
3270:  CALL   17BE
....................       estadofl=0; 
3274:  BCF    17.1
....................       Luz_Blanca_off; 
3276:  BCF    F8C.1
3278:  BCF    F95.1
....................       Luz_UV_on; 
327A:  BSF    F8C.0
327C:  BCF    F95.0
....................       tiempo_cumplido=0; 
327E:  BCF    17.7
....................       if(flaguv==0) 
3280:  BTFSC  18.1
3282:  BRA    329E
....................       { 
....................          delay_ms(1000);lcd_init();flaguv=1;guardaruv=1; 
3284:  MOVLW  04
3286:  MOVWF  xC7
3288:  MOVLW  FA
328A:  MOVWF  xDE
328C:  CALL   05EE
3290:  DECFSZ xC7,F
3292:  BRA    3288
3294:  CALL   0680
3298:  BSF    18.1
329A:  MOVLW  01
329C:  MOVWF  31
....................       } 
....................    } 
....................    else 
329E:  BRA    32DC
....................    { 
....................       estadouv=0; 
32A0:  BCF    17.0
....................       lcd_gotoxy(13,4); 
32A2:  MOVLW  0D
32A4:  MOVWF  xD9
32A6:  MOVLW  04
32A8:  MOVWF  xDA
32AA:  CALL   075E
....................       printf(lcd_putc,"UV:OFF"); 
32AE:  MOVLW  D6
32B0:  MOVWF  FF6
32B2:  MOVLW  05
32B4:  MOVWF  FF7
32B6:  CALL   081E
....................       Luz_UV_off; 
32BA:  BCF    F8C.0
32BC:  BCF    F95.0
....................       if(flaguv==1) 
32BE:  BTFSS  18.1
32C0:  BRA    32DC
....................       { 
....................          delay_ms(1000);lcd_init();flaguv=0;guardaruv=1; 
32C2:  MOVLW  04
32C4:  MOVWF  xC7
32C6:  MOVLW  FA
32C8:  MOVWF  xDE
32CA:  CALL   05EE
32CE:  DECFSZ xC7,F
32D0:  BRA    32C6
32D2:  CALL   0680
32D6:  BCF    18.1
32D8:  MOVLW  01
32DA:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
32DC:  BTFSS  17.1
32DE:  BRA    3310
....................    { 
....................       lcd_gotoxy(1,3); 
32E0:  MOVLW  01
32E2:  MOVWF  xD9
32E4:  MOVLW  03
32E6:  MOVWF  xDA
32E8:  CALL   075E
....................       printf(lcd_putc,"Luz:ON "); 
32EC:  MOVLW  DE
32EE:  MOVWF  FF6
32F0:  MOVLW  05
32F2:  MOVWF  FF7
32F4:  CALL   081E
....................       Luz_Blanca_on; 
32F8:  BSF    F8C.1
32FA:  BCF    F95.1
....................       if(flagfl==0) 
32FC:  BTFSC  18.2
32FE:  BRA    330E
....................       { 
....................          delay_ms(50);lcd_init();flagfl=1; 
3300:  MOVLW  32
3302:  MOVWF  xDE
3304:  CALL   05EE
3308:  CALL   0680
330C:  BSF    18.2
....................       } 
....................    } 
....................    else 
330E:  BRA    333E
....................    { 
....................       lcd_gotoxy(1,3); 
3310:  MOVLW  01
3312:  MOVWF  xD9
3314:  MOVLW  03
3316:  MOVWF  xDA
3318:  CALL   075E
....................       printf(lcd_putc,"Luz:OFF"); 
331C:  MOVLW  E6
331E:  MOVWF  FF6
3320:  MOVLW  05
3322:  MOVWF  FF7
3324:  CALL   081E
....................       Luz_Blanca_off; 
3328:  BCF    F8C.1
332A:  BCF    F95.1
....................       if(flagfl==1) 
332C:  BTFSS  18.2
332E:  BRA    333E
....................       { 
....................          delay_ms(50);lcd_init();flagfl=0; 
3330:  MOVLW  32
3332:  MOVWF  xDE
3334:  CALL   05EE
3338:  CALL   0680
333C:  BCF    18.2
....................       } 
....................    } 
....................     
....................   if(DOWN)//Si oprime hacia arriba 
333E:  BSF    F96.0
3340:  BTFSS  F84.0
3342:  BRA    335E
....................    { 
....................       if(Flanco == 0) 
3344:  BTFSC  17.3
3346:  BRA    335C
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
3348:  BTG    17.1
334A:  BSF    17.3
334C:  MOVLW  02
334E:  MOVWF  xC7
3350:  MOVLW  96
3352:  MOVWF  xDE
3354:  CALL   05EE
3358:  DECFSZ xC7,F
335A:  BRA    3350
....................       } 
....................    } 
....................    else 
335C:  BRA    3360
....................    { 
....................       Flanco = 0; 
335E:  BCF    17.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3360:  BSF    F96.1
3362:  BTFSS  F84.1
3364:  BRA    3380
....................    { 
....................       if(Flanco1 == 0) 
3366:  BTFSC  17.4
3368:  BRA    337E
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
336A:  BTG    17.2
336C:  BSF    17.4
336E:  MOVLW  02
3370:  MOVWF  xC7
3372:  MOVLW  96
3374:  MOVWF  xDE
3376:  CALL   05EE
337A:  DECFSZ xC7,F
337C:  BRA    3372
....................       } 
....................    } 
....................    else 
337E:  BRA    3382
....................    { 
....................       Flanco1 = 0; 
3380:  BCF    17.4
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3382:  BSF    F92.5
3384:  BTFSS  F80.5
3386:  BRA    33AC
....................    { 
....................       printf(lcd_putc,"\f");delay_ms(300);Menu=1; paso=0;Flecha=2;Flecha2=2;    
3388:  MOVLW  0C
338A:  MOVWF  xD8
338C:  CALL   07C0
3390:  MOVLW  02
3392:  MOVWF  xC7
3394:  MOVLW  96
3396:  MOVWF  xDE
3398:  CALL   05EE
339C:  DECFSZ xC7,F
339E:  BRA    3394
33A0:  MOVLW  01
33A2:  MOVWF  19
33A4:  CLRF   33
33A6:  MOVLW  02
33A8:  MOVWF  1D
33AA:  MOVWF  1F
....................    } 
....................     
....................    if(LEFT)//Si oprime hacia izquierda 
33AC:  BSF    F96.2
33AE:  BTFSS  F84.2
33B0:  BRA    33CC
....................    { 
....................       if(Flanco2 == 0) 
33B2:  BTFSC  17.5
33B4:  BRA    33CA
....................       { 
....................          estadouv=!estadouv;Flanco2 = 1;delay_ms(300); 
33B6:  BTG    17.0
33B8:  BSF    17.5
33BA:  MOVLW  02
33BC:  MOVWF  xC7
33BE:  MOVLW  96
33C0:  MOVWF  xDE
33C2:  CALL   05EE
33C6:  DECFSZ xC7,F
33C8:  BRA    33BE
....................       } 
....................    } 
....................    else 
33CA:  BRA    33CE
....................    { 
....................       Flanco2 = 0; 
33CC:  BCF    17.5
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
33CE:  DECFSZ 31,W
33D0:  BRA    3480
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
33D2:  MOVLW  32
33D4:  MOVWF  FA9
33D6:  MOVFF  22,FA8
33DA:  BCF    FA6.6
33DC:  BCF    FA6.7
33DE:  BSF    FA6.2
33E0:  MOVF   FF2,W
33E2:  MOVWF  00
33E4:  BCF    FF2.7
33E6:  MOVLB  F
33E8:  MOVLW  55
33EA:  MOVWF  FA7
33EC:  MOVLW  AA
33EE:  MOVWF  FA7
33F0:  BSF    FA6.1
33F2:  BTFSC  FA6.1
33F4:  BRA    33F2
33F6:  BCF    FA6.2
33F8:  MOVF   00,W
33FA:  IORWF  FF2,F
33FC:  MOVLW  33
33FE:  MOVWF  FA9
3400:  MOVFF  23,FA8
3404:  BCF    FA6.6
3406:  BCF    FA6.7
3408:  BSF    FA6.2
340A:  MOVF   FF2,W
340C:  MOVWF  00
340E:  BCF    FF2.7
3410:  MOVLW  55
3412:  MOVWF  FA7
3414:  MOVLW  AA
3416:  MOVWF  FA7
3418:  BSF    FA6.1
341A:  BTFSC  FA6.1
341C:  BRA    341A
341E:  BCF    FA6.2
3420:  MOVF   00,W
3422:  IORWF  FF2,F
....................       horasL=(int8)horas; 
3424:  MOVFF  47,24
....................       horasH=(int8)(horas>>8); 
3428:  MOVF   48,W
342A:  MOVWF  25
....................       write_eeprom(52,horasL); 
342C:  MOVLW  34
342E:  MOVWF  FA9
3430:  MOVFF  24,FA8
3434:  BCF    FA6.6
3436:  BCF    FA6.7
3438:  BSF    FA6.2
343A:  MOVFF  FF2,00
343E:  BCF    FF2.7
3440:  MOVLW  55
3442:  MOVWF  FA7
3444:  MOVLW  AA
3446:  MOVWF  FA7
3448:  BSF    FA6.1
344A:  BTFSC  FA6.1
344C:  BRA    344A
344E:  BCF    FA6.2
3450:  MOVF   00,W
3452:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
3454:  MOVLW  35
3456:  MOVWF  FA9
3458:  MOVFF  25,FA8
345C:  BCF    FA6.6
345E:  BCF    FA6.7
3460:  BSF    FA6.2
3462:  MOVFF  FF2,00
3466:  BCF    FF2.7
3468:  MOVLW  55
346A:  MOVWF  FA7
346C:  MOVLW  AA
346E:  MOVWF  FA7
3470:  BSF    FA6.1
3472:  BTFSC  FA6.1
3474:  BRA    3472
3476:  BCF    FA6.2
3478:  MOVF   00,W
347A:  IORWF  FF2,F
....................       guardaruv=0; 
347C:  CLRF   31
347E:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
3480:  MOVF   30,W
3482:  SUBLW  13
3484:  BC    348C
....................    { 
....................       lcd_init(); 
3486:  CALL   0680
....................       tiemporeset=0; 
348A:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
348C:  MOVF   22,W
348E:  SUBLW  3B
3490:  BC    3496
....................    { 
....................       segundos=0;minutos++; 
3492:  CLRF   22
3494:  INCF   23,F
....................    } 
....................    if(minutos==60) 
3496:  MOVF   23,W
3498:  SUBLW  3C
349A:  BNZ   34A4
....................    { 
....................       minutos=0;horas++; 
349C:  CLRF   23
349E:  INCF   47,F
34A0:  BTFSC  FD8.2
34A2:  INCF   48,F
....................    } 
....................     
....................    } 
34A4:  GOTO   1C94
.................... } 
....................  
34A8:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
