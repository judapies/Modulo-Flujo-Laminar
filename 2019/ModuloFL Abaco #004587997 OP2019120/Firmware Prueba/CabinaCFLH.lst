CCS PCH C Compiler, Version 4.104, 5967               19-sept.-19 14:15

               Filename: H:\JP\JP\Laboratorio\Modulo Flujo Laminar\2019\ModuloFL Abaco #004587997 OP2019120\Firmware Prueba\CabinaCFLH.lst

               ROM used: 16172 bytes (49%)
                         Largest free fragment is 16594
               RAM used: 190 (9%) at main() level
                         228 (11%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   2040
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   01B2
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=48000000) 
.................... //#use delay(clock=20000000) 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV4,VREGEN,NOMCLR,NOPUT 
.................... #use delay(clock=16000000) 
*
0198:  MOVLW  04
019A:  SUBWF  xE3,F
019C:  BNC   01B0
019E:  CLRF   FEA
01A0:  MOVLW  E3
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01B0
01A8:  BRA    01AC
01AA:  NOP   
01AC:  DECFSZ FEF,F
01AE:  BRA    01AA
01B0:  RETLW  00
*
07F8:  CLRF   FEA
07FA:  MOVLW  D1
07FC:  MOVWF  FE9
07FE:  MOVF   FEF,W
0800:  BZ    081E
0802:  MOVLW  05
0804:  MOVWF  01
0806:  CLRF   00
0808:  DECFSZ 00,F
080A:  BRA    0808
080C:  DECFSZ 01,F
080E:  BRA    0806
0810:  MOVLW  2E
0812:  MOVWF  00
0814:  DECFSZ 00,F
0816:  BRA    0814
0818:  BRA    081A
081A:  DECFSZ FEF,F
081C:  BRA    0802
081E:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1CF0:  BCF    xCD.0
....................    y = x; 
1CF2:  MOVFF  C1,C6
1CF6:  MOVFF  C0,C5
1CFA:  MOVFF  BF,C4
1CFE:  MOVFF  BE,C3
....................  
....................    if (x < 0) 
1D02:  MOVFF  C1,D1
1D06:  MOVFF  C0,D0
1D0A:  MOVFF  BF,CF
1D0E:  MOVFF  BE,CE
1D12:  CLRF   xD5
1D14:  CLRF   xD4
1D16:  CLRF   xD3
1D18:  CLRF   xD2
1D1A:  CALL   0C60
1D1E:  BNC   1D28
....................    { 
....................       s = 1; 
1D20:  BSF    xCD.0
....................       y = -y; 
1D22:  MOVF   xC4,W
1D24:  XORLW  80
1D26:  MOVWF  xC4
....................    } 
....................  
....................    if (y <= 32768.0) 
1D28:  MOVFF  C6,D1
1D2C:  MOVFF  C5,D0
1D30:  MOVFF  C4,CF
1D34:  MOVFF  C3,CE
1D38:  CLRF   xD5
1D3A:  CLRF   xD4
1D3C:  CLRF   xD3
1D3E:  MOVLW  8E
1D40:  MOVWF  xD2
1D42:  CALL   0C60
1D46:  BC    1D4A
1D48:  BNZ   1D7A
....................   res = (float32)(unsigned int16)y; 
1D4A:  MOVFF  C6,D1
1D4E:  MOVFF  C5,D0
1D52:  MOVFF  C4,CF
1D56:  MOVFF  C3,CE
1D5A:  RCALL  1CB8
1D5C:  MOVFF  02,D3
1D60:  MOVFF  01,D2
1D64:  CALL   0A4C
1D68:  MOVFF  03,CA
1D6C:  MOVFF  02,C9
1D70:  MOVFF  01,C8
1D74:  MOVFF  00,C7
....................  
....................  else if (y < 10000000.0) 
1D78:  BRA    1F04
1D7A:  MOVFF  C6,D1
1D7E:  MOVFF  C5,D0
1D82:  MOVFF  C4,CF
1D86:  MOVFF  C3,CE
1D8A:  MOVLW  80
1D8C:  MOVWF  xD5
1D8E:  MOVLW  96
1D90:  MOVWF  xD4
1D92:  MOVLW  18
1D94:  MOVWF  xD3
1D96:  MOVLW  96
1D98:  MOVWF  xD2
1D9A:  CALL   0C60
1D9E:  BTFSS  FD8.0
1DA0:  BRA    1EF4
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1DA2:  MOVFF  C6,D1
1DA6:  MOVFF  C5,D0
1DAA:  MOVFF  C4,CF
1DAE:  MOVFF  C3,CE
1DB2:  CLRF   xD5
1DB4:  CLRF   xD4
1DB6:  CLRF   xD3
1DB8:  MOVLW  8E
1DBA:  MOVWF  xD2
1DBC:  CALL   142C
1DC0:  MOVFF  03,D1
1DC4:  MOVFF  02,D0
1DC8:  MOVFF  01,CF
1DCC:  MOVFF  00,CE
1DD0:  RCALL  1CB8
1DD2:  MOVFF  02,CC
1DD6:  MOVFF  01,CB
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1DDA:  MOVFF  C6,D1
1DDE:  MOVFF  C5,D0
1DE2:  MOVFF  C4,CF
1DE6:  MOVFF  C3,CE
1DEA:  CLRF   xD5
1DEC:  CLRF   xD4
1DEE:  CLRF   xD3
1DF0:  MOVLW  8E
1DF2:  MOVWF  xD2
1DF4:  CALL   142C
1DF8:  MOVFF  00,CE
1DFC:  MOVFF  01,CF
1E00:  MOVFF  02,D0
1E04:  MOVFF  03,D1
1E08:  MOVFF  CC,D3
1E0C:  MOVFF  CB,D2
1E10:  CALL   0A4C
1E14:  BSF    FD8.1
1E16:  MOVFF  D1,D5
1E1A:  MOVFF  D0,D4
1E1E:  MOVFF  CF,D3
1E22:  MOVFF  CE,D2
1E26:  MOVFF  03,D9
1E2A:  MOVFF  02,D8
1E2E:  MOVFF  01,D7
1E32:  MOVFF  00,D6
1E36:  CALL   1586
1E3A:  CLRF   xD1
1E3C:  CLRF   xD0
1E3E:  CLRF   xCF
1E40:  MOVLW  8E
1E42:  MOVWF  xCE
1E44:  MOVFF  03,D5
1E48:  MOVFF  02,D4
1E4C:  MOVFF  01,D3
1E50:  MOVFF  00,D2
1E54:  RCALL  1986
1E56:  MOVFF  03,C6
1E5A:  MOVFF  02,C5
1E5E:  MOVFF  01,C4
1E62:  MOVFF  00,C3
....................   res = 32768.0*(float32)l; 
1E66:  MOVFF  CC,D3
1E6A:  MOVFF  CB,D2
1E6E:  CALL   0A4C
1E72:  CLRF   xD1
1E74:  CLRF   xD0
1E76:  CLRF   xCF
1E78:  MOVLW  8E
1E7A:  MOVWF  xCE
1E7C:  MOVFF  03,D5
1E80:  MOVFF  02,D4
1E84:  MOVFF  01,D3
1E88:  MOVFF  00,D2
1E8C:  RCALL  1986
1E8E:  MOVFF  03,CA
1E92:  MOVFF  02,C9
1E96:  MOVFF  01,C8
1E9A:  MOVFF  00,C7
....................   res += (float32)(unsigned int16)y; 
1E9E:  MOVFF  C6,D1
1EA2:  MOVFF  C5,D0
1EA6:  MOVFF  C4,CF
1EAA:  MOVFF  C3,CE
1EAE:  RCALL  1CB8
1EB0:  MOVFF  02,D3
1EB4:  MOVFF  01,D2
1EB8:  CALL   0A4C
1EBC:  BCF    FD8.1
1EBE:  MOVFF  CA,D5
1EC2:  MOVFF  C9,D4
1EC6:  MOVFF  C8,D3
1ECA:  MOVFF  C7,D2
1ECE:  MOVFF  03,D9
1ED2:  MOVFF  02,D8
1ED6:  MOVFF  01,D7
1EDA:  MOVFF  00,D6
1EDE:  CALL   1586
1EE2:  MOVFF  03,CA
1EE6:  MOVFF  02,C9
1EEA:  MOVFF  01,C8
1EEE:  MOVFF  00,C7
....................  } 
....................  
....................  else 
1EF2:  BRA    1F04
....................   res = y; 
1EF4:  MOVFF  C6,CA
1EF8:  MOVFF  C5,C9
1EFC:  MOVFF  C4,C8
1F00:  MOVFF  C3,C7
....................  
....................  y = y - (float32)(unsigned int16)y; 
1F04:  MOVFF  C6,D1
1F08:  MOVFF  C5,D0
1F0C:  MOVFF  C4,CF
1F10:  MOVFF  C3,CE
1F14:  RCALL  1CB8
1F16:  MOVFF  02,D3
1F1A:  MOVFF  01,D2
1F1E:  CALL   0A4C
1F22:  BSF    FD8.1
1F24:  MOVFF  C6,D5
1F28:  MOVFF  C5,D4
1F2C:  MOVFF  C4,D3
1F30:  MOVFF  C3,D2
1F34:  MOVFF  03,D9
1F38:  MOVFF  02,D8
1F3C:  MOVFF  01,D7
1F40:  MOVFF  00,D6
1F44:  CALL   1586
1F48:  MOVFF  03,C6
1F4C:  MOVFF  02,C5
1F50:  MOVFF  01,C4
1F54:  MOVFF  00,C3
....................  
....................  if (s) 
1F58:  BTFSS  xCD.0
1F5A:  BRA    1F62
....................   res = -res; 
1F5C:  MOVF   xC8,W
1F5E:  XORLW  80
1F60:  MOVWF  xC8
....................  
....................  if (y != 0) 
1F62:  MOVFF  C6,D1
1F66:  MOVFF  C5,D0
1F6A:  MOVFF  C4,CF
1F6E:  MOVFF  C3,CE
1F72:  CLRF   xD5
1F74:  CLRF   xD4
1F76:  CLRF   xD3
1F78:  CLRF   xD2
1F7A:  CALL   0C60
1F7E:  BZ    1FF0
....................  { 
....................   if (s == 1 && n == 0) 
1F80:  BTFSS  xCD.0
1F82:  BRA    1FB8
1F84:  MOVF   xC2,F
1F86:  BNZ   1FB8
....................    res -= 1.0; 
1F88:  BSF    FD8.1
1F8A:  MOVFF  CA,D5
1F8E:  MOVFF  C9,D4
1F92:  MOVFF  C8,D3
1F96:  MOVFF  C7,D2
1F9A:  CLRF   xD9
1F9C:  CLRF   xD8
1F9E:  CLRF   xD7
1FA0:  MOVLW  7F
1FA2:  MOVWF  xD6
1FA4:  CALL   1586
1FA8:  MOVFF  03,CA
1FAC:  MOVFF  02,C9
1FB0:  MOVFF  01,C8
1FB4:  MOVFF  00,C7
....................  
....................   if (s == 0 && n == 1) 
1FB8:  BTFSC  xCD.0
1FBA:  BRA    1FF0
1FBC:  DECFSZ xC2,W
1FBE:  BRA    1FF0
....................    res += 1.0; 
1FC0:  BCF    FD8.1
1FC2:  MOVFF  CA,D5
1FC6:  MOVFF  C9,D4
1FCA:  MOVFF  C8,D3
1FCE:  MOVFF  C7,D2
1FD2:  CLRF   xD9
1FD4:  CLRF   xD8
1FD6:  CLRF   xD7
1FD8:  MOVLW  7F
1FDA:  MOVWF  xD6
1FDC:  CALL   1586
1FE0:  MOVFF  03,CA
1FE4:  MOVFF  02,C9
1FE8:  MOVFF  01,C8
1FEC:  MOVFF  00,C7
....................  } 
....................  if (x == 0) 
1FF0:  MOVFF  C1,D1
1FF4:  MOVFF  C0,D0
1FF8:  MOVFF  BF,CF
1FFC:  MOVFF  BE,CE
2000:  CLRF   xD5
2002:  CLRF   xD4
2004:  CLRF   xD3
2006:  CLRF   xD2
2008:  CALL   0C60
200C:  BNZ   2016
....................     res = 0; 
200E:  CLRF   xCA
2010:  CLRF   xC9
2012:  CLRF   xC8
2014:  CLRF   xC7
....................  
....................  return (res); 
2016:  MOVFF  C7,00
201A:  MOVFF  C8,01
201E:  MOVFF  C9,02
2022:  MOVFF  CA,03
.................... } 
2026:  GOTO   203E (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
202A:  MOVFF  BD,C1
202E:  MOVFF  BC,C0
2032:  MOVFF  BB,BF
2036:  MOVFF  BA,BE
203A:  CLRF   xC2
203C:  BRA    1CF0
.................... } 
203E:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A1) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B1,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B1,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B2,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B2,1) 
.................... #define   Motor_L1_on       output_bit(PIN_C2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_C2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_C1,1) 
.................... #define   Motor_L2_off      output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0820:  SWAPF  xD2,W
0822:  ANDLW  F0
0824:  MOVWF  00
0826:  MOVLW  0F
0828:  ANDWF  F83,W
082A:  IORWF  00,W
082C:  MOVWF  F83
....................       delay_cycles(30);//30 
082E:  MOVLW  09
0830:  MOVWF  00
0832:  DECFSZ 00,F
0834:  BRA    0832
0836:  BRA    0838
....................       lcd.enable = 1; 
0838:  BSF    F83.3
....................       delay_us(55);//55 
083A:  MOVLW  49
083C:  MOVWF  00
083E:  DECFSZ 00,F
0840:  BRA    083E
....................       lcd.enable = 0; 
0842:  BCF    F83.3
.................... } 
0844:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0846:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0848:  MOVLW  01
084A:  MOVWF  xD1
084C:  RCALL  07F8
....................       lcd.rs = address; 
084E:  BTFSS  xCF.0
0850:  BCF    F83.1
0852:  BTFSC  xCF.0
0854:  BSF    F83.1
....................       delay_cycles(30);//30 
0856:  MOVLW  09
0858:  MOVWF  00
085A:  DECFSZ 00,F
085C:  BRA    085A
085E:  BRA    0860
....................       lcd.rw = 0; 
0860:  BCF    F83.2
....................       delay_cycles(30);//30 
0862:  MOVLW  09
0864:  MOVWF  00
0866:  DECFSZ 00,F
0868:  BRA    0866
086A:  BRA    086C
....................       lcd.enable = 0; 
086C:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
086E:  SWAPF  xD0,W
0870:  MOVWF  xD1
0872:  MOVLW  0F
0874:  ANDWF  xD1,F
0876:  MOVFF  D1,D2
087A:  RCALL  0820
....................       lcd_send_nibble(n & 0xf); 
087C:  MOVF   xD0,W
087E:  ANDLW  0F
0880:  MOVWF  xD1
0882:  MOVWF  xD2
0884:  RCALL  0820
.................... } 
0886:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0888:  MOVLW  00
088A:  MOVWF  F95
....................     lcd.rs = 0; 
088C:  BCF    F83.1
....................     lcd.rw = 0; 
088E:  BCF    F83.2
....................     lcd.enable = 0; 
0890:  BCF    F83.3
....................     delay_ms(15); 
0892:  MOVLW  0F
0894:  MOVWF  xD1
0896:  RCALL  07F8
....................     for(i=1;i<=3;++i) { 
0898:  MOVLW  01
089A:  MOVWF  xBA
089C:  MOVF   xBA,W
089E:  SUBLW  03
08A0:  BNC   08B2
....................        lcd_send_nibble(3); 
08A2:  MOVLW  03
08A4:  MOVWF  xD2
08A6:  RCALL  0820
....................        delay_ms(5); 
08A8:  MOVLW  05
08AA:  MOVWF  xD1
08AC:  RCALL  07F8
....................     } 
08AE:  INCF   xBA,F
08B0:  BRA    089C
....................     lcd_send_nibble(2); 
08B2:  MOVLW  02
08B4:  MOVWF  xD2
08B6:  RCALL  0820
....................     for(i=0;i<=3;++i) 
08B8:  CLRF   xBA
08BA:  MOVF   xBA,W
08BC:  SUBLW  03
08BE:  BNC   08DE
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
08C0:  CLRF   03
08C2:  MOVF   xBA,W
08C4:  MOVFF  FF2,BB
08C8:  BCF    FF2.7
08CA:  CALL   0096
08CE:  BTFSC  xBB.7
08D0:  BSF    FF2.7
08D2:  MOVWF  xBB
08D4:  CLRF   xCF
08D6:  MOVWF  xD0
08D8:  RCALL  0846
08DA:  INCF   xBA,F
08DC:  BRA    08BA
.................... } 
08DE:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0906:  MOVLW  01
0908:  SUBWF  xCD,W
090A:  ADDLW  FC
090C:  BC    092C
090E:  ADDLW  04
0910:  GOTO   093C
....................      case 1 : address=0x80;break; 
0914:  MOVLW  80
0916:  MOVWF  xCE
0918:  BRA    092C
....................      case 2 : address=0xc0;break; 
091A:  MOVLW  C0
091C:  MOVWF  xCE
091E:  BRA    092C
....................      case 3 : address=0x94;break; 
0920:  MOVLW  94
0922:  MOVWF  xCE
0924:  BRA    092C
....................      case 4 : address=0xd4;break; 
0926:  MOVLW  D4
0928:  MOVWF  xCE
092A:  BRA    092C
....................    } 
....................    address+=x-1; 
092C:  MOVLW  01
092E:  SUBWF  xCC,W
0930:  ADDWF  xCE,F
....................    lcd_send_byte(0,address); 
0932:  CLRF   xCF
0934:  MOVFF  CE,D0
0938:  RCALL  0846
.................... } 
093A:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0968:  MOVF   xCB,W
096A:  SUBLW  F1
096C:  BNZ   0972
....................    { 
....................       c=238; 
096E:  MOVLW  EE
0970:  MOVWF  xCB
....................    } 
....................    if(c=='Ñ') 
0972:  MOVF   xCB,W
0974:  SUBLW  D1
0976:  BNZ   097C
....................    { 
....................       c=255; 
0978:  MOVLW  FF
097A:  MOVWF  xCB
....................    } 
....................     
....................    switch (c) { 
097C:  MOVF   xCB,W
097E:  XORLW  0C
0980:  BZ    098C
0982:  XORLW  06
0984:  BZ    09A0
0986:  XORLW  02
0988:  BZ    09AE
098A:  BRA    09B8
....................      case '\f'   : lcd_send_byte(0,1); 
098C:  CLRF   xCF
098E:  MOVLW  01
0990:  MOVWF  xD0
0992:  RCALL  0846
....................                    lcdline=1; 
0994:  MOVLW  01
0996:  MOVWF  xB9
....................                    delay_ms(2); 
0998:  MOVLW  02
099A:  MOVWF  xD1
099C:  RCALL  07F8
....................                                            break; 
099E:  BRA    09C4
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
09A0:  INCF   xB9,F
09A2:  MOVLW  01
09A4:  MOVWF  xCC
09A6:  MOVFF  B9,CD
09AA:  RCALL  0906
09AC:  BRA    09C4
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
09AE:  CLRF   xCF
09B0:  MOVLW  10
09B2:  MOVWF  xD0
09B4:  RCALL  0846
09B6:  BRA    09C4
....................      default     : lcd_send_byte(1,c);     break; 
09B8:  MOVLW  01
09BA:  MOVWF  xCF
09BC:  MOVFF  CB,D0
09C0:  RCALL  0846
09C2:  BRA    09C4
....................    } 
.................... } 
09C4:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <Funciones.h> 
.................... void VelocidadMotor(int8 Vel){ 
....................    if(Vel==6){ 
*
1046:  MOVF   xBA,W
1048:  SUBLW  06
104A:  BNZ   1056
....................       Motor_L1_on; 
104C:  BSF    F8B.2
104E:  BCF    F94.2
....................       Motor_L2_on; 
1050:  BSF    F8B.1
1052:  BCF    F94.1
....................    }else if(Vel==5){ 
1054:  BRA    10C8
1056:  MOVF   xBA,W
1058:  SUBLW  05
105A:  BNZ   106A
....................       Porcentaje=15; 
105C:  MOVLW  0F
105E:  MOVWF  xAF
....................       retardo=2000; 
1060:  MOVLW  07
1062:  MOVWF  xAB
1064:  MOVLW  D0
1066:  MOVWF  xAA
....................    }else if(Vel==4){ 
1068:  BRA    10C8
106A:  MOVF   xBA,W
106C:  SUBLW  04
106E:  BNZ   107E
....................       Porcentaje=25; 
1070:  MOVLW  19
1072:  MOVWF  xAF
....................       retardo=3000; 
1074:  MOVLW  0B
1076:  MOVWF  xAB
1078:  MOVLW  B8
107A:  MOVWF  xAA
....................    }else if(Vel==3){ 
107C:  BRA    10C8
107E:  MOVF   xBA,W
1080:  SUBLW  03
1082:  BNZ   1092
....................       Porcentaje=35; 
1084:  MOVLW  23
1086:  MOVWF  xAF
....................       retardo=3600; 
1088:  MOVLW  0E
108A:  MOVWF  xAB
108C:  MOVLW  10
108E:  MOVWF  xAA
....................    }else if(Vel==2){ 
1090:  BRA    10C8
1092:  MOVF   xBA,W
1094:  SUBLW  02
1096:  BNZ   10A6
....................       Porcentaje=45; 
1098:  MOVLW  2D
109A:  MOVWF  xAF
....................       retardo=4300; 
109C:  MOVLW  10
109E:  MOVWF  xAB
10A0:  MOVLW  CC
10A2:  MOVWF  xAA
....................    }else if(Vel==1){ 
10A4:  BRA    10C8
10A6:  DECFSZ xBA,W
10A8:  BRA    10B8
....................       Porcentaje=50; 
10AA:  MOVLW  32
10AC:  MOVWF  xAF
....................       retardo=5000; 
10AE:  MOVLW  13
10B0:  MOVWF  xAB
10B2:  MOVLW  88
10B4:  MOVWF  xAA
....................    }else if(Vel==0){ 
10B6:  BRA    10C8
10B8:  MOVF   xBA,F
10BA:  BNZ   10C8
....................       Porcentaje=100; 
10BC:  MOVLW  64
10BE:  MOVWF  xAF
....................       Motor_L1_off; 
10C0:  BCF    F8B.2
10C2:  BCF    F94.2
....................       Motor_L2_off; 
10C4:  BCF    F8B.1
10C6:  BCF    F94.1
....................    } 
.................... } 
10C8:  RETLW  00
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
11E0:  DECFSZ xBB,W
11E2:  BRA    11FC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
11E4:  MOVLW  02
11E6:  MOVWF  xCC
11E8:  MOVFF  BC,CD
11EC:  CALL   0906
11F0:  MOVLW  B4
11F2:  MOVWF  FF6
11F4:  MOVLW  00
11F6:  MOVWF  FF7
11F8:  CALL   09C6
....................    if(x==2) 
11FC:  MOVF   xBB,W
11FE:  SUBLW  02
1200:  BNZ   121A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1202:  MOVLW  02
1204:  MOVWF  xCC
1206:  MOVFF  BC,CD
120A:  CALL   0906
120E:  MOVLW  C8
1210:  MOVWF  FF6
1212:  MOVLW  00
1214:  MOVWF  FF7
1216:  CALL   09C6
....................    if(x==3) 
121A:  MOVF   xBB,W
121C:  SUBLW  03
121E:  BNZ   1238
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1220:  MOVLW  02
1222:  MOVWF  xCC
1224:  MOVFF  BC,CD
1228:  CALL   0906
122C:  MOVLW  DC
122E:  MOVWF  FF6
1230:  MOVLW  00
1232:  MOVWF  FF7
1234:  CALL   09C6
....................    if(x==4) 
1238:  MOVF   xBB,W
123A:  SUBLW  04
123C:  BNZ   1256
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
123E:  MOVLW  02
1240:  MOVWF  xCC
1242:  MOVFF  BC,CD
1246:  CALL   0906
124A:  MOVLW  F0
124C:  MOVWF  FF6
124E:  MOVLW  00
1250:  MOVWF  FF7
1252:  CALL   09C6
....................     
....................    if(x==5) 
1256:  MOVF   xBB,W
1258:  SUBLW  05
125A:  BNZ   1294
....................    {if(estadoalarma==0) 
125C:  BTFSC  17.4
125E:  BRA    1278
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1260:  MOVLW  02
1262:  MOVWF  xCC
1264:  MOVFF  BC,CD
1268:  CALL   0906
126C:  MOVLW  04
126E:  MOVWF  FF6
1270:  MOVLW  01
1272:  MOVWF  FF7
1274:  CALL   09C6
....................    if(estadoalarma==1) 
1278:  BTFSS  17.4
127A:  BRA    1294
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
127C:  MOVLW  02
127E:  MOVWF  xCC
1280:  MOVFF  BC,CD
1284:  CALL   0906
1288:  MOVLW  18
128A:  MOVWF  FF6
128C:  MOVLW  01
128E:  MOVWF  FF7
1290:  CALL   09C6
....................    } 
....................     
....................    if(x==6) 
1294:  MOVF   xBB,W
1296:  SUBLW  06
1298:  BNZ   12B2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad         ");} 
129A:  MOVLW  02
129C:  MOVWF  xCC
129E:  MOVFF  BC,CD
12A2:  CALL   0906
12A6:  MOVLW  2C
12A8:  MOVWF  FF6
12AA:  MOVLW  01
12AC:  MOVWF  FF7
12AE:  CALL   09C6
.................... } 
12B2:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
13D6:  RLCF   xBF,W
13D8:  MOVWF  00
13DA:  RLCF   00,F
13DC:  MOVLW  FC
13DE:  ANDWF  00,F
13E0:  MOVFF  00,01
13E4:  MOVF   FC2,W
13E6:  ANDLW  C3
13E8:  IORWF  00,W
13EA:  MOVWF  FC2
13EC:  MOVLW  0A
13EE:  MOVWF  xD1
13F0:  CALL   07F8
13F4:  BSF    FC2.1
13F6:  BTFSC  FC2.1
13F8:  BRA    13F6
13FA:  MOVFF  FC4,03
13FE:  MOVFF  FC3,D2
1402:  MOVFF  FC4,D3
1406:  CALL   0A4C
140A:  MOVFF  03,C3
140E:  MOVFF  02,C2
1412:  MOVFF  01,C1
1416:  MOVFF  00,C0
141A:  MOVFF  C0,00
141E:  MOVFF  C1,01
1422:  MOVFF  C2,02
1426:  MOVFF  C3,03
.................... } 
142A:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
17F0:  CLRF   xBE
17F2:  CLRF   xBD
17F4:  CLRF   xBC
17F6:  CLRF   xBB
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
17F8:  CLRF   xBF
17FA:  RCALL  13D6
17FC:  MOVFF  03,97
1800:  MOVFF  02,96
1804:  MOVFF  01,95
1808:  MOVFF  00,94
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
180C:  MOVFF  97,D1
1810:  MOVFF  96,D0
1814:  MOVFF  95,CF
1818:  MOVFF  94,CE
181C:  MOVFF  A7,D5
1820:  MOVFF  A6,D4
1824:  MOVFF  A5,D3
1828:  MOVFF  A4,D2
182C:  RCALL  142C
182E:  MOVFF  00,BF
1832:  MOVFF  01,C0
1836:  MOVFF  02,C1
183A:  MOVFF  03,C2
183E:  BSF    FD8.1
1840:  MOVFF  03,D5
1844:  MOVFF  02,D4
1848:  MOVFF  01,D3
184C:  MOVFF  00,D2
1850:  CLRF   xD9
1852:  CLRF   xD8
1854:  CLRF   xD7
1856:  MOVLW  7F
1858:  MOVWF  xD6
185A:  RCALL  1586
185C:  MOVFF  03,9B
1860:  MOVFF  02,9A
1864:  MOVFF  01,99
1868:  MOVFF  00,98
....................     
....................    if(Presion<0.0) 
186C:  MOVFF  9B,D1
1870:  MOVFF  9A,D0
1874:  MOVFF  99,CF
1878:  MOVFF  98,CE
187C:  CLRF   xD5
187E:  CLRF   xD4
1880:  CLRF   xD3
1882:  CLRF   xD2
1884:  CALL   0C60
1888:  BNC   1892
....................    { 
....................       Presion=0.0; 
188A:  CLRF   x9B
188C:  CLRF   x9A
188E:  CLRF   x99
1890:  CLRF   x98
....................    } 
....................  
....................    if(r>media-1) 
1892:  MOVLW  01
1894:  SUBWF  xBA,W
1896:  SUBWF  2B,W
1898:  BZ    189E
189A:  BNC   189E
....................    {r=0;} 
189C:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
189E:  MOVF   2B,W
18A0:  MULLW  04
18A2:  MOVF   FF3,W
18A4:  CLRF   03
18A6:  ADDLW  44
18A8:  MOVWF  FE9
18AA:  MOVLW  00
18AC:  ADDWFC 03,W
18AE:  MOVWF  FEA
18B0:  MOVFF  98,FEF
18B4:  MOVFF  99,FEC
18B8:  MOVFF  9A,FEC
18BC:  MOVFF  9B,FEC
18C0:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
18C2:  CLRF   2C
18C4:  MOVLW  01
18C6:  SUBWF  xBA,W
18C8:  SUBWF  2C,W
18CA:  BZ    18CE
18CC:  BC    1938
....................    { 
....................       promediopresion+=PromPresion[q]; 
18CE:  MOVF   2C,W
18D0:  MULLW  04
18D2:  MOVF   FF3,W
18D4:  CLRF   03
18D6:  ADDLW  44
18D8:  MOVWF  FE9
18DA:  MOVLW  00
18DC:  ADDWFC 03,W
18DE:  MOVWF  FEA
18E0:  MOVFF  FEF,00
18E4:  MOVFF  FEC,01
18E8:  MOVFF  FEC,02
18EC:  MOVFF  FEC,03
18F0:  MOVFF  FEA,C0
18F4:  MOVFF  FE9,BF
18F8:  BCF    FD8.1
18FA:  MOVFF  BE,D5
18FE:  MOVFF  BD,D4
1902:  MOVFF  BC,D3
1906:  MOVFF  BB,D2
190A:  MOVFF  03,D9
190E:  MOVFF  02,D8
1912:  MOVFF  01,D7
1916:  MOVFF  00,D6
191A:  RCALL  1586
191C:  MOVFF  C0,FEA
1920:  MOVFF  BF,FE9
1924:  MOVFF  03,BE
1928:  MOVFF  02,BD
192C:  MOVFF  01,BC
1930:  MOVFF  00,BB
....................    }  
1934:  INCF   2C,F
1936:  BRA    18C4
....................    promediopresion=promediopresion/media;    
1938:  CLRF   xD3
193A:  MOVFF  BA,D2
193E:  CALL   0A4C
1942:  MOVFF  BE,D1
1946:  MOVFF  BD,D0
194A:  MOVFF  BC,CF
194E:  MOVFF  BB,CE
1952:  MOVFF  03,D5
1956:  MOVFF  02,D4
195A:  MOVFF  01,D3
195E:  MOVFF  00,D2
1962:  RCALL  142C
1964:  MOVFF  03,BE
1968:  MOVFF  02,BD
196C:  MOVFF  01,BC
1970:  MOVFF  00,BB
....................     
....................    return promediopresion; 
1974:  MOVFF  BB,00
1978:  MOVFF  BC,01
197C:  MOVFF  BD,02
1980:  MOVFF  BE,03
.................... } 
1984:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    lcd_init(); 
*
08E0:  RCALL  0888
....................    set_tris_a(0XFF); 
08E2:  MOVLW  FF
08E4:  MOVWF  F92
....................    set_tris_e(0XFF); 
08E6:  MOVWF  F96
....................    enable_interrupts(INT_EXT_L2H); 
08E8:  BSF    FF2.4
08EA:  BSF    FF1.6
....................    setup_adc_ports(AN0); 
08EC:  MOVF   FC1,W
08EE:  ANDLW  C0
08F0:  IORLW  0E
08F2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
08F4:  BCF    FC0.0
08F6:  BSF    FC0.1
08F8:  BCF    FC0.2
08FA:  BSF    FC0.7
08FC:  BSF    FC2.0
....................    enable_interrupts(global); 
08FE:  MOVLW  C0
0900:  IORWF  FF2,F
.................... } 
0902:  GOTO   21D0 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
09E6:  MOVLW  01
09E8:  MOVWF  xCC
09EA:  MOVWF  xCD
09EC:  RCALL  0906
....................    printf(lcd_putc,"MODULO FLUJO LAMINAR"); 
09EE:  MOVLW  40
09F0:  MOVWF  FF6
09F2:  MOVLW  01
09F4:  MOVWF  FF7
09F6:  RCALL  09C6
....................    lcd_gotoxy(1,2); 
09F8:  MOVLW  01
09FA:  MOVWF  xCC
09FC:  MOVLW  02
09FE:  MOVWF  xCD
0A00:  RCALL  0906
....................    printf(lcd_putc,"      VERTICAL      "); 
0A02:  MOVLW  56
0A04:  MOVWF  FF6
0A06:  MOVLW  01
0A08:  MOVWF  FF7
0A0A:  RCALL  09C6
....................    lcd_gotoxy(1,3); 
0A0C:  MOVLW  01
0A0E:  MOVWF  xCC
0A10:  MOVLW  03
0A12:  MOVWF  xCD
0A14:  RCALL  0906
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0A16:  MOVLW  6C
0A18:  MOVWF  FF6
0A1A:  MOVLW  01
0A1C:  MOVWF  FF7
0A1E:  RCALL  09C6
....................    lcd_gotoxy(1,4); 
0A20:  MOVLW  01
0A22:  MOVWF  xCC
0A24:  MOVLW  04
0A26:  MOVWF  xCD
0A28:  RCALL  0906
....................    printf(lcd_putc,"  REF:JPCFLVMD96IX  "); 
0A2A:  MOVLW  82
0A2C:  MOVWF  FF6
0A2E:  MOVLW  01
0A30:  MOVWF  FF7
0A32:  RCALL  09C6
....................    delay_ms(2000); 
0A34:  MOVLW  08
0A36:  MOVWF  xBA
0A38:  MOVLW  FA
0A3A:  MOVWF  xD1
0A3C:  RCALL  07F8
0A3E:  DECFSZ xBA,F
0A40:  BRA    0A38
....................    printf(lcd_putc,"\f"); 
0A42:  MOVLW  0C
0A44:  MOVWF  xCB
0A46:  RCALL  0968
.................... } 
0A48:  GOTO   21D4 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0A82:  MOVFF  FF2,BA
0A86:  BCF    FF2.7
0A88:  CLRF   FA9
0A8A:  BCF    FA6.6
0A8C:  BCF    FA6.7
0A8E:  BSF    FA6.0
0A90:  MOVF   FA8,W
0A92:  BTFSC  xBA.7
0A94:  BSF    FF2.7
0A96:  MOVWF  39
....................    delay_ms(20);  
0A98:  MOVLW  14
0A9A:  MOVWF  xD1
0A9C:  RCALL  07F8
....................    contrasena[1]=read_eeprom(1); 
0A9E:  MOVFF  FF2,BA
0AA2:  BCF    FF2.7
0AA4:  MOVLW  01
0AA6:  MOVWF  FA9
0AA8:  BCF    FA6.6
0AAA:  BCF    FA6.7
0AAC:  BSF    FA6.0
0AAE:  MOVF   FA8,W
0AB0:  BTFSC  xBA.7
0AB2:  BSF    FF2.7
0AB4:  MOVWF  3A
....................    delay_ms(20); 
0AB6:  MOVLW  14
0AB8:  MOVWF  xD1
0ABA:  RCALL  07F8
....................    contrasena[2]=read_eeprom(2); 
0ABC:  MOVFF  FF2,BA
0AC0:  BCF    FF2.7
0AC2:  MOVLW  02
0AC4:  MOVWF  FA9
0AC6:  BCF    FA6.6
0AC8:  BCF    FA6.7
0ACA:  BSF    FA6.0
0ACC:  MOVF   FA8,W
0ACE:  BTFSC  xBA.7
0AD0:  BSF    FF2.7
0AD2:  MOVWF  3B
....................    delay_ms(20);  
0AD4:  MOVLW  14
0AD6:  MOVWF  xD1
0AD8:  RCALL  07F8
....................    contrasena[3]=read_eeprom(3); 
0ADA:  MOVFF  FF2,BA
0ADE:  BCF    FF2.7
0AE0:  MOVLW  03
0AE2:  MOVWF  FA9
0AE4:  BCF    FA6.6
0AE6:  BCF    FA6.7
0AE8:  BSF    FA6.0
0AEA:  MOVF   FA8,W
0AEC:  BTFSC  xBA.7
0AEE:  BSF    FF2.7
0AF0:  MOVWF  3C
....................    delay_ms(20); 
0AF2:  MOVLW  14
0AF4:  MOVWF  xD1
0AF6:  RCALL  07F8
....................    estadoalarma=read_eeprom(4); 
0AF8:  MOVFF  FF2,BA
0AFC:  BCF    FF2.7
0AFE:  MOVLW  04
0B00:  MOVWF  FA9
0B02:  BCF    FA6.6
0B04:  BCF    FA6.7
0B06:  BSF    FA6.0
0B08:  MOVF   FA8,W
0B0A:  BTFSC  xBA.7
0B0C:  BSF    FF2.7
0B0E:  MOVWF  01
0B10:  BCF    17.4
0B12:  BTFSC  01.0
0B14:  BSF    17.4
....................    delay_ms(20); 
0B16:  MOVLW  14
0B18:  MOVWF  xD1
0B1A:  RCALL  07F8
....................    tempo_minutos=read_eeprom(5); 
0B1C:  MOVFF  FF2,BA
0B20:  BCF    FF2.7
0B22:  MOVLW  05
0B24:  MOVWF  FA9
0B26:  BCF    FA6.6
0B28:  BCF    FA6.7
0B2A:  BSF    FA6.0
0B2C:  MOVF   FA8,W
0B2E:  BTFSC  xBA.7
0B30:  BSF    FF2.7
0B32:  MOVWF  27
....................    delay_ms(20); 
0B34:  MOVLW  14
0B36:  MOVWF  xD1
0B38:  RCALL  07F8
....................    tempo_segundos=read_eeprom(6); 
0B3A:  MOVFF  FF2,BA
0B3E:  BCF    FF2.7
0B40:  MOVLW  06
0B42:  MOVWF  FA9
0B44:  BCF    FA6.6
0B46:  BCF    FA6.7
0B48:  BSF    FA6.0
0B4A:  MOVF   FA8,W
0B4C:  BTFSC  xBA.7
0B4E:  BSF    FF2.7
0B50:  MOVWF  28
....................    delay_ms(20); 
0B52:  MOVLW  14
0B54:  MOVWF  xD1
0B56:  RCALL  07F8
....................    segundos=read_eeprom(7); 
0B58:  MOVFF  FF2,BA
0B5C:  BCF    FF2.7
0B5E:  MOVLW  07
0B60:  MOVWF  FA9
0B62:  BCF    FA6.6
0B64:  BCF    FA6.7
0B66:  BSF    FA6.0
0B68:  MOVF   FA8,W
0B6A:  BTFSC  xBA.7
0B6C:  BSF    FF2.7
0B6E:  MOVWF  21
....................    delay_ms(20); 
0B70:  MOVLW  14
0B72:  MOVWF  xD1
0B74:  RCALL  07F8
....................    minutos=read_eeprom(8); 
0B76:  MOVFF  FF2,BA
0B7A:  BCF    FF2.7
0B7C:  MOVLW  08
0B7E:  MOVWF  FA9
0B80:  BCF    FA6.6
0B82:  BCF    FA6.7
0B84:  BSF    FA6.0
0B86:  MOVF   FA8,W
0B88:  BTFSC  xBA.7
0B8A:  BSF    FF2.7
0B8C:  MOVWF  22
....................    delay_ms(20); 
0B8E:  MOVLW  14
0B90:  MOVWF  xD1
0B92:  RCALL  07F8
....................    horasL=read_eeprom(9); 
0B94:  MOVFF  FF2,BA
0B98:  BCF    FF2.7
0B9A:  MOVLW  09
0B9C:  MOVWF  FA9
0B9E:  BCF    FA6.6
0BA0:  BCF    FA6.7
0BA2:  BSF    FA6.0
0BA4:  MOVF   FA8,W
0BA6:  BTFSC  xBA.7
0BA8:  BSF    FF2.7
0BAA:  MOVWF  23
....................    delay_ms(20); 
0BAC:  MOVLW  14
0BAE:  MOVWF  xD1
0BB0:  RCALL  07F8
....................    horasH=read_eeprom(10); 
0BB2:  MOVFF  FF2,BA
0BB6:  BCF    FF2.7
0BB8:  MOVLW  0A
0BBA:  MOVWF  FA9
0BBC:  BCF    FA6.6
0BBE:  BCF    FA6.7
0BC0:  BSF    FA6.0
0BC2:  MOVF   FA8,W
0BC4:  BTFSC  xBA.7
0BC6:  BSF    FF2.7
0BC8:  MOVWF  24
....................    delay_ms(20); 
0BCA:  MOVLW  14
0BCC:  MOVWF  xD1
0BCE:  RCALL  07F8
....................    G_l=read_eeprom(11); 
0BD0:  MOVFF  FF2,BA
0BD4:  BCF    FF2.7
0BD6:  MOVLW  0B
0BD8:  MOVWF  FA9
0BDA:  BCF    FA6.6
0BDC:  BCF    FA6.7
0BDE:  BSF    FA6.0
0BE0:  MOVF   FA8,W
0BE2:  BTFSC  xBA.7
0BE4:  BSF    FF2.7
0BE6:  MOVWF  25
....................    delay_ms(20); 
0BE8:  MOVLW  14
0BEA:  MOVWF  xD1
0BEC:  RCALL  07F8
....................    G_h=read_eeprom(12); 
0BEE:  MOVFF  FF2,BA
0BF2:  BCF    FF2.7
0BF4:  MOVLW  0C
0BF6:  MOVWF  FA9
0BF8:  BCF    FA6.6
0BFA:  BCF    FA6.7
0BFC:  BSF    FA6.0
0BFE:  MOVF   FA8,W
0C00:  BTFSC  xBA.7
0C02:  BSF    FF2.7
0C04:  MOVWF  26
....................    delay_ms(20); 
0C06:  MOVLW  14
0C08:  MOVWF  xD1
0C0A:  RCALL  07F8
....................    VelMotor=read_eeprom(13); 
0C0C:  MOVFF  FF2,BA
0C10:  BCF    FF2.7
0C12:  MOVLW  0D
0C14:  MOVWF  FA9
0C16:  BCF    FA6.6
0C18:  BCF    FA6.7
0C1A:  BSF    FA6.0
0C1C:  MOVF   FA8,W
0C1E:  BTFSC  xBA.7
0C20:  BSF    FF2.7
0C22:  MOVWF  xB0
....................    delay_ms(20); 
0C24:  MOVLW  14
0C26:  MOVWF  xD1
0C28:  RCALL  07F8
....................    G16=make16(G_h,G_l); 
0C2A:  MOVFF  26,43
0C2E:  MOVFF  25,42
....................    G=G16; 
0C32:  MOVFF  43,D3
0C36:  MOVFF  42,D2
0C3A:  RCALL  0A4C
0C3C:  MOVFF  03,A7
0C40:  MOVFF  02,A6
0C44:  MOVFF  01,A5
0C48:  MOVFF  00,A4
....................    horas=make16(horasH,horasL); 
0C4C:  MOVFF  24,41
0C50:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0C54:  MOVFF  27,29
0C58:  MOVFF  28,2A
.................... } 
0C5C:  GOTO   21D8 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0CD6:  BTFSC  39.7
0CD8:  BRA    0CE0
0CDA:  MOVF   39,W
0CDC:  SUBLW  09
0CDE:  BNC   0CE6
0CE0:  BTFSC  39.7
0CE2:  BRA    0CE6
0CE4:  BRA    0D16
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0CE6:  CLRF   39
0CE8:  CLRF   FA9
0CEA:  CLRF   FA8
0CEC:  BCF    FA6.6
0CEE:  BCF    FA6.7
0CF0:  BSF    FA6.2
0CF2:  MOVF   FF2,W
0CF4:  MOVWF  00
0CF6:  BCF    FF2.7
0CF8:  MOVLB  F
0CFA:  MOVLW  55
0CFC:  MOVWF  FA7
0CFE:  MOVLW  AA
0D00:  MOVWF  FA7
0D02:  BSF    FA6.1
0D04:  BTFSC  FA6.1
0D06:  BRA    0D04
0D08:  BCF    FA6.2
0D0A:  MOVF   00,W
0D0C:  IORWF  FF2,F
0D0E:  MOVLW  14
0D10:  MOVLB  0
0D12:  MOVWF  xD1
0D14:  RCALL  07F8
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0D16:  BTFSC  3A.7
0D18:  BRA    0D20
0D1A:  MOVF   3A,W
0D1C:  SUBLW  09
0D1E:  BNC   0D26
0D20:  BTFSC  3A.7
0D22:  BRA    0D26
0D24:  BRA    0D58
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0D26:  CLRF   3A
0D28:  MOVLW  01
0D2A:  MOVWF  FA9
0D2C:  CLRF   FA8
0D2E:  BCF    FA6.6
0D30:  BCF    FA6.7
0D32:  BSF    FA6.2
0D34:  MOVF   FF2,W
0D36:  MOVWF  00
0D38:  BCF    FF2.7
0D3A:  MOVLB  F
0D3C:  MOVLW  55
0D3E:  MOVWF  FA7
0D40:  MOVLW  AA
0D42:  MOVWF  FA7
0D44:  BSF    FA6.1
0D46:  BTFSC  FA6.1
0D48:  BRA    0D46
0D4A:  BCF    FA6.2
0D4C:  MOVF   00,W
0D4E:  IORWF  FF2,F
0D50:  MOVLW  14
0D52:  MOVLB  0
0D54:  MOVWF  xD1
0D56:  RCALL  07F8
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0D58:  BTFSC  3B.7
0D5A:  BRA    0D62
0D5C:  MOVF   3B,W
0D5E:  SUBLW  09
0D60:  BNC   0D68
0D62:  BTFSC  3B.7
0D64:  BRA    0D68
0D66:  BRA    0D9A
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0D68:  CLRF   3B
0D6A:  MOVLW  02
0D6C:  MOVWF  FA9
0D6E:  CLRF   FA8
0D70:  BCF    FA6.6
0D72:  BCF    FA6.7
0D74:  BSF    FA6.2
0D76:  MOVF   FF2,W
0D78:  MOVWF  00
0D7A:  BCF    FF2.7
0D7C:  MOVLB  F
0D7E:  MOVLW  55
0D80:  MOVWF  FA7
0D82:  MOVLW  AA
0D84:  MOVWF  FA7
0D86:  BSF    FA6.1
0D88:  BTFSC  FA6.1
0D8A:  BRA    0D88
0D8C:  BCF    FA6.2
0D8E:  MOVF   00,W
0D90:  IORWF  FF2,F
0D92:  MOVLW  14
0D94:  MOVLB  0
0D96:  MOVWF  xD1
0D98:  RCALL  07F8
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0D9A:  BTFSC  3C.7
0D9C:  BRA    0DA4
0D9E:  MOVF   3C,W
0DA0:  SUBLW  09
0DA2:  BNC   0DAA
0DA4:  BTFSC  3C.7
0DA6:  BRA    0DAA
0DA8:  BRA    0DDC
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0DAA:  CLRF   3C
0DAC:  MOVLW  03
0DAE:  MOVWF  FA9
0DB0:  CLRF   FA8
0DB2:  BCF    FA6.6
0DB4:  BCF    FA6.7
0DB6:  BSF    FA6.2
0DB8:  MOVF   FF2,W
0DBA:  MOVWF  00
0DBC:  BCF    FF2.7
0DBE:  MOVLB  F
0DC0:  MOVLW  55
0DC2:  MOVWF  FA7
0DC4:  MOVLW  AA
0DC6:  MOVWF  FA7
0DC8:  BSF    FA6.1
0DCA:  BTFSC  FA6.1
0DCC:  BRA    0DCA
0DCE:  BCF    FA6.2
0DD0:  MOVF   00,W
0DD2:  IORWF  FF2,F
0DD4:  MOVLW  14
0DD6:  MOVLB  0
0DD8:  MOVWF  xD1
0DDA:  RCALL  07F8
....................    } 
....................    if(estadoalarma>1){ 
0DDC:  MOVLW  00
0DDE:  BTFSC  17.4
0DE0:  MOVLW  01
0DE2:  SUBLW  01
0DE4:  BC    0E1A
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0DE6:  BSF    17.4
0DE8:  MOVLW  04
0DEA:  MOVWF  FA9
0DEC:  MOVLW  01
0DEE:  MOVWF  FA8
0DF0:  BCF    FA6.6
0DF2:  BCF    FA6.7
0DF4:  BSF    FA6.2
0DF6:  MOVF   FF2,W
0DF8:  MOVWF  00
0DFA:  BCF    FF2.7
0DFC:  MOVLB  F
0DFE:  MOVLW  55
0E00:  MOVWF  FA7
0E02:  MOVLW  AA
0E04:  MOVWF  FA7
0E06:  BSF    FA6.1
0E08:  BTFSC  FA6.1
0E0A:  BRA    0E08
0E0C:  BCF    FA6.2
0E0E:  MOVF   00,W
0E10:  IORWF  FF2,F
0E12:  MOVLW  14
0E14:  MOVLB  0
0E16:  MOVWF  xD1
0E18:  RCALL  07F8
....................    } 
....................    if(tempo_minutos>200){ 
0E1A:  MOVF   27,W
0E1C:  SUBLW  C8
0E1E:  BC    0E56
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
0E20:  MOVLW  14
0E22:  MOVWF  27
0E24:  MOVLW  05
0E26:  MOVWF  FA9
0E28:  MOVLW  14
0E2A:  MOVWF  FA8
0E2C:  BCF    FA6.6
0E2E:  BCF    FA6.7
0E30:  BSF    FA6.2
0E32:  MOVF   FF2,W
0E34:  MOVWF  00
0E36:  BCF    FF2.7
0E38:  MOVLB  F
0E3A:  MOVLW  55
0E3C:  MOVWF  FA7
0E3E:  MOVLW  AA
0E40:  MOVWF  FA7
0E42:  BSF    FA6.1
0E44:  BTFSC  FA6.1
0E46:  BRA    0E44
0E48:  BCF    FA6.2
0E4A:  MOVF   00,W
0E4C:  IORWF  FF2,F
0E4E:  MOVLW  14
0E50:  MOVLB  0
0E52:  MOVWF  xD1
0E54:  RCALL  07F8
....................    } 
....................    if(tempo_segundos>59){ 
0E56:  MOVF   28,W
0E58:  SUBLW  3B
0E5A:  BC    0E8E
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0E5C:  CLRF   28
0E5E:  MOVLW  06
0E60:  MOVWF  FA9
0E62:  CLRF   FA8
0E64:  BCF    FA6.6
0E66:  BCF    FA6.7
0E68:  BSF    FA6.2
0E6A:  MOVF   FF2,W
0E6C:  MOVWF  00
0E6E:  BCF    FF2.7
0E70:  MOVLB  F
0E72:  MOVLW  55
0E74:  MOVWF  FA7
0E76:  MOVLW  AA
0E78:  MOVWF  FA7
0E7A:  BSF    FA6.1
0E7C:  BTFSC  FA6.1
0E7E:  BRA    0E7C
0E80:  BCF    FA6.2
0E82:  MOVF   00,W
0E84:  IORWF  FF2,F
0E86:  MOVLW  14
0E88:  MOVLB  0
0E8A:  MOVWF  xD1
0E8C:  RCALL  07F8
....................    } 
....................    if(segundos>60){ 
0E8E:  MOVF   21,W
0E90:  SUBLW  3C
0E92:  BC    0EC6
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0E94:  CLRF   21
0E96:  MOVLW  07
0E98:  MOVWF  FA9
0E9A:  CLRF   FA8
0E9C:  BCF    FA6.6
0E9E:  BCF    FA6.7
0EA0:  BSF    FA6.2
0EA2:  MOVF   FF2,W
0EA4:  MOVWF  00
0EA6:  BCF    FF2.7
0EA8:  MOVLB  F
0EAA:  MOVLW  55
0EAC:  MOVWF  FA7
0EAE:  MOVLW  AA
0EB0:  MOVWF  FA7
0EB2:  BSF    FA6.1
0EB4:  BTFSC  FA6.1
0EB6:  BRA    0EB4
0EB8:  BCF    FA6.2
0EBA:  MOVF   00,W
0EBC:  IORWF  FF2,F
0EBE:  MOVLW  14
0EC0:  MOVLB  0
0EC2:  MOVWF  xD1
0EC4:  RCALL  07F8
....................    } 
....................    if(minutos>60){ 
0EC6:  MOVF   22,W
0EC8:  SUBLW  3C
0ECA:  BC    0EFE
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0ECC:  CLRF   22
0ECE:  MOVLW  08
0ED0:  MOVWF  FA9
0ED2:  CLRF   FA8
0ED4:  BCF    FA6.6
0ED6:  BCF    FA6.7
0ED8:  BSF    FA6.2
0EDA:  MOVF   FF2,W
0EDC:  MOVWF  00
0EDE:  BCF    FF2.7
0EE0:  MOVLB  F
0EE2:  MOVLW  55
0EE4:  MOVWF  FA7
0EE6:  MOVLW  AA
0EE8:  MOVWF  FA7
0EEA:  BSF    FA6.1
0EEC:  BTFSC  FA6.1
0EEE:  BRA    0EEC
0EF0:  BCF    FA6.2
0EF2:  MOVF   00,W
0EF4:  IORWF  FF2,F
0EF6:  MOVLW  14
0EF8:  MOVLB  0
0EFA:  MOVWF  xD1
0EFC:  RCALL  07F8
....................    } 
....................    if(horas>10000){ 
0EFE:  MOVF   41,W
0F00:  SUBLW  26
0F02:  BC    0F74
0F04:  XORLW  FF
0F06:  BNZ   0F0E
0F08:  MOVF   40,W
0F0A:  SUBLW  10
0F0C:  BC    0F74
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0F0E:  CLRF   41
0F10:  CLRF   40
0F12:  MOVLW  09
0F14:  MOVWF  FA9
0F16:  MOVLW  0A
0F18:  MOVWF  FA8
0F1A:  BCF    FA6.6
0F1C:  BCF    FA6.7
0F1E:  BSF    FA6.2
0F20:  MOVF   FF2,W
0F22:  MOVWF  00
0F24:  BCF    FF2.7
0F26:  MOVLB  F
0F28:  MOVLW  55
0F2A:  MOVWF  FA7
0F2C:  MOVLW  AA
0F2E:  MOVWF  FA7
0F30:  BSF    FA6.1
0F32:  BTFSC  FA6.1
0F34:  BRA    0F32
0F36:  BCF    FA6.2
0F38:  MOVF   00,W
0F3A:  IORWF  FF2,F
0F3C:  MOVLW  14
0F3E:  MOVLB  0
0F40:  MOVWF  xD1
0F42:  RCALL  07F8
0F44:  MOVLW  0A
0F46:  MOVWF  FA9
0F48:  CLRF   FA8
0F4A:  BCF    FA6.6
0F4C:  BCF    FA6.7
0F4E:  BSF    FA6.2
0F50:  MOVF   FF2,W
0F52:  MOVWF  00
0F54:  BCF    FF2.7
0F56:  MOVLB  F
0F58:  MOVLW  55
0F5A:  MOVWF  FA7
0F5C:  MOVLW  AA
0F5E:  MOVWF  FA7
0F60:  BSF    FA6.1
0F62:  BTFSC  FA6.1
0F64:  BRA    0F62
0F66:  BCF    FA6.2
0F68:  MOVF   00,W
0F6A:  IORWF  FF2,F
0F6C:  MOVLW  14
0F6E:  MOVLB  0
0F70:  MOVWF  xD1
0F72:  RCALL  07F8
....................    } 
....................    if(G>240){ 
0F74:  CLRF   xD1
0F76:  CLRF   xD0
0F78:  MOVLW  70
0F7A:  MOVWF  xCF
0F7C:  MOVLW  86
0F7E:  MOVWF  xCE
0F80:  MOVFF  A7,D5
0F84:  MOVFF  A6,D4
0F88:  MOVFF  A5,D3
0F8C:  MOVFF  A4,D2
0F90:  RCALL  0C60
0F92:  BNC   1004
....................       G=240;write_eeprom(11,240);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
0F94:  CLRF   xA7
0F96:  CLRF   xA6
0F98:  MOVLW  70
0F9A:  MOVWF  xA5
0F9C:  MOVLW  86
0F9E:  MOVWF  xA4
0FA0:  MOVLW  0B
0FA2:  MOVWF  FA9
0FA4:  MOVLW  F0
0FA6:  MOVWF  FA8
0FA8:  BCF    FA6.6
0FAA:  BCF    FA6.7
0FAC:  BSF    FA6.2
0FAE:  MOVF   FF2,W
0FB0:  MOVWF  00
0FB2:  BCF    FF2.7
0FB4:  MOVLB  F
0FB6:  MOVLW  55
0FB8:  MOVWF  FA7
0FBA:  MOVLW  AA
0FBC:  MOVWF  FA7
0FBE:  BSF    FA6.1
0FC0:  BTFSC  FA6.1
0FC2:  BRA    0FC0
0FC4:  BCF    FA6.2
0FC6:  MOVF   00,W
0FC8:  IORWF  FF2,F
0FCA:  MOVLW  14
0FCC:  MOVLB  0
0FCE:  MOVWF  xD1
0FD0:  RCALL  07F8
0FD2:  MOVLW  0C
0FD4:  MOVWF  FA9
0FD6:  CLRF   FA8
0FD8:  BCF    FA6.6
0FDA:  BCF    FA6.7
0FDC:  BSF    FA6.2
0FDE:  MOVF   FF2,W
0FE0:  MOVWF  00
0FE2:  BCF    FF2.7
0FE4:  MOVLB  F
0FE6:  MOVLW  55
0FE8:  MOVWF  FA7
0FEA:  MOVLW  AA
0FEC:  MOVWF  FA7
0FEE:  BSF    FA6.1
0FF0:  BTFSC  FA6.1
0FF2:  BRA    0FF0
0FF4:  BCF    FA6.2
0FF6:  MOVF   00,W
0FF8:  IORWF  FF2,F
0FFA:  MOVLW  14
0FFC:  MOVLB  0
0FFE:  MOVWF  xD1
1000:  CALL   07F8
....................    } 
....................    if(VelMotor>6){ 
1004:  MOVF   xB0,W
1006:  SUBLW  06
1008:  BC    1042
....................       VelMotor=4;write_eeprom(13,4);delay_ms(20); 
100A:  MOVLW  04
100C:  MOVWF  xB0
100E:  MOVLW  0D
1010:  MOVWF  FA9
1012:  MOVLW  04
1014:  MOVWF  FA8
1016:  BCF    FA6.6
1018:  BCF    FA6.7
101A:  BSF    FA6.2
101C:  MOVF   FF2,W
101E:  MOVWF  00
1020:  BCF    FF2.7
1022:  MOVLB  F
1024:  MOVLW  55
1026:  MOVWF  FA7
1028:  MOVLW  AA
102A:  MOVWF  FA7
102C:  BSF    FA6.1
102E:  BTFSC  FA6.1
1030:  BRA    102E
1032:  BCF    FA6.2
1034:  MOVF   00,W
1036:  IORWF  FF2,F
1038:  MOVLW  14
103A:  MOVLB  0
103C:  MOVWF  xD1
103E:  CALL   07F8
....................    } 
.................... } 
1042:  GOTO   21DC (RETURN)
....................  
....................  
.................... #int_EXT            // Interrupción de encoder para control. 
.................... void ext0() {       // 6 pulsos por vuelta. 
....................    pulsos++; 
*
01B2:  INCF   xA8,F
01B4:  BTFSC  FD8.2
01B6:  INCF   xA9,F
....................    if(pulsos>=120){ 
01B8:  MOVF   xA9,F
01BA:  BNZ   01C2
01BC:  MOVF   xA8,W
01BE:  SUBLW  77
01C0:  BC    0214
....................       pulsos=0; 
01C2:  CLRF   xA9
01C4:  CLRF   xA8
....................       //output_toggle(PIN_C0); 
....................       tiempos=0;tiemporeset++;Lectura=1; 
01C6:  CLRF   3F
01C8:  CLRF   3E
01CA:  INCF   2F,F
01CC:  BSF    17.0
....................     
....................       if(ActivaBuzzer==1){ 
01CE:  DECFSZ 3D,W
01D0:  BRA    01E6
....................          if(estadobuzzer==0){ 
01D2:  BTFSC  17.3
01D4:  BRA    01DC
....................             Buzzer_off; 
01D6:  BCF    F8B.0
01D8:  BCF    F94.0
....................          }else{ 
01DA:  BRA    01E4
....................             if(estadoalarma==1) 
01DC:  BTFSS  17.4
01DE:  BRA    01E4
....................                Buzzer_on; 
01E0:  BSF    F8B.0
01E2:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
01E4:  BTG    17.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
01E6:  BTFSS  16.0
01E8:  BRA    0214
....................          segundos++; 
01EA:  INCF   21,F
....................          if(tiempo_cumplido==0){ 
01EC:  BTFSC  16.7
01EE:  BRA    0214
....................             if(tempo_segundos>0){ 
01F0:  MOVF   28,F
01F2:  BZ    01F8
....................                tempo_segundos--; 
01F4:  DECF   28,F
....................             }else{ 
01F6:  BRA    0214
....................                if(tempo_minutos>0){ 
01F8:  MOVF   27,F
01FA:  BZ    0204
....................                   tempo_minutos--; 
01FC:  DECF   27,F
....................                   tempo_segundos=59; 
01FE:  MOVLW  3B
0200:  MOVWF  28
....................                }else{ 
0202:  BRA    0214
....................                   tiempo_cumplido=1; 
0204:  BSF    16.7
....................                   estadouv=0;Luz_UV_off; 
0206:  BCF    16.0
0208:  BSF    F8A.1
020A:  BCF    F93.1
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
020C:  MOVFF  29,27
0210:  MOVFF  2A,28
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    tiempocruce=0; 
0214:  CLRF   xAE
0216:  CLRF   xAD
....................    Cruce=ON; 
0218:  BSF    17.7
....................    if(VelMotor<6){ 
021A:  MOVF   xB0,W
021C:  SUBLW  05
021E:  BNC   025C
....................       if(VelMotor>0 && Porcentaje<100){ 
0220:  MOVF   xB0,F
0222:  BZ    0254
0224:  MOVF   xAF,W
0226:  SUBLW  63
0228:  BNC   0254
....................          delay_us(retardo);       
022A:  MOVFF  AB,E2
022E:  INCF   xE2,F
0230:  DECF   xE2,F
0232:  BTFSC  FD8.2
0234:  BRA    023E
0236:  MOVLW  FF
0238:  MOVWF  xE3
023A:  RCALL  0198
023C:  BRA    0230
023E:  MOVFF  AA,E3
0242:  RCALL  0198
....................          Motor_L1_on; 
0244:  BSF    F8B.2
0246:  BCF    F94.2
....................          Motor_L2_on; 
0248:  BSF    F8B.1
024A:  BCF    F94.1
....................          delay_us(100);       
024C:  MOVLW  85
024E:  MOVWF  00
0250:  DECFSZ 00,F
0252:  BRA    0250
....................       } 
....................       Motor_L1_off; 
0254:  BCF    F8B.2
0256:  BCF    F94.2
....................       Motor_L2_off; 
0258:  BCF    F8B.1
025A:  BCF    F94.1
....................    } 
.................... } 
....................  
025C:  BCF    FF2.1
025E:  GOTO   0054
.................... void main () 
.................... { 
*
2040:  CLRF   FF8
2042:  BCF    FD0.7
2044:  BSF    07.7
2046:  CLRF   FEA
2048:  CLRF   FE9
204A:  BCF    16.0
204C:  BCF    16.1
204E:  BCF    16.2
2050:  BCF    16.3
2052:  BCF    16.4
2054:  BCF    16.5
2056:  BCF    16.6
2058:  BCF    16.7
205A:  BCF    17.0
205C:  BCF    17.1
205E:  BCF    17.2
2060:  BCF    17.3
2062:  BCF    17.4
2064:  CLRF   18
2066:  MOVLW  07
2068:  MOVWF  19
206A:  MOVLW  02
206C:  MOVWF  1A
206E:  MOVLW  0B
2070:  MOVWF  1B
2072:  MOVLW  02
2074:  MOVWF  1C
2076:  MOVLW  03
2078:  MOVWF  1D
207A:  MOVLW  02
207C:  MOVWF  1E
207E:  MOVWF  1F
2080:  MOVLW  04
2082:  MOVWF  20
2084:  CLRF   21
2086:  CLRF   22
2088:  CLRF   23
208A:  CLRF   24
208C:  CLRF   25
208E:  CLRF   26
2090:  CLRF   27
2092:  CLRF   28
2094:  CLRF   29
2096:  CLRF   2A
2098:  CLRF   2B
209A:  CLRF   2C
209C:  CLRF   2D
209E:  MOVLW  01
20A0:  MOVWF  2E
20A2:  CLRF   2F
20A4:  CLRF   30
20A6:  CLRF   31
20A8:  CLRF   3D
20AA:  CLRF   41
20AC:  CLRF   40
20AE:  CLRF   43
20B0:  CLRF   42
20B2:  CLRF   x97
20B4:  CLRF   x96
20B6:  CLRF   x95
20B8:  CLRF   x94
20BA:  CLRF   x9B
20BC:  CLRF   x9A
20BE:  CLRF   x99
20C0:  CLRF   x98
20C2:  CLRF   x9F
20C4:  CLRF   x9E
20C6:  CLRF   x9D
20C8:  CLRF   x9C
20CA:  CLRF   xA3
20CC:  CLRF   xA2
20CE:  CLRF   xA1
20D0:  CLRF   xA0
20D2:  CLRF   xA7
20D4:  CLRF   xA6
20D6:  CLRF   xA5
20D8:  MOVLW  80
20DA:  MOVWF  xA4
20DC:  BSF    17.5
20DE:  BCF    17.6
20E0:  CLRF   xA9
20E2:  CLRF   xA8
20E4:  CLRF   xAB
20E6:  CLRF   xAA
20E8:  BCF    17.7
20EA:  BCF    xAC.0
20EC:  CLRF   xAE
20EE:  CLRF   xAD
20F0:  CLRF   xAF
20F2:  CLRF   xB0
20F4:  CLRF   xB4
20F6:  CLRF   xB3
20F8:  CLRF   xB2
20FA:  CLRF   xB1
20FC:  CLRF   xB8
20FE:  CLRF   xB7
2100:  CLRF   xB6
2102:  CLRF   xB5
2104:  MOVF   FC1,W
2106:  ANDLW  C0
2108:  IORLW  0F
210A:  MOVWF  FC1
210C:  MOVLW  07
210E:  MOVWF  FB4
2110:  MOVLW  3E
2112:  MOVWF  32
2114:  MOVLW  20
2116:  MOVWF  33
2118:  MOVLW  5E
211A:  MOVWF  34
211C:  CLRF   35
211E:  CLRF   36
2120:  CLRF   37
2122:  CLRF   38
2124:  CLRF   39
2126:  CLRF   3A
2128:  CLRF   3B
212A:  CLRF   3C
212C:  CLRF   44
212E:  CLRF   45
2130:  CLRF   46
2132:  CLRF   47
2134:  CLRF   48
2136:  CLRF   49
2138:  CLRF   4A
213A:  CLRF   4B
213C:  CLRF   4C
213E:  CLRF   4D
2140:  CLRF   4E
2142:  CLRF   4F
2144:  CLRF   50
2146:  CLRF   51
2148:  CLRF   52
214A:  CLRF   53
214C:  CLRF   54
214E:  CLRF   55
2150:  CLRF   56
2152:  CLRF   57
2154:  CLRF   58
2156:  CLRF   59
2158:  CLRF   5A
215A:  CLRF   5B
215C:  CLRF   5C
215E:  CLRF   5D
2160:  CLRF   5E
2162:  CLRF   5F
2164:  CLRF   x60
2166:  CLRF   x61
2168:  CLRF   x62
216A:  CLRF   x63
216C:  CLRF   x64
216E:  CLRF   x65
2170:  CLRF   x66
2172:  CLRF   x67
2174:  CLRF   x68
2176:  CLRF   x69
2178:  CLRF   x6A
217A:  CLRF   x6B
217C:  CLRF   x6C
217E:  CLRF   x6D
2180:  CLRF   x6E
2182:  CLRF   x6F
2184:  CLRF   x70
2186:  CLRF   x71
2188:  CLRF   x72
218A:  CLRF   x73
218C:  CLRF   x74
218E:  CLRF   x75
2190:  CLRF   x76
2192:  CLRF   x77
2194:  CLRF   x78
2196:  CLRF   x79
2198:  CLRF   x7A
219A:  CLRF   x7B
219C:  CLRF   x7C
219E:  CLRF   x7D
21A0:  CLRF   x7E
21A2:  CLRF   x7F
21A4:  CLRF   x80
21A6:  CLRF   x81
21A8:  CLRF   x82
21AA:  CLRF   x83
21AC:  CLRF   x84
21AE:  CLRF   x85
21B0:  CLRF   x86
21B2:  CLRF   x87
21B4:  CLRF   x88
21B6:  CLRF   x89
21B8:  CLRF   x8A
21BA:  CLRF   x8B
21BC:  CLRF   x8C
21BE:  CLRF   x8D
21C0:  CLRF   x8E
21C2:  CLRF   x8F
21C4:  CLRF   x90
21C6:  CLRF   x91
21C8:  CLRF   x92
21CA:  CLRF   x93
....................    ConfigInterrupciones(); 
21CC:  GOTO   08E0
....................    MensajeBienvenida(); 
21D0:  GOTO   09E6
....................    LeeEEPROM();  
21D4:  GOTO   0A82
....................    LimitaValores(); 
21D8:  GOTO   0CD6
....................    VelocidadMotor(0); 
21DC:  CLRF   xBA
21DE:  CALL   1046
....................    Motor_L1_off; 
21E2:  BCF    F8B.2
21E4:  BCF    F94.2
....................    Motor_L2_off; 
21E6:  BCF    F8B.1
21E8:  BCF    F94.1
....................    Tcruce2=83; 
21EA:  CLRF   xB8
21EC:  CLRF   xB7
21EE:  MOVLW  26
21F0:  MOVWF  xB6
21F2:  MOVLW  85
21F4:  MOVWF  xB5
....................    Tcruce=8300; 
21F6:  CLRF   xB4
21F8:  MOVLW  B0
21FA:  MOVWF  xB3
21FC:  MOVLW  01
21FE:  MOVWF  xB2
2200:  MOVLW  8C
2202:  MOVWF  xB1
....................    while(true){ 
....................           
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2204:  MOVF   18,F
2206:  BTFSS  FD8.2
2208:  BRA    260C
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
220A:  MOVLW  01
220C:  MOVWF  xCC
220E:  MOVWF  xCD
2210:  CALL   0906
....................          printf(lcd_putc,"     Ingrese        "); 
2214:  MOVLW  62
2216:  MOVWF  FF6
2218:  MOVLW  02
221A:  MOVWF  FF7
221C:  CALL   09C6
....................          lcd_gotoxy(1,2); 
2220:  MOVLW  01
2222:  MOVWF  xCC
2224:  MOVLW  02
2226:  MOVWF  xCD
2228:  CALL   0906
....................          printf(lcd_putc,"    Contraseña      "); 
222C:  MOVLW  78
222E:  MOVWF  FF6
2230:  MOVLW  02
2232:  MOVWF  FF7
2234:  CALL   09C6
....................          lcd_gotoxy(1,3); 
2238:  MOVLW  01
223A:  MOVWF  xCC
223C:  MOVLW  03
223E:  MOVWF  xCD
2240:  CALL   0906
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2244:  MOVLW  8E
2246:  MOVWF  FF6
2248:  MOVLW  02
224A:  MOVWF  FF7
224C:  MOVLW  0A
224E:  MOVWF  xBE
2250:  CALL   10CA
2254:  MOVFF  35,BA
2258:  MOVLW  1F
225A:  MOVWF  xBB
225C:  CALL   1110
2260:  MOVFF  36,BA
2264:  MOVLW  1F
2266:  MOVWF  xBB
2268:  CALL   1110
226C:  MOVFF  37,BA
2270:  MOVLW  1F
2272:  MOVWF  xBB
2274:  CALL   1110
2278:  MOVFF  38,BA
227C:  MOVLW  1F
227E:  MOVWF  xBB
2280:  CALL   1110
2284:  MOVLW  20
2286:  MOVWF  xCB
2288:  CALL   0968
228C:  MOVLW  20
228E:  MOVWF  xCB
2290:  CALL   0968
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2294:  MOVFF  1B,CC
2298:  MOVLW  04
229A:  MOVWF  xCD
229C:  CALL   0906
....................          lcd_putc(t[2]); 
22A0:  MOVFF  34,CB
22A4:  CALL   0968
....................           
....................          if(unidad>11&&unidad<14){ 
22A8:  MOVF   1B,W
22AA:  SUBLW  0B
22AC:  BC    22CC
22AE:  MOVF   1B,W
22B0:  SUBLW  0D
22B2:  BNC   22CC
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
22B4:  MOVLW  01
22B6:  SUBWF  1B,W
22B8:  MOVWF  xBA
22BA:  MOVWF  xCC
22BC:  MOVLW  04
22BE:  MOVWF  xCD
22C0:  CALL   0906
....................             lcd_putc(t[1]); 
22C4:  MOVFF  33,CB
22C8:  CALL   0968
....................          } 
....................           
....................          Cambio=OFF; 
22CC:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
22CE:  BSF    F92.5
22D0:  BTFSC  F80.5
22D2:  BRA    2306
....................          delay_ms(20); 
22D4:  MOVLW  14
22D6:  MOVWF  xD1
22D8:  CALL   07F8
....................          if(UP){ 
22DC:  BSF    F92.5
22DE:  BTFSC  F80.5
22E0:  BRA    2304
....................             if(Flanco == 0) { 
22E2:  BTFSC  16.3
22E4:  BRA    2304
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
22E6:  MOVLW  0B
22E8:  SUBWF  1B,W
22EA:  CLRF   03
22EC:  ADDLW  35
22EE:  MOVWF  FE9
22F0:  MOVLW  00
22F2:  ADDWFC 03,W
22F4:  MOVWF  FEA
22F6:  INCF   FEF,F
22F8:  BSF    16.3
22FA:  MOVLW  1E
22FC:  MOVWF  xD1
22FE:  CALL   07F8
2302:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2304:  BRA    2308
....................          Flanco = 0; 
2306:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2308:  BSF    F96.0
230A:  BTFSC  F84.0
230C:  BRA    2340
....................          delay_ms(20); 
230E:  MOVLW  14
2310:  MOVWF  xD1
2312:  CALL   07F8
....................          if(DOWN){ 
2316:  BSF    F96.0
2318:  BTFSC  F84.0
231A:  BRA    233E
....................             if(Flanco2 == 0) { 
231C:  BTFSC  16.5
231E:  BRA    233E
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2320:  MOVLW  0B
2322:  SUBWF  1B,W
2324:  CLRF   03
2326:  ADDLW  35
2328:  MOVWF  FE9
232A:  MOVLW  00
232C:  ADDWFC 03,W
232E:  MOVWF  FEA
2330:  DECF   FEF,F
2332:  BSF    16.5
2334:  MOVLW  1E
2336:  MOVWF  xD1
2338:  CALL   07F8
233C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
233E:  BRA    2342
....................          Flanco2 = 0; 
2340:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2342:  BSF    F96.1
2344:  BTFSC  F84.1
2346:  BRA    2372
....................          delay_ms(20); 
2348:  MOVLW  14
234A:  MOVWF  xD1
234C:  CALL   07F8
....................          if(RIGHT){ 
2350:  BSF    F96.1
2352:  BTFSC  F84.1
2354:  BRA    2370
....................             if(Flanco1 == 0) { 
2356:  BTFSC  16.4
2358:  BRA    2370
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
235A:  BSF    16.4
235C:  INCF   1B,F
235E:  MOVLW  1E
2360:  MOVWF  xD1
2362:  CALL   07F8
2366:  MOVLW  0C
2368:  MOVWF  xCB
236A:  CALL   0968
236E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2370:  BRA    2374
....................          Flanco1 = 0; 
2372:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2374:  BSF    F96.2
2376:  BTFSC  F84.2
2378:  BRA    23A4
....................          delay_ms(150); 
237A:  MOVLW  96
237C:  MOVWF  xD1
237E:  CALL   07F8
....................          if(IZQU){ 
2382:  BSF    F96.2
2384:  BTFSC  F84.2
2386:  BRA    23A2
....................             if(Flanco3 == 0){ 
2388:  BTFSC  16.6
238A:  BRA    23A2
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
238C:  BSF    16.6
238E:  DECF   1B,F
2390:  MOVLW  1E
2392:  MOVWF  xD1
2394:  CALL   07F8
2398:  MOVLW  0C
239A:  MOVWF  xCB
239C:  CALL   0968
23A0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
23A2:  BRA    23A6
....................         Flanco3 = 0; 
23A4:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
23A6:  MOVLW  0B
23A8:  SUBWF  1B,W
23AA:  CLRF   03
23AC:  ADDLW  35
23AE:  MOVWF  FE9
23B0:  MOVLW  00
23B2:  ADDWFC 03,W
23B4:  MOVWF  FEA
23B6:  BTFSC  FEF.7
23B8:  BRA    23BC
23BA:  BRA    23D0
....................          clave[unidad-11]=9; 
23BC:  MOVLW  0B
23BE:  SUBWF  1B,W
23C0:  CLRF   03
23C2:  ADDLW  35
23C4:  MOVWF  FE9
23C6:  MOVLW  00
23C8:  ADDWFC 03,W
23CA:  MOVWF  FEA
23CC:  MOVLW  09
23CE:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
23D0:  MOVLW  0B
23D2:  SUBWF  1B,W
23D4:  CLRF   03
23D6:  ADDLW  35
23D8:  MOVWF  FE9
23DA:  MOVLW  00
23DC:  ADDWFC 03,W
23DE:  MOVWF  FEA
23E0:  BTFSC  FEF.7
23E2:  BRA    23FC
23E4:  MOVF   FEF,W
23E6:  SUBLW  09
23E8:  BC    23FC
....................          clave[unidad-11]=0; 
23EA:  MOVLW  0B
23EC:  SUBWF  1B,W
23EE:  CLRF   03
23F0:  ADDLW  35
23F2:  MOVWF  FE9
23F4:  MOVLW  00
23F6:  ADDWFC 03,W
23F8:  MOVWF  FEA
23FA:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
23FC:  MOVF   1B,W
23FE:  SUBLW  0A
2400:  BNC   2406
....................          unidad=11; 
2402:  MOVLW  0B
2404:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2406:  MOVF   1B,W
2408:  SUBLW  0E
240A:  BTFSC  FD8.0
240C:  BRA    260C
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
240E:  MOVF   35,W
2410:  SUBLW  03
2412:  BNZ   24EE
2414:  MOVF   36,W
2416:  SUBLW  08
2418:  BNZ   24EE
241A:  MOVF   37,W
241C:  SUBLW  09
241E:  BNZ   24EE
2420:  MOVF   38,W
2422:  SUBLW  02
2424:  BNZ   24EE
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2426:  CLRF   FA9
2428:  CLRF   FA8
242A:  BCF    FA6.6
242C:  BCF    FA6.7
242E:  BSF    FA6.2
2430:  MOVF   FF2,W
2432:  MOVWF  00
2434:  BCF    FF2.7
2436:  MOVLB  F
2438:  MOVLW  55
243A:  MOVWF  FA7
243C:  MOVLW  AA
243E:  MOVWF  FA7
2440:  BSF    FA6.1
2442:  BTFSC  FA6.1
2444:  BRA    2442
2446:  BCF    FA6.2
2448:  MOVF   00,W
244A:  IORWF  FF2,F
244C:  MOVLW  14
244E:  MOVLB  0
2450:  MOVWF  xD1
2452:  CALL   07F8
2456:  MOVLW  01
2458:  MOVWF  FA9
245A:  CLRF   FA8
245C:  BCF    FA6.6
245E:  BCF    FA6.7
2460:  BSF    FA6.2
2462:  MOVF   FF2,W
2464:  MOVWF  00
2466:  BCF    FF2.7
2468:  MOVLB  F
246A:  MOVLW  55
246C:  MOVWF  FA7
246E:  MOVLW  AA
2470:  MOVWF  FA7
2472:  BSF    FA6.1
2474:  BTFSC  FA6.1
2476:  BRA    2474
2478:  BCF    FA6.2
247A:  MOVF   00,W
247C:  IORWF  FF2,F
247E:  MOVLW  14
2480:  MOVLB  0
2482:  MOVWF  xD1
2484:  CALL   07F8
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2488:  MOVLW  02
248A:  MOVWF  FA9
248C:  CLRF   FA8
248E:  BCF    FA6.6
2490:  BCF    FA6.7
2492:  BSF    FA6.2
2494:  MOVF   FF2,W
2496:  MOVWF  00
2498:  BCF    FF2.7
249A:  MOVLB  F
249C:  MOVLW  55
249E:  MOVWF  FA7
24A0:  MOVLW  AA
24A2:  MOVWF  FA7
24A4:  BSF    FA6.1
24A6:  BTFSC  FA6.1
24A8:  BRA    24A6
24AA:  BCF    FA6.2
24AC:  MOVF   00,W
24AE:  IORWF  FF2,F
24B0:  MOVLW  14
24B2:  MOVLB  0
24B4:  MOVWF  xD1
24B6:  CALL   07F8
24BA:  MOVLW  03
24BC:  MOVWF  FA9
24BE:  CLRF   FA8
24C0:  BCF    FA6.6
24C2:  BCF    FA6.7
24C4:  BSF    FA6.2
24C6:  MOVF   FF2,W
24C8:  MOVWF  00
24CA:  BCF    FF2.7
24CC:  MOVLB  F
24CE:  MOVLW  55
24D0:  MOVWF  FA7
24D2:  MOVLW  AA
24D4:  MOVWF  FA7
24D6:  BSF    FA6.1
24D8:  BTFSC  FA6.1
24DA:  BRA    24D8
24DC:  BCF    FA6.2
24DE:  MOVF   00,W
24E0:  IORWF  FF2,F
24E2:  MOVLW  14
24E4:  MOVLB  0
24E6:  MOVWF  xD1
24E8:  CALL   07F8
....................              reset_cpu(); 
24EC:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
24EE:  MOVF   39,W
24F0:  SUBWF  35,W
24F2:  BNZ   2592
24F4:  MOVF   3A,W
24F6:  SUBWF  36,W
24F8:  BNZ   2592
24FA:  MOVF   3B,W
24FC:  SUBWF  37,W
24FE:  BNZ   2592
2500:  MOVF   3C,W
2502:  SUBWF  38,W
2504:  BNZ   2592
....................             lcd_gotoxy(1,1); 
2506:  MOVLW  01
2508:  MOVWF  xCC
250A:  MOVWF  xCD
250C:  CALL   0906
....................             printf(lcd_putc,"                   "); 
2510:  MOVLW  A4
2512:  MOVWF  FF6
2514:  MOVLW  02
2516:  MOVWF  FF7
2518:  CALL   09C6
....................             lcd_gotoxy(1,2); 
251C:  MOVLW  01
251E:  MOVWF  xCC
2520:  MOVLW  02
2522:  MOVWF  xCD
2524:  CALL   0906
....................             printf(lcd_putc,"     Contraseña    "); 
2528:  MOVLW  B8
252A:  MOVWF  FF6
252C:  MOVLW  02
252E:  MOVWF  FF7
2530:  CALL   09C6
....................             lcd_gotoxy(1,3); 
2534:  MOVLW  01
2536:  MOVWF  xCC
2538:  MOVLW  03
253A:  MOVWF  xCD
253C:  CALL   0906
....................             printf(lcd_putc,"      Correcta     "); 
2540:  MOVLW  CC
2542:  MOVWF  FF6
2544:  MOVLW  02
2546:  MOVWF  FF7
2548:  CALL   09C6
....................             lcd_gotoxy(1,4); 
254C:  MOVLW  01
254E:  MOVWF  xCC
2550:  MOVLW  04
2552:  MOVWF  xCD
2554:  CALL   0906
....................             printf(lcd_putc,"                   "); 
2558:  MOVLW  E0
255A:  MOVWF  FF6
255C:  MOVLW  02
255E:  MOVWF  FF7
2560:  CALL   09C6
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2564:  MOVLW  04
2566:  MOVWF  xBA
2568:  MOVLW  FA
256A:  MOVWF  xD1
256C:  CALL   07F8
2570:  DECFSZ xBA,F
2572:  BRA    2568
2574:  MOVLW  32
2576:  MOVWF  18
2578:  MOVLW  0B
257A:  MOVWF  1B
257C:  MOVLW  0C
257E:  MOVWF  xCB
2580:  CALL   0968
2584:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2586:  CLRF   35
2588:  CLRF   36
258A:  CLRF   37
258C:  CLRF   38
258E:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2590:  BRA    260C
....................             lcd_gotoxy(1,1); 
2592:  MOVLW  01
2594:  MOVWF  xCC
2596:  MOVWF  xCD
2598:  CALL   0906
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
259C:  MOVLW  01
259E:  MOVWF  xCC
25A0:  MOVLW  02
25A2:  MOVWF  xCD
25A4:  CALL   0906
....................             printf(lcd_putc,"     Contraseña    "); 
25A8:  MOVLW  F4
25AA:  MOVWF  FF6
25AC:  MOVLW  02
25AE:  MOVWF  FF7
25B0:  CALL   09C6
....................             lcd_gotoxy(1,3); 
25B4:  MOVLW  01
25B6:  MOVWF  xCC
25B8:  MOVLW  03
25BA:  MOVWF  xCD
25BC:  CALL   0906
....................             printf(lcd_putc,"     Incorrecta    "); 
25C0:  MOVLW  08
25C2:  MOVWF  FF6
25C4:  MOVLW  03
25C6:  MOVWF  FF7
25C8:  CALL   09C6
....................             lcd_gotoxy(1,4); 
25CC:  MOVLW  01
25CE:  MOVWF  xCC
25D0:  MOVLW  04
25D2:  MOVWF  xCD
25D4:  CALL   0906
....................             printf(lcd_putc,"                   "); 
25D8:  MOVLW  1C
25DA:  MOVWF  FF6
25DC:  MOVLW  03
25DE:  MOVWF  FF7
25E0:  CALL   09C6
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
25E4:  MOVLW  04
25E6:  MOVWF  xBA
25E8:  MOVLW  FA
25EA:  MOVWF  xD1
25EC:  CALL   07F8
25F0:  DECFSZ xBA,F
25F2:  BRA    25E8
25F4:  MOVLW  0B
25F6:  MOVWF  1B
25F8:  MOVLW  0C
25FA:  MOVWF  xCB
25FC:  CALL   0968
2600:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2602:  CLRF   35
2604:  CLRF   36
2606:  CLRF   37
2608:  CLRF   38
260A:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
260C:  DECFSZ 18,W
260E:  BRA    2846
....................       EliminaRuido(); 
2610:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2614:  MOVLW  01
2616:  MOVWF  xCC
2618:  MOVWF  xCD
261A:  CALL   0906
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
261E:  MOVLW  30
2620:  MOVWF  FF6
2622:  MOVLW  03
2624:  MOVWF  FF7
2626:  CALL   09C6
....................          mensajes(1+paso,2); 
262A:  MOVLW  01
262C:  ADDWF  31,W
262E:  MOVWF  xBA
2630:  MOVWF  xBB
2632:  MOVLW  02
2634:  MOVWF  xBC
2636:  CALL   11E0
....................          mensajes(2+paso,3); 
263A:  MOVLW  02
263C:  ADDWF  31,W
263E:  MOVWF  xBA
2640:  MOVWF  xBB
2642:  MOVLW  03
2644:  MOVWF  xBC
2646:  CALL   11E0
....................          mensajes(3+paso,4); 
264A:  MOVLW  03
264C:  ADDWF  31,W
264E:  MOVWF  xBA
2650:  MOVWF  xBB
2652:  MOVLW  04
2654:  MOVWF  xBC
2656:  CALL   11E0
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
265A:  MOVLW  01
265C:  MOVWF  xCC
265E:  MOVFF  1C,CD
2662:  CALL   0906
....................         lcd_putc(t[0]); 
2666:  MOVFF  32,CB
266A:  CALL   0968
....................  
....................         if(Flecha==2) 
266E:  MOVF   1C,W
2670:  SUBLW  02
2672:  BNZ   269C
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2674:  MOVLW  01
2676:  MOVWF  xCC
2678:  MOVLW  04
267A:  MOVWF  xCD
267C:  CALL   0906
....................             lcd_putc(t[1]); 
2680:  MOVFF  33,CB
2684:  CALL   0968
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2688:  MOVLW  01
268A:  MOVWF  xCC
268C:  MOVLW  03
268E:  MOVWF  xCD
2690:  CALL   0906
....................             lcd_putc(t[1]); 
2694:  MOVFF  33,CB
2698:  CALL   0968
....................           } 
....................          
....................         if(Flecha==4) 
269C:  MOVF   1C,W
269E:  SUBLW  04
26A0:  BNZ   26CA
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
26A2:  MOVLW  01
26A4:  MOVWF  xCC
26A6:  MOVLW  02
26A8:  MOVWF  xCD
26AA:  CALL   0906
....................             lcd_putc(t[1]); 
26AE:  MOVFF  33,CB
26B2:  CALL   0968
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
26B6:  MOVLW  01
26B8:  MOVWF  xCC
26BA:  MOVLW  03
26BC:  MOVWF  xCD
26BE:  CALL   0906
....................             lcd_putc(t[1]); 
26C2:  MOVFF  33,CB
26C6:  CALL   0968
....................           } 
....................          
....................         if(Flecha==3) 
26CA:  MOVF   1C,W
26CC:  SUBLW  03
26CE:  BNZ   26F8
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
26D0:  MOVLW  01
26D2:  MOVWF  xCC
26D4:  MOVLW  04
26D6:  MOVWF  xCD
26D8:  CALL   0906
....................             lcd_putc(t[1]); 
26DC:  MOVFF  33,CB
26E0:  CALL   0968
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
26E4:  MOVLW  01
26E6:  MOVWF  xCC
26E8:  MOVLW  02
26EA:  MOVWF  xCD
26EC:  CALL   0906
....................             lcd_putc(t[1]); 
26F0:  MOVFF  33,CB
26F4:  CALL   0968
....................           } 
....................          Cambio=OFF; 
26F8:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
26FA:  BSF    F92.5
26FC:  BTFSC  F80.5
26FE:  BRA    272A
....................          delay_ms(20); 
2700:  MOVLW  14
2702:  MOVWF  xD1
2704:  CALL   07F8
....................          if(UP){ 
2708:  BSF    F92.5
270A:  BTFSC  F80.5
270C:  BRA    2728
....................             if(Flanco == 0){ 
270E:  BTFSC  16.3
2710:  BRA    2728
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
2712:  DECF   1E,F
2714:  DECF   1C,F
2716:  MOVLW  01
2718:  ADDWF  1C,W
271A:  MOVWF  1D
271C:  BSF    16.3
271E:  MOVLW  1E
2720:  MOVWF  xD1
2722:  CALL   07F8
2726:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2728:  BRA    272C
....................          Flanco = 0; 
272A:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
272C:  BSF    F96.0
272E:  BTFSC  F84.0
2730:  BRA    275C
....................          delay_ms(20); 
2732:  MOVLW  14
2734:  MOVWF  xD1
2736:  CALL   07F8
....................          if(DOWN){ 
273A:  BSF    F96.0
273C:  BTFSC  F84.0
273E:  BRA    275A
....................             if(Flanco2 == 0){ 
2740:  BTFSC  16.5
2742:  BRA    275A
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2744:  INCF   1E,F
2746:  INCF   1C,F
2748:  MOVLW  01
274A:  SUBWF  1C,W
274C:  MOVWF  1D
274E:  BSF    16.5
2750:  MOVLW  1E
2752:  MOVWF  xD1
2754:  CALL   07F8
2758:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
275A:  BRA    275E
....................          Flanco2 = 0; 
275C:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
275E:  MOVF   1E,W
2760:  SUBWF  20,W
2762:  BC    2774
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2764:  INCF   31,F
2766:  MOVFF  1E,20
276A:  MOVLW  02
276C:  SUBWF  20,W
276E:  MOVWF  1F
2770:  MOVLW  04
2772:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2774:  MOVF   1F,W
2776:  SUBWF  1E,W
2778:  BC    278A
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
277A:  DECF   31,F
277C:  MOVFF  1E,1F
2780:  MOVLW  02
2782:  ADDWF  1F,W
2784:  MOVWF  20
2786:  MOVLW  02
2788:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
278A:  MOVF   1E,W
278C:  SUBWF  19,W
278E:  BC    27A2
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2790:  MOVFF  1A,1E
2794:  MOVLW  02
2796:  MOVWF  1C
2798:  CLRF   31
279A:  MOVFF  1E,1F
279E:  ADDWF  1F,W
27A0:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
27A2:  MOVF   1A,W
27A4:  SUBWF  1E,W
27A6:  BC    27BE
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
27A8:  MOVFF  19,1E
27AC:  MOVLW  04
27AE:  MOVWF  1C
27B0:  SUBWF  19,W
27B2:  MOVWF  31
27B4:  MOVFF  1E,20
27B8:  MOVLW  02
27BA:  SUBWF  20,W
27BC:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
27BE:  BTFSC  31.7
27C0:  BRA    27C4
27C2:  BRA    27C6
....................          paso=0; 
27C4:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
27C6:  BSF    F96.1
27C8:  BTFSC  F84.1
27CA:  BRA    2812
....................          delay_ms(20); 
27CC:  MOVLW  14
27CE:  MOVWF  xD1
27D0:  CALL   07F8
....................          if(RIGHT){ 
27D4:  BSF    F96.1
27D6:  BTFSC  F84.1
27D8:  BRA    280E
....................             if(Flanco1 == 0){ 
27DA:  BTFSC  16.4
27DC:  BRA    280E
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
27DE:  BSF    16.4
27E0:  MOVFF  1E,18
27E4:  MOVLW  03
27E6:  MOVWF  1C
27E8:  MOVLW  02
27EA:  MOVWF  xBA
27EC:  MOVLW  96
27EE:  MOVWF  xD1
27F0:  CALL   07F8
27F4:  DECFSZ xBA,F
27F6:  BRA    27EC
27F8:  MOVLW  0C
27FA:  MOVWF  xCB
27FC:  CALL   0968
....................                if(Menu==6){ 
2800:  MOVF   18,W
2802:  SUBLW  06
2804:  BNZ   280E
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2806:  CLRF   35
2808:  CLRF   36
280A:  CLRF   37
280C:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
280E:  BSF    17.5
....................       }else{ 
2810:  BRA    2814
....................         Flanco1 = 0; 
2812:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
2814:  BSF    F96.2
2816:  BTFSC  F84.2
2818:  BRA    2846
....................          delay_ms(20); 
281A:  MOVLW  14
281C:  MOVWF  xD1
281E:  CALL   07F8
....................          if(IZQU){ 
2822:  BSF    F96.2
2824:  BTFSC  F84.2
2826:  BRA    2846
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2828:  MOVLW  02
282A:  MOVWF  xBA
282C:  MOVLW  FA
282E:  MOVWF  xD1
2830:  CALL   07F8
2834:  DECFSZ xBA,F
2836:  BRA    282C
2838:  MOVLW  32
283A:  MOVWF  18
283C:  MOVLW  0C
283E:  MOVWF  xCB
2840:  CALL   0968
2844:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2846:  MOVF   18,W
2848:  SUBLW  02
284A:  BTFSS  FD8.2
284C:  BRA    2AA2
....................    EliminaRuido(); 
284E:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2852:  MOVLW  01
2854:  MOVWF  xCC
2856:  MOVWF  xCD
2858:  CALL   0906
....................       printf(lcd_putc,"    Temporizador     "); 
285C:  MOVLW  46
285E:  MOVWF  FF6
2860:  MOVLW  03
2862:  MOVWF  FF7
2864:  CALL   09C6
....................       lcd_gotoxy(1,2); 
2868:  MOVLW  01
286A:  MOVWF  xCC
286C:  MOVLW  02
286E:  MOVWF  xCD
2870:  CALL   0906
....................       printf(lcd_putc,"       Luz UV        "); 
2874:  MOVLW  5C
2876:  MOVWF  FF6
2878:  MOVLW  03
287A:  MOVWF  FF7
287C:  CALL   09C6
....................       lcd_gotoxy(6,3); 
2880:  MOVLW  06
2882:  MOVWF  xCC
2884:  MOVLW  03
2886:  MOVWF  xCD
2888:  CALL   0906
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
288C:  MOVFF  29,BA
2890:  MOVLW  03
2892:  MOVWF  xBB
2894:  CALL   12B4
2898:  MOVLW  3A
289A:  MOVWF  xCB
289C:  CALL   0968
28A0:  MOVFF  2A,BA
28A4:  MOVLW  01
28A6:  MOVWF  xBB
28A8:  CALL   12B4
28AC:  MOVLW  7B
28AE:  MOVWF  FF6
28B0:  MOVLW  03
28B2:  MOVWF  FF7
28B4:  MOVLW  08
28B6:  MOVWF  xBE
28B8:  CALL   10CA
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
28BC:  MOVLW  06
28BE:  ADDWF  2E,W
28C0:  MOVWF  xBA
28C2:  MOVWF  xCC
28C4:  MOVLW  04
28C6:  MOVWF  xCD
28C8:  CALL   0906
....................       lcd_putc(t[2]); 
28CC:  MOVFF  34,CB
28D0:  CALL   0968
....................        
....................       Cambio=OFF; 
28D4:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
28D6:  BSF    F92.5
28D8:  BTFSC  F80.5
28DA:  BRA    2928
....................    { 
....................       delay_ms(20); 
28DC:  MOVLW  14
28DE:  MOVWF  xD1
28E0:  CALL   07F8
....................       if(UP){ 
28E4:  BSF    F92.5
28E6:  BTFSC  F80.5
28E8:  BRA    2928
....................          if(unidad2==1) 
28EA:  DECFSZ 2E,W
28EC:  BRA    2908
....................          { 
....................             if(tempo_minutos_pro<240) 
28EE:  MOVF   29,W
28F0:  SUBLW  EF
28F2:  BNC   2908
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
28F4:  MOVLW  05
28F6:  ADDWF  29,F
28F8:  MOVLW  02
28FA:  MOVWF  xBA
28FC:  MOVLW  96
28FE:  MOVWF  xD1
2900:  CALL   07F8
2904:  DECFSZ xBA,F
2906:  BRA    28FC
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2908:  MOVF   2E,W
290A:  SUBLW  04
290C:  BNZ   2926
....................          { 
....................             if(tempo_segundos_pro<59) 
290E:  MOVF   2A,W
2910:  SUBLW  3A
2912:  BNC   2926
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2914:  INCF   2A,F
2916:  MOVLW  02
2918:  MOVWF  xBA
291A:  MOVLW  96
291C:  MOVWF  xD1
291E:  CALL   07F8
2922:  DECFSZ xBA,F
2924:  BRA    291A
....................             } 
....................          }      
....................       Cambio=ON; 
2926:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2928:  BSF    F96.0
292A:  BTFSC  F84.0
292C:  BRA    2976
....................    { 
....................       delay_ms(20); 
292E:  MOVLW  14
2930:  MOVWF  xD1
2932:  CALL   07F8
....................       if(DOWN){ 
2936:  BSF    F96.0
2938:  BTFSC  F84.0
293A:  BRA    2976
....................          if(unidad2==1) 
293C:  DECFSZ 2E,W
293E:  BRA    2958
....................          { 
....................             if(tempo_minutos_pro>0) 
2940:  MOVF   29,F
2942:  BZ    2958
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2944:  MOVLW  05
2946:  SUBWF  29,F
2948:  MOVLW  02
294A:  MOVWF  xBA
294C:  MOVLW  96
294E:  MOVWF  xD1
2950:  CALL   07F8
2954:  DECFSZ xBA,F
2956:  BRA    294C
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2958:  MOVF   2E,W
295A:  SUBLW  04
295C:  BNZ   2974
....................          { 
....................             if(tempo_segundos_pro>0) 
295E:  MOVF   2A,F
2960:  BZ    2974
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2962:  DECF   2A,F
2964:  MOVLW  02
2966:  MOVWF  xBA
2968:  MOVLW  96
296A:  MOVWF  xD1
296C:  CALL   07F8
2970:  DECFSZ xBA,F
2972:  BRA    2968
....................             }    
....................          } 
....................       Cambio=ON; 
2974:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2976:  BSF    F96.1
2978:  BTFSC  F84.1
297A:  BRA    29B8
....................    { 
....................       delay_ms(20); 
297C:  MOVLW  14
297E:  MOVWF  xD1
2980:  CALL   07F8
....................       if(RIGHT){ 
2984:  BSF    F96.1
2986:  BTFSC  F84.1
2988:  BRA    29B8
....................          if(unidad2==1) 
298A:  DECFSZ 2E,W
298C:  BRA    2994
....................          { 
....................             unidad2=4; 
298E:  MOVLW  04
2990:  MOVWF  2E
....................          } 
....................          else 
2992:  BRA    299E
....................          { 
....................             if(unidad2==4) 
2994:  MOVF   2E,W
2996:  SUBLW  04
2998:  BNZ   299E
....................             { 
....................                unidad2=1; 
299A:  MOVLW  01
299C:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
299E:  MOVLW  02
29A0:  MOVWF  xBA
29A2:  MOVLW  FA
29A4:  MOVWF  xD1
29A6:  CALL   07F8
29AA:  DECFSZ xBA,F
29AC:  BRA    29A2
....................       printf(lcd_putc,"\f"); 
29AE:  MOVLW  0C
29B0:  MOVWF  xCB
29B2:  CALL   0968
....................       Cambio=ON; 
29B6:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
29B8:  BSF    F96.2
29BA:  BTFSC  F84.2
29BC:  BRA    2AA2
....................    { 
....................       if(IZQU){ 
29BE:  BSF    F96.2
29C0:  BTFSC  F84.2
29C2:  BRA    2AA2
....................          delay_ms(200); 
29C4:  MOVLW  C8
29C6:  MOVWF  xD1
29C8:  CALL   07F8
....................          printf(lcd_putc,"\f"); 
29CC:  MOVLW  0C
29CE:  MOVWF  xCB
29D0:  CALL   0968
....................          lcd_gotoxy(1,2); 
29D4:  MOVLW  01
29D6:  MOVWF  xCC
29D8:  MOVLW  02
29DA:  MOVWF  xCD
29DC:  CALL   0906
....................          printf(lcd_putc,"Tiempo Almacenado"); 
29E0:  MOVLW  84
29E2:  MOVWF  FF6
29E4:  MOVLW  03
29E6:  MOVWF  FF7
29E8:  CALL   09C6
....................          lcd_gotoxy(1,3); 
29EC:  MOVLW  01
29EE:  MOVWF  xCC
29F0:  MOVLW  03
29F2:  MOVWF  xCD
29F4:  CALL   0906
....................          printf(lcd_putc,"  Correctamente  "); 
29F8:  MOVLW  96
29FA:  MOVWF  FF6
29FC:  MOVLW  03
29FE:  MOVWF  FF7
2A00:  CALL   09C6
....................          write_eeprom(5,tempo_minutos_pro); 
2A04:  MOVLW  05
2A06:  MOVWF  FA9
2A08:  MOVFF  29,FA8
2A0C:  BCF    FA6.6
2A0E:  BCF    FA6.7
2A10:  BSF    FA6.2
2A12:  MOVF   FF2,W
2A14:  MOVWF  00
2A16:  BCF    FF2.7
2A18:  MOVLB  F
2A1A:  MOVLW  55
2A1C:  MOVWF  FA7
2A1E:  MOVLW  AA
2A20:  MOVWF  FA7
2A22:  BSF    FA6.1
2A24:  BTFSC  FA6.1
2A26:  BRA    2A24
2A28:  BCF    FA6.2
2A2A:  MOVF   00,W
2A2C:  IORWF  FF2,F
....................          delay_ms(20); 
2A2E:  MOVLW  14
2A30:  MOVLB  0
2A32:  MOVWF  xD1
2A34:  CALL   07F8
....................          write_eeprom(6,tempo_segundos_pro); 
2A38:  MOVLW  06
2A3A:  MOVWF  FA9
2A3C:  MOVFF  2A,FA8
2A40:  BCF    FA6.6
2A42:  BCF    FA6.7
2A44:  BSF    FA6.2
2A46:  MOVF   FF2,W
2A48:  MOVWF  00
2A4A:  BCF    FF2.7
2A4C:  MOVLB  F
2A4E:  MOVLW  55
2A50:  MOVWF  FA7
2A52:  MOVLW  AA
2A54:  MOVWF  FA7
2A56:  BSF    FA6.1
2A58:  BTFSC  FA6.1
2A5A:  BRA    2A58
2A5C:  BCF    FA6.2
2A5E:  MOVF   00,W
2A60:  IORWF  FF2,F
....................          delay_ms(20); 
2A62:  MOVLW  14
2A64:  MOVLB  0
2A66:  MOVWF  xD1
2A68:  CALL   07F8
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2A6C:  MOVFF  29,27
2A70:  MOVFF  2A,28
....................          delay_ms(700); 
2A74:  MOVLW  04
2A76:  MOVWF  xBA
2A78:  MOVLW  AF
2A7A:  MOVWF  xD1
2A7C:  CALL   07F8
2A80:  DECFSZ xBA,F
2A82:  BRA    2A78
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2A84:  MOVLW  1E
2A86:  MOVWF  xD1
2A88:  CALL   07F8
2A8C:  MOVLW  01
2A8E:  MOVWF  18
2A90:  CLRF   31
2A92:  MOVLW  02
2A94:  MOVWF  1C
2A96:  MOVWF  1E
2A98:  MOVLW  0C
2A9A:  MOVWF  xCB
2A9C:  CALL   0968
....................          Cambio=ON; 
2AA0:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2AA2:  MOVF   18,W
2AA4:  SUBLW  03
2AA6:  BTFSS  FD8.2
2AA8:  BRA    2DF4
....................       EliminaRuido(); 
2AAA:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2AAE:  MOVLW  01
2AB0:  MOVWF  xCC
2AB2:  MOVWF  xCD
2AB4:  CALL   0906
....................          printf(lcd_putc,"     Ingrese        "); 
2AB8:  MOVLW  A8
2ABA:  MOVWF  FF6
2ABC:  MOVLW  03
2ABE:  MOVWF  FF7
2AC0:  CALL   09C6
....................          lcd_gotoxy(1,2); 
2AC4:  MOVLW  01
2AC6:  MOVWF  xCC
2AC8:  MOVLW  02
2ACA:  MOVWF  xCD
2ACC:  CALL   0906
....................          printf(lcd_putc,"    Contraseña      "); 
2AD0:  MOVLW  BE
2AD2:  MOVWF  FF6
2AD4:  MOVLW  03
2AD6:  MOVWF  FF7
2AD8:  CALL   09C6
....................          lcd_gotoxy(1,3); 
2ADC:  MOVLW  01
2ADE:  MOVWF  xCC
2AE0:  MOVLW  03
2AE2:  MOVWF  xCD
2AE4:  CALL   0906
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2AE8:  MOVLW  D4
2AEA:  MOVWF  FF6
2AEC:  MOVLW  03
2AEE:  MOVWF  FF7
2AF0:  MOVLW  0A
2AF2:  MOVWF  xBE
2AF4:  CALL   10CA
2AF8:  MOVFF  35,BA
2AFC:  MOVLW  1F
2AFE:  MOVWF  xBB
2B00:  CALL   1110
2B04:  MOVFF  36,BA
2B08:  MOVLW  1F
2B0A:  MOVWF  xBB
2B0C:  CALL   1110
2B10:  MOVFF  37,BA
2B14:  MOVLW  1F
2B16:  MOVWF  xBB
2B18:  CALL   1110
2B1C:  MOVFF  38,BA
2B20:  MOVLW  1F
2B22:  MOVWF  xBB
2B24:  CALL   1110
2B28:  MOVLW  20
2B2A:  MOVWF  xCB
2B2C:  CALL   0968
2B30:  MOVLW  20
2B32:  MOVWF  xCB
2B34:  CALL   0968
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2B38:  MOVFF  1B,CC
2B3C:  MOVLW  04
2B3E:  MOVWF  xCD
2B40:  CALL   0906
....................          lcd_putc(t[2]); 
2B44:  MOVFF  34,CB
2B48:  CALL   0968
....................           
....................          if(unidad>11&&unidad<14){ 
2B4C:  MOVF   1B,W
2B4E:  SUBLW  0B
2B50:  BC    2B70
2B52:  MOVF   1B,W
2B54:  SUBLW  0D
2B56:  BNC   2B70
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2B58:  MOVLW  01
2B5A:  SUBWF  1B,W
2B5C:  MOVWF  xBA
2B5E:  MOVWF  xCC
2B60:  MOVLW  04
2B62:  MOVWF  xCD
2B64:  CALL   0906
....................             lcd_putc(t[1]); 
2B68:  MOVFF  33,CB
2B6C:  CALL   0968
....................          } 
....................           
....................          Cambio=OFF; 
2B70:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2B72:  BSF    F92.5
2B74:  BTFSC  F80.5
2B76:  BRA    2BAA
....................          delay_ms(20); 
2B78:  MOVLW  14
2B7A:  MOVWF  xD1
2B7C:  CALL   07F8
....................          if(UP){ 
2B80:  BSF    F92.5
2B82:  BTFSC  F80.5
2B84:  BRA    2BA8
....................             if(Flanco == 0) { 
2B86:  BTFSC  16.3
2B88:  BRA    2BA8
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2B8A:  MOVLW  0B
2B8C:  SUBWF  1B,W
2B8E:  CLRF   03
2B90:  ADDLW  35
2B92:  MOVWF  FE9
2B94:  MOVLW  00
2B96:  ADDWFC 03,W
2B98:  MOVWF  FEA
2B9A:  INCF   FEF,F
2B9C:  BSF    16.3
2B9E:  MOVLW  1E
2BA0:  MOVWF  xD1
2BA2:  CALL   07F8
2BA6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2BA8:  BRA    2BAC
....................          Flanco = 0; 
2BAA:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2BAC:  BSF    F96.0
2BAE:  BTFSC  F84.0
2BB0:  BRA    2BE4
....................          delay_ms(20); 
2BB2:  MOVLW  14
2BB4:  MOVWF  xD1
2BB6:  CALL   07F8
....................          if(DOWN){ 
2BBA:  BSF    F96.0
2BBC:  BTFSC  F84.0
2BBE:  BRA    2BE2
....................             if(Flanco2 == 0) { 
2BC0:  BTFSC  16.5
2BC2:  BRA    2BE2
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2BC4:  MOVLW  0B
2BC6:  SUBWF  1B,W
2BC8:  CLRF   03
2BCA:  ADDLW  35
2BCC:  MOVWF  FE9
2BCE:  MOVLW  00
2BD0:  ADDWFC 03,W
2BD2:  MOVWF  FEA
2BD4:  DECF   FEF,F
2BD6:  BSF    16.5
2BD8:  MOVLW  1E
2BDA:  MOVWF  xD1
2BDC:  CALL   07F8
2BE0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2BE2:  BRA    2BE6
....................          Flanco2 = 0; 
2BE4:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2BE6:  BSF    F96.1
2BE8:  BTFSC  F84.1
2BEA:  BRA    2C16
....................          delay_ms(20); 
2BEC:  MOVLW  14
2BEE:  MOVWF  xD1
2BF0:  CALL   07F8
....................          if(RIGHT){ 
2BF4:  BSF    F96.1
2BF6:  BTFSC  F84.1
2BF8:  BRA    2C14
....................             if(Flanco1 == 0) { 
2BFA:  BTFSC  16.4
2BFC:  BRA    2C14
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2BFE:  BSF    16.4
2C00:  INCF   1B,F
2C02:  MOVLW  1E
2C04:  MOVWF  xD1
2C06:  CALL   07F8
2C0A:  MOVLW  0C
2C0C:  MOVWF  xCB
2C0E:  CALL   0968
2C12:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C14:  BRA    2C18
....................          Flanco1 = 0; 
2C16:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2C18:  BSF    F96.2
2C1A:  BTFSC  F84.2
2C1C:  BRA    2C48
....................          delay_ms(150); 
2C1E:  MOVLW  96
2C20:  MOVWF  xD1
2C22:  CALL   07F8
....................          if(IZQU){ 
2C26:  BSF    F96.2
2C28:  BTFSC  F84.2
2C2A:  BRA    2C46
....................             if(Flanco3 == 0){ 
2C2C:  BTFSC  16.6
2C2E:  BRA    2C46
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C30:  BSF    16.6
2C32:  DECF   1B,F
2C34:  MOVLW  1E
2C36:  MOVWF  xD1
2C38:  CALL   07F8
2C3C:  MOVLW  0C
2C3E:  MOVWF  xCB
2C40:  CALL   0968
2C44:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C46:  BRA    2C4A
....................         Flanco3 = 0; 
2C48:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2C4A:  MOVLW  0B
2C4C:  SUBWF  1B,W
2C4E:  CLRF   03
2C50:  ADDLW  35
2C52:  MOVWF  FE9
2C54:  MOVLW  00
2C56:  ADDWFC 03,W
2C58:  MOVWF  FEA
2C5A:  BTFSC  FEF.7
2C5C:  BRA    2C60
2C5E:  BRA    2C74
....................          clave[unidad-11]=9; 
2C60:  MOVLW  0B
2C62:  SUBWF  1B,W
2C64:  CLRF   03
2C66:  ADDLW  35
2C68:  MOVWF  FE9
2C6A:  MOVLW  00
2C6C:  ADDWFC 03,W
2C6E:  MOVWF  FEA
2C70:  MOVLW  09
2C72:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2C74:  MOVLW  0B
2C76:  SUBWF  1B,W
2C78:  CLRF   03
2C7A:  ADDLW  35
2C7C:  MOVWF  FE9
2C7E:  MOVLW  00
2C80:  ADDWFC 03,W
2C82:  MOVWF  FEA
2C84:  BTFSC  FEF.7
2C86:  BRA    2CA0
2C88:  MOVF   FEF,W
2C8A:  SUBLW  09
2C8C:  BC    2CA0
....................          clave[unidad-11]=0; 
2C8E:  MOVLW  0B
2C90:  SUBWF  1B,W
2C92:  CLRF   03
2C94:  ADDLW  35
2C96:  MOVWF  FE9
2C98:  MOVLW  00
2C9A:  ADDWFC 03,W
2C9C:  MOVWF  FEA
2C9E:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2CA0:  MOVF   1B,W
2CA2:  SUBLW  0A
2CA4:  BNC   2CC6
....................          unidad=11; 
2CA6:  MOVLW  0B
2CA8:  MOVWF  1B
....................          Menu=1; 
2CAA:  MOVLW  01
2CAC:  MOVWF  18
....................          paso=0; 
2CAE:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2CB0:  CLRF   35
2CB2:  CLRF   36
2CB4:  CLRF   37
2CB6:  CLRF   38
2CB8:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2CBA:  MOVLW  0B
2CBC:  MOVWF  1B
2CBE:  MOVLW  0C
2CC0:  MOVWF  xCB
2CC2:  CALL   0968
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2CC6:  MOVF   1B,W
2CC8:  SUBLW  0E
2CCA:  BTFSC  FD8.0
2CCC:  BRA    2DF4
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2CCE:  MOVF   39,W
2CD0:  SUBWF  35,W
2CD2:  BNZ   2D70
2CD4:  MOVF   3A,W
2CD6:  SUBWF  36,W
2CD8:  BNZ   2D70
2CDA:  MOVF   3B,W
2CDC:  SUBWF  37,W
2CDE:  BNZ   2D70
2CE0:  MOVF   3C,W
2CE2:  SUBWF  38,W
2CE4:  BNZ   2D70
....................             lcd_gotoxy(1,1); 
2CE6:  MOVLW  01
2CE8:  MOVWF  xCC
2CEA:  MOVWF  xCD
2CEC:  CALL   0906
....................             printf(lcd_putc,"                    "); 
2CF0:  MOVLW  EA
2CF2:  MOVWF  FF6
2CF4:  MOVLW  03
2CF6:  MOVWF  FF7
2CF8:  CALL   09C6
....................             lcd_gotoxy(1,2); 
2CFC:  MOVLW  01
2CFE:  MOVWF  xCC
2D00:  MOVLW  02
2D02:  MOVWF  xCD
2D04:  CALL   0906
....................             printf(lcd_putc,"     Contraseña     "); 
2D08:  MOVLW  00
2D0A:  MOVWF  FF6
2D0C:  MOVLW  04
2D0E:  MOVWF  FF7
2D10:  CALL   09C6
....................             lcd_gotoxy(1,3); 
2D14:  MOVLW  01
2D16:  MOVWF  xCC
2D18:  MOVLW  03
2D1A:  MOVWF  xCD
2D1C:  CALL   0906
....................             printf(lcd_putc,"      Correcta      "); 
2D20:  MOVLW  16
2D22:  MOVWF  FF6
2D24:  MOVLW  04
2D26:  MOVWF  FF7
2D28:  CALL   09C6
....................             lcd_gotoxy(1,4); 
2D2C:  MOVLW  01
2D2E:  MOVWF  xCC
2D30:  MOVLW  04
2D32:  MOVWF  xCD
2D34:  CALL   0906
....................             printf(lcd_putc,"                    "); 
2D38:  MOVLW  2C
2D3A:  MOVWF  FF6
2D3C:  MOVLW  04
2D3E:  MOVWF  FF7
2D40:  CALL   09C6
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2D44:  MOVLW  02
2D46:  MOVWF  xBA
2D48:  MOVLW  FA
2D4A:  MOVWF  xD1
2D4C:  CALL   07F8
2D50:  DECFSZ xBA,F
2D52:  BRA    2D48
2D54:  MOVLW  3D
2D56:  MOVWF  18
2D58:  MOVLW  0B
2D5A:  MOVWF  1B
2D5C:  MOVLW  0C
2D5E:  MOVWF  xCB
2D60:  CALL   0968
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2D64:  CLRF   35
2D66:  CLRF   36
2D68:  CLRF   37
2D6A:  CLRF   38
2D6C:  BSF    17.5
....................          }else{ 
2D6E:  BRA    2DF4
....................             lcd_gotoxy(1,1); 
2D70:  MOVLW  01
2D72:  MOVWF  xCC
2D74:  MOVWF  xCD
2D76:  CALL   0906
....................             printf(lcd_putc,"                    "); 
2D7A:  MOVLW  42
2D7C:  MOVWF  FF6
2D7E:  MOVLW  04
2D80:  MOVWF  FF7
2D82:  CALL   09C6
....................             lcd_gotoxy(1,2); 
2D86:  MOVLW  01
2D88:  MOVWF  xCC
2D8A:  MOVLW  02
2D8C:  MOVWF  xCD
2D8E:  CALL   0906
....................             printf(lcd_putc,"     Contraseña     "); 
2D92:  MOVLW  58
2D94:  MOVWF  FF6
2D96:  MOVLW  04
2D98:  MOVWF  FF7
2D9A:  CALL   09C6
....................             lcd_gotoxy(1,3); 
2D9E:  MOVLW  01
2DA0:  MOVWF  xCC
2DA2:  MOVLW  03
2DA4:  MOVWF  xCD
2DA6:  CALL   0906
....................             printf(lcd_putc,"     Incorrecta     "); 
2DAA:  MOVLW  6E
2DAC:  MOVWF  FF6
2DAE:  MOVLW  04
2DB0:  MOVWF  FF7
2DB2:  CALL   09C6
....................             lcd_gotoxy(1,4); 
2DB6:  MOVLW  01
2DB8:  MOVWF  xCC
2DBA:  MOVLW  04
2DBC:  MOVWF  xCD
2DBE:  CALL   0906
....................             printf(lcd_putc,"                    "); 
2DC2:  MOVLW  84
2DC4:  MOVWF  FF6
2DC6:  MOVLW  04
2DC8:  MOVWF  FF7
2DCA:  CALL   09C6
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2DCE:  MOVLW  02
2DD0:  MOVWF  xBA
2DD2:  MOVLW  FA
2DD4:  MOVWF  xD1
2DD6:  CALL   07F8
2DDA:  DECFSZ xBA,F
2DDC:  BRA    2DD2
2DDE:  MOVLW  0B
2DE0:  MOVWF  1B
2DE2:  MOVLW  0C
2DE4:  MOVWF  xCB
2DE6:  CALL   0968
2DEA:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2DEC:  CLRF   35
2DEE:  CLRF   36
2DF0:  CLRF   37
2DF2:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2DF4:  MOVF   18,W
2DF6:  SUBLW  3D
2DF8:  BTFSS  FD8.2
2DFA:  BRA    3184
....................       EliminaRuido(); 
2DFC:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2E00:  MOVLW  01
2E02:  MOVWF  xCC
2E04:  MOVWF  xCD
2E06:  CALL   0906
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
2E0A:  MOVLW  9A
2E0C:  MOVWF  FF6
2E0E:  MOVLW  04
2E10:  MOVWF  FF7
2E12:  CALL   09C6
....................          lcd_gotoxy(1,2); 
2E16:  MOVLW  01
2E18:  MOVWF  xCC
2E1A:  MOVLW  02
2E1C:  MOVWF  xCD
2E1E:  CALL   0906
....................          printf(lcd_putc,"     Contraseña     "); 
2E22:  MOVLW  B0
2E24:  MOVWF  FF6
2E26:  MOVLW  04
2E28:  MOVWF  FF7
2E2A:  CALL   09C6
....................          lcd_gotoxy(1,3); 
2E2E:  MOVLW  01
2E30:  MOVWF  xCC
2E32:  MOVLW  03
2E34:  MOVWF  xCD
2E36:  CALL   0906
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2E3A:  MOVLW  C6
2E3C:  MOVWF  FF6
2E3E:  MOVLW  04
2E40:  MOVWF  FF7
2E42:  MOVLW  0A
2E44:  MOVWF  xBE
2E46:  CALL   10CA
2E4A:  MOVFF  35,BA
2E4E:  MOVLW  1F
2E50:  MOVWF  xBB
2E52:  CALL   1110
2E56:  MOVFF  36,BA
2E5A:  MOVLW  1F
2E5C:  MOVWF  xBB
2E5E:  CALL   1110
2E62:  MOVFF  37,BA
2E66:  MOVLW  1F
2E68:  MOVWF  xBB
2E6A:  CALL   1110
2E6E:  MOVFF  38,BA
2E72:  MOVLW  1F
2E74:  MOVWF  xBB
2E76:  CALL   1110
2E7A:  MOVLW  20
2E7C:  MOVWF  xCB
2E7E:  CALL   0968
2E82:  MOVLW  20
2E84:  MOVWF  xCB
2E86:  CALL   0968
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2E8A:  MOVFF  1B,CC
2E8E:  MOVLW  04
2E90:  MOVWF  xCD
2E92:  CALL   0906
....................          lcd_putc(t[2]); 
2E96:  MOVFF  34,CB
2E9A:  CALL   0968
....................           
....................          if(unidad>11&&unidad<14){ 
2E9E:  MOVF   1B,W
2EA0:  SUBLW  0B
2EA2:  BC    2EC2
2EA4:  MOVF   1B,W
2EA6:  SUBLW  0D
2EA8:  BNC   2EC2
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2EAA:  MOVLW  01
2EAC:  SUBWF  1B,W
2EAE:  MOVWF  xBA
2EB0:  MOVWF  xCC
2EB2:  MOVLW  04
2EB4:  MOVWF  xCD
2EB6:  CALL   0906
....................             lcd_putc(t[1]); 
2EBA:  MOVFF  33,CB
2EBE:  CALL   0968
....................          } 
....................           
....................          Cambio=OFF; 
2EC2:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2EC4:  BSF    F92.5
2EC6:  BTFSC  F80.5
2EC8:  BRA    2EFC
....................          delay_ms(20); 
2ECA:  MOVLW  14
2ECC:  MOVWF  xD1
2ECE:  CALL   07F8
....................          if(UP){ 
2ED2:  BSF    F92.5
2ED4:  BTFSC  F80.5
2ED6:  BRA    2EFA
....................             if(Flanco == 0) { 
2ED8:  BTFSC  16.3
2EDA:  BRA    2EFA
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2EDC:  MOVLW  0B
2EDE:  SUBWF  1B,W
2EE0:  CLRF   03
2EE2:  ADDLW  35
2EE4:  MOVWF  FE9
2EE6:  MOVLW  00
2EE8:  ADDWFC 03,W
2EEA:  MOVWF  FEA
2EEC:  INCF   FEF,F
2EEE:  BSF    16.3
2EF0:  MOVLW  1E
2EF2:  MOVWF  xD1
2EF4:  CALL   07F8
2EF8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2EFA:  BRA    2EFE
....................          Flanco = 0; 
2EFC:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2EFE:  BSF    F96.0
2F00:  BTFSC  F84.0
2F02:  BRA    2F36
....................          delay_ms(20); 
2F04:  MOVLW  14
2F06:  MOVWF  xD1
2F08:  CALL   07F8
....................          if(DOWN){ 
2F0C:  BSF    F96.0
2F0E:  BTFSC  F84.0
2F10:  BRA    2F34
....................             if(Flanco2 == 0) { 
2F12:  BTFSC  16.5
2F14:  BRA    2F34
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2F16:  MOVLW  0B
2F18:  SUBWF  1B,W
2F1A:  CLRF   03
2F1C:  ADDLW  35
2F1E:  MOVWF  FE9
2F20:  MOVLW  00
2F22:  ADDWFC 03,W
2F24:  MOVWF  FEA
2F26:  DECF   FEF,F
2F28:  BSF    16.5
2F2A:  MOVLW  1E
2F2C:  MOVWF  xD1
2F2E:  CALL   07F8
2F32:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F34:  BRA    2F38
....................          Flanco2 = 0; 
2F36:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2F38:  BSF    F96.1
2F3A:  BTFSC  F84.1
2F3C:  BRA    2F60
....................          if(RIGHT){ 
2F3E:  BSF    F96.1
2F40:  BTFSC  F84.1
2F42:  BRA    2F5E
....................             if(Flanco1 == 0) { 
2F44:  BTFSC  16.4
2F46:  BRA    2F5E
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F48:  BSF    16.4
2F4A:  INCF   1B,F
2F4C:  MOVLW  1E
2F4E:  MOVWF  xD1
2F50:  CALL   07F8
2F54:  MOVLW  0C
2F56:  MOVWF  xCB
2F58:  CALL   0968
2F5C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F5E:  BRA    2F62
....................          Flanco1 = 0; 
2F60:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2F62:  BSF    F96.2
2F64:  BTFSC  F84.2
2F66:  BRA    2F92
....................          delay_ms(150); 
2F68:  MOVLW  96
2F6A:  MOVWF  xD1
2F6C:  CALL   07F8
....................          if(IZQU){ 
2F70:  BSF    F96.2
2F72:  BTFSC  F84.2
2F74:  BRA    2F90
....................             if(Flanco3 == 0){ 
2F76:  BTFSC  16.6
2F78:  BRA    2F90
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F7A:  BSF    16.6
2F7C:  DECF   1B,F
2F7E:  MOVLW  1E
2F80:  MOVWF  xD1
2F82:  CALL   07F8
2F86:  MOVLW  0C
2F88:  MOVWF  xCB
2F8A:  CALL   0968
2F8E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F90:  BRA    2F94
....................         Flanco3 = 0; 
2F92:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2F94:  MOVLW  0B
2F96:  SUBWF  1B,W
2F98:  CLRF   03
2F9A:  ADDLW  35
2F9C:  MOVWF  FE9
2F9E:  MOVLW  00
2FA0:  ADDWFC 03,W
2FA2:  MOVWF  FEA
2FA4:  BTFSC  FEF.7
2FA6:  BRA    2FAA
2FA8:  BRA    2FBE
....................          clave[unidad-11]=9; 
2FAA:  MOVLW  0B
2FAC:  SUBWF  1B,W
2FAE:  CLRF   03
2FB0:  ADDLW  35
2FB2:  MOVWF  FE9
2FB4:  MOVLW  00
2FB6:  ADDWFC 03,W
2FB8:  MOVWF  FEA
2FBA:  MOVLW  09
2FBC:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2FBE:  MOVLW  0B
2FC0:  SUBWF  1B,W
2FC2:  CLRF   03
2FC4:  ADDLW  35
2FC6:  MOVWF  FE9
2FC8:  MOVLW  00
2FCA:  ADDWFC 03,W
2FCC:  MOVWF  FEA
2FCE:  BTFSC  FEF.7
2FD0:  BRA    2FEA
2FD2:  MOVF   FEF,W
2FD4:  SUBLW  09
2FD6:  BC    2FEA
....................          clave[unidad-11]=0; 
2FD8:  MOVLW  0B
2FDA:  SUBWF  1B,W
2FDC:  CLRF   03
2FDE:  ADDLW  35
2FE0:  MOVWF  FE9
2FE2:  MOVLW  00
2FE4:  ADDWFC 03,W
2FE6:  MOVWF  FEA
2FE8:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2FEA:  MOVF   1B,W
2FEC:  SUBLW  0A
2FEE:  BNC   300E
....................          unidad=11; 
2FF0:  MOVLW  0B
2FF2:  MOVWF  1B
....................          Menu=1; 
2FF4:  MOVLW  01
2FF6:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2FF8:  CLRF   35
2FFA:  CLRF   36
2FFC:  CLRF   37
2FFE:  CLRF   38
3000:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
3002:  MOVLW  0B
3004:  MOVWF  1B
3006:  MOVLW  0C
3008:  MOVWF  xCB
300A:  CALL   0968
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
300E:  MOVF   1B,W
3010:  SUBLW  0E
3012:  BTFSC  FD8.0
3014:  BRA    3184
....................          lcd_gotoxy(1,1); 
3016:  MOVLW  01
3018:  MOVWF  xCC
301A:  MOVWF  xCD
301C:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3020:  MOVLW  DC
3022:  MOVWF  FF6
3024:  MOVLW  04
3026:  MOVWF  FF7
3028:  CALL   09C6
....................          lcd_gotoxy(1,2); 
302C:  MOVLW  01
302E:  MOVWF  xCC
3030:  MOVLW  02
3032:  MOVWF  xCD
3034:  CALL   0906
....................          printf(lcd_putc,"     Contraseña     "); 
3038:  MOVLW  F2
303A:  MOVWF  FF6
303C:  MOVLW  04
303E:  MOVWF  FF7
3040:  CALL   09C6
....................          lcd_gotoxy(1,3); 
3044:  MOVLW  01
3046:  MOVWF  xCC
3048:  MOVLW  03
304A:  MOVWF  xCD
304C:  CALL   0906
....................          printf(lcd_putc,"     Almacenada     "); 
3050:  MOVLW  08
3052:  MOVWF  FF6
3054:  MOVLW  05
3056:  MOVWF  FF7
3058:  CALL   09C6
....................          lcd_gotoxy(1,4); 
305C:  MOVLW  01
305E:  MOVWF  xCC
3060:  MOVLW  04
3062:  MOVWF  xCD
3064:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3068:  MOVLW  1E
306A:  MOVWF  FF6
306C:  MOVLW  05
306E:  MOVWF  FF7
3070:  CALL   09C6
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3074:  CLRF   FA9
3076:  MOVFF  35,FA8
307A:  BCF    FA6.6
307C:  BCF    FA6.7
307E:  BSF    FA6.2
3080:  MOVF   FF2,W
3082:  MOVWF  00
3084:  BCF    FF2.7
3086:  MOVLB  F
3088:  MOVLW  55
308A:  MOVWF  FA7
308C:  MOVLW  AA
308E:  MOVWF  FA7
3090:  BSF    FA6.1
3092:  BTFSC  FA6.1
3094:  BRA    3092
3096:  BCF    FA6.2
3098:  MOVF   00,W
309A:  IORWF  FF2,F
309C:  MOVLW  14
309E:  MOVLB  0
30A0:  MOVWF  xD1
30A2:  CALL   07F8
30A6:  MOVLW  01
30A8:  MOVWF  FA9
30AA:  MOVFF  36,FA8
30AE:  BCF    FA6.6
30B0:  BCF    FA6.7
30B2:  BSF    FA6.2
30B4:  MOVF   FF2,W
30B6:  MOVWF  00
30B8:  BCF    FF2.7
30BA:  MOVLB  F
30BC:  MOVLW  55
30BE:  MOVWF  FA7
30C0:  MOVLW  AA
30C2:  MOVWF  FA7
30C4:  BSF    FA6.1
30C6:  BTFSC  FA6.1
30C8:  BRA    30C6
30CA:  BCF    FA6.2
30CC:  MOVF   00,W
30CE:  IORWF  FF2,F
30D0:  MOVLW  14
30D2:  MOVLB  0
30D4:  MOVWF  xD1
30D6:  CALL   07F8
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
30DA:  MOVLW  02
30DC:  MOVWF  FA9
30DE:  MOVFF  37,FA8
30E2:  BCF    FA6.6
30E4:  BCF    FA6.7
30E6:  BSF    FA6.2
30E8:  MOVF   FF2,W
30EA:  MOVWF  00
30EC:  BCF    FF2.7
30EE:  MOVLB  F
30F0:  MOVLW  55
30F2:  MOVWF  FA7
30F4:  MOVLW  AA
30F6:  MOVWF  FA7
30F8:  BSF    FA6.1
30FA:  BTFSC  FA6.1
30FC:  BRA    30FA
30FE:  BCF    FA6.2
3100:  MOVF   00,W
3102:  IORWF  FF2,F
3104:  MOVLW  14
3106:  MOVLB  0
3108:  MOVWF  xD1
310A:  CALL   07F8
310E:  MOVLW  03
3110:  MOVWF  FA9
3112:  MOVFF  38,FA8
3116:  BCF    FA6.6
3118:  BCF    FA6.7
311A:  BSF    FA6.2
311C:  MOVF   FF2,W
311E:  MOVWF  00
3120:  BCF    FF2.7
3122:  MOVLB  F
3124:  MOVLW  55
3126:  MOVWF  FA7
3128:  MOVLW  AA
312A:  MOVWF  FA7
312C:  BSF    FA6.1
312E:  BTFSC  FA6.1
3130:  BRA    312E
3132:  BCF    FA6.2
3134:  MOVF   00,W
3136:  IORWF  FF2,F
3138:  MOVLW  14
313A:  MOVLB  0
313C:  MOVWF  xD1
313E:  CALL   07F8
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3142:  MOVLW  02
3144:  MOVWF  xBA
3146:  MOVLW  FA
3148:  MOVWF  xD1
314A:  CALL   07F8
314E:  DECFSZ xBA,F
3150:  BRA    3146
3152:  MOVLW  01
3154:  MOVWF  18
3156:  CLRF   31
3158:  MOVLW  02
315A:  MOVWF  1C
315C:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
315E:  MOVFF  35,39
3162:  MOVFF  36,3A
3166:  MOVFF  37,3B
316A:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
316E:  CLRF   35
3170:  CLRF   36
3172:  CLRF   37
3174:  CLRF   38
3176:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
3178:  MOVLW  0B
317A:  MOVWF  1B
317C:  MOVLW  0C
317E:  MOVWF  xCB
3180:  CALL   0968
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3184:  MOVF   18,W
3186:  SUBLW  04
3188:  BTFSS  FD8.2
318A:  BRA    339E
....................    EliminaRuido(); 
318C:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3190:  MOVLW  01
3192:  MOVWF  xCC
3194:  MOVWF  xCD
3196:  CALL   0906
....................       printf(lcd_putc,"  Duracion Actual   "); 
319A:  MOVLW  34
319C:  MOVWF  FF6
319E:  MOVLW  05
31A0:  MOVWF  FF7
31A2:  CALL   09C6
....................       lcd_gotoxy(1,2); 
31A6:  MOVLW  01
31A8:  MOVWF  xCC
31AA:  MOVLW  02
31AC:  MOVWF  xCD
31AE:  CALL   0906
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
31B2:  MOVLW  4A
31B4:  MOVWF  FF6
31B6:  MOVLW  05
31B8:  MOVWF  FF7
31BA:  MOVLW  0B
31BC:  MOVWF  xBE
31BE:  CALL   10CA
31C2:  MOVLW  08
31C4:  MOVWF  FE9
31C6:  MOVFF  41,BB
31CA:  MOVFF  40,BA
31CE:  GOTO   1320
31D2:  MOVLW  20
31D4:  MOVWF  xCB
31D6:  CALL   0968
31DA:  MOVLW  20
31DC:  MOVWF  xCB
31DE:  CALL   0968
31E2:  MOVLW  20
31E4:  MOVWF  xCB
31E6:  CALL   0968
....................       lcd_gotoxy(1,4); 
31EA:  MOVLW  01
31EC:  MOVWF  xCC
31EE:  MOVLW  04
31F0:  MOVWF  xCD
31F2:  CALL   0906
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
31F6:  MOVLW  5E
31F8:  MOVWF  FF6
31FA:  MOVLW  05
31FC:  MOVWF  FF7
31FE:  CALL   09C6
....................        
....................       Cambio=OFF; 
3202:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3204:  BSF    F92.5
3206:  BTFSC  F80.5
3208:  BRA    335A
320A:  BSF    F96.1
320C:  BTFSC  F84.1
320E:  BRA    335A
....................          delay_ms(20); 
3210:  MOVLW  14
3212:  MOVWF  xD1
3214:  CALL   07F8
....................          if(UP && RIGHT){ 
3218:  BSF    F92.5
321A:  BTFSC  F80.5
321C:  BRA    335A
321E:  BSF    F96.1
3220:  BTFSC  F84.1
3222:  BRA    335A
....................             delay_ms(200); 
3224:  MOVLW  C8
3226:  MOVWF  xD1
3228:  CALL   07F8
....................             printf(lcd_putc,"\f"); 
322C:  MOVLW  0C
322E:  MOVWF  xCB
3230:  CALL   0968
....................             lcd_gotoxy(1,2); 
3234:  MOVLW  01
3236:  MOVWF  xCC
3238:  MOVLW  02
323A:  MOVWF  xCD
323C:  CALL   0906
....................             printf(lcd_putc," Reset de tiempo "); 
3240:  MOVLW  74
3242:  MOVWF  FF6
3244:  MOVLW  05
3246:  MOVWF  FF7
3248:  CALL   09C6
....................             lcd_gotoxy(1,3); 
324C:  MOVLW  01
324E:  MOVWF  xCC
3250:  MOVLW  03
3252:  MOVWF  xCD
3254:  CALL   0906
....................             printf(lcd_putc,"     Exitoso     "); 
3258:  MOVLW  86
325A:  MOVWF  FF6
325C:  MOVLW  05
325E:  MOVWF  FF7
3260:  CALL   09C6
....................             write_eeprom(7,0); 
3264:  MOVLW  07
3266:  MOVWF  FA9
3268:  CLRF   FA8
326A:  BCF    FA6.6
326C:  BCF    FA6.7
326E:  BSF    FA6.2
3270:  MOVF   FF2,W
3272:  MOVWF  00
3274:  BCF    FF2.7
3276:  MOVLB  F
3278:  MOVLW  55
327A:  MOVWF  FA7
327C:  MOVLW  AA
327E:  MOVWF  FA7
3280:  BSF    FA6.1
3282:  BTFSC  FA6.1
3284:  BRA    3282
3286:  BCF    FA6.2
3288:  MOVF   00,W
328A:  IORWF  FF2,F
....................             delay_ms(20); 
328C:  MOVLW  14
328E:  MOVLB  0
3290:  MOVWF  xD1
3292:  CALL   07F8
....................             write_eeprom(8,0); 
3296:  MOVLW  08
3298:  MOVWF  FA9
329A:  CLRF   FA8
329C:  BCF    FA6.6
329E:  BCF    FA6.7
32A0:  BSF    FA6.2
32A2:  MOVF   FF2,W
32A4:  MOVWF  00
32A6:  BCF    FF2.7
32A8:  MOVLB  F
32AA:  MOVLW  55
32AC:  MOVWF  FA7
32AE:  MOVLW  AA
32B0:  MOVWF  FA7
32B2:  BSF    FA6.1
32B4:  BTFSC  FA6.1
32B6:  BRA    32B4
32B8:  BCF    FA6.2
32BA:  MOVF   00,W
32BC:  IORWF  FF2,F
....................             delay_ms(20); 
32BE:  MOVLW  14
32C0:  MOVLB  0
32C2:  MOVWF  xD1
32C4:  CALL   07F8
....................             write_eeprom(9,0); 
32C8:  MOVLW  09
32CA:  MOVWF  FA9
32CC:  CLRF   FA8
32CE:  BCF    FA6.6
32D0:  BCF    FA6.7
32D2:  BSF    FA6.2
32D4:  MOVF   FF2,W
32D6:  MOVWF  00
32D8:  BCF    FF2.7
32DA:  MOVLB  F
32DC:  MOVLW  55
32DE:  MOVWF  FA7
32E0:  MOVLW  AA
32E2:  MOVWF  FA7
32E4:  BSF    FA6.1
32E6:  BTFSC  FA6.1
32E8:  BRA    32E6
32EA:  BCF    FA6.2
32EC:  MOVF   00,W
32EE:  IORWF  FF2,F
....................             delay_ms(20); 
32F0:  MOVLW  14
32F2:  MOVLB  0
32F4:  MOVWF  xD1
32F6:  CALL   07F8
....................             write_eeprom(10,0); 
32FA:  MOVLW  0A
32FC:  MOVWF  FA9
32FE:  CLRF   FA8
3300:  BCF    FA6.6
3302:  BCF    FA6.7
3304:  BSF    FA6.2
3306:  MOVF   FF2,W
3308:  MOVWF  00
330A:  BCF    FF2.7
330C:  MOVLB  F
330E:  MOVLW  55
3310:  MOVWF  FA7
3312:  MOVLW  AA
3314:  MOVWF  FA7
3316:  BSF    FA6.1
3318:  BTFSC  FA6.1
331A:  BRA    3318
331C:  BCF    FA6.2
331E:  MOVF   00,W
3320:  IORWF  FF2,F
....................             delay_ms(700); 
3322:  MOVLW  04
3324:  MOVLB  0
3326:  MOVWF  xBA
3328:  MOVLW  AF
332A:  MOVWF  xD1
332C:  CALL   07F8
3330:  DECFSZ xBA,F
3332:  BRA    3328
....................             segundos=0;minutos=0;horas=0; 
3334:  CLRF   21
3336:  CLRF   22
3338:  CLRF   41
333A:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
333C:  MOVLW  1E
333E:  MOVWF  xD1
3340:  CALL   07F8
3344:  MOVLW  01
3346:  MOVWF  18
3348:  CLRF   31
334A:  MOVLW  02
334C:  MOVWF  1C
334E:  MOVWF  1E
3350:  MOVLW  0C
3352:  MOVWF  xCB
3354:  CALL   0968
....................             Cambio=ON; 
3358:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
335A:  BSF    F96.2
335C:  BTFSC  F84.2
335E:  BRA    339C
....................          delay_ms(20); 
3360:  MOVLW  14
3362:  MOVWF  xD1
3364:  CALL   07F8
....................          if(IZQU){ 
3368:  BSF    F96.2
336A:  BTFSC  F84.2
336C:  BRA    339A
....................             if(Flanco3 == 0){ 
336E:  BTFSC  16.6
3370:  BRA    339A
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3372:  BSF    16.6
3374:  MOVLW  02
3376:  MOVWF  xBA
3378:  MOVLW  FA
337A:  MOVWF  xD1
337C:  CALL   07F8
3380:  DECFSZ xBA,F
3382:  BRA    3378
3384:  MOVLW  01
3386:  MOVWF  18
3388:  CLRF   31
338A:  MOVLW  02
338C:  MOVWF  1C
338E:  MOVWF  1E
3390:  MOVLW  0C
3392:  MOVWF  xCB
3394:  CALL   0968
3398:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
339A:  BRA    339E
....................          Flanco3 = 0; 
339C:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
339E:  MOVF   18,W
33A0:  SUBLW  05
33A2:  BTFSS  FD8.2
33A4:  BRA    35FA
....................       EliminaRuido(); 
33A6:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
33AA:  MOVLW  01
33AC:  MOVWF  xCC
33AE:  MOVWF  xCD
33B0:  CALL   0906
....................          printf(lcd_putc,"  Zero Point Config "); 
33B4:  MOVLW  98
33B6:  MOVWF  FF6
33B8:  MOVLW  05
33BA:  MOVWF  FF7
33BC:  CALL   09C6
....................          lcd_gotoxy(1,2); 
33C0:  MOVLW  01
33C2:  MOVWF  xCC
33C4:  MOVLW  02
33C6:  MOVWF  xCD
33C8:  CALL   0906
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
33CC:  MOVLW  05
33CE:  MOVWF  xBA
33D0:  CALL   17F0
33D4:  MOVFF  00,BA
33D8:  MOVFF  01,BB
33DC:  MOVFF  02,BC
33E0:  MOVFF  03,BD
33E4:  MOVFF  03,D1
33E8:  MOVFF  02,D0
33EC:  MOVFF  01,CF
33F0:  MOVFF  00,CE
33F4:  MOVLW  D7
33F6:  MOVWF  xD5
33F8:  MOVLW  A3
33FA:  MOVWF  xD4
33FC:  CLRF   xD3
33FE:  MOVLW  81
3400:  MOVWF  xD2
3402:  CALL   1986
3406:  MOVFF  00,BA
340A:  MOVFF  01,BB
340E:  MOVFF  02,BC
3412:  MOVFF  03,BD
3416:  MOVLW  AE
3418:  MOVWF  FF6
341A:  MOVLW  05
341C:  MOVWF  FF7
341E:  MOVLW  09
3420:  MOVWF  xBE
3422:  CALL   10CA
3426:  MOVLW  02
3428:  MOVWF  FE9
342A:  MOVFF  BD,C1
342E:  MOVFF  BC,C0
3432:  MOVFF  BB,BF
3436:  MOVFF  BA,BE
343A:  MOVWF  xC2
343C:  CALL   1B32
3440:  MOVLW  BC
3442:  MOVWF  FF6
3444:  MOVLW  05
3446:  MOVWF  FF7
3448:  MOVLW  07
344A:  MOVWF  xBE
344C:  CALL   10CA
....................          lcd_gotoxy(1,3); 
3450:  MOVLW  01
3452:  MOVWF  xCC
3454:  MOVLW  03
3456:  MOVWF  xCD
3458:  CALL   0906
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
345C:  CLRF   xBF
345E:  CALL   13D6
3462:  MOVFF  00,BA
3466:  MOVFF  01,BB
346A:  MOVFF  02,BC
346E:  MOVFF  03,BD
3472:  MOVLW  C4
3474:  MOVWF  FF6
3476:  MOVLW  05
3478:  MOVWF  FF7
347A:  MOVLW  08
347C:  MOVWF  xBE
347E:  CALL   10CA
3482:  MOVLW  01
3484:  MOVWF  FE9
3486:  MOVFF  BD,C1
348A:  MOVFF  BC,C0
348E:  MOVFF  BB,BF
3492:  MOVFF  BA,BE
3496:  CLRF   xC2
3498:  CALL   1B32
....................          lcd_gotoxy(1,4); 
349C:  MOVLW  01
349E:  MOVWF  xCC
34A0:  MOVLW  04
34A2:  MOVWF  xCD
34A4:  CALL   0906
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
34A8:  MOVLW  D2
34AA:  MOVWF  FF6
34AC:  MOVLW  05
34AE:  MOVWF  FF7
34B0:  MOVLW  07
34B2:  MOVWF  xBE
34B4:  CALL   10CA
34B8:  MOVLW  01
34BA:  MOVWF  FE9
34BC:  MOVFF  A7,C1
34C0:  MOVFF  A6,C0
34C4:  MOVFF  A5,BF
34C8:  MOVFF  A4,BE
34CC:  CLRF   xC2
34CE:  CALL   1B32
....................           
....................          Cambio=OFF; 
34D2:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
34D4:  BSF    F96.1
34D6:  BTFSC  F84.1
34D8:  BRA    35BA
....................          delay_ms(20); 
34DA:  MOVLW  14
34DC:  MOVWF  xD1
34DE:  CALL   07F8
....................          if(RIGHT){ 
34E2:  BSF    F96.1
34E4:  BTFSC  F84.1
34E6:  BRA    35B8
....................             if(Flanco1 == 0){ 
34E8:  BTFSC  16.4
34EA:  BRA    35B8
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
34EC:  MOVLW  01
34EE:  MOVWF  18
34F0:  CLRF   31
34F2:  MOVLW  02
34F4:  MOVWF  1C
34F6:  MOVWF  1E
34F8:  MOVLW  0B
34FA:  MOVWF  1B
34FC:  MOVLW  02
34FE:  MOVWF  xBA
3500:  MOVLW  FA
3502:  MOVWF  xD1
3504:  CALL   07F8
3508:  DECFSZ xBA,F
350A:  BRA    3500
350C:  MOVLW  0C
350E:  MOVWF  xCB
3510:  CALL   0968
....................                G=sensores(0); 
3514:  CLRF   xBF
3516:  CALL   13D6
351A:  MOVFF  03,A7
351E:  MOVFF  02,A6
3522:  MOVFF  01,A5
3526:  MOVFF  00,A4
....................                G16=(int16)G; 
352A:  MOVFF  A7,D1
352E:  MOVFF  A6,D0
3532:  MOVFF  A5,CF
3536:  MOVFF  A4,CE
353A:  CALL   1CB8
353E:  MOVFF  02,43
3542:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
3546:  MOVFF  42,25
354A:  MOVFF  43,26
....................                 
....................                write_eeprom(11,G_l); 
354E:  MOVLW  0B
3550:  MOVWF  FA9
3552:  MOVFF  25,FA8
3556:  BCF    FA6.6
3558:  BCF    FA6.7
355A:  BSF    FA6.2
355C:  MOVF   FF2,W
355E:  MOVWF  00
3560:  BCF    FF2.7
3562:  MOVLB  F
3564:  MOVLW  55
3566:  MOVWF  FA7
3568:  MOVLW  AA
356A:  MOVWF  FA7
356C:  BSF    FA6.1
356E:  BTFSC  FA6.1
3570:  BRA    356E
3572:  BCF    FA6.2
3574:  MOVF   00,W
3576:  IORWF  FF2,F
....................                delay_ms(20); 
3578:  MOVLW  14
357A:  MOVLB  0
357C:  MOVWF  xD1
357E:  CALL   07F8
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3582:  MOVLW  0C
3584:  MOVWF  FA9
3586:  MOVFF  26,FA8
358A:  BCF    FA6.6
358C:  BCF    FA6.7
358E:  BSF    FA6.2
3590:  MOVF   FF2,W
3592:  MOVWF  00
3594:  BCF    FF2.7
3596:  MOVLB  F
3598:  MOVLW  55
359A:  MOVWF  FA7
359C:  MOVLW  AA
359E:  MOVWF  FA7
35A0:  BSF    FA6.1
35A2:  BTFSC  FA6.1
35A4:  BRA    35A2
35A6:  BCF    FA6.2
35A8:  MOVF   00,W
35AA:  IORWF  FF2,F
....................                delay_ms(20); 
35AC:  MOVLW  14
35AE:  MOVLB  0
35B0:  MOVWF  xD1
35B2:  CALL   07F8
....................                Cambio=ON; 
35B6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
35B8:  BRA    35BC
....................          Flanco1 = 0; 
35BA:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
35BC:  BSF    F96.2
35BE:  BTFSC  F84.2
35C0:  BRA    35F8
....................          delay_ms(20); 
35C2:  MOVLW  14
35C4:  MOVWF  xD1
35C6:  CALL   07F8
....................          if(IZQU){ 
35CA:  BSF    F96.2
35CC:  BTFSC  F84.2
35CE:  BRA    35F6
....................             if(Flanco3 == 0){ 
35D0:  BTFSC  16.6
35D2:  BRA    35F6
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
35D4:  MOVLW  01
35D6:  MOVWF  18
35D8:  CLRF   31
35DA:  MOVLW  02
35DC:  MOVWF  1C
35DE:  MOVWF  1E
35E0:  MOVLW  0B
35E2:  MOVWF  1B
35E4:  MOVLW  1E
35E6:  MOVWF  xD1
35E8:  CALL   07F8
35EC:  MOVLW  0C
35EE:  MOVWF  xCB
35F0:  CALL   0968
....................                Cambio=ON; 
35F4:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
35F6:  BRA    35FA
....................          Flanco3 = 0; 
35F8:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
35FA:  MOVF   18,W
35FC:  SUBLW  06
35FE:  BTFSS  FD8.2
3600:  BRA    3728
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3602:  BTG    17.4
3604:  BSF    16.4
3606:  MOVLW  01
3608:  MOVWF  18
360A:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
360C:  BTFSS  17.4
360E:  BRA    3670
....................             {estadoalarma=1; 
3610:  BSF    17.4
....................                lcd_gotoxy(1,1); 
3612:  MOVLW  01
3614:  MOVWF  xCC
3616:  MOVWF  xCD
3618:  CALL   0906
....................                printf(lcd_putc,"                    "); 
361C:  MOVLW  E0
361E:  MOVWF  FF6
3620:  MOVLW  05
3622:  MOVWF  FF7
3624:  CALL   09C6
....................                lcd_gotoxy(1,2); 
3628:  MOVLW  01
362A:  MOVWF  xCC
362C:  MOVLW  02
362E:  MOVWF  xCD
3630:  CALL   0906
....................                printf(lcd_putc,"        Activo      "); 
3634:  MOVLW  F6
3636:  MOVWF  FF6
3638:  MOVLW  05
363A:  MOVWF  FF7
363C:  CALL   09C6
....................                lcd_gotoxy(1,3); 
3640:  MOVLW  01
3642:  MOVWF  xCC
3644:  MOVLW  03
3646:  MOVWF  xCD
3648:  CALL   0906
....................                printf(lcd_putc,"        Alarma      "); 
364C:  MOVLW  0C
364E:  MOVWF  FF6
3650:  MOVLW  06
3652:  MOVWF  FF7
3654:  CALL   09C6
....................                lcd_gotoxy(1,4); 
3658:  MOVLW  01
365A:  MOVWF  xCC
365C:  MOVLW  04
365E:  MOVWF  xCD
3660:  CALL   0906
....................                printf(lcd_putc,"                    ");} 
3664:  MOVLW  22
3666:  MOVWF  FF6
3668:  MOVLW  06
366A:  MOVWF  FF7
366C:  CALL   09C6
....................                 
....................             if(estadoalarma==0) 
3670:  BTFSC  17.4
3672:  BRA    36D4
....................             {estadoalarma=0; 
3674:  BCF    17.4
....................                lcd_gotoxy(1,1); 
3676:  MOVLW  01
3678:  MOVWF  xCC
367A:  MOVWF  xCD
367C:  CALL   0906
....................                printf(lcd_putc,"                    "); 
3680:  MOVLW  38
3682:  MOVWF  FF6
3684:  MOVLW  06
3686:  MOVWF  FF7
3688:  CALL   09C6
....................                lcd_gotoxy(1,2); 
368C:  MOVLW  01
368E:  MOVWF  xCC
3690:  MOVLW  02
3692:  MOVWF  xCD
3694:  CALL   0906
....................                printf(lcd_putc,"      Desactivo     "); 
3698:  MOVLW  4E
369A:  MOVWF  FF6
369C:  MOVLW  06
369E:  MOVWF  FF7
36A0:  CALL   09C6
....................                lcd_gotoxy(1,3); 
36A4:  MOVLW  01
36A6:  MOVWF  xCC
36A8:  MOVLW  03
36AA:  MOVWF  xCD
36AC:  CALL   0906
....................                printf(lcd_putc,"       Alarma       "); 
36B0:  MOVLW  64
36B2:  MOVWF  FF6
36B4:  MOVLW  06
36B6:  MOVWF  FF7
36B8:  CALL   09C6
....................                lcd_gotoxy(1,4); 
36BC:  MOVLW  01
36BE:  MOVWF  xCC
36C0:  MOVLW  04
36C2:  MOVWF  xCD
36C4:  CALL   0906
....................                printf(lcd_putc,"                    ");} 
36C8:  MOVLW  7A
36CA:  MOVWF  FF6
36CC:  MOVLW  06
36CE:  MOVWF  FF7
36D0:  CALL   09C6
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
36D4:  MOVLW  00
36D6:  BTFSC  17.4
36D8:  MOVLW  01
36DA:  MOVWF  xBA
36DC:  MOVLW  04
36DE:  MOVWF  FA9
36E0:  MOVFF  BA,FA8
36E4:  BCF    FA6.6
36E6:  BCF    FA6.7
36E8:  BSF    FA6.2
36EA:  MOVF   FF2,W
36EC:  MOVWF  00
36EE:  BCF    FF2.7
36F0:  MOVLB  F
36F2:  MOVLW  55
36F4:  MOVWF  FA7
36F6:  MOVLW  AA
36F8:  MOVWF  FA7
36FA:  BSF    FA6.1
36FC:  BTFSC  FA6.1
36FE:  BRA    36FC
3700:  BCF    FA6.2
3702:  MOVF   00,W
3704:  IORWF  FF2,F
3706:  MOVLW  04
3708:  MOVLB  0
370A:  MOVWF  xBA
370C:  MOVLW  FA
370E:  MOVWF  xD1
3710:  CALL   07F8
3714:  DECFSZ xBA,F
3716:  BRA    370C
3718:  MOVLW  02
371A:  MOVWF  1C
371C:  MOVWF  1E
371E:  MOVLW  0C
3720:  MOVWF  xCB
3722:  CALL   0968
....................             Cambio=ON; 
3726:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
3728:  MOVF   18,W
372A:  SUBLW  07
372C:  BTFSS  FD8.2
372E:  BRA    38C8
....................       if(VelMotor>6)VelMotor=6; 
3730:  MOVF   xB0,W
3732:  SUBLW  06
3734:  BC    373A
3736:  MOVLW  06
3738:  MOVWF  xB0
....................       if(VelMotor<1)VelMotor=1; 
373A:  MOVF   xB0,F
373C:  BNZ   3742
373E:  MOVLW  01
3740:  MOVWF  xB0
....................        
....................       lcd_gotoxy(1,1); 
3742:  MOVLW  01
3744:  MOVWF  xCC
3746:  MOVWF  xCD
3748:  CALL   0906
....................       printf(lcd_putc,"Seleccione Velocidad"); 
374C:  MOVLW  90
374E:  MOVWF  FF6
3750:  MOVLW  06
3752:  MOVWF  FF7
3754:  CALL   09C6
....................       lcd_gotoxy(1,2); 
3758:  MOVLW  01
375A:  MOVWF  xCC
375C:  MOVLW  02
375E:  MOVWF  xCD
3760:  CALL   0906
....................       printf(lcd_putc,"   del Ventilador   "); 
3764:  MOVLW  A6
3766:  MOVWF  FF6
3768:  MOVLW  06
376A:  MOVWF  FF7
376C:  CALL   09C6
....................       lcd_gotoxy(1,3); 
3770:  MOVLW  01
3772:  MOVWF  xCC
3774:  MOVLW  03
3776:  MOVWF  xCD
3778:  CALL   0906
....................       printf(lcd_putc,"     Vel: %u       ",VelMotor); 
377C:  MOVLW  BC
377E:  MOVWF  FF6
3780:  MOVLW  06
3782:  MOVWF  FF7
3784:  MOVLW  0A
3786:  MOVWF  xBE
3788:  CALL   10CA
378C:  MOVFF  B0,BA
3790:  MOVLW  1B
3792:  MOVWF  xBB
3794:  CALL   12B4
3798:  MOVLW  C8
379A:  MOVWF  FF6
379C:  MOVLW  06
379E:  MOVWF  FF7
37A0:  MOVLW  07
37A2:  MOVWF  xBE
37A4:  CALL   10CA
....................       lcd_gotoxy(1,4); 
37A8:  MOVLW  01
37AA:  MOVWF  xCC
37AC:  MOVLW  04
37AE:  MOVWF  xCD
37B0:  CALL   0906
....................       printf(lcd_putc,"                    ");       
37B4:  MOVLW  D0
37B6:  MOVWF  FF6
37B8:  MOVLW  06
37BA:  MOVWF  FF7
37BC:  CALL   09C6
....................        
....................       if(UP && VelMotor<6)//Si oprime hacia arriba 
37C0:  BSF    F92.5
37C2:  BTFSC  F80.5
37C4:  BRA    37D6
37C6:  MOVF   xB0,W
37C8:  SUBLW  05
37CA:  BNC   37D6
....................       {   
....................          delay_ms(200);VelMotor++; 
37CC:  MOVLW  C8
37CE:  MOVWF  xD1
37D0:  CALL   07F8
37D4:  INCF   xB0,F
....................       } 
....................              
....................       if(DOWN && VelMotor>0)//Si oprime hacia abajo 
37D6:  BSF    F96.0
37D8:  BTFSC  F84.0
37DA:  BRA    37EA
37DC:  MOVF   xB0,F
37DE:  BZ    37EA
....................       {   
....................          delay_ms(200);VelMotor--; 
37E0:  MOVLW  C8
37E2:  MOVWF  xD1
37E4:  CALL   07F8
37E8:  DECF   xB0,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
37EA:  BSF    F96.1
37EC:  BTFSC  F84.1
37EE:  BRA    37F8
....................       {            
....................          VelocidadMotor(VelMotor); 
37F0:  MOVFF  B0,BA
37F4:  CALL   1046
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
37F8:  BSF    F96.2
37FA:  BTFSC  F84.2
37FC:  BRA    38C8
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
37FE:  MOVLW  64
3800:  MOVWF  xD1
3802:  CALL   07F8
3806:  MOVLW  02
3808:  MOVWF  1C
380A:  MOVWF  1E
380C:  MOVLW  0C
380E:  MOVWF  xCB
3810:  CALL   0968
....................          write_eeprom(13,VelMotor);//Guardar valor de Setpoint en eeprom 
3814:  MOVLW  0D
3816:  MOVWF  FA9
3818:  MOVFF  B0,FA8
381C:  BCF    FA6.6
381E:  BCF    FA6.7
3820:  BSF    FA6.2
3822:  MOVF   FF2,W
3824:  MOVWF  00
3826:  BCF    FF2.7
3828:  MOVLB  F
382A:  MOVLW  55
382C:  MOVWF  FA7
382E:  MOVLW  AA
3830:  MOVWF  FA7
3832:  BSF    FA6.1
3834:  BTFSC  FA6.1
3836:  BRA    3834
3838:  BCF    FA6.2
383A:  MOVF   00,W
383C:  IORWF  FF2,F
....................          delay_ms(20); 
383E:  MOVLW  14
3840:  MOVLB  0
3842:  MOVWF  xD1
3844:  CALL   07F8
....................          lcd_gotoxy(1,1); 
3848:  MOVLW  01
384A:  MOVWF  xCC
384C:  MOVWF  xCD
384E:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3852:  MOVLW  E6
3854:  MOVWF  FF6
3856:  MOVLW  06
3858:  MOVWF  FF7
385A:  CALL   09C6
....................          lcd_gotoxy(1,2); 
385E:  MOVLW  01
3860:  MOVWF  xCC
3862:  MOVLW  02
3864:  MOVWF  xCD
3866:  CALL   0906
....................          printf(lcd_putc,"     Velocidad      "); 
386A:  MOVLW  FC
386C:  MOVWF  FF6
386E:  MOVLW  06
3870:  MOVWF  FF7
3872:  CALL   09C6
....................          lcd_gotoxy(1,3); 
3876:  MOVLW  01
3878:  MOVWF  xCC
387A:  MOVLW  03
387C:  MOVWF  xCD
387E:  CALL   0906
....................          printf(lcd_putc,"      Almacenada    "); 
3882:  MOVLW  12
3884:  MOVWF  FF6
3886:  MOVLW  07
3888:  MOVWF  FF7
388A:  CALL   09C6
....................          lcd_gotoxy(1,4); 
388E:  MOVLW  01
3890:  MOVWF  xCC
3892:  MOVLW  04
3894:  MOVWF  xCD
3896:  CALL   0906
....................          printf(lcd_putc,"                    ");  
389A:  MOVLW  28
389C:  MOVWF  FF6
389E:  MOVLW  07
38A0:  MOVWF  FF7
38A2:  CALL   09C6
....................          delay_ms(1000); 
38A6:  MOVLW  04
38A8:  MOVWF  xBA
38AA:  MOVLW  FA
38AC:  MOVWF  xD1
38AE:  CALL   07F8
38B2:  DECFSZ xBA,F
38B4:  BRA    38AA
....................          printf(lcd_putc,"\f"); 
38B6:  MOVLW  0C
38B8:  MOVWF  xCB
38BA:  CALL   0968
....................          lcd_init(); 
38BE:  CALL   0888
....................          Menu=1; paso=0; 
38C2:  MOVLW  01
38C4:  MOVWF  18
38C6:  CLRF   31
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
38C8:  MOVF   18,W
38CA:  SUBLW  32
38CC:  BTFSS  FD8.2
38CE:  BRA    3F0E
....................    if(Lectura==1){ 
38D0:  BTFSS  17.0
38D2:  BRA    3AF6
....................       Lectura=0; 
38D4:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
38D6:  MOVLW  08
38D8:  MOVWF  xBA
38DA:  CALL   17F0
38DE:  MOVFF  03,A3
38E2:  MOVFF  02,A2
38E6:  MOVFF  01,A1
38EA:  MOVFF  00,A0
....................       lcd_gotoxy(1,1); 
38EE:  MOVLW  01
38F0:  MOVWF  xCC
38F2:  MOVWF  xCD
38F4:  CALL   0906
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
38F8:  MOVFF  A3,D1
38FC:  MOVFF  A2,D0
3900:  MOVFF  A1,CF
3904:  MOVFF  A0,CE
3908:  MOVLW  D7
390A:  MOVWF  xD5
390C:  MOVLW  A3
390E:  MOVWF  xD4
3910:  CLRF   xD3
3912:  MOVLW  81
3914:  MOVWF  xD2
3916:  CALL   1986
391A:  MOVFF  00,BA
391E:  MOVFF  01,BB
3922:  MOVFF  02,BC
3926:  MOVFF  03,BD
392A:  MOVLW  3E
392C:  MOVWF  FF6
392E:  MOVLW  07
3930:  MOVWF  FF7
3932:  MOVLW  08
3934:  MOVWF  xBE
3936:  CALL   10CA
393A:  MOVLW  02
393C:  MOVWF  FE9
393E:  MOVFF  BD,C1
3942:  MOVFF  BC,C0
3946:  MOVFF  BB,BF
394A:  MOVFF  BA,BE
394E:  MOVWF  xC2
3950:  CALL   1B32
3954:  MOVLW  4B
3956:  MOVWF  FF6
3958:  MOVLW  07
395A:  MOVWF  FF7
395C:  MOVLW  07
395E:  MOVWF  xBE
3960:  CALL   10CA
....................       Saturacion=(CaidaPresion/0.24)*11; 
3964:  MOVFF  A3,D1
3968:  MOVFF  A2,D0
396C:  MOVFF  A1,CF
3970:  MOVFF  A0,CE
3974:  MOVLW  8F
3976:  MOVWF  xD5
3978:  MOVLW  C2
397A:  MOVWF  xD4
397C:  MOVLW  75
397E:  MOVWF  xD3
3980:  MOVLW  7C
3982:  MOVWF  xD2
3984:  CALL   142C
3988:  MOVFF  00,BA
398C:  MOVFF  01,BB
3990:  MOVFF  02,BC
3994:  MOVFF  03,BD
3998:  MOVFF  03,D1
399C:  MOVFF  02,D0
39A0:  MOVFF  01,CF
39A4:  MOVFF  00,CE
39A8:  CLRF   xD5
39AA:  CLRF   xD4
39AC:  MOVLW  30
39AE:  MOVWF  xD3
39B0:  MOVLW  82
39B2:  MOVWF  xD2
39B4:  CALL   1986
39B8:  MOVFF  03,9F
39BC:  MOVFF  02,9E
39C0:  MOVFF  01,9D
39C4:  MOVFF  00,9C
....................        
....................       if(Saturacion>11) 
39C8:  CLRF   xD1
39CA:  CLRF   xD0
39CC:  MOVLW  30
39CE:  MOVWF  xCF
39D0:  MOVLW  82
39D2:  MOVWF  xCE
39D4:  MOVFF  9F,D5
39D8:  MOVFF  9E,D4
39DC:  MOVFF  9D,D3
39E0:  MOVFF  9C,D2
39E4:  CALL   0C60
39E8:  BNC   39F6
....................       { 
....................          Saturacion=11; 
39EA:  CLRF   x9F
39EC:  CLRF   x9E
39EE:  MOVLW  30
39F0:  MOVWF  x9D
39F2:  MOVLW  82
39F4:  MOVWF  x9C
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
39F6:  CLRF   2D
39F8:  MOVFF  9F,BD
39FC:  MOVFF  9E,BC
3A00:  MOVFF  9D,BB
3A04:  MOVFF  9C,BA
3A08:  CALL   202A
3A0C:  MOVFF  00,BA
3A10:  MOVFF  01,BB
3A14:  MOVFF  02,BC
3A18:  MOVFF  03,BD
3A1C:  CLRF   xD3
3A1E:  MOVFF  2D,D2
3A22:  CALL   0A4C
3A26:  MOVFF  03,D1
3A2A:  MOVFF  02,D0
3A2E:  MOVFF  01,CF
3A32:  MOVFF  00,CE
3A36:  MOVFF  BD,D5
3A3A:  MOVFF  BC,D4
3A3E:  MOVFF  BB,D3
3A42:  MOVFF  BA,D2
3A46:  CALL   0C60
3A4A:  BNC   3A68
....................       { 
....................          lcd_gotoxy(i+8,2); 
3A4C:  MOVLW  08
3A4E:  ADDWF  2D,W
3A50:  MOVWF  xBA
3A52:  MOVWF  xCC
3A54:  MOVLW  02
3A56:  MOVWF  xCD
3A58:  CALL   0906
....................          printf(lcd_putc,"Ñ"); 
3A5C:  MOVLW  D1
3A5E:  MOVWF  xCB
3A60:  CALL   0968
....................       } 
3A64:  INCF   2D,F
3A66:  BRA    39F8
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3A68:  MOVFF  9F,BD
3A6C:  MOVFF  9E,BC
3A70:  MOVFF  9D,BB
3A74:  MOVFF  9C,BA
3A78:  CALL   202A
3A7C:  MOVFF  03,D1
3A80:  MOVFF  02,D0
3A84:  MOVFF  01,CF
3A88:  MOVFF  00,CE
3A8C:  CALL   1CB8
3A90:  MOVFF  01,2D
3A94:  MOVF   2D,W
3A96:  SUBLW  0A
3A98:  BNC   3AB6
....................       { 
....................          lcd_gotoxy(i+8,2); 
3A9A:  MOVLW  08
3A9C:  ADDWF  2D,W
3A9E:  MOVWF  xBA
3AA0:  MOVWF  xCC
3AA2:  MOVLW  02
3AA4:  MOVWF  xCD
3AA6:  CALL   0906
....................          printf(lcd_putc," "); 
3AAA:  MOVLW  20
3AAC:  MOVWF  xCB
3AAE:  CALL   0968
....................       } 
3AB2:  INCF   2D,F
3AB4:  BRA    3A94
....................        
....................       lcd_gotoxy(9,3); 
3AB6:  MOVLW  09
3AB8:  MOVWF  xCC
3ABA:  MOVLW  03
3ABC:  MOVWF  xCD
3ABE:  CALL   0906
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3AC2:  MOVLW  54
3AC4:  MOVWF  FF6
3AC6:  MOVLW  07
3AC8:  MOVWF  FF7
3ACA:  MOVLW  06
3ACC:  MOVWF  xBE
3ACE:  CALL   10CA
3AD2:  MOVFF  27,BA
3AD6:  MOVLW  03
3AD8:  MOVWF  xBB
3ADA:  CALL   12B4
3ADE:  MOVLW  3A
3AE0:  MOVWF  xCB
3AE2:  CALL   0968
3AE6:  MOVFF  28,BA
3AEA:  MOVLW  01
3AEC:  MOVWF  xBB
3AEE:  CALL   12B4
....................       EliminaRuido(); 
3AF2:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3AF6:  BTFSS  16.7
3AF8:  BRA    3B92
....................    { 
....................       if(estadoalarma==1) 
3AFA:  BTFSS  17.4
3AFC:  BRA    3B88
....................       { 
....................          printf(lcd_putc,"\f"); 
3AFE:  MOVLW  0C
3B00:  MOVWF  xCB
3B02:  CALL   0968
....................          lcd_gotoxy(1,2); 
3B06:  MOVLW  01
3B08:  MOVWF  xCC
3B0A:  MOVLW  02
3B0C:  MOVWF  xCD
3B0E:  CALL   0906
....................          printf(lcd_putc,"  Temporizador  de  "); 
3B12:  MOVLW  64
3B14:  MOVWF  FF6
3B16:  MOVLW  07
3B18:  MOVWF  FF7
3B1A:  CALL   09C6
....................          lcd_gotoxy(1,3); 
3B1E:  MOVLW  01
3B20:  MOVWF  xCC
3B22:  MOVLW  03
3B24:  MOVWF  xCD
3B26:  CALL   0906
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3B2A:  MOVLW  7A
3B2C:  MOVWF  FF6
3B2E:  MOVLW  07
3B30:  MOVWF  FF7
3B32:  CALL   09C6
....................          lcd_gotoxy(1,4); 
3B36:  MOVLW  01
3B38:  MOVWF  xCC
3B3A:  MOVLW  04
3B3C:  MOVWF  xCD
3B3E:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3B42:  MOVLW  90
3B44:  MOVWF  FF6
3B46:  MOVLW  07
3B48:  MOVWF  FF7
3B4A:  CALL   09C6
....................          lcd_gotoxy(1,1); 
3B4E:  MOVLW  01
3B50:  MOVWF  xCC
3B52:  MOVWF  xCD
3B54:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3B58:  MOVLW  A6
3B5A:  MOVWF  FF6
3B5C:  MOVLW  07
3B5E:  MOVWF  FF7
3B60:  CALL   09C6
....................          for(i=0;i<5;i++) 
3B64:  CLRF   2D
3B66:  MOVF   2D,W
3B68:  SUBLW  04
3B6A:  BNC   3B88
....................          { 
....................             Buzzer_on; 
3B6C:  BSF    F8B.0
3B6E:  BCF    F94.0
....................             delay_ms(200); 
3B70:  MOVLW  C8
3B72:  MOVWF  xD1
3B74:  CALL   07F8
....................             Buzzer_off; 
3B78:  BCF    F8B.0
3B7A:  BCF    F94.0
....................             delay_ms(200); 
3B7C:  MOVLW  C8
3B7E:  MOVWF  xD1
3B80:  CALL   07F8
....................          } 
3B84:  INCF   2D,F
3B86:  BRA    3B66
....................       } 
....................       tiempo_cumplido=0; 
3B88:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3B8A:  MOVLW  0C
3B8C:  MOVWF  xCB
3B8E:  CALL   0968
....................    } 
....................     
....................    if(CaidaPresion>=0.23) 
3B92:  MOVLW  1F
3B94:  MOVWF  xD1
3B96:  MOVLW  85
3B98:  MOVWF  xD0
3B9A:  MOVLW  6B
3B9C:  MOVWF  xCF
3B9E:  MOVLW  7C
3BA0:  MOVWF  xCE
3BA2:  MOVFF  A3,D5
3BA6:  MOVFF  A2,D4
3BAA:  MOVFF  A1,D3
3BAE:  MOVFF  A0,D2
3BB2:  CALL   0C60
3BB6:  BC    3BBA
3BB8:  BNZ   3BC0
....................    {  
....................       ActivaBuzzer=1; 
3BBA:  MOVLW  01
3BBC:  MOVWF  3D
....................    } 
....................    else 
3BBE:  BRA    3BC6
....................    { 
....................       ActivaBuzzer=0; 
3BC0:  CLRF   3D
....................       Buzzer_off; 
3BC2:  BCF    F8B.0
3BC4:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3BC6:  MOVLW  01
3BC8:  MOVWF  xCC
3BCA:  MOVLW  02
3BCC:  MOVWF  xCD
3BCE:  CALL   0906
....................       printf(lcd_putc,"Filtro:"); 
3BD2:  MOVLW  BC
3BD4:  MOVWF  FF6
3BD6:  MOVLW  07
3BD8:  MOVWF  FF7
3BDA:  CALL   09C6
....................        
....................       if(estadomv==1) 
3BDE:  BTFSS  16.2
3BE0:  BRA    3BFC
....................       { 
....................          lcd_gotoxy(1,4); 
3BE2:  MOVLW  01
3BE4:  MOVWF  xCC
3BE6:  MOVLW  04
3BE8:  MOVWF  xCD
3BEA:  CALL   0906
....................          printf(lcd_putc,"Motor:ON ");       
3BEE:  MOVLW  C4
3BF0:  MOVWF  FF6
3BF2:  MOVLW  07
3BF4:  MOVWF  FF7
3BF6:  CALL   09C6
....................       } 
....................       else 
3BFA:  BRA    3C14
....................       { 
....................          lcd_gotoxy(1,4); 
3BFC:  MOVLW  01
3BFE:  MOVWF  xCC
3C00:  MOVLW  04
3C02:  MOVWF  xCD
3C04:  CALL   0906
....................          printf(lcd_putc,"Motor:OFF"); 
3C08:  MOVLW  CE
3C0A:  MOVWF  FF6
3C0C:  MOVLW  07
3C0E:  MOVWF  FF7
3C10:  CALL   09C6
....................       } 
....................        
....................       if(estadouv==1) 
3C14:  BTFSS  16.0
3C16:  BRA    3C32
....................       { 
....................          lcd_gotoxy(13,4); 
3C18:  MOVLW  0D
3C1A:  MOVWF  xCC
3C1C:  MOVLW  04
3C1E:  MOVWF  xCD
3C20:  CALL   0906
....................          printf(lcd_putc,"UV:ON "); 
3C24:  MOVLW  D8
3C26:  MOVWF  FF6
3C28:  MOVLW  07
3C2A:  MOVWF  FF7
3C2C:  CALL   09C6
....................       } 
....................       else 
3C30:  BRA    3C4A
....................       {          
....................          lcd_gotoxy(13,4); 
3C32:  MOVLW  0D
3C34:  MOVWF  xCC
3C36:  MOVLW  04
3C38:  MOVWF  xCD
3C3A:  CALL   0906
....................          printf(lcd_putc,"UV:OFF"); 
3C3E:  MOVLW  E0
3C40:  MOVWF  FF6
3C42:  MOVLW  07
3C44:  MOVWF  FF7
3C46:  CALL   09C6
....................       } 
....................        
....................       if(estadofl==1) 
3C4A:  BTFSS  16.1
3C4C:  BRA    3C68
....................       { 
....................          lcd_gotoxy(1,3); 
3C4E:  MOVLW  01
3C50:  MOVWF  xCC
3C52:  MOVLW  03
3C54:  MOVWF  xCD
3C56:  CALL   0906
....................          printf(lcd_putc,"Luz:ON "); 
3C5A:  MOVLW  E8
3C5C:  MOVWF  FF6
3C5E:  MOVLW  07
3C60:  MOVWF  FF7
3C62:  CALL   09C6
....................       } 
....................       else 
3C66:  BRA    3C80
....................       { 
....................          lcd_gotoxy(1,3); 
3C68:  MOVLW  01
3C6A:  MOVWF  xCC
3C6C:  MOVLW  03
3C6E:  MOVWF  xCD
3C70:  CALL   0906
....................          printf(lcd_putc,"Luz:OFF"); 
3C74:  MOVLW  F0
3C76:  MOVWF  FF6
3C78:  MOVLW  07
3C7A:  MOVWF  FF7
3C7C:  CALL   09C6
....................       }  
....................       Cambio=OFF; 
3C80:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
3C82:  BTFSS  16.2
3C84:  BRA    3CB0
....................       if(flagmv==0){ 
3C86:  BTFSC  17.6
3C88:  BRA    3CA6
....................          VelocidadMotor(6);lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
3C8A:  MOVLW  06
3C8C:  MOVWF  xBA
3C8E:  CALL   1046
3C92:  CALL   0888
3C96:  MOVLW  C8
3C98:  MOVWF  xD1
3C9A:  CALL   07F8
3C9E:  CALL   0888
3CA2:  BSF    17.6
3CA4:  BSF    17.5
....................       } 
....................       VelocidadMotor(VelMotor); 
3CA6:  MOVFF  B0,BA
3CAA:  CALL   1046
....................    }else{ 
3CAE:  BRA    3CCE
....................       VelocidadMotor(0); 
3CB0:  CLRF   xBA
3CB2:  CALL   1046
....................       if(flagmv==1){ 
3CB6:  BTFSS  17.6
3CB8:  BRA    3CCE
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
3CBA:  CALL   0888
3CBE:  MOVLW  C8
3CC0:  MOVWF  xD1
3CC2:  CALL   07F8
3CC6:  CALL   0888
3CCA:  BCF    17.6
3CCC:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1 && !VIDRIO){ 
3CCE:  BTFSS  16.0
3CD0:  BRA    3D0A
3CD2:  BSF    F92.1
3CD4:  BTFSS  F80.1
3CD6:  BRA    3D0A
....................       estadomv=0; 
3CD8:  BCF    16.2
....................       VelocidadMotor(0); 
3CDA:  CLRF   xBA
3CDC:  CALL   1046
....................       estadofl=0; 
3CE0:  BCF    16.1
....................       Luz_Blanca_off; 
3CE2:  BSF    F8A.2
3CE4:  BCF    F93.2
....................       Luz_UV_on; 
3CE6:  BCF    F8A.1
3CE8:  BCF    F93.1
....................       tiempo_cumplido=0; 
3CEA:  BCF    16.7
....................       if(flaguv==0){ 
3CEC:  BTFSC  17.1
3CEE:  BRA    3D08
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
3CF0:  CALL   0888
3CF4:  MOVLW  C8
3CF6:  MOVWF  xD1
3CF8:  CALL   07F8
3CFC:  CALL   0888
3D00:  BSF    17.1
3D02:  MOVLW  01
3D04:  MOVWF  30
3D06:  BSF    17.5
....................       } 
....................    }else{ 
3D08:  BRA    3D2C
....................       estadouv=0; 
3D0A:  BCF    16.0
....................       Luz_UV_off; 
3D0C:  BSF    F8A.1
3D0E:  BCF    F93.1
....................       if(flaguv==1){ 
3D10:  BTFSS  17.1
3D12:  BRA    3D2C
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
3D14:  CALL   0888
3D18:  MOVLW  C8
3D1A:  MOVWF  xD1
3D1C:  CALL   07F8
3D20:  CALL   0888
3D24:  BCF    17.1
3D26:  MOVLW  01
3D28:  MOVWF  30
3D2A:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
3D2C:  BTFSS  16.1
3D2E:  BRA    3D4E
....................    { 
....................       Luz_Blanca_on; 
3D30:  BCF    F8A.2
3D32:  BCF    F93.2
....................       if(flagfl==0) 
3D34:  BTFSC  17.2
3D36:  BRA    3D4C
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
3D38:  CALL   0888
3D3C:  MOVLW  C8
3D3E:  MOVWF  xD1
3D40:  CALL   07F8
3D44:  CALL   0888
3D48:  BSF    17.2
3D4A:  BSF    17.5
....................       } 
....................    } 
....................    else 
3D4C:  BRA    3D6A
....................    { 
....................       Luz_Blanca_off; 
3D4E:  BSF    F8A.2
3D50:  BCF    F93.2
....................       if(flagfl==1) 
3D52:  BTFSS  17.2
3D54:  BRA    3D6A
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3D56:  CALL   0888
3D5A:  MOVLW  C8
3D5C:  MOVWF  xD1
3D5E:  CALL   07F8
3D62:  CALL   0888
3D66:  BCF    17.2
3D68:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
3D6A:  BSF    F96.0
3D6C:  BTFSC  F84.0
3D6E:  BRA    3D9A
....................    { 
....................       delay_ms(20); 
3D70:  MOVLW  14
3D72:  MOVWF  xD1
3D74:  CALL   07F8
....................       if(DOWN){ 
3D78:  BSF    F96.0
3D7A:  BTFSC  F84.0
3D7C:  BRA    3D98
....................          if(Flanco == 0) 
3D7E:  BTFSC  16.3
3D80:  BRA    3D98
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
3D82:  BTG    16.1
3D84:  BSF    16.3
3D86:  MOVLW  02
3D88:  MOVWF  xBA
3D8A:  MOVLW  96
3D8C:  MOVWF  xD1
3D8E:  CALL   07F8
3D92:  DECFSZ xBA,F
3D94:  BRA    3D8A
3D96:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3D98:  BRA    3D9C
....................    { 
....................       Flanco = 0; 
3D9A:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3D9C:  BSF    F96.1
3D9E:  BTFSC  F84.1
3DA0:  BRA    3DCC
....................    { 
....................       delay_ms(20); 
3DA2:  MOVLW  14
3DA4:  MOVWF  xD1
3DA6:  CALL   07F8
....................       if(RIGHT){ 
3DAA:  BSF    F96.1
3DAC:  BTFSC  F84.1
3DAE:  BRA    3DCA
....................          if(Flanco1 == 0) 
3DB0:  BTFSC  16.4
3DB2:  BRA    3DCA
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
3DB4:  BTG    16.2
3DB6:  BSF    16.4
3DB8:  MOVLW  02
3DBA:  MOVWF  xBA
3DBC:  MOVLW  96
3DBE:  MOVWF  xD1
3DC0:  CALL   07F8
3DC4:  DECFSZ xBA,F
3DC6:  BRA    3DBC
3DC8:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3DCA:  BRA    3DCE
....................    { 
....................       Flanco1 = 0; 
3DCC:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3DCE:  BSF    F96.2
3DD0:  BTFSC  F84.2
3DD2:  BRA    3DEE
....................    { 
....................       delay_ms(20); 
3DD4:  MOVLW  14
3DD6:  MOVWF  xD1
3DD8:  CALL   07F8
....................       if(IZQU){ 
3DDC:  BSF    F96.2
3DDE:  BTFSC  F84.2
3DE0:  BRA    3DEE
....................          delay_ms(150);  
3DE2:  MOVLW  96
3DE4:  MOVWF  xD1
3DE6:  CALL   07F8
....................          estadouv=!estadouv; 
3DEA:  BTG    16.0
....................          Cambio=ON; 
3DEC:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3DEE:  BSF    F92.5
3DF0:  BTFSC  F80.5
3DF2:  BRA    3E30
....................    { 
....................       delay_ms(20); 
3DF4:  MOVLW  14
3DF6:  MOVWF  xD1
3DF8:  CALL   07F8
....................       if(UP){ 
3DFC:  BSF    F92.5
3DFE:  BTFSC  F80.5
3E00:  BRA    3E30
....................          delay_ms(200); 
3E02:  MOVLW  C8
3E04:  MOVWF  xD1
3E06:  CALL   07F8
....................          printf(lcd_putc,"\f"); 
3E0A:  MOVLW  0C
3E0C:  MOVWF  xCB
3E0E:  CALL   0968
....................          delay_ms(300); 
3E12:  MOVLW  02
3E14:  MOVWF  xBA
3E16:  MOVLW  96
3E18:  MOVWF  xD1
3E1A:  CALL   07F8
3E1E:  DECFSZ xBA,F
3E20:  BRA    3E16
....................          Menu=1;  
3E22:  MOVLW  01
3E24:  MOVWF  18
....................          paso=0; 
3E26:  CLRF   31
....................          Flecha=2; 
3E28:  MOVLW  02
3E2A:  MOVWF  1C
....................          Flecha2=2; 
3E2C:  MOVWF  1E
....................          Cambio=ON; 
3E2E:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
3E30:  DECFSZ 30,W
3E32:  BRA    3EF6
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
3E34:  MOVLW  07
3E36:  MOVWF  FA9
3E38:  MOVFF  21,FA8
3E3C:  BCF    FA6.6
3E3E:  BCF    FA6.7
3E40:  BSF    FA6.2
3E42:  MOVF   FF2,W
3E44:  MOVWF  00
3E46:  BCF    FF2.7
3E48:  MOVLB  F
3E4A:  MOVLW  55
3E4C:  MOVWF  FA7
3E4E:  MOVLW  AA
3E50:  MOVWF  FA7
3E52:  BSF    FA6.1
3E54:  BTFSC  FA6.1
3E56:  BRA    3E54
3E58:  BCF    FA6.2
3E5A:  MOVF   00,W
3E5C:  IORWF  FF2,F
3E5E:  MOVLW  08
3E60:  MOVWF  FA9
3E62:  MOVFF  22,FA8
3E66:  BCF    FA6.6
3E68:  BCF    FA6.7
3E6A:  BSF    FA6.2
3E6C:  MOVF   FF2,W
3E6E:  MOVWF  00
3E70:  BCF    FF2.7
3E72:  MOVLW  55
3E74:  MOVWF  FA7
3E76:  MOVLW  AA
3E78:  MOVWF  FA7
3E7A:  BSF    FA6.1
3E7C:  BTFSC  FA6.1
3E7E:  BRA    3E7C
3E80:  BCF    FA6.2
3E82:  MOVF   00,W
3E84:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3E86:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3E8A:  MOVFF  41,24
....................       write_eeprom(9,horasL); 
3E8E:  MOVLW  09
3E90:  MOVWF  FA9
3E92:  MOVFF  23,FA8
3E96:  BCF    FA6.6
3E98:  BCF    FA6.7
3E9A:  BSF    FA6.2
3E9C:  MOVFF  FF2,00
3EA0:  BCF    FF2.7
3EA2:  MOVLW  55
3EA4:  MOVWF  FA7
3EA6:  MOVLW  AA
3EA8:  MOVWF  FA7
3EAA:  BSF    FA6.1
3EAC:  BTFSC  FA6.1
3EAE:  BRA    3EAC
3EB0:  BCF    FA6.2
3EB2:  MOVF   00,W
3EB4:  IORWF  FF2,F
....................       delay_ms(20); 
3EB6:  MOVLW  14
3EB8:  MOVLB  0
3EBA:  MOVWF  xD1
3EBC:  CALL   07F8
....................       write_eeprom(10,horasH); 
3EC0:  MOVLW  0A
3EC2:  MOVWF  FA9
3EC4:  MOVFF  24,FA8
3EC8:  BCF    FA6.6
3ECA:  BCF    FA6.7
3ECC:  BSF    FA6.2
3ECE:  MOVF   FF2,W
3ED0:  MOVWF  00
3ED2:  BCF    FF2.7
3ED4:  MOVLB  F
3ED6:  MOVLW  55
3ED8:  MOVWF  FA7
3EDA:  MOVLW  AA
3EDC:  MOVWF  FA7
3EDE:  BSF    FA6.1
3EE0:  BTFSC  FA6.1
3EE2:  BRA    3EE0
3EE4:  BCF    FA6.2
3EE6:  MOVF   00,W
3EE8:  IORWF  FF2,F
....................       delay_ms(20); 
3EEA:  MOVLW  14
3EEC:  MOVLB  0
3EEE:  MOVWF  xD1
3EF0:  CALL   07F8
....................       guardaruv=0; 
3EF4:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3EF6:  MOVF   21,W
3EF8:  SUBLW  3B
3EFA:  BC    3F00
....................    { 
....................       segundos=0;minutos++; 
3EFC:  CLRF   21
3EFE:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3F00:  MOVF   22,W
3F02:  SUBLW  3C
3F04:  BNZ   3F0E
....................    { 
....................       minutos=0;horas++; 
3F06:  CLRF   22
3F08:  INCF   40,F
3F0A:  BTFSC  FD8.2
3F0C:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3F0E:  MOVF   2F,W
3F10:  SUBLW  3B
3F12:  BC    3F28
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3F14:  CALL   0888
3F18:  MOVLW  C8
3F1A:  MOVWF  xD1
3F1C:  CALL   07F8
3F20:  CALL   0888
....................       tiemporeset=0; 
3F24:  CLRF   2F
....................       Cambio=ON; 
3F26:  BSF    17.5
....................    }    
....................    } 
3F28:  GOTO   2204
.................... } 
....................  
3F2C:  SLEEP 

Configuration Fuses:
   Word  1: C238   XTPLL IESO FCMEN PLL1 CPUDIV4 USBDIV
   Word  2: 1E3F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
