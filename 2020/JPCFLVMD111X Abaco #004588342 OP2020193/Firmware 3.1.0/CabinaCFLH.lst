CCS PCH C Compiler, Version 4.104, 5967               24-sept.-20 07:01

               Filename: D:\Laboratorio\Modulo Flujo Laminar\2020\JPCFLVMD111X Abaco #0045882XX OP2020193\Firmware 3.1.0\CabinaCFLH.lst

               ROM used: 18320 bytes (56%)
                         Largest free fragment is 14446
               RAM used: 216 (14%) at main() level
                         253 (16%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   2622
*
0008:  NOP   
000A:  NOP   
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   01AE
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... //#priority TIMER2 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
07E6:  CLRF   FEA
07E8:  MOVLW  EA
07EA:  MOVWF  FE9
07EC:  MOVF   FEF,W
07EE:  BZ    080A
07F0:  MOVLW  06
07F2:  MOVWF  01
07F4:  CLRF   00
07F6:  DECFSZ 00,F
07F8:  BRA    07F6
07FA:  DECFSZ 01,F
07FC:  BRA    07F4
07FE:  MOVLW  7B
0800:  MOVWF  00
0802:  DECFSZ 00,F
0804:  BRA    0802
0806:  DECFSZ FEF,F
0808:  BRA    07F0
080A:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
2276:  BCF    xE7.0
....................    y = x; 
2278:  MOVFF  DB,E0
227C:  MOVFF  DA,DF
2280:  MOVFF  D9,DE
2284:  MOVFF  D8,DD
....................  
....................    if (x < 0) 
2288:  MOVFF  DB,EB
228C:  MOVFF  DA,EA
2290:  MOVFF  D9,E9
2294:  MOVFF  D8,E8
2298:  CLRF   xEF
229A:  CLRF   xEE
229C:  CLRF   xED
229E:  CLRF   xEC
22A0:  CALL   0D1C
22A4:  BNC   22AE
....................    { 
....................       s = 1; 
22A6:  BSF    xE7.0
....................       y = -y; 
22A8:  MOVF   xDE,W
22AA:  XORLW  80
22AC:  MOVWF  xDE
....................    } 
....................  
....................    if (y <= 32768.0) 
22AE:  MOVFF  E0,EB
22B2:  MOVFF  DF,EA
22B6:  MOVFF  DE,E9
22BA:  MOVFF  DD,E8
22BE:  CLRF   xEF
22C0:  CLRF   xEE
22C2:  CLRF   xED
22C4:  MOVLW  8E
22C6:  MOVWF  xEC
22C8:  CALL   0D1C
22CC:  BC    22D0
22CE:  BNZ   2300
....................   res = (float32)(unsigned int16)y; 
22D0:  MOVFF  E0,EB
22D4:  MOVFF  DF,EA
22D8:  MOVFF  DE,E9
22DC:  MOVFF  DD,E8
22E0:  RCALL  223E
22E2:  MOVFF  02,ED
22E6:  MOVFF  01,EC
22EA:  CALL   096C
22EE:  MOVFF  03,E4
22F2:  MOVFF  02,E3
22F6:  MOVFF  01,E2
22FA:  MOVFF  00,E1
....................  
....................  else if (y < 10000000.0) 
22FE:  BRA    248E
2300:  MOVFF  E0,EB
2304:  MOVFF  DF,EA
2308:  MOVFF  DE,E9
230C:  MOVFF  DD,E8
2310:  MOVLW  80
2312:  MOVWF  xEF
2314:  MOVLW  96
2316:  MOVWF  xEE
2318:  MOVLW  18
231A:  MOVWF  xED
231C:  MOVLW  96
231E:  MOVWF  xEC
2320:  CALL   0D1C
2324:  BTFSS  FD8.0
2326:  BRA    247E
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
2328:  MOVFF  E0,EC
232C:  MOVFF  DF,EB
2330:  MOVFF  DE,EA
2334:  MOVFF  DD,E9
2338:  CLRF   xF0
233A:  CLRF   xEF
233C:  CLRF   xEE
233E:  MOVLW  8E
2340:  MOVWF  xED
2342:  CALL   19EC
2346:  MOVFF  03,EB
234A:  MOVFF  02,EA
234E:  MOVFF  01,E9
2352:  MOVFF  00,E8
2356:  RCALL  223E
2358:  MOVFF  02,E6
235C:  MOVFF  01,E5
....................       y = 32768.0*(y/32768.0 - (float32)l); 
2360:  MOVFF  E0,EC
2364:  MOVFF  DF,EB
2368:  MOVFF  DE,EA
236C:  MOVFF  DD,E9
2370:  CLRF   xF0
2372:  CLRF   xEF
2374:  CLRF   xEE
2376:  MOVLW  8E
2378:  MOVWF  xED
237A:  CALL   19EC
237E:  MOVFF  00,E8
2382:  MOVFF  01,E9
2386:  MOVFF  02,EA
238A:  MOVFF  03,EB
238E:  MOVFF  E6,ED
2392:  MOVFF  E5,EC
2396:  CALL   096C
239A:  BSF    FD8.1
239C:  MOVFF  EB,EF
23A0:  MOVFF  EA,EE
23A4:  MOVFF  E9,ED
23A8:  MOVFF  E8,EC
23AC:  MOVFF  03,F3
23B0:  MOVFF  02,F2
23B4:  MOVFF  01,F1
23B8:  MOVFF  00,F0
23BC:  CALL   1B46
23C0:  CLRF   xEB
23C2:  CLRF   xEA
23C4:  CLRF   xE9
23C6:  MOVLW  8E
23C8:  MOVWF  xE8
23CA:  MOVFF  03,EF
23CE:  MOVFF  02,EE
23D2:  MOVFF  01,ED
23D6:  MOVFF  00,EC
23DA:  CALL   18FA
23DE:  MOVFF  03,E0
23E2:  MOVFF  02,DF
23E6:  MOVFF  01,DE
23EA:  MOVFF  00,DD
....................   res = 32768.0*(float32)l; 
23EE:  MOVFF  E6,ED
23F2:  MOVFF  E5,EC
23F6:  CALL   096C
23FA:  CLRF   xEB
23FC:  CLRF   xEA
23FE:  CLRF   xE9
2400:  MOVLW  8E
2402:  MOVWF  xE8
2404:  MOVFF  03,EF
2408:  MOVFF  02,EE
240C:  MOVFF  01,ED
2410:  MOVFF  00,EC
2414:  CALL   18FA
2418:  MOVFF  03,E4
241C:  MOVFF  02,E3
2420:  MOVFF  01,E2
2424:  MOVFF  00,E1
....................   res += (float32)(unsigned int16)y; 
2428:  MOVFF  E0,EB
242C:  MOVFF  DF,EA
2430:  MOVFF  DE,E9
2434:  MOVFF  DD,E8
2438:  RCALL  223E
243A:  MOVFF  02,ED
243E:  MOVFF  01,EC
2442:  CALL   096C
2446:  BCF    FD8.1
2448:  MOVFF  E4,EF
244C:  MOVFF  E3,EE
2450:  MOVFF  E2,ED
2454:  MOVFF  E1,EC
2458:  MOVFF  03,F3
245C:  MOVFF  02,F2
2460:  MOVFF  01,F1
2464:  MOVFF  00,F0
2468:  CALL   1B46
246C:  MOVFF  03,E4
2470:  MOVFF  02,E3
2474:  MOVFF  01,E2
2478:  MOVFF  00,E1
....................  } 
....................  
....................  else 
247C:  BRA    248E
....................   res = y; 
247E:  MOVFF  E0,E4
2482:  MOVFF  DF,E3
2486:  MOVFF  DE,E2
248A:  MOVFF  DD,E1
....................  
....................  y = y - (float32)(unsigned int16)y; 
248E:  MOVFF  E0,EB
2492:  MOVFF  DF,EA
2496:  MOVFF  DE,E9
249A:  MOVFF  DD,E8
249E:  RCALL  223E
24A0:  MOVFF  02,ED
24A4:  MOVFF  01,EC
24A8:  CALL   096C
24AC:  BSF    FD8.1
24AE:  MOVFF  E0,EF
24B2:  MOVFF  DF,EE
24B6:  MOVFF  DE,ED
24BA:  MOVFF  DD,EC
24BE:  MOVFF  03,F3
24C2:  MOVFF  02,F2
24C6:  MOVFF  01,F1
24CA:  MOVFF  00,F0
24CE:  CALL   1B46
24D2:  MOVFF  03,E0
24D6:  MOVFF  02,DF
24DA:  MOVFF  01,DE
24DE:  MOVFF  00,DD
....................  
....................  if (s) 
24E2:  BTFSS  xE7.0
24E4:  BRA    24EC
....................   res = -res; 
24E6:  MOVF   xE2,W
24E8:  XORLW  80
24EA:  MOVWF  xE2
....................  
....................  if (y != 0) 
24EC:  MOVFF  E0,EB
24F0:  MOVFF  DF,EA
24F4:  MOVFF  DE,E9
24F8:  MOVFF  DD,E8
24FC:  CLRF   xEF
24FE:  CLRF   xEE
2500:  CLRF   xED
2502:  CLRF   xEC
2504:  CALL   0D1C
2508:  BZ    257A
....................  { 
....................   if (s == 1 && n == 0) 
250A:  BTFSS  xE7.0
250C:  BRA    2542
250E:  MOVF   xDC,F
2510:  BNZ   2542
....................    res -= 1.0; 
2512:  BSF    FD8.1
2514:  MOVFF  E4,EF
2518:  MOVFF  E3,EE
251C:  MOVFF  E2,ED
2520:  MOVFF  E1,EC
2524:  CLRF   xF3
2526:  CLRF   xF2
2528:  CLRF   xF1
252A:  MOVLW  7F
252C:  MOVWF  xF0
252E:  CALL   1B46
2532:  MOVFF  03,E4
2536:  MOVFF  02,E3
253A:  MOVFF  01,E2
253E:  MOVFF  00,E1
....................  
....................   if (s == 0 && n == 1) 
2542:  BTFSC  xE7.0
2544:  BRA    257A
2546:  DECFSZ xDC,W
2548:  BRA    257A
....................    res += 1.0; 
254A:  BCF    FD8.1
254C:  MOVFF  E4,EF
2550:  MOVFF  E3,EE
2554:  MOVFF  E2,ED
2558:  MOVFF  E1,EC
255C:  CLRF   xF3
255E:  CLRF   xF2
2560:  CLRF   xF1
2562:  MOVLW  7F
2564:  MOVWF  xF0
2566:  CALL   1B46
256A:  MOVFF  03,E4
256E:  MOVFF  02,E3
2572:  MOVFF  01,E2
2576:  MOVFF  00,E1
....................  } 
....................  if (x == 0) 
257A:  MOVFF  DB,EB
257E:  MOVFF  DA,EA
2582:  MOVFF  D9,E9
2586:  MOVFF  D8,E8
258A:  CLRF   xEF
258C:  CLRF   xEE
258E:  CLRF   xED
2590:  CLRF   xEC
2592:  CALL   0D1C
2596:  BNZ   25A0
....................     res = 0; 
2598:  CLRF   xE4
259A:  CLRF   xE3
259C:  CLRF   xE2
259E:  CLRF   xE1
....................  
....................  return (res); 
25A0:  MOVFF  E1,00
25A4:  MOVFF  E2,01
25A8:  MOVFF  E3,02
25AC:  MOVFF  E4,03
.................... } 
25B0:  GOTO   25C8 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
25B4:  MOVFF  D7,DB
25B8:  MOVFF  D6,DA
25BC:  MOVFF  D5,D9
25C0:  MOVFF  D4,D8
25C4:  CLRF   xDC
25C6:  BRA    2276
.................... } 
25C8:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
0834:  MOVLW  F0
0836:  MOVWF  F95
....................       lcd.rw = 1; 
0838:  BSF    F83.2
....................       delay_cycles(30);//30 
083A:  MOVLW  09
083C:  MOVWF  00
083E:  DECFSZ 00,F
0840:  BRA    083E
0842:  BRA    0844
....................       lcd.enable = 1; 
0844:  BSF    F83.3
....................       delay_cycles(30);//30 
0846:  MOVLW  09
0848:  MOVWF  00
084A:  DECFSZ 00,F
084C:  BRA    084A
084E:  BRA    0850
....................       high = lcd.data; 
0850:  SWAPF  F83,W
0852:  ANDLW  0F
0854:  MOVWF  xEC
....................       lcd.enable = 0; 
0856:  BCF    F83.3
....................       delay_cycles(30);//30 
0858:  MOVLW  09
085A:  MOVWF  00
085C:  DECFSZ 00,F
085E:  BRA    085C
0860:  BRA    0862
....................       lcd.enable = 1; 
0862:  BSF    F83.3
....................       delay_us(30);//30 
0864:  MOVLW  31
0866:  MOVWF  00
0868:  DECFSZ 00,F
086A:  BRA    0868
086C:  BRA    086E
....................       low = lcd.data; 
086E:  SWAPF  F83,W
0870:  ANDLW  0F
0872:  MOVWF  xEB
....................       lcd.enable = 0; 
0874:  BCF    F83.3
....................       set_tris_d(LCD_WRITE); 
0876:  MOVLW  00
0878:  MOVWF  F95
....................       return( (high<<4) | low); 
087A:  SWAPF  xEC,W
087C:  MOVWF  00
087E:  MOVLW  F0
0880:  ANDWF  00,F
0882:  MOVF   00,W
0884:  IORWF  xEB,W
0886:  MOVWF  01
.................... } 
0888:  GOTO   0890 (RETURN)
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
080C:  SWAPF  xEC,W
080E:  ANDLW  F0
0810:  MOVWF  00
0812:  MOVLW  0F
0814:  ANDWF  F83,W
0816:  IORWF  00,W
0818:  MOVWF  F83
....................       delay_cycles(30);//30 
081A:  MOVLW  09
081C:  MOVWF  00
081E:  DECFSZ 00,F
0820:  BRA    081E
0822:  BRA    0824
....................       lcd.enable = 1; 
0824:  BSF    F83.3
....................       delay_us(55);//55 
0826:  MOVLW  5B
0828:  MOVWF  00
082A:  DECFSZ 00,F
082C:  BRA    082A
082E:  NOP   
....................       lcd.enable = 0; 
0830:  BCF    F83.3
.................... } 
0832:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
088C:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7)); 
088E:  BRA    0834
0890:  MOVFF  01,EB
0894:  BTFSC  01.7
0896:  BRA    088E
....................       //delay_ms(1); 
....................       lcd.rs = address; 
0898:  BTFSS  xE9.0
089A:  BCF    F83.1
089C:  BTFSC  xE9.0
089E:  BSF    F83.1
....................       delay_cycles(30);//30 
08A0:  MOVLW  09
08A2:  MOVWF  00
08A4:  DECFSZ 00,F
08A6:  BRA    08A4
08A8:  BRA    08AA
....................       lcd.rw = 0; 
08AA:  BCF    F83.2
....................       delay_cycles(30);//30 
08AC:  MOVLW  09
08AE:  MOVWF  00
08B0:  DECFSZ 00,F
08B2:  BRA    08B0
08B4:  BRA    08B6
....................       lcd.enable = 0; 
08B6:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
08B8:  SWAPF  xEA,W
08BA:  MOVWF  xEB
08BC:  MOVLW  0F
08BE:  ANDWF  xEB,F
08C0:  MOVFF  EB,EC
08C4:  RCALL  080C
....................       lcd_send_nibble(n & 0xf); 
08C6:  MOVF   xEA,W
08C8:  ANDLW  0F
08CA:  MOVWF  xEB
08CC:  MOVWF  xEC
08CE:  RCALL  080C
.................... } 
08D0:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
08D2:  MOVLW  00
08D4:  MOVWF  F95
....................     lcd.rs = 0; 
08D6:  BCF    F83.1
....................     lcd.rw = 0; 
08D8:  BCF    F83.2
....................     lcd.enable = 0; 
08DA:  BCF    F83.3
....................     delay_ms(15); 
08DC:  MOVLW  0F
08DE:  MOVWF  xEA
08E0:  RCALL  07E6
....................     for(i=1;i<=3;++i) { 
08E2:  MOVLW  01
08E4:  MOVWF  xD4
08E6:  MOVF   xD4,W
08E8:  SUBLW  03
08EA:  BNC   08FC
....................        lcd_send_nibble(3); 
08EC:  MOVLW  03
08EE:  MOVWF  xEC
08F0:  RCALL  080C
....................        delay_ms(5); 
08F2:  MOVLW  05
08F4:  MOVWF  xEA
08F6:  RCALL  07E6
....................     } 
08F8:  INCF   xD4,F
08FA:  BRA    08E6
....................     lcd_send_nibble(2); 
08FC:  MOVLW  02
08FE:  MOVWF  xEC
0900:  RCALL  080C
....................     for(i=0;i<=3;++i) 
0902:  CLRF   xD4
0904:  MOVF   xD4,W
0906:  SUBLW  03
0908:  BNC   092E
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
090A:  CLRF   03
090C:  MOVF   xD4,W
090E:  MOVFF  FF2,D5
0912:  BCF    FF2.6
0914:  BCF    FF2.7
0916:  CALL   00A6
091A:  BTFSC  xD5.6
091C:  BSF    FF2.6
091E:  BTFSC  xD5.7
0920:  BSF    FF2.7
0922:  MOVWF  xD5
0924:  CLRF   xE9
0926:  MOVWF  xEA
0928:  RCALL  088C
092A:  INCF   xD4,F
092C:  BRA    0904
.................... } 
092E:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
12C0:  MOVLW  01
12C2:  SUBWF  xE7,W
12C4:  ADDLW  FC
12C6:  BC    12E6
12C8:  ADDLW  04
12CA:  GOTO   12F8
....................      case 1 : address=0x80;break; 
12CE:  MOVLW  80
12D0:  MOVWF  xE8
12D2:  BRA    12E6
....................      case 2 : address=0xc0;break; 
12D4:  MOVLW  C0
12D6:  MOVWF  xE8
12D8:  BRA    12E6
....................      case 3 : address=0x94;break; 
12DA:  MOVLW  94
12DC:  MOVWF  xE8
12DE:  BRA    12E6
....................      case 4 : address=0xd4;break; 
12E0:  MOVLW  D4
12E2:  MOVWF  xE8
12E4:  BRA    12E6
....................    } 
....................    address+=x-1; 
12E6:  MOVLW  01
12E8:  SUBWF  xE6,W
12EA:  ADDWF  xE8,F
....................    lcd_send_byte(0,address); 
12EC:  CLRF   xE9
12EE:  MOVFF  E8,EA
12F2:  CALL   088C
.................... } 
12F6:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
132A:  MOVF   xE5,W
132C:  SUBLW  F1
132E:  BNZ   1334
....................    { 
....................       c=238; 
1330:  MOVLW  EE
1332:  MOVWF  xE5
....................    } 
....................    if(c=='Ñ') 
1334:  MOVF   xE5,W
1336:  SUBLW  D1
1338:  BNZ   133E
....................    { 
....................       c=255; 
133A:  MOVLW  FF
133C:  MOVWF  xE5
....................    } 
....................     
....................    switch (c) { 
133E:  MOVF   xE5,W
1340:  XORLW  0C
1342:  BZ    134E
1344:  XORLW  06
1346:  BZ    1366
1348:  XORLW  02
134A:  BZ    1374
134C:  BRA    1380
....................      case '\f'   : lcd_send_byte(0,1); 
134E:  CLRF   xE9
1350:  MOVLW  01
1352:  MOVWF  xEA
1354:  CALL   088C
....................                    lcdline=1; 
1358:  MOVLW  01
135A:  MOVWF  16
....................                    delay_ms(2); 
135C:  MOVLW  02
135E:  MOVWF  xEA
1360:  CALL   07E6
....................                                            break; 
1364:  BRA    138E
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
1366:  INCF   16,F
1368:  MOVLW  01
136A:  MOVWF  xE6
136C:  MOVFF  16,E7
1370:  RCALL  12C0
1372:  BRA    138E
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
1374:  CLRF   xE9
1376:  MOVLW  10
1378:  MOVWF  xEA
137A:  CALL   088C
137E:  BRA    138E
....................      default     : lcd_send_byte(1,c);     break; 
1380:  MOVLW  01
1382:  MOVWF  xE9
1384:  MOVFF  E5,EA
1388:  CALL   088C
138C:  BRA    138E
....................    } 
.................... } 
138E:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF,flag_arriba=OFF,Entro=0; 
.................... short flagdn=0,flagup=0; 
.................... int8 Menu=0, n_opcionH=5,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,n=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0,segundosTrabajo=0,horasTrabajo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
16D2:  DECFSZ xD5,W
16D4:  BRA    16EA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
16D6:  MOVLW  02
16D8:  MOVWF  xE6
16DA:  MOVFF  D6,E7
16DE:  RCALL  12C0
16E0:  MOVLW  CA
16E2:  MOVWF  FF6
16E4:  MOVLW  00
16E6:  MOVWF  FF7
16E8:  RCALL  1390
....................    if(x==2) 
16EA:  MOVF   xD5,W
16EC:  SUBLW  02
16EE:  BNZ   1704
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
16F0:  MOVLW  02
16F2:  MOVWF  xE6
16F4:  MOVFF  D6,E7
16F8:  RCALL  12C0
16FA:  MOVLW  DE
16FC:  MOVWF  FF6
16FE:  MOVLW  00
1700:  MOVWF  FF7
1702:  RCALL  1390
....................    if(x==3) 
1704:  MOVF   xD5,W
1706:  SUBLW  03
1708:  BNZ   171E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo     ");} 
170A:  MOVLW  02
170C:  MOVWF  xE6
170E:  MOVFF  D6,E7
1712:  RCALL  12C0
1714:  MOVLW  F2
1716:  MOVWF  FF6
1718:  MOVLW  00
171A:  MOVWF  FF7
171C:  RCALL  1390
....................    if(x==4) 
171E:  MOVF   xD5,W
1720:  SUBLW  04
1722:  BNZ   1738
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1724:  MOVLW  02
1726:  MOVWF  xE6
1728:  MOVFF  D6,E7
172C:  RCALL  12C0
172E:  MOVLW  06
1730:  MOVWF  FF6
1732:  MOVLW  01
1734:  MOVWF  FF7
1736:  RCALL  1390
....................     
....................    if(x==5) 
1738:  MOVF   xD5,W
173A:  SUBLW  05
173C:  BNZ   176E
....................    {if(estadoalarma==0) 
173E:  BTFSC  18.4
1740:  BRA    1756
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1742:  MOVLW  02
1744:  MOVWF  xE6
1746:  MOVFF  D6,E7
174A:  RCALL  12C0
174C:  MOVLW  1A
174E:  MOVWF  FF6
1750:  MOVLW  01
1752:  MOVWF  FF7
1754:  RCALL  1390
....................    if(estadoalarma==1) 
1756:  BTFSS  18.4
1758:  BRA    176E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
175A:  MOVLW  02
175C:  MOVWF  xE6
175E:  MOVFF  D6,E7
1762:  RCALL  12C0
1764:  MOVLW  2E
1766:  MOVWF  FF6
1768:  MOVLW  01
176A:  MOVWF  FF7
176C:  RCALL  1390
....................    } 
....................     
....................    if(x==6) 
176E:  MOVF   xD5,W
1770:  SUBLW  06
1772:  BNZ   1788
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
1774:  MOVLW  02
1776:  MOVWF  xE6
1778:  MOVFF  D6,E7
177C:  RCALL  12C0
177E:  MOVLW  42
1780:  MOVWF  FF6
1782:  MOVLW  01
1784:  MOVWF  FF7
1786:  RCALL  1390
.................... } 
1788:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
18A4:  RLCF   xE5,W
18A6:  MOVWF  00
18A8:  RLCF   00,F
18AA:  MOVLW  FC
18AC:  ANDWF  00,F
18AE:  MOVFF  00,01
18B2:  MOVF   FC2,W
18B4:  ANDLW  C3
18B6:  IORWF  00,W
18B8:  MOVWF  FC2
18BA:  MOVLW  0A
18BC:  MOVWF  xEA
18BE:  CALL   07E6
18C2:  BSF    FC2.1
18C4:  BTFSC  FC2.1
18C6:  BRA    18C4
18C8:  MOVFF  FC4,03
18CC:  MOVFF  FC3,EC
18D0:  MOVFF  FC4,ED
18D4:  CALL   096C
18D8:  MOVFF  03,E9
18DC:  MOVFF  02,E8
18E0:  MOVFF  01,E7
18E4:  MOVFF  00,E6
18E8:  MOVFF  E6,00
18EC:  MOVFF  E7,01
18F0:  MOVFF  E8,02
18F4:  MOVFF  E9,03
.................... } 
18F8:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1DB0:  CLRF   xD8
1DB2:  CLRF   xD7
1DB4:  CLRF   xD6
1DB6:  CLRF   xD5
1DB8:  CLRF   xDC
1DBA:  CLRF   xDB
1DBC:  CLRF   xDA
1DBE:  CLRF   xD9
1DC0:  CLRF   xE0
1DC2:  CLRF   xDF
1DC4:  CLRF   xDE
1DC6:  CLRF   xDD
1DC8:  CLRF   xE4
1DCA:  CLRF   xE3
1DCC:  CLRF   xE2
1DCE:  CLRF   xE1
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................   //-----------MPXV5004DP------------------//  
....................    //V1=sensores(0);  
....................    //Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
....................    
....................   //-----------MPXV7002DP------------------//  
....................    V1=sensores(0);  
1DD0:  CLRF   xE5
1DD2:  RCALL  18A4
1DD4:  MOVFF  03,A0
1DD8:  MOVFF  02,9F
1DDC:  MOVFF  01,9E
1DE0:  MOVFF  00,9D
....................    VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
1DE4:  MOVFF  A0,EB
1DE8:  MOVFF  9F,EA
1DEC:  MOVFF  9E,E9
1DF0:  MOVFF  9D,E8
1DF4:  CLRF   xEF
1DF6:  CLRF   xEE
1DF8:  MOVLW  20
1DFA:  MOVWF  xED
1DFC:  MOVLW  81
1DFE:  MOVWF  xEC
1E00:  RCALL  18FA
1E02:  MOVFF  00,E5
1E06:  MOVFF  01,E6
1E0A:  MOVFF  02,E7
1E0E:  MOVFF  03,E8
1E12:  MOVFF  03,EC
1E16:  MOVFF  02,EB
1E1A:  MOVFF  01,EA
1E1E:  MOVFF  00,E9
1E22:  CLRF   xF0
1E24:  MOVLW  C0
1E26:  MOVWF  xEF
1E28:  MOVLW  7F
1E2A:  MOVWF  xEE
1E2C:  MOVLW  88
1E2E:  MOVWF  xED
1E30:  RCALL  19EC
1E32:  MOVFF  03,E0
1E36:  MOVFF  02,DF
1E3A:  MOVFF  01,DE
1E3E:  MOVFF  00,DD
....................    G2=G; 
1E42:  MOVFF  B0,E4
1E46:  MOVFF  AF,E3
1E4A:  MOVFF  AE,E2
1E4E:  MOVFF  AD,E1
....................    VG = (G2*5.0)/1023.0; 
1E52:  MOVFF  E4,EB
1E56:  MOVFF  E3,EA
1E5A:  MOVFF  E2,E9
1E5E:  MOVFF  E1,E8
1E62:  CLRF   xEF
1E64:  CLRF   xEE
1E66:  MOVLW  20
1E68:  MOVWF  xED
1E6A:  MOVLW  81
1E6C:  MOVWF  xEC
1E6E:  RCALL  18FA
1E70:  MOVFF  00,E5
1E74:  MOVFF  01,E6
1E78:  MOVFF  02,E7
1E7C:  MOVFF  03,E8
1E80:  MOVFF  03,EC
1E84:  MOVFF  02,EB
1E88:  MOVFF  01,EA
1E8C:  MOVFF  00,E9
1E90:  CLRF   xF0
1E92:  MOVLW  C0
1E94:  MOVWF  xEF
1E96:  MOVLW  7F
1E98:  MOVWF  xEE
1E9A:  MOVLW  88
1E9C:  MOVWF  xED
1E9E:  RCALL  19EC
1EA0:  MOVFF  03,DC
1EA4:  MOVFF  02,DB
1EA8:  MOVFF  01,DA
1EAC:  MOVFF  00,D9
....................    Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
1EB0:  BSF    FD8.1
1EB2:  MOVFF  E0,EF
1EB6:  MOVFF  DF,EE
1EBA:  MOVFF  DE,ED
1EBE:  MOVFF  DD,EC
1EC2:  MOVFF  DC,F3
1EC6:  MOVFF  DB,F2
1ECA:  MOVFF  DA,F1
1ECE:  MOVFF  D9,F0
1ED2:  RCALL  1B46
1ED4:  MOVFF  03,A4
1ED8:  MOVFF  02,A3
1EDC:  MOVFF  01,A2
1EE0:  MOVFF  00,A1
....................     
....................    if(Presion<0.0) 
1EE4:  MOVFF  A4,EB
1EE8:  MOVFF  A3,EA
1EEC:  MOVFF  A2,E9
1EF0:  MOVFF  A1,E8
1EF4:  CLRF   xEF
1EF6:  CLRF   xEE
1EF8:  CLRF   xED
1EFA:  CLRF   xEC
1EFC:  CALL   0D1C
1F00:  BNC   1F0A
....................       Presion=0.0; 
1F02:  CLRF   xA4
1F04:  CLRF   xA3
1F06:  CLRF   xA2
1F08:  CLRF   xA1
....................  
....................    if(r>media-1) 
1F0A:  MOVLW  01
1F0C:  SUBWF  xD4,W
1F0E:  SUBWF  2D,W
1F10:  BZ    1F16
1F12:  BNC   1F16
....................    {r=0;} 
1F14:  CLRF   2D
....................    PromPresion[r]=Presion;r++; 
1F16:  MOVF   2D,W
1F18:  MULLW  04
1F1A:  MOVF   FF3,W
1F1C:  CLRF   03
1F1E:  ADDLW  4D
1F20:  MOVWF  FE9
1F22:  MOVLW  00
1F24:  ADDWFC 03,W
1F26:  MOVWF  FEA
1F28:  MOVFF  A1,FEF
1F2C:  MOVFF  A2,FEC
1F30:  MOVFF  A3,FEC
1F34:  MOVFF  A4,FEC
1F38:  INCF   2D,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1F3A:  CLRF   2E
1F3C:  MOVLW  01
1F3E:  SUBWF  xD4,W
1F40:  SUBWF  2E,W
1F42:  BZ    1F46
1F44:  BC    1FB0
....................    { 
....................       promediopresion+=PromPresion[q]; 
1F46:  MOVF   2E,W
1F48:  MULLW  04
1F4A:  MOVF   FF3,W
1F4C:  CLRF   03
1F4E:  ADDLW  4D
1F50:  MOVWF  FE9
1F52:  MOVLW  00
1F54:  ADDWFC 03,W
1F56:  MOVWF  FEA
1F58:  MOVFF  FEF,00
1F5C:  MOVFF  FEC,01
1F60:  MOVFF  FEC,02
1F64:  MOVFF  FEC,03
1F68:  MOVFF  FEA,E6
1F6C:  MOVFF  FE9,E5
1F70:  BCF    FD8.1
1F72:  MOVFF  D8,EF
1F76:  MOVFF  D7,EE
1F7A:  MOVFF  D6,ED
1F7E:  MOVFF  D5,EC
1F82:  MOVFF  03,F3
1F86:  MOVFF  02,F2
1F8A:  MOVFF  01,F1
1F8E:  MOVFF  00,F0
1F92:  RCALL  1B46
1F94:  MOVFF  E6,FEA
1F98:  MOVFF  E5,FE9
1F9C:  MOVFF  03,D8
1FA0:  MOVFF  02,D7
1FA4:  MOVFF  01,D6
1FA8:  MOVFF  00,D5
....................    }  
1FAC:  INCF   2E,F
1FAE:  BRA    1F3C
....................    promediopresion=promediopresion/media;    
1FB0:  CLRF   xED
1FB2:  MOVFF  D4,EC
1FB6:  CALL   096C
1FBA:  MOVFF  D8,EC
1FBE:  MOVFF  D7,EB
1FC2:  MOVFF  D6,EA
1FC6:  MOVFF  D5,E9
1FCA:  MOVFF  03,F0
1FCE:  MOVFF  02,EF
1FD2:  MOVFF  01,EE
1FD6:  MOVFF  00,ED
1FDA:  RCALL  19EC
1FDC:  MOVFF  03,D8
1FE0:  MOVFF  02,D7
1FE4:  MOVFF  01,D6
1FE8:  MOVFF  00,D5
....................     
....................    return promediopresion; 
1FEC:  MOVFF  D5,00
1FF0:  MOVFF  D6,01
1FF4:  MOVFF  D7,02
1FF8:  MOVFF  D8,03
.................... } 
1FFC:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0930:  MOVLW  C8
0932:  MOVWF  xEA
0934:  RCALL  07E6
....................    lcd_init(); 
0936:  RCALL  08D2
....................    set_tris_a(0XFF); 
0938:  MOVLW  FF
093A:  MOVWF  F92
....................    set_tris_e(0XFF); 
093C:  BSF    F96.1
093E:  BSF    F96.1
0940:  BSF    F96.1
0942:  BSF    F96.1
....................    enable_interrupts(global); 
0944:  MOVLW  C0
0946:  IORWF  FF2,F
....................    //enable_interrupts(INT_EXT_L2H); 
....................    setup_wdt(WDT_ON); 
0948:  BSF    FD1.0
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    //setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
....................    //enable_interrupts(INT_TIMER0); 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
094A:  MOVLW  85
094C:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
094E:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0950:  MOVF   FC1,W
0952:  ANDLW  C0
0954:  IORLW  0E
0956:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0958:  MOVF   FC0,W
095A:  ANDLW  C0
095C:  IORLW  02
095E:  MOVWF  FC0
0960:  BSF    FC0.7
0962:  BSF    FC2.0
....................    enable_interrupts(global); 
0964:  MOVLW  C0
0966:  IORWF  FF2,F
.................... } 
0968:  GOTO   27E4 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
13B0:  MOVLW  01
13B2:  MOVWF  xE6
13B4:  MOVWF  xE7
13B6:  RCALL  12C0
....................    printf(lcd_putc,"       MODULO       "); 
13B8:  MOVLW  56
13BA:  MOVWF  FF6
13BC:  MOVLW  01
13BE:  MOVWF  FF7
13C0:  RCALL  1390
....................    lcd_gotoxy(1,2); 
13C2:  MOVLW  01
13C4:  MOVWF  xE6
13C6:  MOVLW  02
13C8:  MOVWF  xE7
13CA:  RCALL  12C0
....................    printf(lcd_putc,"   FLUJO LAMINAR    "); 
13CC:  MOVLW  6C
13CE:  MOVWF  FF6
13D0:  MOVLW  01
13D2:  MOVWF  FF7
13D4:  RCALL  1390
....................    lcd_gotoxy(1,3); 
13D6:  MOVLW  01
13D8:  MOVWF  xE6
13DA:  MOVLW  03
13DC:  MOVWF  xE7
13DE:  RCALL  12C0
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
13E0:  MOVLW  82
13E2:  MOVWF  FF6
13E4:  MOVLW  01
13E6:  MOVWF  FF7
13E8:  RCALL  1390
....................    lcd_gotoxy(1,4); 
13EA:  MOVLW  01
13EC:  MOVWF  xE6
13EE:  MOVLW  04
13F0:  MOVWF  xE7
13F2:  RCALL  12C0
....................    printf(lcd_putc,"  REF:JPCFLVMD111X  "); 
13F4:  MOVLW  98
13F6:  MOVWF  FF6
13F8:  MOVLW  01
13FA:  MOVWF  FF7
13FC:  RCALL  1390
....................    delay_ms(2000); 
13FE:  MOVLW  08
1400:  MOVWF  xD4
1402:  MOVLW  FA
1404:  MOVWF  xEA
1406:  CALL   07E6
140A:  DECFSZ xD4,F
140C:  BRA    1402
....................    printf(lcd_putc,"\f"); 
140E:  MOVLW  0C
1410:  MOVWF  xE5
1412:  RCALL  132A
.................... } 
1414:  GOTO   27F6 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
09A2:  MOVFF  FF2,D4
09A6:  BCF    FF2.6
09A8:  BCF    FF2.7
09AA:  CLRF   FA9
09AC:  BCF    FA6.6
09AE:  BCF    FA6.7
09B0:  BSF    FA6.0
09B2:  MOVF   FA8,W
09B4:  BTFSC  xD4.6
09B6:  BSF    FF2.6
09B8:  BTFSC  xD4.7
09BA:  BSF    FF2.7
09BC:  MOVWF  3D
....................    delay_ms(20);  
09BE:  MOVLW  14
09C0:  MOVWF  xEA
09C2:  RCALL  07E6
....................    contrasena[1]=read_eeprom(1); 
09C4:  MOVFF  FF2,D4
09C8:  BCF    FF2.6
09CA:  BCF    FF2.7
09CC:  MOVLW  01
09CE:  MOVWF  FA9
09D0:  BCF    FA6.6
09D2:  BCF    FA6.7
09D4:  BSF    FA6.0
09D6:  MOVF   FA8,W
09D8:  BTFSC  xD4.6
09DA:  BSF    FF2.6
09DC:  BTFSC  xD4.7
09DE:  BSF    FF2.7
09E0:  MOVWF  3E
....................    delay_ms(20); 
09E2:  MOVLW  14
09E4:  MOVWF  xEA
09E6:  RCALL  07E6
....................    contrasena[2]=read_eeprom(2); 
09E8:  MOVFF  FF2,D4
09EC:  BCF    FF2.6
09EE:  BCF    FF2.7
09F0:  MOVLW  02
09F2:  MOVWF  FA9
09F4:  BCF    FA6.6
09F6:  BCF    FA6.7
09F8:  BSF    FA6.0
09FA:  MOVF   FA8,W
09FC:  BTFSC  xD4.6
09FE:  BSF    FF2.6
0A00:  BTFSC  xD4.7
0A02:  BSF    FF2.7
0A04:  MOVWF  3F
....................    delay_ms(20);  
0A06:  MOVLW  14
0A08:  MOVWF  xEA
0A0A:  RCALL  07E6
....................    contrasena[3]=read_eeprom(3); 
0A0C:  MOVFF  FF2,D4
0A10:  BCF    FF2.6
0A12:  BCF    FF2.7
0A14:  MOVLW  03
0A16:  MOVWF  FA9
0A18:  BCF    FA6.6
0A1A:  BCF    FA6.7
0A1C:  BSF    FA6.0
0A1E:  MOVF   FA8,W
0A20:  BTFSC  xD4.6
0A22:  BSF    FF2.6
0A24:  BTFSC  xD4.7
0A26:  BSF    FF2.7
0A28:  MOVWF  40
....................    delay_ms(20); 
0A2A:  MOVLW  14
0A2C:  MOVWF  xEA
0A2E:  RCALL  07E6
....................    estadoalarma=read_eeprom(4); 
0A30:  MOVFF  FF2,D4
0A34:  BCF    FF2.6
0A36:  BCF    FF2.7
0A38:  MOVLW  04
0A3A:  MOVWF  FA9
0A3C:  BCF    FA6.6
0A3E:  BCF    FA6.7
0A40:  BSF    FA6.0
0A42:  MOVF   FA8,W
0A44:  BTFSC  xD4.6
0A46:  BSF    FF2.6
0A48:  BTFSC  xD4.7
0A4A:  BSF    FF2.7
0A4C:  MOVWF  01
0A4E:  BCF    18.4
0A50:  BTFSC  01.0
0A52:  BSF    18.4
....................    delay_ms(20); 
0A54:  MOVLW  14
0A56:  MOVWF  xEA
0A58:  RCALL  07E6
....................    tempo_minutos=read_eeprom(5); 
0A5A:  MOVFF  FF2,D4
0A5E:  BCF    FF2.6
0A60:  BCF    FF2.7
0A62:  MOVLW  05
0A64:  MOVWF  FA9
0A66:  BCF    FA6.6
0A68:  BCF    FA6.7
0A6A:  BSF    FA6.0
0A6C:  MOVF   FA8,W
0A6E:  BTFSC  xD4.6
0A70:  BSF    FF2.6
0A72:  BTFSC  xD4.7
0A74:  BSF    FF2.7
0A76:  MOVWF  29
....................    delay_ms(20); 
0A78:  MOVLW  14
0A7A:  MOVWF  xEA
0A7C:  RCALL  07E6
....................    tempo_segundos=read_eeprom(6); 
0A7E:  MOVFF  FF2,D4
0A82:  BCF    FF2.6
0A84:  BCF    FF2.7
0A86:  MOVLW  06
0A88:  MOVWF  FA9
0A8A:  BCF    FA6.6
0A8C:  BCF    FA6.7
0A8E:  BSF    FA6.0
0A90:  MOVF   FA8,W
0A92:  BTFSC  xD4.6
0A94:  BSF    FF2.6
0A96:  BTFSC  xD4.7
0A98:  BSF    FF2.7
0A9A:  MOVWF  2A
....................    delay_ms(20); 
0A9C:  MOVLW  14
0A9E:  MOVWF  xEA
0AA0:  RCALL  07E6
....................    segundos=read_eeprom(7); 
0AA2:  MOVFF  FF2,D4
0AA6:  BCF    FF2.6
0AA8:  BCF    FF2.7
0AAA:  MOVLW  07
0AAC:  MOVWF  FA9
0AAE:  BCF    FA6.6
0AB0:  BCF    FA6.7
0AB2:  BSF    FA6.0
0AB4:  MOVF   FA8,W
0AB6:  BTFSC  xD4.6
0AB8:  BSF    FF2.6
0ABA:  BTFSC  xD4.7
0ABC:  BSF    FF2.7
0ABE:  MOVWF  23
....................    delay_ms(20); 
0AC0:  MOVLW  14
0AC2:  MOVWF  xEA
0AC4:  RCALL  07E6
....................    minutos=read_eeprom(8); 
0AC6:  MOVFF  FF2,D4
0ACA:  BCF    FF2.6
0ACC:  BCF    FF2.7
0ACE:  MOVLW  08
0AD0:  MOVWF  FA9
0AD2:  BCF    FA6.6
0AD4:  BCF    FA6.7
0AD6:  BSF    FA6.0
0AD8:  MOVF   FA8,W
0ADA:  BTFSC  xD4.6
0ADC:  BSF    FF2.6
0ADE:  BTFSC  xD4.7
0AE0:  BSF    FF2.7
0AE2:  MOVWF  24
....................    delay_ms(20); 
0AE4:  MOVLW  14
0AE6:  MOVWF  xEA
0AE8:  RCALL  07E6
....................    horasL=read_eeprom(9); 
0AEA:  MOVFF  FF2,D4
0AEE:  BCF    FF2.6
0AF0:  BCF    FF2.7
0AF2:  MOVLW  09
0AF4:  MOVWF  FA9
0AF6:  BCF    FA6.6
0AF8:  BCF    FA6.7
0AFA:  BSF    FA6.0
0AFC:  MOVF   FA8,W
0AFE:  BTFSC  xD4.6
0B00:  BSF    FF2.6
0B02:  BTFSC  xD4.7
0B04:  BSF    FF2.7
0B06:  MOVWF  25
....................    delay_ms(20); 
0B08:  MOVLW  14
0B0A:  MOVWF  xEA
0B0C:  RCALL  07E6
....................    horasH=read_eeprom(10); 
0B0E:  MOVFF  FF2,D4
0B12:  BCF    FF2.6
0B14:  BCF    FF2.7
0B16:  MOVLW  0A
0B18:  MOVWF  FA9
0B1A:  BCF    FA6.6
0B1C:  BCF    FA6.7
0B1E:  BSF    FA6.0
0B20:  MOVF   FA8,W
0B22:  BTFSC  xD4.6
0B24:  BSF    FF2.6
0B26:  BTFSC  xD4.7
0B28:  BSF    FF2.7
0B2A:  MOVWF  26
....................    delay_ms(20); 
0B2C:  MOVLW  14
0B2E:  MOVWF  xEA
0B30:  RCALL  07E6
....................    G_l=read_eeprom(11); 
0B32:  MOVFF  FF2,D4
0B36:  BCF    FF2.6
0B38:  BCF    FF2.7
0B3A:  MOVLW  0B
0B3C:  MOVWF  FA9
0B3E:  BCF    FA6.6
0B40:  BCF    FA6.7
0B42:  BSF    FA6.0
0B44:  MOVF   FA8,W
0B46:  BTFSC  xD4.6
0B48:  BSF    FF2.6
0B4A:  BTFSC  xD4.7
0B4C:  BSF    FF2.7
0B4E:  MOVWF  27
....................    delay_ms(20); 
0B50:  MOVLW  14
0B52:  MOVWF  xEA
0B54:  RCALL  07E6
....................    G_h=read_eeprom(12); 
0B56:  MOVFF  FF2,D4
0B5A:  BCF    FF2.6
0B5C:  BCF    FF2.7
0B5E:  MOVLW  0C
0B60:  MOVWF  FA9
0B62:  BCF    FA6.6
0B64:  BCF    FA6.7
0B66:  BSF    FA6.0
0B68:  MOVF   FA8,W
0B6A:  BTFSC  xD4.6
0B6C:  BSF    FF2.6
0B6E:  BTFSC  xD4.7
0B70:  BSF    FF2.7
0B72:  MOVWF  28
....................    delay_ms(20); 
0B74:  MOVLW  14
0B76:  MOVWF  xEA
0B78:  RCALL  07E6
....................    Vel1=read_eeprom(13); 
0B7A:  MOVFF  FF2,D4
0B7E:  BCF    FF2.6
0B80:  BCF    FF2.7
0B82:  MOVLW  0D
0B84:  MOVWF  FA9
0B86:  BCF    FA6.6
0B88:  BCF    FA6.7
0B8A:  BSF    FA6.0
0B8C:  MOVF   FA8,W
0B8E:  BTFSC  xD4.6
0B90:  BSF    FF2.6
0B92:  BTFSC  xD4.7
0B94:  BSF    FF2.7
0B96:  MOVWF  46
....................    delay_ms(20); 
0B98:  MOVLW  14
0B9A:  MOVWF  xEA
0B9C:  RCALL  07E6
....................    codigoSubir=read_eeprom(15); 
0B9E:  MOVFF  FF2,D4
0BA2:  BCF    FF2.6
0BA4:  BCF    FF2.7
0BA6:  MOVLW  0F
0BA8:  MOVWF  FA9
0BAA:  BCF    FA6.6
0BAC:  BCF    FA6.7
0BAE:  BSF    FA6.0
0BB0:  MOVF   FA8,W
0BB2:  BTFSC  xD4.6
0BB4:  BSF    FF2.6
0BB6:  BTFSC  xD4.7
0BB8:  BSF    FF2.7
0BBA:  MOVWF  42
....................    delay_ms(20); 
0BBC:  MOVLW  14
0BBE:  MOVWF  xEA
0BC0:  RCALL  07E6
....................    codigoBajar=read_eeprom(16); 
0BC2:  MOVFF  FF2,D4
0BC6:  BCF    FF2.6
0BC8:  BCF    FF2.7
0BCA:  MOVLW  10
0BCC:  MOVWF  FA9
0BCE:  BCF    FA6.6
0BD0:  BCF    FA6.7
0BD2:  BSF    FA6.0
0BD4:  MOVF   FA8,W
0BD6:  BTFSC  xD4.6
0BD8:  BSF    FF2.6
0BDA:  BTFSC  xD4.7
0BDC:  BSF    FF2.7
0BDE:  MOVWF  43
....................    delay_ms(20); 
0BE0:  MOVLW  14
0BE2:  MOVWF  xEA
0BE4:  RCALL  07E6
....................    codigoDetener=read_eeprom(17); 
0BE6:  MOVFF  FF2,D4
0BEA:  BCF    FF2.6
0BEC:  BCF    FF2.7
0BEE:  MOVLW  11
0BF0:  MOVWF  FA9
0BF2:  BCF    FA6.6
0BF4:  BCF    FA6.7
0BF6:  BSF    FA6.0
0BF8:  MOVF   FA8,W
0BFA:  BTFSC  xD4.6
0BFC:  BSF    FF2.6
0BFE:  BTFSC  xD4.7
0C00:  BSF    FF2.7
0C02:  MOVWF  44
....................    delay_ms(20); 
0C04:  MOVLW  14
0C06:  MOVWF  xEA
0C08:  RCALL  07E6
....................    G16=make16(G_h,G_l); 
0C0A:  MOVFF  28,4C
0C0E:  MOVFF  27,4B
....................    G=G16; 
0C12:  MOVFF  4C,ED
0C16:  MOVFF  4B,EC
0C1A:  RCALL  096C
0C1C:  MOVFF  03,B0
0C20:  MOVFF  02,AF
0C24:  MOVFF  01,AE
0C28:  MOVFF  00,AD
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
0C2C:  MOVFF  FF2,D4
0C30:  BCF    FF2.6
0C32:  BCF    FF2.7
0C34:  MOVLW  13
0C36:  MOVWF  FA9
0C38:  BCF    FA6.6
0C3A:  BCF    FA6.7
0C3C:  BSF    FA6.0
0C3E:  MOVF   FA8,W
0C40:  BTFSC  xD4.6
0C42:  BSF    FF2.6
0C44:  BTFSC  xD4.7
0C46:  BSF    FF2.7
0C48:  MOVWF  xD5
0C4A:  MOVFF  FF2,D6
0C4E:  BCF    FF2.6
0C50:  BCF    FF2.7
0C52:  MOVLW  12
0C54:  MOVWF  FA9
0C56:  BCF    FA6.6
0C58:  BCF    FA6.7
0C5A:  BSF    FA6.0
0C5C:  MOVF   FA8,W
0C5E:  BTFSC  xD6.6
0C60:  BSF    FF2.6
0C62:  BTFSC  xD6.7
0C64:  BSF    FF2.7
0C66:  MOVWF  xD7
0C68:  MOVFF  D5,B8
0C6C:  MOVFF  D7,B7
....................    delay_ms(20); 
0C70:  MOVLW  14
0C72:  MOVWF  xEA
0C74:  RCALL  07E6
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
0C76:  MOVFF  FF2,D4
0C7A:  BCF    FF2.6
0C7C:  BCF    FF2.7
0C7E:  MOVLW  15
0C80:  MOVWF  FA9
0C82:  BCF    FA6.6
0C84:  BCF    FA6.7
0C86:  BSF    FA6.0
0C88:  MOVF   FA8,W
0C8A:  BTFSC  xD4.6
0C8C:  BSF    FF2.6
0C8E:  BTFSC  xD4.7
0C90:  BSF    FF2.7
0C92:  MOVWF  xD5
0C94:  MOVFF  FF2,D6
0C98:  BCF    FF2.6
0C9A:  BCF    FF2.7
0C9C:  MOVLW  14
0C9E:  MOVWF  FA9
0CA0:  BCF    FA6.6
0CA2:  BCF    FA6.7
0CA4:  BSF    FA6.0
0CA6:  MOVF   FA8,W
0CA8:  BTFSC  xD6.6
0CAA:  BSF    FF2.6
0CAC:  BTFSC  xD6.7
0CAE:  BSF    FF2.7
0CB0:  MOVWF  xD7
0CB2:  MOVFF  D5,B6
0CB6:  MOVFF  D7,B5
....................    delay_ms(20); 
0CBA:  MOVLW  14
0CBC:  MOVWF  xEA
0CBE:  RCALL  07E6
....................    motor=read_eeprom(22); 
0CC0:  MOVFF  FF2,D4
0CC4:  BCF    FF2.6
0CC6:  BCF    FF2.7
0CC8:  MOVLW  16
0CCA:  MOVWF  FA9
0CCC:  BCF    FA6.6
0CCE:  BCF    FA6.7
0CD0:  BSF    FA6.0
0CD2:  MOVF   FA8,W
0CD4:  BTFSC  xD4.6
0CD6:  BSF    FF2.6
0CD8:  BTFSC  xD4.7
0CDA:  BSF    FF2.7
0CDC:  MOVWF  33
....................    delay_ms(20); 
0CDE:  MOVLW  14
0CE0:  MOVWF  xEA
0CE2:  RCALL  07E6
....................    luz=read_eeprom(23); 
0CE4:  MOVFF  FF2,D4
0CE8:  BCF    FF2.6
0CEA:  BCF    FF2.7
0CEC:  MOVLW  17
0CEE:  MOVWF  FA9
0CF0:  BCF    FA6.6
0CF2:  BCF    FA6.7
0CF4:  BSF    FA6.0
0CF6:  MOVF   FA8,W
0CF8:  BTFSC  xD4.6
0CFA:  BSF    FF2.6
0CFC:  BTFSC  xD4.7
0CFE:  BSF    FF2.7
0D00:  MOVWF  34
....................    delay_ms(20); 
0D02:  MOVLW  14
0D04:  MOVWF  xEA
0D06:  RCALL  07E6
....................    horas=make16(horasH,horasL); 
0D08:  MOVFF  26,4A
0D0C:  MOVFF  25,49
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0D10:  MOVFF  29,2B
0D14:  MOVFF  2A,2C
.................... } 
0D18:  GOTO   27E8 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0D92:  BTFSC  3D.7
0D94:  BRA    0D9C
0D96:  MOVF   3D,W
0D98:  SUBLW  09
0D9A:  BNC   0DA2
0D9C:  BTFSC  3D.7
0D9E:  BRA    0DA2
0DA0:  BRA    0DD4
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0DA2:  CLRF   3D
0DA4:  CLRF   FA9
0DA6:  CLRF   FA8
0DA8:  BCF    FA6.6
0DAA:  BCF    FA6.7
0DAC:  BSF    FA6.2
0DAE:  MOVF   FF2,W
0DB0:  MOVWF  00
0DB2:  BCF    FF2.6
0DB4:  BCF    FF2.7
0DB6:  MOVLB  F
0DB8:  MOVLW  55
0DBA:  MOVWF  FA7
0DBC:  MOVLW  AA
0DBE:  MOVWF  FA7
0DC0:  BSF    FA6.1
0DC2:  BTFSC  FA6.1
0DC4:  BRA    0DC2
0DC6:  BCF    FA6.2
0DC8:  MOVF   00,W
0DCA:  IORWF  FF2,F
0DCC:  MOVLW  14
0DCE:  MOVLB  0
0DD0:  MOVWF  xEA
0DD2:  RCALL  07E6
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0DD4:  BTFSC  3E.7
0DD6:  BRA    0DDE
0DD8:  MOVF   3E,W
0DDA:  SUBLW  09
0DDC:  BNC   0DE4
0DDE:  BTFSC  3E.7
0DE0:  BRA    0DE4
0DE2:  BRA    0E18
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0DE4:  CLRF   3E
0DE6:  MOVLW  01
0DE8:  MOVWF  FA9
0DEA:  CLRF   FA8
0DEC:  BCF    FA6.6
0DEE:  BCF    FA6.7
0DF0:  BSF    FA6.2
0DF2:  MOVF   FF2,W
0DF4:  MOVWF  00
0DF6:  BCF    FF2.6
0DF8:  BCF    FF2.7
0DFA:  MOVLB  F
0DFC:  MOVLW  55
0DFE:  MOVWF  FA7
0E00:  MOVLW  AA
0E02:  MOVWF  FA7
0E04:  BSF    FA6.1
0E06:  BTFSC  FA6.1
0E08:  BRA    0E06
0E0A:  BCF    FA6.2
0E0C:  MOVF   00,W
0E0E:  IORWF  FF2,F
0E10:  MOVLW  14
0E12:  MOVLB  0
0E14:  MOVWF  xEA
0E16:  RCALL  07E6
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0E18:  BTFSC  3F.7
0E1A:  BRA    0E22
0E1C:  MOVF   3F,W
0E1E:  SUBLW  09
0E20:  BNC   0E28
0E22:  BTFSC  3F.7
0E24:  BRA    0E28
0E26:  BRA    0E5C
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0E28:  CLRF   3F
0E2A:  MOVLW  02
0E2C:  MOVWF  FA9
0E2E:  CLRF   FA8
0E30:  BCF    FA6.6
0E32:  BCF    FA6.7
0E34:  BSF    FA6.2
0E36:  MOVF   FF2,W
0E38:  MOVWF  00
0E3A:  BCF    FF2.6
0E3C:  BCF    FF2.7
0E3E:  MOVLB  F
0E40:  MOVLW  55
0E42:  MOVWF  FA7
0E44:  MOVLW  AA
0E46:  MOVWF  FA7
0E48:  BSF    FA6.1
0E4A:  BTFSC  FA6.1
0E4C:  BRA    0E4A
0E4E:  BCF    FA6.2
0E50:  MOVF   00,W
0E52:  IORWF  FF2,F
0E54:  MOVLW  14
0E56:  MOVLB  0
0E58:  MOVWF  xEA
0E5A:  RCALL  07E6
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0E5C:  BTFSC  40.7
0E5E:  BRA    0E66
0E60:  MOVF   40,W
0E62:  SUBLW  09
0E64:  BNC   0E6C
0E66:  BTFSC  40.7
0E68:  BRA    0E6C
0E6A:  BRA    0EA0
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0E6C:  CLRF   40
0E6E:  MOVLW  03
0E70:  MOVWF  FA9
0E72:  CLRF   FA8
0E74:  BCF    FA6.6
0E76:  BCF    FA6.7
0E78:  BSF    FA6.2
0E7A:  MOVF   FF2,W
0E7C:  MOVWF  00
0E7E:  BCF    FF2.6
0E80:  BCF    FF2.7
0E82:  MOVLB  F
0E84:  MOVLW  55
0E86:  MOVWF  FA7
0E88:  MOVLW  AA
0E8A:  MOVWF  FA7
0E8C:  BSF    FA6.1
0E8E:  BTFSC  FA6.1
0E90:  BRA    0E8E
0E92:  BCF    FA6.2
0E94:  MOVF   00,W
0E96:  IORWF  FF2,F
0E98:  MOVLW  14
0E9A:  MOVLB  0
0E9C:  MOVWF  xEA
0E9E:  RCALL  07E6
....................    } 
....................    if(estadoalarma>1){ 
0EA0:  MOVLW  00
0EA2:  BTFSC  18.4
0EA4:  MOVLW  01
0EA6:  SUBLW  01
0EA8:  BC    0EE0
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0EAA:  BSF    18.4
0EAC:  MOVLW  04
0EAE:  MOVWF  FA9
0EB0:  MOVLW  01
0EB2:  MOVWF  FA8
0EB4:  BCF    FA6.6
0EB6:  BCF    FA6.7
0EB8:  BSF    FA6.2
0EBA:  MOVF   FF2,W
0EBC:  MOVWF  00
0EBE:  BCF    FF2.6
0EC0:  BCF    FF2.7
0EC2:  MOVLB  F
0EC4:  MOVLW  55
0EC6:  MOVWF  FA7
0EC8:  MOVLW  AA
0ECA:  MOVWF  FA7
0ECC:  BSF    FA6.1
0ECE:  BTFSC  FA6.1
0ED0:  BRA    0ECE
0ED2:  BCF    FA6.2
0ED4:  MOVF   00,W
0ED6:  IORWF  FF2,F
0ED8:  MOVLW  14
0EDA:  MOVLB  0
0EDC:  MOVWF  xEA
0EDE:  RCALL  07E6
....................    } 
....................    if(tempo_minutos>200){ 
0EE0:  MOVF   29,W
0EE2:  SUBLW  C8
0EE4:  BC    0F1E
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
0EE6:  MOVLW  14
0EE8:  MOVWF  29
0EEA:  MOVLW  05
0EEC:  MOVWF  FA9
0EEE:  MOVLW  14
0EF0:  MOVWF  FA8
0EF2:  BCF    FA6.6
0EF4:  BCF    FA6.7
0EF6:  BSF    FA6.2
0EF8:  MOVF   FF2,W
0EFA:  MOVWF  00
0EFC:  BCF    FF2.6
0EFE:  BCF    FF2.7
0F00:  MOVLB  F
0F02:  MOVLW  55
0F04:  MOVWF  FA7
0F06:  MOVLW  AA
0F08:  MOVWF  FA7
0F0A:  BSF    FA6.1
0F0C:  BTFSC  FA6.1
0F0E:  BRA    0F0C
0F10:  BCF    FA6.2
0F12:  MOVF   00,W
0F14:  IORWF  FF2,F
0F16:  MOVLW  14
0F18:  MOVLB  0
0F1A:  MOVWF  xEA
0F1C:  RCALL  07E6
....................    } 
....................    if(tempo_segundos>59){ 
0F1E:  MOVF   2A,W
0F20:  SUBLW  3B
0F22:  BC    0F58
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0F24:  CLRF   2A
0F26:  MOVLW  06
0F28:  MOVWF  FA9
0F2A:  CLRF   FA8
0F2C:  BCF    FA6.6
0F2E:  BCF    FA6.7
0F30:  BSF    FA6.2
0F32:  MOVF   FF2,W
0F34:  MOVWF  00
0F36:  BCF    FF2.6
0F38:  BCF    FF2.7
0F3A:  MOVLB  F
0F3C:  MOVLW  55
0F3E:  MOVWF  FA7
0F40:  MOVLW  AA
0F42:  MOVWF  FA7
0F44:  BSF    FA6.1
0F46:  BTFSC  FA6.1
0F48:  BRA    0F46
0F4A:  BCF    FA6.2
0F4C:  MOVF   00,W
0F4E:  IORWF  FF2,F
0F50:  MOVLW  14
0F52:  MOVLB  0
0F54:  MOVWF  xEA
0F56:  RCALL  07E6
....................    } 
....................    if(segundos>60){ 
0F58:  MOVF   23,W
0F5A:  SUBLW  3C
0F5C:  BC    0F92
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0F5E:  CLRF   23
0F60:  MOVLW  07
0F62:  MOVWF  FA9
0F64:  CLRF   FA8
0F66:  BCF    FA6.6
0F68:  BCF    FA6.7
0F6A:  BSF    FA6.2
0F6C:  MOVF   FF2,W
0F6E:  MOVWF  00
0F70:  BCF    FF2.6
0F72:  BCF    FF2.7
0F74:  MOVLB  F
0F76:  MOVLW  55
0F78:  MOVWF  FA7
0F7A:  MOVLW  AA
0F7C:  MOVWF  FA7
0F7E:  BSF    FA6.1
0F80:  BTFSC  FA6.1
0F82:  BRA    0F80
0F84:  BCF    FA6.2
0F86:  MOVF   00,W
0F88:  IORWF  FF2,F
0F8A:  MOVLW  14
0F8C:  MOVLB  0
0F8E:  MOVWF  xEA
0F90:  RCALL  07E6
....................    } 
....................    if(minutos>60){ 
0F92:  MOVF   24,W
0F94:  SUBLW  3C
0F96:  BC    0FCC
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0F98:  CLRF   24
0F9A:  MOVLW  08
0F9C:  MOVWF  FA9
0F9E:  CLRF   FA8
0FA0:  BCF    FA6.6
0FA2:  BCF    FA6.7
0FA4:  BSF    FA6.2
0FA6:  MOVF   FF2,W
0FA8:  MOVWF  00
0FAA:  BCF    FF2.6
0FAC:  BCF    FF2.7
0FAE:  MOVLB  F
0FB0:  MOVLW  55
0FB2:  MOVWF  FA7
0FB4:  MOVLW  AA
0FB6:  MOVWF  FA7
0FB8:  BSF    FA6.1
0FBA:  BTFSC  FA6.1
0FBC:  BRA    0FBA
0FBE:  BCF    FA6.2
0FC0:  MOVF   00,W
0FC2:  IORWF  FF2,F
0FC4:  MOVLW  14
0FC6:  MOVLB  0
0FC8:  MOVWF  xEA
0FCA:  RCALL  07E6
....................    } 
....................    if(horas>10000){ 
0FCC:  MOVF   4A,W
0FCE:  SUBLW  26
0FD0:  BC    104A
0FD2:  XORLW  FF
0FD4:  BNZ   0FDC
0FD6:  MOVF   49,W
0FD8:  SUBLW  10
0FDA:  BC    104A
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0FDC:  CLRF   4A
0FDE:  CLRF   49
0FE0:  MOVLW  09
0FE2:  MOVWF  FA9
0FE4:  MOVLW  0A
0FE6:  MOVWF  FA8
0FE8:  BCF    FA6.6
0FEA:  BCF    FA6.7
0FEC:  BSF    FA6.2
0FEE:  MOVF   FF2,W
0FF0:  MOVWF  00
0FF2:  BCF    FF2.6
0FF4:  BCF    FF2.7
0FF6:  MOVLB  F
0FF8:  MOVLW  55
0FFA:  MOVWF  FA7
0FFC:  MOVLW  AA
0FFE:  MOVWF  FA7
1000:  BSF    FA6.1
1002:  BTFSC  FA6.1
1004:  BRA    1002
1006:  BCF    FA6.2
1008:  MOVF   00,W
100A:  IORWF  FF2,F
100C:  MOVLW  14
100E:  MOVLB  0
1010:  MOVWF  xEA
1012:  CALL   07E6
1016:  MOVLW  0A
1018:  MOVWF  FA9
101A:  CLRF   FA8
101C:  BCF    FA6.6
101E:  BCF    FA6.7
1020:  BSF    FA6.2
1022:  MOVF   FF2,W
1024:  MOVWF  00
1026:  BCF    FF2.6
1028:  BCF    FF2.7
102A:  MOVLB  F
102C:  MOVLW  55
102E:  MOVWF  FA7
1030:  MOVLW  AA
1032:  MOVWF  FA7
1034:  BSF    FA6.1
1036:  BTFSC  FA6.1
1038:  BRA    1036
103A:  BCF    FA6.2
103C:  MOVF   00,W
103E:  IORWF  FF2,F
1040:  MOVLW  14
1042:  MOVLB  0
1044:  MOVWF  xEA
1046:  CALL   07E6
....................    } 
....................    if(G<450 || G>600){ 
104A:  MOVFF  B0,EB
104E:  MOVFF  AF,EA
1052:  MOVFF  AE,E9
1056:  MOVFF  AD,E8
105A:  CLRF   xEF
105C:  CLRF   xEE
105E:  MOVLW  61
1060:  MOVWF  xED
1062:  MOVLW  87
1064:  MOVWF  xEC
1066:  RCALL  0D1C
1068:  BC    108A
106A:  CLRF   xEB
106C:  CLRF   xEA
106E:  MOVLW  16
1070:  MOVWF  xE9
1072:  MOVLW  88
1074:  MOVWF  xE8
1076:  MOVFF  B0,EF
107A:  MOVFF  AF,EE
107E:  MOVFF  AE,ED
1082:  MOVFF  AD,EC
1086:  RCALL  0D1C
1088:  BNC   1104
....................       G=511;write_eeprom(11,0xff);delay_ms(20);write_eeprom(12,0x01);delay_ms(20); 
108A:  CLRF   xB0
108C:  MOVLW  80
108E:  MOVWF  xAF
1090:  MOVLW  7F
1092:  MOVWF  xAE
1094:  MOVLW  87
1096:  MOVWF  xAD
1098:  MOVLW  0B
109A:  MOVWF  FA9
109C:  MOVLW  FF
109E:  MOVWF  FA8
10A0:  BCF    FA6.6
10A2:  BCF    FA6.7
10A4:  BSF    FA6.2
10A6:  MOVF   FF2,W
10A8:  MOVWF  00
10AA:  BCF    FF2.6
10AC:  BCF    FF2.7
10AE:  MOVLB  F
10B0:  MOVLW  55
10B2:  MOVWF  FA7
10B4:  MOVLW  AA
10B6:  MOVWF  FA7
10B8:  BSF    FA6.1
10BA:  BTFSC  FA6.1
10BC:  BRA    10BA
10BE:  BCF    FA6.2
10C0:  MOVF   00,W
10C2:  IORWF  FF2,F
10C4:  MOVLW  14
10C6:  MOVLB  0
10C8:  MOVWF  xEA
10CA:  CALL   07E6
10CE:  MOVLW  0C
10D0:  MOVWF  FA9
10D2:  MOVLW  01
10D4:  MOVWF  FA8
10D6:  BCF    FA6.6
10D8:  BCF    FA6.7
10DA:  BSF    FA6.2
10DC:  MOVF   FF2,W
10DE:  MOVWF  00
10E0:  BCF    FF2.6
10E2:  BCF    FF2.7
10E4:  MOVLB  F
10E6:  MOVLW  55
10E8:  MOVWF  FA7
10EA:  MOVLW  AA
10EC:  MOVWF  FA7
10EE:  BSF    FA6.1
10F0:  BTFSC  FA6.1
10F2:  BRA    10F0
10F4:  BCF    FA6.2
10F6:  MOVF   00,W
10F8:  IORWF  FF2,F
10FA:  MOVLW  14
10FC:  MOVLB  0
10FE:  MOVWF  xEA
1100:  CALL   07E6
....................    } 
....................    if(Vel1>6){ 
1104:  MOVF   46,W
1106:  SUBLW  06
1108:  BC    1144
....................       Vel1=4;write_eeprom(13,4);delay_ms(20); 
110A:  MOVLW  04
110C:  MOVWF  46
110E:  MOVLW  0D
1110:  MOVWF  FA9
1112:  MOVLW  04
1114:  MOVWF  FA8
1116:  BCF    FA6.6
1118:  BCF    FA6.7
111A:  BSF    FA6.2
111C:  MOVF   FF2,W
111E:  MOVWF  00
1120:  BCF    FF2.6
1122:  BCF    FF2.7
1124:  MOVLB  F
1126:  MOVLW  55
1128:  MOVWF  FA7
112A:  MOVLW  AA
112C:  MOVWF  FA7
112E:  BSF    FA6.1
1130:  BTFSC  FA6.1
1132:  BRA    1130
1134:  BCF    FA6.2
1136:  MOVF   00,W
1138:  IORWF  FF2,F
113A:  MOVLW  14
113C:  MOVLB  0
113E:  MOVWF  xEA
1140:  CALL   07E6
....................    } 
....................    if(horasTrabajo>60000){ 
1144:  MOVF   xB8,W
1146:  SUBLW  E9
1148:  BC    11C0
114A:  XORLW  FF
114C:  BNZ   1154
114E:  MOVF   xB7,W
1150:  SUBLW  60
1152:  BC    11C0
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
1154:  CLRF   xB8
1156:  CLRF   xB7
1158:  MOVLW  13
115A:  MOVWF  FA9
115C:  CLRF   FA8
115E:  BCF    FA6.6
1160:  BCF    FA6.7
1162:  BSF    FA6.2
1164:  MOVF   FF2,W
1166:  MOVWF  00
1168:  BCF    FF2.6
116A:  BCF    FF2.7
116C:  MOVLB  F
116E:  MOVLW  55
1170:  MOVWF  FA7
1172:  MOVLW  AA
1174:  MOVWF  FA7
1176:  BSF    FA6.1
1178:  BTFSC  FA6.1
117A:  BRA    1178
117C:  BCF    FA6.2
117E:  MOVF   00,W
1180:  IORWF  FF2,F
1182:  MOVLW  14
1184:  MOVLB  0
1186:  MOVWF  xEA
1188:  CALL   07E6
118C:  MOVLW  12
118E:  MOVWF  FA9
1190:  CLRF   FA8
1192:  BCF    FA6.6
1194:  BCF    FA6.7
1196:  BSF    FA6.2
1198:  MOVF   FF2,W
119A:  MOVWF  00
119C:  BCF    FF2.6
119E:  BCF    FF2.7
11A0:  MOVLB  F
11A2:  MOVLW  55
11A4:  MOVWF  FA7
11A6:  MOVLW  AA
11A8:  MOVWF  FA7
11AA:  BSF    FA6.1
11AC:  BTFSC  FA6.1
11AE:  BRA    11AC
11B0:  BCF    FA6.2
11B2:  MOVF   00,W
11B4:  IORWF  FF2,F
11B6:  MOVLW  14
11B8:  MOVLB  0
11BA:  MOVWF  xEA
11BC:  CALL   07E6
....................    } 
....................    if(segundosTrabajo>3600){ 
11C0:  MOVF   xB6,W
11C2:  SUBLW  0D
11C4:  BC    123C
11C6:  XORLW  FF
11C8:  BNZ   11D0
11CA:  MOVF   xB5,W
11CC:  SUBLW  10
11CE:  BC    123C
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
11D0:  CLRF   xB6
11D2:  CLRF   xB5
11D4:  MOVLW  14
11D6:  MOVWF  FA9
11D8:  CLRF   FA8
11DA:  BCF    FA6.6
11DC:  BCF    FA6.7
11DE:  BSF    FA6.2
11E0:  MOVF   FF2,W
11E2:  MOVWF  00
11E4:  BCF    FF2.6
11E6:  BCF    FF2.7
11E8:  MOVLB  F
11EA:  MOVLW  55
11EC:  MOVWF  FA7
11EE:  MOVLW  AA
11F0:  MOVWF  FA7
11F2:  BSF    FA6.1
11F4:  BTFSC  FA6.1
11F6:  BRA    11F4
11F8:  BCF    FA6.2
11FA:  MOVF   00,W
11FC:  IORWF  FF2,F
11FE:  MOVLW  14
1200:  MOVLB  0
1202:  MOVWF  xEA
1204:  CALL   07E6
1208:  MOVLW  15
120A:  MOVWF  FA9
120C:  CLRF   FA8
120E:  BCF    FA6.6
1210:  BCF    FA6.7
1212:  BSF    FA6.2
1214:  MOVF   FF2,W
1216:  MOVWF  00
1218:  BCF    FF2.6
121A:  BCF    FF2.7
121C:  MOVLB  F
121E:  MOVLW  55
1220:  MOVWF  FA7
1222:  MOVLW  AA
1224:  MOVWF  FA7
1226:  BSF    FA6.1
1228:  BTFSC  FA6.1
122A:  BRA    1228
122C:  BCF    FA6.2
122E:  MOVF   00,W
1230:  IORWF  FF2,F
1232:  MOVLW  14
1234:  MOVLB  0
1236:  MOVWF  xEA
1238:  CALL   07E6
....................    } 
....................    if(motor>1){ 
123C:  MOVF   33,W
123E:  SUBLW  01
1240:  BC    127C
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
1242:  MOVLW  01
1244:  MOVWF  33
1246:  MOVLW  16
1248:  MOVWF  FA9
124A:  MOVLW  01
124C:  MOVWF  FA8
124E:  BCF    FA6.6
1250:  BCF    FA6.7
1252:  BSF    FA6.2
1254:  MOVF   FF2,W
1256:  MOVWF  00
1258:  BCF    FF2.6
125A:  BCF    FF2.7
125C:  MOVLB  F
125E:  MOVLW  55
1260:  MOVWF  FA7
1262:  MOVLW  AA
1264:  MOVWF  FA7
1266:  BSF    FA6.1
1268:  BTFSC  FA6.1
126A:  BRA    1268
126C:  BCF    FA6.2
126E:  MOVF   00,W
1270:  IORWF  FF2,F
1272:  MOVLW  14
1274:  MOVLB  0
1276:  MOVWF  xEA
1278:  CALL   07E6
....................    } 
....................    if(luz>1){ 
127C:  MOVF   34,W
127E:  SUBLW  01
1280:  BC    12BC
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
1282:  MOVLW  01
1284:  MOVWF  34
1286:  MOVLW  17
1288:  MOVWF  FA9
128A:  MOVLW  01
128C:  MOVWF  FA8
128E:  BCF    FA6.6
1290:  BCF    FA6.7
1292:  BSF    FA6.2
1294:  MOVF   FF2,W
1296:  MOVWF  00
1298:  BCF    FF2.6
129A:  BCF    FF2.7
129C:  MOVLB  F
129E:  MOVLW  55
12A0:  MOVWF  FA7
12A2:  MOVLW  AA
12A4:  MOVWF  FA7
12A6:  BSF    FA6.1
12A8:  BTFSC  FA6.1
12AA:  BRA    12A8
12AC:  BCF    FA6.2
12AE:  MOVF   00,W
12B0:  IORWF  FF2,F
12B2:  MOVLW  14
12B4:  MOVLB  0
12B6:  MOVWF  xEA
12B8:  CALL   07E6
....................    } 
.................... } 
12BC:  GOTO   27EC (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
*
25F0:  BCF    18.5
....................    if(VIDRIOUUP || !VIDRIODN){ 
25F2:  BSF    F92.1
25F4:  BTFSS  F80.1
25F6:  BRA    25FE
25F8:  BSF    F92.2
25FA:  BTFSS  F80.2
25FC:  BRA    2608
....................       O1_on;O2_off; 
25FE:  BSF    F8A.6
2600:  BCF    F93.6
2602:  BCF    F8A.7
2604:  BCF    F93.7
....................    }else{ 
2606:  BRA    2612
....................       O1_off;O2_off; 
2608:  BCF    F8A.6
260A:  BCF    F93.6
260C:  BCF    F8A.7
260E:  BCF    F93.7
....................       pulsoBajar=OFF; 
2610:  BCF    18.6
....................    } 
.................... } 
2612:  GOTO   4682 (RETURN)
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
*
25CA:  BCF    18.6
....................    if(!VIDRIOUUP || VIDRIODN){ 
25CC:  BSF    F92.1
25CE:  BTFSC  F80.1
25D0:  BRA    25D8
25D2:  BSF    F92.2
25D4:  BTFSC  F80.2
25D6:  BRA    25E2
....................       O1_off;O2_on; 
25D8:  BCF    F8A.6
25DA:  BCF    F93.6
25DC:  BSF    F8A.7
25DE:  BCF    F93.7
....................    }else{ 
25E0:  BRA    25EC
....................       O1_off;O2_off; 
25E2:  BCF    F8A.6
25E4:  BCF    F93.6
25E6:  BCF    F8A.7
25E8:  BCF    F93.7
....................       pulsoSubir=OFF; 
25EA:  BCF    18.5
....................    } 
.................... } 
25EC:  GOTO   4678 (RETURN)
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
*
2616:  BCF    F8A.6
2618:  BCF    F93.6
261A:  BCF    F8A.7
261C:  BCF    F93.7
.................... } 
261E:  GOTO   4688 (RETURN)
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
1418:  MOVF   xB6,W
141A:  SUBLW  0D
141C:  BTFSC  FD8.0
141E:  BRA    1528
1420:  XORLW  FF
1422:  BNZ   142C
1424:  MOVF   xB5,W
1426:  SUBLW  0F
1428:  BTFSC  FD8.0
142A:  BRA    1528
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
142C:  CLRF   xB6
142E:  CLRF   xB5
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
1430:  MOVFF  B5,D4
1434:  MOVLW  14
1436:  MOVWF  FA9
1438:  MOVFF  D4,FA8
143C:  BCF    FA6.6
143E:  BCF    FA6.7
1440:  BSF    FA6.2
1442:  MOVF   FF2,W
1444:  MOVWF  00
1446:  BCF    FF2.6
1448:  BCF    FF2.7
144A:  MOVLB  F
144C:  MOVLW  55
144E:  MOVWF  FA7
1450:  MOVLW  AA
1452:  MOVWF  FA7
1454:  BSF    FA6.1
1456:  BTFSC  FA6.1
1458:  BRA    1456
145A:  BCF    FA6.2
145C:  MOVF   00,W
145E:  IORWF  FF2,F
....................       delay_ms(20); 
1460:  MOVLW  14
1462:  MOVLB  0
1464:  MOVWF  xEA
1466:  CALL   07E6
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
146A:  MOVFF  B6,D4
146E:  MOVLW  15
1470:  MOVWF  FA9
1472:  MOVFF  D4,FA8
1476:  BCF    FA6.6
1478:  BCF    FA6.7
147A:  BSF    FA6.2
147C:  MOVF   FF2,W
147E:  MOVWF  00
1480:  BCF    FF2.6
1482:  BCF    FF2.7
1484:  MOVLB  F
1486:  MOVLW  55
1488:  MOVWF  FA7
148A:  MOVLW  AA
148C:  MOVWF  FA7
148E:  BSF    FA6.1
1490:  BTFSC  FA6.1
1492:  BRA    1490
1494:  BCF    FA6.2
1496:  MOVF   00,W
1498:  IORWF  FF2,F
....................       delay_ms(20); 
149A:  MOVLW  14
149C:  MOVLB  0
149E:  MOVWF  xEA
14A0:  CALL   07E6
....................       horasTrabajo++; 
14A4:  INCF   xB7,F
14A6:  BTFSC  FD8.2
14A8:  INCF   xB8,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
14AA:  MOVFF  B7,D4
14AE:  MOVLW  12
14B0:  MOVWF  FA9
14B2:  MOVFF  D4,FA8
14B6:  BCF    FA6.6
14B8:  BCF    FA6.7
14BA:  BSF    FA6.2
14BC:  MOVF   FF2,W
14BE:  MOVWF  00
14C0:  BCF    FF2.6
14C2:  BCF    FF2.7
14C4:  MOVLB  F
14C6:  MOVLW  55
14C8:  MOVWF  FA7
14CA:  MOVLW  AA
14CC:  MOVWF  FA7
14CE:  BSF    FA6.1
14D0:  BTFSC  FA6.1
14D2:  BRA    14D0
14D4:  BCF    FA6.2
14D6:  MOVF   00,W
14D8:  IORWF  FF2,F
....................       delay_ms(20); 
14DA:  MOVLW  14
14DC:  MOVLB  0
14DE:  MOVWF  xEA
14E0:  CALL   07E6
....................       write_eeprom(19,make8(horasTrabajo,1)); 
14E4:  MOVFF  B8,D4
14E8:  MOVLW  13
14EA:  MOVWF  FA9
14EC:  MOVFF  D4,FA8
14F0:  BCF    FA6.6
14F2:  BCF    FA6.7
14F4:  BSF    FA6.2
14F6:  MOVF   FF2,W
14F8:  MOVWF  00
14FA:  BCF    FF2.6
14FC:  BCF    FF2.7
14FE:  MOVLB  F
1500:  MOVLW  55
1502:  MOVWF  FA7
1504:  MOVLW  AA
1506:  MOVWF  FA7
1508:  BSF    FA6.1
150A:  BTFSC  FA6.1
150C:  BRA    150A
150E:  BCF    FA6.2
1510:  MOVF   00,W
1512:  IORWF  FF2,F
....................       delay_ms(20); 
1514:  MOVLW  14
1516:  MOVLB  0
1518:  MOVWF  xEA
151A:  CALL   07E6
....................       delay_ms(20); 
151E:  MOVLW  14
1520:  MOVWF  xEA
1522:  CALL   07E6
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
1526:  BRA    15C0
1528:  MOVF   xB5,W
152A:  SUBLW  84
152C:  BNZ   1534
152E:  MOVF   xB6,W
1530:  SUBLW  03
1532:  BZ    154C
1534:  MOVF   xB5,W
1536:  SUBLW  08
1538:  BNZ   1540
153A:  MOVF   xB6,W
153C:  SUBLW  07
153E:  BZ    154C
1540:  MOVF   xB5,W
1542:  SUBLW  8C
1544:  BNZ   15C0
1546:  MOVF   xB6,W
1548:  SUBLW  0A
154A:  BNZ   15C0
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
154C:  MOVFF  B5,D4
1550:  MOVLW  14
1552:  MOVWF  FA9
1554:  MOVFF  D4,FA8
1558:  BCF    FA6.6
155A:  BCF    FA6.7
155C:  BSF    FA6.2
155E:  MOVF   FF2,W
1560:  MOVWF  00
1562:  BCF    FF2.6
1564:  BCF    FF2.7
1566:  MOVLB  F
1568:  MOVLW  55
156A:  MOVWF  FA7
156C:  MOVLW  AA
156E:  MOVWF  FA7
1570:  BSF    FA6.1
1572:  BTFSC  FA6.1
1574:  BRA    1572
1576:  BCF    FA6.2
1578:  MOVF   00,W
157A:  IORWF  FF2,F
....................       delay_ms(20); 
157C:  MOVLW  14
157E:  MOVLB  0
1580:  MOVWF  xEA
1582:  CALL   07E6
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
1586:  MOVFF  B6,D4
158A:  MOVLW  15
158C:  MOVWF  FA9
158E:  MOVFF  D4,FA8
1592:  BCF    FA6.6
1594:  BCF    FA6.7
1596:  BSF    FA6.2
1598:  MOVF   FF2,W
159A:  MOVWF  00
159C:  BCF    FF2.6
159E:  BCF    FF2.7
15A0:  MOVLB  F
15A2:  MOVLW  55
15A4:  MOVWF  FA7
15A6:  MOVLW  AA
15A8:  MOVWF  FA7
15AA:  BSF    FA6.1
15AC:  BTFSC  FA6.1
15AE:  BRA    15AC
15B0:  BCF    FA6.2
15B2:  MOVF   00,W
15B4:  IORWF  FF2,F
....................       delay_ms(20); 
15B6:  MOVLW  14
15B8:  MOVLB  0
15BA:  MOVWF  xEA
15BC:  CALL   07E6
....................    } 
.................... //----------------------------------------// 
.................... } 
15C0:  GOTO   281A (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    output_bit(PIN_C4,0); 
....................    output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }   
....................  
.................... /* 
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
....................     
....................    if(VelMotor==5){ 
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==4){ 
....................       set_timer0(201);       
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==3){ 
....................       set_timer0(196); 
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==2){ 
....................       set_timer0(188); 
....................       Motor_off;  
....................       Motor2_off;  
....................    }else if(VelMotor==1){ 
....................       set_timer0(180); 
....................       Motor_off;  
....................       Motor2_off;  
....................    } 
....................    pulsos++;    
.................... } 
....................  
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<6){ 
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
....................       Motor_on; 
....................       Motor2_on;  
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
....................    } else {            //The triac has been triggered, cut the pulse 
....................       Motor_off; 
....................       Motor2_off;  
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
....................    } 
....................    } 
.................... } 
.................... */ 
.................... //#int_TIMER2 
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(40536);//5ms 
*
01AE:  MOVLW  9E
01B0:  MOVWF  FCF
01B2:  MOVLW  58
01B4:  MOVWF  FCE
....................    tiempos++; 
01B6:  INCF   47,F
01B8:  BTFSC  FD8.2
01BA:  INCF   48,F
....................     
....................    if(tiempos>=200){//1s 
01BC:  MOVF   48,F
01BE:  BNZ   01C6
01C0:  MOVF   47,W
01C2:  SUBLW  C7
01C4:  BC    0222
....................       output_toggle(PIN_A3); 
01C6:  BCF    F92.3
01C8:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
01CA:  CLRF   48
01CC:  CLRF   47
01CE:  INCF   31,F
01D0:  BSF    18.0
....................     
....................       if(ActivaBuzzer==1){ 
01D2:  DECFSZ 41,W
01D4:  BRA    01EA
....................          if(estadobuzzer==0){ 
01D6:  BTFSC  18.3
01D8:  BRA    01E0
....................             Buzzer_off; 
01DA:  BCF    F8B.0
01DC:  BCF    F94.0
....................          }else{ 
01DE:  BRA    01E8
....................             if(estadoalarma==1) 
01E0:  BTFSS  18.4
01E2:  BRA    01E8
....................                Buzzer_on; 
01E4:  BSF    F8B.0
01E6:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
01E8:  BTG    18.3
....................       } 
....................        
....................       if(estadomv==1) 
01EA:  BTFSS  17.2
01EC:  BRA    01F4
....................          segundosTrabajo++; 
01EE:  INCF   xB5,F
01F0:  BTFSC  FD8.2
01F2:  INCF   xB6,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
01F4:  BTFSS  17.0
01F6:  BRA    0222
....................          segundos++; 
01F8:  INCF   23,F
....................          if(tiempo_cumplido==0){ 
01FA:  BTFSC  17.7
01FC:  BRA    0222
....................             if(tempo_segundos>0){ 
01FE:  MOVF   2A,F
0200:  BZ    0206
....................                tempo_segundos--; 
0202:  DECF   2A,F
....................             }else{ 
0204:  BRA    0222
....................                if(tempo_minutos>0){ 
0206:  MOVF   29,F
0208:  BZ    0212
....................                   tempo_minutos--; 
020A:  DECF   29,F
....................                   tempo_segundos=59; 
020C:  MOVLW  3B
020E:  MOVWF  2A
....................                }else{ 
0210:  BRA    0222
....................                   tiempo_cumplido=1; 
0212:  BSF    17.7
....................                   estadouv=0;Luz_UV_off; 
0214:  BCF    17.0
0216:  BSF    F8A.3
0218:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
021A:  MOVFF  2B,29
021E:  MOVFF  2C,2A
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0222:  BCF    F9E.0
0224:  GOTO   0064
.................... void main () 
.................... { 
*
2622:  CLRF   FF8
2624:  BCF    F9F.0
2626:  BSF    FD0.7
2628:  BSF    07.7
262A:  CLRF   FEA
262C:  CLRF   FE9
262E:  BCF    17.0
2630:  BCF    17.1
2632:  BCF    17.2
2634:  BCF    17.3
2636:  BCF    17.4
2638:  BCF    17.5
263A:  BCF    17.6
263C:  BCF    17.7
263E:  BCF    18.0
2640:  BCF    18.1
2642:  BCF    18.2
2644:  BCF    18.3
2646:  BCF    18.4
2648:  BCF    18.5
264A:  BCF    18.6
264C:  BCF    18.7
264E:  BCF    19.0
2650:  BCF    19.1
2652:  BCF    19.2
2654:  CLRF   1A
2656:  MOVLW  05
2658:  MOVWF  1B
265A:  MOVLW  02
265C:  MOVWF  1C
265E:  MOVLW  0B
2660:  MOVWF  1D
2662:  MOVLW  02
2664:  MOVWF  1E
2666:  MOVLW  03
2668:  MOVWF  1F
266A:  MOVLW  02
266C:  MOVWF  20
266E:  MOVWF  21
2670:  MOVLW  04
2672:  MOVWF  22
2674:  CLRF   23
2676:  CLRF   24
2678:  CLRF   25
267A:  CLRF   26
267C:  CLRF   27
267E:  CLRF   28
2680:  CLRF   29
2682:  CLRF   2A
2684:  CLRF   2B
2686:  CLRF   2C
2688:  CLRF   2D
268A:  CLRF   2E
268C:  CLRF   2F
268E:  MOVLW  01
2690:  MOVWF  30
2692:  CLRF   31
2694:  CLRF   32
2696:  CLRF   33
2698:  CLRF   34
269A:  CLRF   35
269C:  CLRF   41
269E:  CLRF   42
26A0:  CLRF   43
26A2:  CLRF   44
26A4:  CLRF   45
26A6:  MOVLW  04
26A8:  MOVWF  46
26AA:  CLRF   4A
26AC:  CLRF   49
26AE:  CLRF   4C
26B0:  CLRF   4B
26B2:  CLRF   xA0
26B4:  CLRF   x9F
26B6:  CLRF   x9E
26B8:  CLRF   x9D
26BA:  CLRF   xA4
26BC:  CLRF   xA3
26BE:  CLRF   xA2
26C0:  CLRF   xA1
26C2:  CLRF   xA8
26C4:  CLRF   xA7
26C6:  CLRF   xA6
26C8:  CLRF   xA5
26CA:  CLRF   xAC
26CC:  CLRF   xAB
26CE:  CLRF   xAA
26D0:  CLRF   xA9
26D2:  CLRF   xB0
26D4:  CLRF   xAF
26D6:  CLRF   xAE
26D8:  MOVLW  80
26DA:  MOVWF  xAD
26DC:  BSF    19.3
26DE:  BCF    19.4
26E0:  CLRF   xB2
26E2:  CLRF   xB1
26E4:  CLRF   xB4
26E6:  CLRF   xB3
26E8:  CLRF   xB6
26EA:  CLRF   xB5
26EC:  CLRF   xB8
26EE:  CLRF   xB7
26F0:  BCF    19.5
26F2:  BCF    19.6
26F4:  CLRF   xBA
26F6:  CLRF   xB9
26F8:  CLRF   xBB
26FA:  CLRF   xBC
26FC:  CLRF   xC0
26FE:  CLRF   xBF
2700:  CLRF   xBE
2702:  CLRF   xBD
2704:  CLRF   xC4
2706:  CLRF   xC3
2708:  CLRF   xC2
270A:  CLRF   xC1
270C:  CLRF   xCE
270E:  CLRF   xCD
2710:  MOVF   FC1,W
2712:  ANDLW  C0
2714:  IORLW  0F
2716:  MOVWF  FC1
2718:  MOVLW  07
271A:  MOVWF  FB4
271C:  MOVLW  3E
271E:  MOVWF  36
2720:  MOVLW  20
2722:  MOVWF  37
2724:  MOVLW  5E
2726:  MOVWF  38
2728:  CLRF   39
272A:  CLRF   3A
272C:  CLRF   3B
272E:  CLRF   3C
2730:  CLRF   3D
2732:  CLRF   3E
2734:  CLRF   3F
2736:  CLRF   40
2738:  CLRF   4D
273A:  CLRF   4E
273C:  CLRF   4F
273E:  CLRF   50
2740:  CLRF   51
2742:  CLRF   52
2744:  CLRF   53
2746:  CLRF   54
2748:  CLRF   55
274A:  CLRF   56
274C:  CLRF   57
274E:  CLRF   58
2750:  CLRF   59
2752:  CLRF   5A
2754:  CLRF   5B
2756:  CLRF   5C
2758:  CLRF   5D
275A:  CLRF   5E
275C:  CLRF   5F
275E:  CLRF   60
2760:  CLRF   61
2762:  CLRF   62
2764:  CLRF   63
2766:  CLRF   64
2768:  CLRF   65
276A:  CLRF   66
276C:  CLRF   67
276E:  CLRF   68
2770:  CLRF   69
2772:  CLRF   6A
2774:  CLRF   6B
2776:  CLRF   6C
2778:  CLRF   6D
277A:  CLRF   6E
277C:  CLRF   6F
277E:  CLRF   70
2780:  CLRF   71
2782:  CLRF   72
2784:  CLRF   73
2786:  CLRF   74
2788:  CLRF   75
278A:  CLRF   76
278C:  CLRF   77
278E:  CLRF   78
2790:  CLRF   79
2792:  CLRF   7A
2794:  CLRF   7B
2796:  CLRF   7C
2798:  CLRF   7D
279A:  CLRF   7E
279C:  CLRF   7F
279E:  CLRF   x80
27A0:  CLRF   x81
27A2:  CLRF   x82
27A4:  CLRF   x83
27A6:  CLRF   x84
27A8:  CLRF   x85
27AA:  CLRF   x86
27AC:  CLRF   x87
27AE:  CLRF   x88
27B0:  CLRF   x89
27B2:  CLRF   x8A
27B4:  CLRF   x8B
27B6:  CLRF   x8C
27B8:  CLRF   x8D
27BA:  CLRF   x8E
27BC:  CLRF   x8F
27BE:  CLRF   x90
27C0:  CLRF   x91
27C2:  CLRF   x92
27C4:  CLRF   x93
27C6:  CLRF   x94
27C8:  CLRF   x95
27CA:  CLRF   x96
27CC:  CLRF   x97
27CE:  CLRF   x98
27D0:  CLRF   x99
27D2:  CLRF   x9A
27D4:  CLRF   x9B
27D6:  CLRF   x9C
....................    Motor_off; 
27D8:  BCF    F8B.2
27DA:  BCF    F94.2
....................    Motor2_off; 
27DC:  BCF    F8B.1
27DE:  BCF    F94.1
....................    ConfigInterrupciones(); 
27E0:  GOTO   0930
....................    LeeEEPROM(); 
27E4:  GOTO   09A2
....................    LimitaValores(); 
27E8:  GOTO   0D92
....................    if(motor!=1){ 
27EC:  DECFSZ 33,W
27EE:  BRA    27F2
27F0:  BRA    27F8
....................       MensajeBienvenida();  
27F2:  GOTO   13B0
....................    }else{ 
27F6:  BRA    280A
....................       if(luz==1) 
27F8:  DECFSZ 34,W
27FA:  BRA    27FE
....................          estadofl=1; 
27FC:  BSF    17.1
....................       if(luz==0) 
27FE:  MOVF   34,F
2800:  BNZ   2804
....................          estadofl=0; 
2802:  BCF    17.1
....................       estadomv=1; 
2804:  BSF    17.2
....................       Menu=50; 
2806:  MOVLW  32
2808:  MOVWF  1A
....................    } 
....................    Motor_off; 
280A:  BCF    F8B.2
280C:  BCF    F94.2
....................    Motor2_off; 
280E:  BCF    F8B.1
2810:  BCF    F94.1
....................    Vel1=6; 
2812:  MOVLW  06
2814:  MOVWF  46
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
2816:  GOTO   1418
....................    restart_wdt(); 
281A:  CLRWDT
....................    if(VelMotor>=1){ 
281C:  MOVF   xBC,W
281E:  SUBLW  00
2820:  BC    282A
....................       Motor_on; 
2822:  BSF    F8B.2
2824:  BCF    F94.2
....................       Motor2_on;  
2826:  BSF    F8B.1
2828:  BCF    F94.1
....................       //set_timer0(0); 
....................    } 
....................     
....................    if(VelMotor==0){ 
282A:  MOVF   xBC,F
282C:  BNZ   2836
....................       Motor_off; 
282E:  BCF    F8B.2
2830:  BCF    F94.2
....................       Motor2_off;  
2832:  BCF    F8B.1
2834:  BCF    F94.1
....................       //set_timer0(0); 
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2836:  MOVF   1A,F
2838:  BTFSS  FD8.2
283A:  BRA    2C46
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
283C:  MOVLW  01
283E:  MOVWF  xE6
2840:  MOVWF  xE7
2842:  CALL   12C0
....................          printf(lcd_putc,"     Ingrese        "); 
2846:  MOVLW  28
2848:  MOVWF  FF6
284A:  MOVLW  02
284C:  MOVWF  FF7
284E:  CALL   1390
....................          lcd_gotoxy(1,2); 
2852:  MOVLW  01
2854:  MOVWF  xE6
2856:  MOVLW  02
2858:  MOVWF  xE7
285A:  CALL   12C0
....................          printf(lcd_putc,"    Contraseña      "); 
285E:  MOVLW  3E
2860:  MOVWF  FF6
2862:  MOVLW  02
2864:  MOVWF  FF7
2866:  CALL   1390
....................          lcd_gotoxy(1,3); 
286A:  MOVLW  01
286C:  MOVWF  xE6
286E:  MOVLW  03
2870:  MOVWF  xE7
2872:  CALL   12C0
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2876:  MOVLW  54
2878:  MOVWF  FF6
287A:  MOVLW  02
287C:  MOVWF  FF7
287E:  MOVLW  0A
2880:  MOVWF  xD8
2882:  CALL   15C4
2886:  MOVFF  39,D4
288A:  MOVLW  1F
288C:  MOVWF  xD5
288E:  CALL   160A
2892:  MOVFF  3A,D4
2896:  MOVLW  1F
2898:  MOVWF  xD5
289A:  CALL   160A
289E:  MOVFF  3B,D4
28A2:  MOVLW  1F
28A4:  MOVWF  xD5
28A6:  CALL   160A
28AA:  MOVFF  3C,D4
28AE:  MOVLW  1F
28B0:  MOVWF  xD5
28B2:  CALL   160A
28B6:  MOVLW  20
28B8:  MOVWF  xE5
28BA:  CALL   132A
28BE:  MOVLW  20
28C0:  MOVWF  xE5
28C2:  CALL   132A
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
28C6:  MOVFF  1D,E6
28CA:  MOVLW  04
28CC:  MOVWF  xE7
28CE:  CALL   12C0
....................          lcd_putc(t[2]); 
28D2:  MOVFF  38,E5
28D6:  CALL   132A
....................           
....................          if(unidad>11&&unidad<14){ 
28DA:  MOVF   1D,W
28DC:  SUBLW  0B
28DE:  BC    28FE
28E0:  MOVF   1D,W
28E2:  SUBLW  0D
28E4:  BNC   28FE
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
28E6:  MOVLW  01
28E8:  SUBWF  1D,W
28EA:  MOVWF  xD4
28EC:  MOVWF  xE6
28EE:  MOVLW  04
28F0:  MOVWF  xE7
28F2:  CALL   12C0
....................             lcd_putc(t[1]); 
28F6:  MOVFF  37,E5
28FA:  CALL   132A
....................          } 
....................           
....................          Cambio=OFF; 
28FE:  BCF    19.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2900:  BSF    F92.5
2902:  BTFSC  F80.5
2904:  BRA    2938
....................          delay_ms(20); 
2906:  MOVLW  14
2908:  MOVWF  xEA
290A:  CALL   07E6
....................          if(UP){ 
290E:  BSF    F92.5
2910:  BTFSC  F80.5
2912:  BRA    2936
....................             if(Flanco == 0) { 
2914:  BTFSC  17.3
2916:  BRA    2936
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2918:  MOVLW  0B
291A:  SUBWF  1D,W
291C:  CLRF   03
291E:  ADDLW  39
2920:  MOVWF  FE9
2922:  MOVLW  00
2924:  ADDWFC 03,W
2926:  MOVWF  FEA
2928:  INCF   FEF,F
292A:  BSF    17.3
292C:  MOVLW  1E
292E:  MOVWF  xEA
2930:  CALL   07E6
2934:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
2936:  BRA    293A
....................          Flanco = 0; 
2938:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
293A:  BSF    F96.0
293C:  BTFSC  F84.0
293E:  BRA    2972
....................          delay_ms(20); 
2940:  MOVLW  14
2942:  MOVWF  xEA
2944:  CALL   07E6
....................          if(DOWN){ 
2948:  BSF    F96.0
294A:  BTFSC  F84.0
294C:  BRA    2970
....................             if(Flanco2 == 0) { 
294E:  BTFSC  17.5
2950:  BRA    2970
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2952:  MOVLW  0B
2954:  SUBWF  1D,W
2956:  CLRF   03
2958:  ADDLW  39
295A:  MOVWF  FE9
295C:  MOVLW  00
295E:  ADDWFC 03,W
2960:  MOVWF  FEA
2962:  DECF   FEF,F
2964:  BSF    17.5
2966:  MOVLW  1E
2968:  MOVWF  xEA
296A:  CALL   07E6
296E:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
2970:  BRA    2974
....................          Flanco2 = 0; 
2972:  BCF    17.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2974:  BSF    F96.1
2976:  BTFSC  F84.1
2978:  BRA    29A4
....................          delay_ms(20); 
297A:  MOVLW  14
297C:  MOVWF  xEA
297E:  CALL   07E6
....................          if(RIGHT){ 
2982:  BSF    F96.1
2984:  BTFSC  F84.1
2986:  BRA    29A2
....................             if(Flanco1 == 0) { 
2988:  BTFSC  17.4
298A:  BRA    29A2
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
298C:  BSF    17.4
298E:  INCF   1D,F
2990:  MOVLW  1E
2992:  MOVWF  xEA
2994:  CALL   07E6
2998:  MOVLW  0C
299A:  MOVWF  xE5
299C:  CALL   132A
29A0:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
29A2:  BRA    29A6
....................          Flanco1 = 0; 
29A4:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
29A6:  BSF    F96.2
29A8:  BTFSC  F84.2
29AA:  BRA    29D6
....................          delay_ms(150); 
29AC:  MOVLW  96
29AE:  MOVWF  xEA
29B0:  CALL   07E6
....................          if(IZQU){ 
29B4:  BSF    F96.2
29B6:  BTFSC  F84.2
29B8:  BRA    29D4
....................             if(Flanco3 == 0){ 
29BA:  BTFSC  17.6
29BC:  BRA    29D4
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
29BE:  BSF    17.6
29C0:  DECF   1D,F
29C2:  MOVLW  1E
29C4:  MOVWF  xEA
29C6:  CALL   07E6
29CA:  MOVLW  0C
29CC:  MOVWF  xE5
29CE:  CALL   132A
29D2:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
29D4:  BRA    29D8
....................         Flanco3 = 0; 
29D6:  BCF    17.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
29D8:  MOVLW  0B
29DA:  SUBWF  1D,W
29DC:  CLRF   03
29DE:  ADDLW  39
29E0:  MOVWF  FE9
29E2:  MOVLW  00
29E4:  ADDWFC 03,W
29E6:  MOVWF  FEA
29E8:  BTFSC  FEF.7
29EA:  BRA    29EE
29EC:  BRA    2A02
....................          clave[unidad-11]=9; 
29EE:  MOVLW  0B
29F0:  SUBWF  1D,W
29F2:  CLRF   03
29F4:  ADDLW  39
29F6:  MOVWF  FE9
29F8:  MOVLW  00
29FA:  ADDWFC 03,W
29FC:  MOVWF  FEA
29FE:  MOVLW  09
2A00:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2A02:  MOVLW  0B
2A04:  SUBWF  1D,W
2A06:  CLRF   03
2A08:  ADDLW  39
2A0A:  MOVWF  FE9
2A0C:  MOVLW  00
2A0E:  ADDWFC 03,W
2A10:  MOVWF  FEA
2A12:  BTFSC  FEF.7
2A14:  BRA    2A2E
2A16:  MOVF   FEF,W
2A18:  SUBLW  09
2A1A:  BC    2A2E
....................          clave[unidad-11]=0; 
2A1C:  MOVLW  0B
2A1E:  SUBWF  1D,W
2A20:  CLRF   03
2A22:  ADDLW  39
2A24:  MOVWF  FE9
2A26:  MOVLW  00
2A28:  ADDWFC 03,W
2A2A:  MOVWF  FEA
2A2C:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2A2E:  MOVF   1D,W
2A30:  SUBLW  0A
2A32:  BNC   2A38
....................          unidad=11; 
2A34:  MOVLW  0B
2A36:  MOVWF  1D
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2A38:  MOVF   1D,W
2A3A:  SUBLW  0E
2A3C:  BTFSC  FD8.0
2A3E:  BRA    2C46
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2A40:  MOVF   39,W
2A42:  SUBLW  03
2A44:  BNZ   2B28
2A46:  MOVF   3A,W
2A48:  SUBLW  08
2A4A:  BNZ   2B28
2A4C:  MOVF   3B,W
2A4E:  SUBLW  09
2A50:  BNZ   2B28
2A52:  MOVF   3C,W
2A54:  SUBLW  02
2A56:  BNZ   2B28
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2A58:  CLRF   FA9
2A5A:  CLRF   FA8
2A5C:  BCF    FA6.6
2A5E:  BCF    FA6.7
2A60:  BSF    FA6.2
2A62:  MOVF   FF2,W
2A64:  MOVWF  00
2A66:  BCF    FF2.6
2A68:  BCF    FF2.7
2A6A:  MOVLB  F
2A6C:  MOVLW  55
2A6E:  MOVWF  FA7
2A70:  MOVLW  AA
2A72:  MOVWF  FA7
2A74:  BSF    FA6.1
2A76:  BTFSC  FA6.1
2A78:  BRA    2A76
2A7A:  BCF    FA6.2
2A7C:  MOVF   00,W
2A7E:  IORWF  FF2,F
2A80:  MOVLW  14
2A82:  MOVLB  0
2A84:  MOVWF  xEA
2A86:  CALL   07E6
2A8A:  MOVLW  01
2A8C:  MOVWF  FA9
2A8E:  CLRF   FA8
2A90:  BCF    FA6.6
2A92:  BCF    FA6.7
2A94:  BSF    FA6.2
2A96:  MOVF   FF2,W
2A98:  MOVWF  00
2A9A:  BCF    FF2.6
2A9C:  BCF    FF2.7
2A9E:  MOVLB  F
2AA0:  MOVLW  55
2AA2:  MOVWF  FA7
2AA4:  MOVLW  AA
2AA6:  MOVWF  FA7
2AA8:  BSF    FA6.1
2AAA:  BTFSC  FA6.1
2AAC:  BRA    2AAA
2AAE:  BCF    FA6.2
2AB0:  MOVF   00,W
2AB2:  IORWF  FF2,F
2AB4:  MOVLW  14
2AB6:  MOVLB  0
2AB8:  MOVWF  xEA
2ABA:  CALL   07E6
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2ABE:  MOVLW  02
2AC0:  MOVWF  FA9
2AC2:  CLRF   FA8
2AC4:  BCF    FA6.6
2AC6:  BCF    FA6.7
2AC8:  BSF    FA6.2
2ACA:  MOVF   FF2,W
2ACC:  MOVWF  00
2ACE:  BCF    FF2.6
2AD0:  BCF    FF2.7
2AD2:  MOVLB  F
2AD4:  MOVLW  55
2AD6:  MOVWF  FA7
2AD8:  MOVLW  AA
2ADA:  MOVWF  FA7
2ADC:  BSF    FA6.1
2ADE:  BTFSC  FA6.1
2AE0:  BRA    2ADE
2AE2:  BCF    FA6.2
2AE4:  MOVF   00,W
2AE6:  IORWF  FF2,F
2AE8:  MOVLW  14
2AEA:  MOVLB  0
2AEC:  MOVWF  xEA
2AEE:  CALL   07E6
2AF2:  MOVLW  03
2AF4:  MOVWF  FA9
2AF6:  CLRF   FA8
2AF8:  BCF    FA6.6
2AFA:  BCF    FA6.7
2AFC:  BSF    FA6.2
2AFE:  MOVF   FF2,W
2B00:  MOVWF  00
2B02:  BCF    FF2.6
2B04:  BCF    FF2.7
2B06:  MOVLB  F
2B08:  MOVLW  55
2B0A:  MOVWF  FA7
2B0C:  MOVLW  AA
2B0E:  MOVWF  FA7
2B10:  BSF    FA6.1
2B12:  BTFSC  FA6.1
2B14:  BRA    2B12
2B16:  BCF    FA6.2
2B18:  MOVF   00,W
2B1A:  IORWF  FF2,F
2B1C:  MOVLW  14
2B1E:  MOVLB  0
2B20:  MOVWF  xEA
2B22:  CALL   07E6
....................              reset_cpu(); 
2B26:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2B28:  MOVF   3D,W
2B2A:  SUBWF  39,W
2B2C:  BNZ   2BCC
2B2E:  MOVF   3E,W
2B30:  SUBWF  3A,W
2B32:  BNZ   2BCC
2B34:  MOVF   3F,W
2B36:  SUBWF  3B,W
2B38:  BNZ   2BCC
2B3A:  MOVF   40,W
2B3C:  SUBWF  3C,W
2B3E:  BNZ   2BCC
....................             lcd_gotoxy(1,1); 
2B40:  MOVLW  01
2B42:  MOVWF  xE6
2B44:  MOVWF  xE7
2B46:  CALL   12C0
....................             printf(lcd_putc,"                   "); 
2B4A:  MOVLW  6A
2B4C:  MOVWF  FF6
2B4E:  MOVLW  02
2B50:  MOVWF  FF7
2B52:  CALL   1390
....................             lcd_gotoxy(1,2); 
2B56:  MOVLW  01
2B58:  MOVWF  xE6
2B5A:  MOVLW  02
2B5C:  MOVWF  xE7
2B5E:  CALL   12C0
....................             printf(lcd_putc,"     Contraseña    "); 
2B62:  MOVLW  7E
2B64:  MOVWF  FF6
2B66:  MOVLW  02
2B68:  MOVWF  FF7
2B6A:  CALL   1390
....................             lcd_gotoxy(1,3); 
2B6E:  MOVLW  01
2B70:  MOVWF  xE6
2B72:  MOVLW  03
2B74:  MOVWF  xE7
2B76:  CALL   12C0
....................             printf(lcd_putc,"      Correcta     "); 
2B7A:  MOVLW  92
2B7C:  MOVWF  FF6
2B7E:  MOVLW  02
2B80:  MOVWF  FF7
2B82:  CALL   1390
....................             lcd_gotoxy(1,4); 
2B86:  MOVLW  01
2B88:  MOVWF  xE6
2B8A:  MOVLW  04
2B8C:  MOVWF  xE7
2B8E:  CALL   12C0
....................             printf(lcd_putc,"                   "); 
2B92:  MOVLW  A6
2B94:  MOVWF  FF6
2B96:  MOVLW  02
2B98:  MOVWF  FF7
2B9A:  CALL   1390
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2B9E:  MOVLW  04
2BA0:  MOVWF  xD4
2BA2:  MOVLW  FA
2BA4:  MOVWF  xEA
2BA6:  CALL   07E6
2BAA:  DECFSZ xD4,F
2BAC:  BRA    2BA2
2BAE:  MOVLW  32
2BB0:  MOVWF  1A
2BB2:  MOVLW  0B
2BB4:  MOVWF  1D
2BB6:  MOVLW  0C
2BB8:  MOVWF  xE5
2BBA:  CALL   132A
2BBE:  BSF    19.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2BC0:  CLRF   39
2BC2:  CLRF   3A
2BC4:  CLRF   3B
2BC6:  CLRF   3C
2BC8:  BSF    19.3
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2BCA:  BRA    2C46
....................             lcd_gotoxy(1,1); 
2BCC:  MOVLW  01
2BCE:  MOVWF  xE6
2BD0:  MOVWF  xE7
2BD2:  CALL   12C0
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2BD6:  MOVLW  01
2BD8:  MOVWF  xE6
2BDA:  MOVLW  02
2BDC:  MOVWF  xE7
2BDE:  CALL   12C0
....................             printf(lcd_putc,"     Contraseña    "); 
2BE2:  MOVLW  BA
2BE4:  MOVWF  FF6
2BE6:  MOVLW  02
2BE8:  MOVWF  FF7
2BEA:  CALL   1390
....................             lcd_gotoxy(1,3); 
2BEE:  MOVLW  01
2BF0:  MOVWF  xE6
2BF2:  MOVLW  03
2BF4:  MOVWF  xE7
2BF6:  CALL   12C0
....................             printf(lcd_putc,"     Incorrecta    "); 
2BFA:  MOVLW  CE
2BFC:  MOVWF  FF6
2BFE:  MOVLW  02
2C00:  MOVWF  FF7
2C02:  CALL   1390
....................             lcd_gotoxy(1,4); 
2C06:  MOVLW  01
2C08:  MOVWF  xE6
2C0A:  MOVLW  04
2C0C:  MOVWF  xE7
2C0E:  CALL   12C0
....................             printf(lcd_putc,"                   "); 
2C12:  MOVLW  E2
2C14:  MOVWF  FF6
2C16:  MOVLW  02
2C18:  MOVWF  FF7
2C1A:  CALL   1390
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2C1E:  MOVLW  04
2C20:  MOVWF  xD4
2C22:  MOVLW  FA
2C24:  MOVWF  xEA
2C26:  CALL   07E6
2C2A:  DECFSZ xD4,F
2C2C:  BRA    2C22
2C2E:  MOVLW  0B
2C30:  MOVWF  1D
2C32:  MOVLW  0C
2C34:  MOVWF  xE5
2C36:  CALL   132A
2C3A:  BSF    19.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2C3C:  CLRF   39
2C3E:  CLRF   3A
2C40:  CLRF   3B
2C42:  CLRF   3C
2C44:  BSF    19.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2C46:  DECFSZ 1A,W
2C48:  BRA    2E80
....................       EliminaRuido(); 
2C4A:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2C4E:  MOVLW  01
2C50:  MOVWF  xE6
2C52:  MOVWF  xE7
2C54:  CALL   12C0
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2C58:  MOVLW  F6
2C5A:  MOVWF  FF6
2C5C:  MOVLW  02
2C5E:  MOVWF  FF7
2C60:  CALL   1390
....................          mensajes(1+paso,2); 
2C64:  MOVLW  01
2C66:  ADDWF  35,W
2C68:  MOVWF  xD4
2C6A:  MOVWF  xD5
2C6C:  MOVLW  02
2C6E:  MOVWF  xD6
2C70:  CALL   16D2
....................          mensajes(2+paso,3); 
2C74:  MOVLW  02
2C76:  ADDWF  35,W
2C78:  MOVWF  xD4
2C7A:  MOVWF  xD5
2C7C:  MOVLW  03
2C7E:  MOVWF  xD6
2C80:  CALL   16D2
....................          mensajes(3+paso,4); 
2C84:  MOVLW  03
2C86:  ADDWF  35,W
2C88:  MOVWF  xD4
2C8A:  MOVWF  xD5
2C8C:  MOVLW  04
2C8E:  MOVWF  xD6
2C90:  CALL   16D2
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2C94:  MOVLW  01
2C96:  MOVWF  xE6
2C98:  MOVFF  1E,E7
2C9C:  CALL   12C0
....................         lcd_putc(t[0]); 
2CA0:  MOVFF  36,E5
2CA4:  CALL   132A
....................  
....................         if(Flecha==2) 
2CA8:  MOVF   1E,W
2CAA:  SUBLW  02
2CAC:  BNZ   2CD6
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2CAE:  MOVLW  01
2CB0:  MOVWF  xE6
2CB2:  MOVLW  04
2CB4:  MOVWF  xE7
2CB6:  CALL   12C0
....................             lcd_putc(t[1]); 
2CBA:  MOVFF  37,E5
2CBE:  CALL   132A
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2CC2:  MOVLW  01
2CC4:  MOVWF  xE6
2CC6:  MOVLW  03
2CC8:  MOVWF  xE7
2CCA:  CALL   12C0
....................             lcd_putc(t[1]); 
2CCE:  MOVFF  37,E5
2CD2:  CALL   132A
....................           } 
....................          
....................         if(Flecha==4) 
2CD6:  MOVF   1E,W
2CD8:  SUBLW  04
2CDA:  BNZ   2D04
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2CDC:  MOVLW  01
2CDE:  MOVWF  xE6
2CE0:  MOVLW  02
2CE2:  MOVWF  xE7
2CE4:  CALL   12C0
....................             lcd_putc(t[1]); 
2CE8:  MOVFF  37,E5
2CEC:  CALL   132A
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2CF0:  MOVLW  01
2CF2:  MOVWF  xE6
2CF4:  MOVLW  03
2CF6:  MOVWF  xE7
2CF8:  CALL   12C0
....................             lcd_putc(t[1]); 
2CFC:  MOVFF  37,E5
2D00:  CALL   132A
....................           } 
....................          
....................         if(Flecha==3) 
2D04:  MOVF   1E,W
2D06:  SUBLW  03
2D08:  BNZ   2D32
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2D0A:  MOVLW  01
2D0C:  MOVWF  xE6
2D0E:  MOVLW  04
2D10:  MOVWF  xE7
2D12:  CALL   12C0
....................             lcd_putc(t[1]); 
2D16:  MOVFF  37,E5
2D1A:  CALL   132A
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2D1E:  MOVLW  01
2D20:  MOVWF  xE6
2D22:  MOVLW  02
2D24:  MOVWF  xE7
2D26:  CALL   12C0
....................             lcd_putc(t[1]); 
2D2A:  MOVFF  37,E5
2D2E:  CALL   132A
....................           } 
....................          Cambio=OFF; 
2D32:  BCF    19.3
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
2D34:  BSF    F92.5
2D36:  BTFSC  F80.5
2D38:  BRA    2D64
....................          delay_ms(20); 
2D3A:  MOVLW  14
2D3C:  MOVWF  xEA
2D3E:  CALL   07E6
....................          if(UP){ 
2D42:  BSF    F92.5
2D44:  BTFSC  F80.5
2D46:  BRA    2D62
....................             if(Flanco == 0){ 
2D48:  BTFSC  17.3
2D4A:  BRA    2D62
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
2D4C:  DECF   20,F
2D4E:  DECF   1E,F
2D50:  MOVLW  01
2D52:  ADDWF  1E,W
2D54:  MOVWF  1F
2D56:  BSF    17.3
2D58:  MOVLW  1E
2D5A:  MOVWF  xEA
2D5C:  CALL   07E6
2D60:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
2D62:  BRA    2D66
....................          Flanco = 0; 
2D64:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2D66:  BSF    F96.0
2D68:  BTFSC  F84.0
2D6A:  BRA    2D96
....................          delay_ms(20); 
2D6C:  MOVLW  14
2D6E:  MOVWF  xEA
2D70:  CALL   07E6
....................          if(DOWN){ 
2D74:  BSF    F96.0
2D76:  BTFSC  F84.0
2D78:  BRA    2D94
....................             if(Flanco2 == 0){ 
2D7A:  BTFSC  17.5
2D7C:  BRA    2D94
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2D7E:  INCF   20,F
2D80:  INCF   1E,F
2D82:  MOVLW  01
2D84:  SUBWF  1E,W
2D86:  MOVWF  1F
2D88:  BSF    17.5
2D8A:  MOVLW  1E
2D8C:  MOVWF  xEA
2D8E:  CALL   07E6
2D92:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
2D94:  BRA    2D98
....................          Flanco2 = 0; 
2D96:  BCF    17.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2D98:  MOVF   20,W
2D9A:  SUBWF  22,W
2D9C:  BC    2DAE
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2D9E:  INCF   35,F
2DA0:  MOVFF  20,22
2DA4:  MOVLW  02
2DA6:  SUBWF  22,W
2DA8:  MOVWF  21
2DAA:  MOVLW  04
2DAC:  MOVWF  1E
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2DAE:  MOVF   21,W
2DB0:  SUBWF  20,W
2DB2:  BC    2DC4
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
2DB4:  DECF   35,F
2DB6:  MOVFF  20,21
2DBA:  MOVLW  02
2DBC:  ADDWF  21,W
2DBE:  MOVWF  22
2DC0:  MOVLW  02
2DC2:  MOVWF  1E
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
2DC4:  MOVF   20,W
2DC6:  SUBWF  1B,W
2DC8:  BC    2DDC
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2DCA:  MOVFF  1C,20
2DCE:  MOVLW  02
2DD0:  MOVWF  1E
2DD2:  CLRF   35
2DD4:  MOVFF  20,21
2DD8:  ADDWF  21,W
2DDA:  MOVWF  22
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
2DDC:  MOVF   1C,W
2DDE:  SUBWF  20,W
2DE0:  BC    2DF8
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2DE2:  MOVFF  1B,20
2DE6:  MOVLW  04
2DE8:  MOVWF  1E
2DEA:  SUBWF  1B,W
2DEC:  MOVWF  35
2DEE:  MOVFF  20,22
2DF2:  MOVLW  02
2DF4:  SUBWF  22,W
2DF6:  MOVWF  21
....................       } 
....................          
....................       if(paso<0) 
2DF8:  BTFSC  35.7
2DFA:  BRA    2DFE
2DFC:  BRA    2E00
....................          paso=0; 
2DFE:  CLRF   35
....................           
....................       if(RIGHT){// Si oprime derecha 
2E00:  BSF    F96.1
2E02:  BTFSC  F84.1
2E04:  BRA    2E4C
....................          delay_ms(20); 
2E06:  MOVLW  14
2E08:  MOVWF  xEA
2E0A:  CALL   07E6
....................          if(RIGHT){ 
2E0E:  BSF    F96.1
2E10:  BTFSC  F84.1
2E12:  BRA    2E48
....................             if(Flanco1 == 0){ 
2E14:  BTFSC  17.4
2E16:  BRA    2E48
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2E18:  BSF    17.4
2E1A:  MOVFF  20,1A
2E1E:  MOVLW  03
2E20:  MOVWF  1E
2E22:  MOVLW  02
2E24:  MOVWF  xD4
2E26:  MOVLW  96
2E28:  MOVWF  xEA
2E2A:  CALL   07E6
2E2E:  DECFSZ xD4,F
2E30:  BRA    2E26
2E32:  MOVLW  0C
2E34:  MOVWF  xE5
2E36:  CALL   132A
....................                if(Menu==6){ 
2E3A:  MOVF   1A,W
2E3C:  SUBLW  06
2E3E:  BNZ   2E48
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2E40:  CLRF   39
2E42:  CLRF   3A
2E44:  CLRF   3B
2E46:  CLRF   3C
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2E48:  BSF    19.3
....................       }else{ 
2E4A:  BRA    2E4E
....................         Flanco1 = 0; 
2E4C:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){ 
2E4E:  BSF    F96.2
2E50:  BTFSC  F84.2
2E52:  BRA    2E80
....................          delay_ms(20); 
2E54:  MOVLW  14
2E56:  MOVWF  xEA
2E58:  CALL   07E6
....................          if(IZQU){ 
2E5C:  BSF    F96.2
2E5E:  BTFSC  F84.2
2E60:  BRA    2E80
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2E62:  MOVLW  02
2E64:  MOVWF  xD4
2E66:  MOVLW  FA
2E68:  MOVWF  xEA
2E6A:  CALL   07E6
2E6E:  DECFSZ xD4,F
2E70:  BRA    2E66
2E72:  MOVLW  32
2E74:  MOVWF  1A
2E76:  MOVLW  0C
2E78:  MOVWF  xE5
2E7A:  CALL   132A
2E7E:  BSF    19.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2E80:  MOVF   1A,W
2E82:  SUBLW  02
2E84:  BTFSS  FD8.2
2E86:  BRA    30E0
....................    EliminaRuido(); 
2E88:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2E8C:  MOVLW  01
2E8E:  MOVWF  xE6
2E90:  MOVWF  xE7
2E92:  CALL   12C0
....................       printf(lcd_putc,"    Temporizador     "); 
2E96:  MOVLW  0C
2E98:  MOVWF  FF6
2E9A:  MOVLW  03
2E9C:  MOVWF  FF7
2E9E:  CALL   1390
....................       lcd_gotoxy(1,2); 
2EA2:  MOVLW  01
2EA4:  MOVWF  xE6
2EA6:  MOVLW  02
2EA8:  MOVWF  xE7
2EAA:  CALL   12C0
....................       printf(lcd_putc,"       Luz UV        "); 
2EAE:  MOVLW  22
2EB0:  MOVWF  FF6
2EB2:  MOVLW  03
2EB4:  MOVWF  FF7
2EB6:  CALL   1390
....................       lcd_gotoxy(6,3); 
2EBA:  MOVLW  06
2EBC:  MOVWF  xE6
2EBE:  MOVLW  03
2EC0:  MOVWF  xE7
2EC2:  CALL   12C0
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2EC6:  MOVFF  2B,D4
2ECA:  MOVLW  03
2ECC:  MOVWF  xD5
2ECE:  CALL   178A
2ED2:  MOVLW  3A
2ED4:  MOVWF  xE5
2ED6:  CALL   132A
2EDA:  MOVFF  2C,D4
2EDE:  MOVLW  01
2EE0:  MOVWF  xD5
2EE2:  CALL   178A
2EE6:  MOVLW  41
2EE8:  MOVWF  FF6
2EEA:  MOVLW  03
2EEC:  MOVWF  FF7
2EEE:  MOVLW  08
2EF0:  MOVWF  xD8
2EF2:  CALL   15C4
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2EF6:  MOVLW  06
2EF8:  ADDWF  30,W
2EFA:  MOVWF  xD4
2EFC:  MOVWF  xE6
2EFE:  MOVLW  04
2F00:  MOVWF  xE7
2F02:  CALL   12C0
....................       lcd_putc(t[2]); 
2F06:  MOVFF  38,E5
2F0A:  CALL   132A
....................        
....................       Cambio=OFF; 
2F0E:  BCF    19.3
.................... //   } 
....................     
....................    if(UP) 
2F10:  BSF    F92.5
2F12:  BTFSC  F80.5
2F14:  BRA    2F62
....................    { 
....................       delay_ms(20); 
2F16:  MOVLW  14
2F18:  MOVWF  xEA
2F1A:  CALL   07E6
....................       if(UP){ 
2F1E:  BSF    F92.5
2F20:  BTFSC  F80.5
2F22:  BRA    2F62
....................          if(unidad2==1) 
2F24:  DECFSZ 30,W
2F26:  BRA    2F42
....................          { 
....................             if(tempo_minutos_pro<240) 
2F28:  MOVF   2B,W
2F2A:  SUBLW  EF
2F2C:  BNC   2F42
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
2F2E:  MOVLW  05
2F30:  ADDWF  2B,F
2F32:  MOVLW  02
2F34:  MOVWF  xD4
2F36:  MOVLW  96
2F38:  MOVWF  xEA
2F3A:  CALL   07E6
2F3E:  DECFSZ xD4,F
2F40:  BRA    2F36
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2F42:  MOVF   30,W
2F44:  SUBLW  04
2F46:  BNZ   2F60
....................          { 
....................             if(tempo_segundos_pro<59) 
2F48:  MOVF   2C,W
2F4A:  SUBLW  3A
2F4C:  BNC   2F60
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2F4E:  INCF   2C,F
2F50:  MOVLW  02
2F52:  MOVWF  xD4
2F54:  MOVLW  96
2F56:  MOVWF  xEA
2F58:  CALL   07E6
2F5C:  DECFSZ xD4,F
2F5E:  BRA    2F54
....................             } 
....................          }      
....................       Cambio=ON; 
2F60:  BSF    19.3
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2F62:  BSF    F96.0
2F64:  BTFSC  F84.0
2F66:  BRA    2FB0
....................    { 
....................       delay_ms(20); 
2F68:  MOVLW  14
2F6A:  MOVWF  xEA
2F6C:  CALL   07E6
....................       if(DOWN){ 
2F70:  BSF    F96.0
2F72:  BTFSC  F84.0
2F74:  BRA    2FB0
....................          if(unidad2==1) 
2F76:  DECFSZ 30,W
2F78:  BRA    2F92
....................          { 
....................             if(tempo_minutos_pro>0) 
2F7A:  MOVF   2B,F
2F7C:  BZ    2F92
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2F7E:  MOVLW  05
2F80:  SUBWF  2B,F
2F82:  MOVLW  02
2F84:  MOVWF  xD4
2F86:  MOVLW  96
2F88:  MOVWF  xEA
2F8A:  CALL   07E6
2F8E:  DECFSZ xD4,F
2F90:  BRA    2F86
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2F92:  MOVF   30,W
2F94:  SUBLW  04
2F96:  BNZ   2FAE
....................          { 
....................             if(tempo_segundos_pro>0) 
2F98:  MOVF   2C,F
2F9A:  BZ    2FAE
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2F9C:  DECF   2C,F
2F9E:  MOVLW  02
2FA0:  MOVWF  xD4
2FA2:  MOVLW  96
2FA4:  MOVWF  xEA
2FA6:  CALL   07E6
2FAA:  DECFSZ xD4,F
2FAC:  BRA    2FA2
....................             }    
....................          } 
....................       Cambio=ON; 
2FAE:  BSF    19.3
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2FB0:  BSF    F96.1
2FB2:  BTFSC  F84.1
2FB4:  BRA    2FF2
....................    { 
....................       delay_ms(20); 
2FB6:  MOVLW  14
2FB8:  MOVWF  xEA
2FBA:  CALL   07E6
....................       if(RIGHT){ 
2FBE:  BSF    F96.1
2FC0:  BTFSC  F84.1
2FC2:  BRA    2FF2
....................          if(unidad2==1) 
2FC4:  DECFSZ 30,W
2FC6:  BRA    2FCE
....................          { 
....................             unidad2=4; 
2FC8:  MOVLW  04
2FCA:  MOVWF  30
....................          } 
....................          else 
2FCC:  BRA    2FD8
....................          { 
....................             if(unidad2==4) 
2FCE:  MOVF   30,W
2FD0:  SUBLW  04
2FD2:  BNZ   2FD8
....................             { 
....................                unidad2=1; 
2FD4:  MOVLW  01
2FD6:  MOVWF  30
....................             } 
....................          } 
....................       delay_ms(500); 
2FD8:  MOVLW  02
2FDA:  MOVWF  xD4
2FDC:  MOVLW  FA
2FDE:  MOVWF  xEA
2FE0:  CALL   07E6
2FE4:  DECFSZ xD4,F
2FE6:  BRA    2FDC
....................       printf(lcd_putc,"\f"); 
2FE8:  MOVLW  0C
2FEA:  MOVWF  xE5
2FEC:  CALL   132A
....................       Cambio=ON; 
2FF0:  BSF    19.3
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2FF2:  BSF    F96.2
2FF4:  BTFSC  F84.2
2FF6:  BRA    30E0
....................    { 
....................       if(IZQU){ 
2FF8:  BSF    F96.2
2FFA:  BTFSC  F84.2
2FFC:  BRA    30E0
....................          delay_ms(200); 
2FFE:  MOVLW  C8
3000:  MOVWF  xEA
3002:  CALL   07E6
....................          printf(lcd_putc,"\f"); 
3006:  MOVLW  0C
3008:  MOVWF  xE5
300A:  CALL   132A
....................          lcd_gotoxy(1,2); 
300E:  MOVLW  01
3010:  MOVWF  xE6
3012:  MOVLW  02
3014:  MOVWF  xE7
3016:  CALL   12C0
....................          printf(lcd_putc,"Tiempo Almacenado"); 
301A:  MOVLW  4A
301C:  MOVWF  FF6
301E:  MOVLW  03
3020:  MOVWF  FF7
3022:  CALL   1390
....................          lcd_gotoxy(1,3); 
3026:  MOVLW  01
3028:  MOVWF  xE6
302A:  MOVLW  03
302C:  MOVWF  xE7
302E:  CALL   12C0
....................          printf(lcd_putc,"  Correctamente  "); 
3032:  MOVLW  5C
3034:  MOVWF  FF6
3036:  MOVLW  03
3038:  MOVWF  FF7
303A:  CALL   1390
....................          write_eeprom(5,tempo_minutos_pro); 
303E:  MOVLW  05
3040:  MOVWF  FA9
3042:  MOVFF  2B,FA8
3046:  BCF    FA6.6
3048:  BCF    FA6.7
304A:  BSF    FA6.2
304C:  MOVF   FF2,W
304E:  MOVWF  00
3050:  BCF    FF2.6
3052:  BCF    FF2.7
3054:  MOVLB  F
3056:  MOVLW  55
3058:  MOVWF  FA7
305A:  MOVLW  AA
305C:  MOVWF  FA7
305E:  BSF    FA6.1
3060:  BTFSC  FA6.1
3062:  BRA    3060
3064:  BCF    FA6.2
3066:  MOVF   00,W
3068:  IORWF  FF2,F
....................          delay_ms(20); 
306A:  MOVLW  14
306C:  MOVLB  0
306E:  MOVWF  xEA
3070:  CALL   07E6
....................          write_eeprom(6,tempo_segundos_pro); 
3074:  MOVLW  06
3076:  MOVWF  FA9
3078:  MOVFF  2C,FA8
307C:  BCF    FA6.6
307E:  BCF    FA6.7
3080:  BSF    FA6.2
3082:  MOVF   FF2,W
3084:  MOVWF  00
3086:  BCF    FF2.6
3088:  BCF    FF2.7
308A:  MOVLB  F
308C:  MOVLW  55
308E:  MOVWF  FA7
3090:  MOVLW  AA
3092:  MOVWF  FA7
3094:  BSF    FA6.1
3096:  BTFSC  FA6.1
3098:  BRA    3096
309A:  BCF    FA6.2
309C:  MOVF   00,W
309E:  IORWF  FF2,F
....................          delay_ms(20); 
30A0:  MOVLW  14
30A2:  MOVLB  0
30A4:  MOVWF  xEA
30A6:  CALL   07E6
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
30AA:  MOVFF  2B,29
30AE:  MOVFF  2C,2A
....................          delay_ms(700); 
30B2:  MOVLW  04
30B4:  MOVWF  xD4
30B6:  MOVLW  AF
30B8:  MOVWF  xEA
30BA:  CALL   07E6
30BE:  DECFSZ xD4,F
30C0:  BRA    30B6
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
30C2:  MOVLW  1E
30C4:  MOVWF  xEA
30C6:  CALL   07E6
30CA:  MOVLW  01
30CC:  MOVWF  1A
30CE:  CLRF   35
30D0:  MOVLW  02
30D2:  MOVWF  1E
30D4:  MOVWF  20
30D6:  MOVLW  0C
30D8:  MOVWF  xE5
30DA:  CALL   132A
....................          Cambio=ON; 
30DE:  BSF    19.3
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
30E0:  MOVF   1A,W
30E2:  SUBLW  03
30E4:  BTFSS  FD8.2
30E6:  BRA    3432
....................       EliminaRuido(); 
30E8:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
30EC:  MOVLW  01
30EE:  MOVWF  xE6
30F0:  MOVWF  xE7
30F2:  CALL   12C0
....................          printf(lcd_putc,"     Ingrese        "); 
30F6:  MOVLW  6E
30F8:  MOVWF  FF6
30FA:  MOVLW  03
30FC:  MOVWF  FF7
30FE:  CALL   1390
....................          lcd_gotoxy(1,2); 
3102:  MOVLW  01
3104:  MOVWF  xE6
3106:  MOVLW  02
3108:  MOVWF  xE7
310A:  CALL   12C0
....................          printf(lcd_putc,"    Contraseña      "); 
310E:  MOVLW  84
3110:  MOVWF  FF6
3112:  MOVLW  03
3114:  MOVWF  FF7
3116:  CALL   1390
....................          lcd_gotoxy(1,3); 
311A:  MOVLW  01
311C:  MOVWF  xE6
311E:  MOVLW  03
3120:  MOVWF  xE7
3122:  CALL   12C0
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3126:  MOVLW  9A
3128:  MOVWF  FF6
312A:  MOVLW  03
312C:  MOVWF  FF7
312E:  MOVLW  0A
3130:  MOVWF  xD8
3132:  CALL   15C4
3136:  MOVFF  39,D4
313A:  MOVLW  1F
313C:  MOVWF  xD5
313E:  CALL   160A
3142:  MOVFF  3A,D4
3146:  MOVLW  1F
3148:  MOVWF  xD5
314A:  CALL   160A
314E:  MOVFF  3B,D4
3152:  MOVLW  1F
3154:  MOVWF  xD5
3156:  CALL   160A
315A:  MOVFF  3C,D4
315E:  MOVLW  1F
3160:  MOVWF  xD5
3162:  CALL   160A
3166:  MOVLW  20
3168:  MOVWF  xE5
316A:  CALL   132A
316E:  MOVLW  20
3170:  MOVWF  xE5
3172:  CALL   132A
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3176:  MOVFF  1D,E6
317A:  MOVLW  04
317C:  MOVWF  xE7
317E:  CALL   12C0
....................          lcd_putc(t[2]); 
3182:  MOVFF  38,E5
3186:  CALL   132A
....................           
....................          if(unidad>11&&unidad<14){ 
318A:  MOVF   1D,W
318C:  SUBLW  0B
318E:  BC    31AE
3190:  MOVF   1D,W
3192:  SUBLW  0D
3194:  BNC   31AE
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3196:  MOVLW  01
3198:  SUBWF  1D,W
319A:  MOVWF  xD4
319C:  MOVWF  xE6
319E:  MOVLW  04
31A0:  MOVWF  xE7
31A2:  CALL   12C0
....................             lcd_putc(t[1]); 
31A6:  MOVFF  37,E5
31AA:  CALL   132A
....................          } 
....................           
....................          Cambio=OFF; 
31AE:  BCF    19.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
31B0:  BSF    F92.5
31B2:  BTFSC  F80.5
31B4:  BRA    31E8
....................          delay_ms(20); 
31B6:  MOVLW  14
31B8:  MOVWF  xEA
31BA:  CALL   07E6
....................          if(UP){ 
31BE:  BSF    F92.5
31C0:  BTFSC  F80.5
31C2:  BRA    31E6
....................             if(Flanco == 0) { 
31C4:  BTFSC  17.3
31C6:  BRA    31E6
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
31C8:  MOVLW  0B
31CA:  SUBWF  1D,W
31CC:  CLRF   03
31CE:  ADDLW  39
31D0:  MOVWF  FE9
31D2:  MOVLW  00
31D4:  ADDWFC 03,W
31D6:  MOVWF  FEA
31D8:  INCF   FEF,F
31DA:  BSF    17.3
31DC:  MOVLW  1E
31DE:  MOVWF  xEA
31E0:  CALL   07E6
31E4:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
31E6:  BRA    31EA
....................          Flanco = 0; 
31E8:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
31EA:  BSF    F96.0
31EC:  BTFSC  F84.0
31EE:  BRA    3222
....................          delay_ms(20); 
31F0:  MOVLW  14
31F2:  MOVWF  xEA
31F4:  CALL   07E6
....................          if(DOWN){ 
31F8:  BSF    F96.0
31FA:  BTFSC  F84.0
31FC:  BRA    3220
....................             if(Flanco2 == 0) { 
31FE:  BTFSC  17.5
3200:  BRA    3220
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3202:  MOVLW  0B
3204:  SUBWF  1D,W
3206:  CLRF   03
3208:  ADDLW  39
320A:  MOVWF  FE9
320C:  MOVLW  00
320E:  ADDWFC 03,W
3210:  MOVWF  FEA
3212:  DECF   FEF,F
3214:  BSF    17.5
3216:  MOVLW  1E
3218:  MOVWF  xEA
321A:  CALL   07E6
321E:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
3220:  BRA    3224
....................          Flanco2 = 0; 
3222:  BCF    17.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3224:  BSF    F96.1
3226:  BTFSC  F84.1
3228:  BRA    3254
....................          delay_ms(20); 
322A:  MOVLW  14
322C:  MOVWF  xEA
322E:  CALL   07E6
....................          if(RIGHT){ 
3232:  BSF    F96.1
3234:  BTFSC  F84.1
3236:  BRA    3252
....................             if(Flanco1 == 0) { 
3238:  BTFSC  17.4
323A:  BRA    3252
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
323C:  BSF    17.4
323E:  INCF   1D,F
3240:  MOVLW  1E
3242:  MOVWF  xEA
3244:  CALL   07E6
3248:  MOVLW  0C
324A:  MOVWF  xE5
324C:  CALL   132A
3250:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
3252:  BRA    3256
....................          Flanco1 = 0; 
3254:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3256:  BSF    F96.2
3258:  BTFSC  F84.2
325A:  BRA    3286
....................          delay_ms(150); 
325C:  MOVLW  96
325E:  MOVWF  xEA
3260:  CALL   07E6
....................          if(IZQU){ 
3264:  BSF    F96.2
3266:  BTFSC  F84.2
3268:  BRA    3284
....................             if(Flanco3 == 0){ 
326A:  BTFSC  17.6
326C:  BRA    3284
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
326E:  BSF    17.6
3270:  DECF   1D,F
3272:  MOVLW  1E
3274:  MOVWF  xEA
3276:  CALL   07E6
327A:  MOVLW  0C
327C:  MOVWF  xE5
327E:  CALL   132A
3282:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
3284:  BRA    3288
....................         Flanco3 = 0; 
3286:  BCF    17.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3288:  MOVLW  0B
328A:  SUBWF  1D,W
328C:  CLRF   03
328E:  ADDLW  39
3290:  MOVWF  FE9
3292:  MOVLW  00
3294:  ADDWFC 03,W
3296:  MOVWF  FEA
3298:  BTFSC  FEF.7
329A:  BRA    329E
329C:  BRA    32B2
....................          clave[unidad-11]=9; 
329E:  MOVLW  0B
32A0:  SUBWF  1D,W
32A2:  CLRF   03
32A4:  ADDLW  39
32A6:  MOVWF  FE9
32A8:  MOVLW  00
32AA:  ADDWFC 03,W
32AC:  MOVWF  FEA
32AE:  MOVLW  09
32B0:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
32B2:  MOVLW  0B
32B4:  SUBWF  1D,W
32B6:  CLRF   03
32B8:  ADDLW  39
32BA:  MOVWF  FE9
32BC:  MOVLW  00
32BE:  ADDWFC 03,W
32C0:  MOVWF  FEA
32C2:  BTFSC  FEF.7
32C4:  BRA    32DE
32C6:  MOVF   FEF,W
32C8:  SUBLW  09
32CA:  BC    32DE
....................          clave[unidad-11]=0; 
32CC:  MOVLW  0B
32CE:  SUBWF  1D,W
32D0:  CLRF   03
32D2:  ADDLW  39
32D4:  MOVWF  FE9
32D6:  MOVLW  00
32D8:  ADDWFC 03,W
32DA:  MOVWF  FEA
32DC:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
32DE:  MOVF   1D,W
32E0:  SUBLW  0A
32E2:  BNC   3304
....................          unidad=11; 
32E4:  MOVLW  0B
32E6:  MOVWF  1D
....................          Menu=1; 
32E8:  MOVLW  01
32EA:  MOVWF  1A
....................          paso=0; 
32EC:  CLRF   35
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
32EE:  CLRF   39
32F0:  CLRF   3A
32F2:  CLRF   3B
32F4:  CLRF   3C
32F6:  BSF    19.3
....................          unidad=11;printf(lcd_putc,"\f"); 
32F8:  MOVLW  0B
32FA:  MOVWF  1D
32FC:  MOVLW  0C
32FE:  MOVWF  xE5
3300:  CALL   132A
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3304:  MOVF   1D,W
3306:  SUBLW  0E
3308:  BTFSC  FD8.0
330A:  BRA    3432
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
330C:  MOVF   3D,W
330E:  SUBWF  39,W
3310:  BNZ   33AE
3312:  MOVF   3E,W
3314:  SUBWF  3A,W
3316:  BNZ   33AE
3318:  MOVF   3F,W
331A:  SUBWF  3B,W
331C:  BNZ   33AE
331E:  MOVF   40,W
3320:  SUBWF  3C,W
3322:  BNZ   33AE
....................             lcd_gotoxy(1,1); 
3324:  MOVLW  01
3326:  MOVWF  xE6
3328:  MOVWF  xE7
332A:  CALL   12C0
....................             printf(lcd_putc,"                    "); 
332E:  MOVLW  B0
3330:  MOVWF  FF6
3332:  MOVLW  03
3334:  MOVWF  FF7
3336:  CALL   1390
....................             lcd_gotoxy(1,2); 
333A:  MOVLW  01
333C:  MOVWF  xE6
333E:  MOVLW  02
3340:  MOVWF  xE7
3342:  CALL   12C0
....................             printf(lcd_putc,"     Contraseña     "); 
3346:  MOVLW  C6
3348:  MOVWF  FF6
334A:  MOVLW  03
334C:  MOVWF  FF7
334E:  CALL   1390
....................             lcd_gotoxy(1,3); 
3352:  MOVLW  01
3354:  MOVWF  xE6
3356:  MOVLW  03
3358:  MOVWF  xE7
335A:  CALL   12C0
....................             printf(lcd_putc,"      Correcta      "); 
335E:  MOVLW  DC
3360:  MOVWF  FF6
3362:  MOVLW  03
3364:  MOVWF  FF7
3366:  CALL   1390
....................             lcd_gotoxy(1,4); 
336A:  MOVLW  01
336C:  MOVWF  xE6
336E:  MOVLW  04
3370:  MOVWF  xE7
3372:  CALL   12C0
....................             printf(lcd_putc,"                    "); 
3376:  MOVLW  F2
3378:  MOVWF  FF6
337A:  MOVLW  03
337C:  MOVWF  FF7
337E:  CALL   1390
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
3382:  MOVLW  02
3384:  MOVWF  xD4
3386:  MOVLW  FA
3388:  MOVWF  xEA
338A:  CALL   07E6
338E:  DECFSZ xD4,F
3390:  BRA    3386
3392:  MOVLW  3D
3394:  MOVWF  1A
3396:  MOVLW  0B
3398:  MOVWF  1D
339A:  MOVLW  0C
339C:  MOVWF  xE5
339E:  CALL   132A
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
33A2:  CLRF   39
33A4:  CLRF   3A
33A6:  CLRF   3B
33A8:  CLRF   3C
33AA:  BSF    19.3
....................          }else{ 
33AC:  BRA    3432
....................             lcd_gotoxy(1,1); 
33AE:  MOVLW  01
33B0:  MOVWF  xE6
33B2:  MOVWF  xE7
33B4:  CALL   12C0
....................             printf(lcd_putc,"                    "); 
33B8:  MOVLW  08
33BA:  MOVWF  FF6
33BC:  MOVLW  04
33BE:  MOVWF  FF7
33C0:  CALL   1390
....................             lcd_gotoxy(1,2); 
33C4:  MOVLW  01
33C6:  MOVWF  xE6
33C8:  MOVLW  02
33CA:  MOVWF  xE7
33CC:  CALL   12C0
....................             printf(lcd_putc,"     Contraseña     "); 
33D0:  MOVLW  1E
33D2:  MOVWF  FF6
33D4:  MOVLW  04
33D6:  MOVWF  FF7
33D8:  CALL   1390
....................             lcd_gotoxy(1,3); 
33DC:  MOVLW  01
33DE:  MOVWF  xE6
33E0:  MOVLW  03
33E2:  MOVWF  xE7
33E4:  CALL   12C0
....................             printf(lcd_putc,"     Incorrecta     "); 
33E8:  MOVLW  34
33EA:  MOVWF  FF6
33EC:  MOVLW  04
33EE:  MOVWF  FF7
33F0:  CALL   1390
....................             lcd_gotoxy(1,4); 
33F4:  MOVLW  01
33F6:  MOVWF  xE6
33F8:  MOVLW  04
33FA:  MOVWF  xE7
33FC:  CALL   12C0
....................             printf(lcd_putc,"                    "); 
3400:  MOVLW  4A
3402:  MOVWF  FF6
3404:  MOVLW  04
3406:  MOVWF  FF7
3408:  CALL   1390
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
340C:  MOVLW  02
340E:  MOVWF  xD4
3410:  MOVLW  FA
3412:  MOVWF  xEA
3414:  CALL   07E6
3418:  DECFSZ xD4,F
341A:  BRA    3410
341C:  MOVLW  0B
341E:  MOVWF  1D
3420:  MOVLW  0C
3422:  MOVWF  xE5
3424:  CALL   132A
3428:  BSF    19.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
342A:  CLRF   39
342C:  CLRF   3A
342E:  CLRF   3B
3430:  CLRF   3C
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3432:  MOVF   1A,W
3434:  SUBLW  3D
3436:  BTFSS  FD8.2
3438:  BRA    37CA
....................       EliminaRuido(); 
343A:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
343E:  MOVLW  01
3440:  MOVWF  xE6
3442:  MOVWF  xE7
3444:  CALL   12C0
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
3448:  MOVLW  60
344A:  MOVWF  FF6
344C:  MOVLW  04
344E:  MOVWF  FF7
3450:  CALL   1390
....................          lcd_gotoxy(1,2); 
3454:  MOVLW  01
3456:  MOVWF  xE6
3458:  MOVLW  02
345A:  MOVWF  xE7
345C:  CALL   12C0
....................          printf(lcd_putc,"     Contraseña     "); 
3460:  MOVLW  76
3462:  MOVWF  FF6
3464:  MOVLW  04
3466:  MOVWF  FF7
3468:  CALL   1390
....................          lcd_gotoxy(1,3); 
346C:  MOVLW  01
346E:  MOVWF  xE6
3470:  MOVLW  03
3472:  MOVWF  xE7
3474:  CALL   12C0
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3478:  MOVLW  8C
347A:  MOVWF  FF6
347C:  MOVLW  04
347E:  MOVWF  FF7
3480:  MOVLW  0A
3482:  MOVWF  xD8
3484:  CALL   15C4
3488:  MOVFF  39,D4
348C:  MOVLW  1F
348E:  MOVWF  xD5
3490:  CALL   160A
3494:  MOVFF  3A,D4
3498:  MOVLW  1F
349A:  MOVWF  xD5
349C:  CALL   160A
34A0:  MOVFF  3B,D4
34A4:  MOVLW  1F
34A6:  MOVWF  xD5
34A8:  CALL   160A
34AC:  MOVFF  3C,D4
34B0:  MOVLW  1F
34B2:  MOVWF  xD5
34B4:  CALL   160A
34B8:  MOVLW  20
34BA:  MOVWF  xE5
34BC:  CALL   132A
34C0:  MOVLW  20
34C2:  MOVWF  xE5
34C4:  CALL   132A
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
34C8:  MOVFF  1D,E6
34CC:  MOVLW  04
34CE:  MOVWF  xE7
34D0:  CALL   12C0
....................          lcd_putc(t[2]); 
34D4:  MOVFF  38,E5
34D8:  CALL   132A
....................           
....................          if(unidad>11&&unidad<14){ 
34DC:  MOVF   1D,W
34DE:  SUBLW  0B
34E0:  BC    3500
34E2:  MOVF   1D,W
34E4:  SUBLW  0D
34E6:  BNC   3500
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
34E8:  MOVLW  01
34EA:  SUBWF  1D,W
34EC:  MOVWF  xD4
34EE:  MOVWF  xE6
34F0:  MOVLW  04
34F2:  MOVWF  xE7
34F4:  CALL   12C0
....................             lcd_putc(t[1]); 
34F8:  MOVFF  37,E5
34FC:  CALL   132A
....................          } 
....................           
....................          Cambio=OFF; 
3500:  BCF    19.3
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3502:  BSF    F92.5
3504:  BTFSC  F80.5
3506:  BRA    353A
....................          delay_ms(20); 
3508:  MOVLW  14
350A:  MOVWF  xEA
350C:  CALL   07E6
....................          if(UP){ 
3510:  BSF    F92.5
3512:  BTFSC  F80.5
3514:  BRA    3538
....................             if(Flanco == 0) { 
3516:  BTFSC  17.3
3518:  BRA    3538
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
351A:  MOVLW  0B
351C:  SUBWF  1D,W
351E:  CLRF   03
3520:  ADDLW  39
3522:  MOVWF  FE9
3524:  MOVLW  00
3526:  ADDWFC 03,W
3528:  MOVWF  FEA
352A:  INCF   FEF,F
352C:  BSF    17.3
352E:  MOVLW  1E
3530:  MOVWF  xEA
3532:  CALL   07E6
3536:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
3538:  BRA    353C
....................          Flanco = 0; 
353A:  BCF    17.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
353C:  BSF    F96.0
353E:  BTFSC  F84.0
3540:  BRA    3574
....................          delay_ms(20); 
3542:  MOVLW  14
3544:  MOVWF  xEA
3546:  CALL   07E6
....................          if(DOWN){ 
354A:  BSF    F96.0
354C:  BTFSC  F84.0
354E:  BRA    3572
....................             if(Flanco2 == 0) { 
3550:  BTFSC  17.5
3552:  BRA    3572
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3554:  MOVLW  0B
3556:  SUBWF  1D,W
3558:  CLRF   03
355A:  ADDLW  39
355C:  MOVWF  FE9
355E:  MOVLW  00
3560:  ADDWFC 03,W
3562:  MOVWF  FEA
3564:  DECF   FEF,F
3566:  BSF    17.5
3568:  MOVLW  1E
356A:  MOVWF  xEA
356C:  CALL   07E6
3570:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
3572:  BRA    3576
....................          Flanco2 = 0; 
3574:  BCF    17.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3576:  BSF    F96.1
3578:  BTFSC  F84.1
357A:  BRA    359E
....................          if(RIGHT){ 
357C:  BSF    F96.1
357E:  BTFSC  F84.1
3580:  BRA    359C
....................             if(Flanco1 == 0) { 
3582:  BTFSC  17.4
3584:  BRA    359C
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3586:  BSF    17.4
3588:  INCF   1D,F
358A:  MOVLW  1E
358C:  MOVWF  xEA
358E:  CALL   07E6
3592:  MOVLW  0C
3594:  MOVWF  xE5
3596:  CALL   132A
359A:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
359C:  BRA    35A0
....................          Flanco1 = 0; 
359E:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
35A0:  BSF    F96.2
35A2:  BTFSC  F84.2
35A4:  BRA    35D0
....................          delay_ms(150); 
35A6:  MOVLW  96
35A8:  MOVWF  xEA
35AA:  CALL   07E6
....................          if(IZQU){ 
35AE:  BSF    F96.2
35B0:  BTFSC  F84.2
35B2:  BRA    35CE
....................             if(Flanco3 == 0){ 
35B4:  BTFSC  17.6
35B6:  BRA    35CE
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
35B8:  BSF    17.6
35BA:  DECF   1D,F
35BC:  MOVLW  1E
35BE:  MOVWF  xEA
35C0:  CALL   07E6
35C4:  MOVLW  0C
35C6:  MOVWF  xE5
35C8:  CALL   132A
35CC:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
35CE:  BRA    35D2
....................         Flanco3 = 0; 
35D0:  BCF    17.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
35D2:  MOVLW  0B
35D4:  SUBWF  1D,W
35D6:  CLRF   03
35D8:  ADDLW  39
35DA:  MOVWF  FE9
35DC:  MOVLW  00
35DE:  ADDWFC 03,W
35E0:  MOVWF  FEA
35E2:  BTFSC  FEF.7
35E4:  BRA    35E8
35E6:  BRA    35FC
....................          clave[unidad-11]=9; 
35E8:  MOVLW  0B
35EA:  SUBWF  1D,W
35EC:  CLRF   03
35EE:  ADDLW  39
35F0:  MOVWF  FE9
35F2:  MOVLW  00
35F4:  ADDWFC 03,W
35F6:  MOVWF  FEA
35F8:  MOVLW  09
35FA:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
35FC:  MOVLW  0B
35FE:  SUBWF  1D,W
3600:  CLRF   03
3602:  ADDLW  39
3604:  MOVWF  FE9
3606:  MOVLW  00
3608:  ADDWFC 03,W
360A:  MOVWF  FEA
360C:  BTFSC  FEF.7
360E:  BRA    3628
3610:  MOVF   FEF,W
3612:  SUBLW  09
3614:  BC    3628
....................          clave[unidad-11]=0; 
3616:  MOVLW  0B
3618:  SUBWF  1D,W
361A:  CLRF   03
361C:  ADDLW  39
361E:  MOVWF  FE9
3620:  MOVLW  00
3622:  ADDWFC 03,W
3624:  MOVWF  FEA
3626:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3628:  MOVF   1D,W
362A:  SUBLW  0A
362C:  BNC   364C
....................          unidad=11; 
362E:  MOVLW  0B
3630:  MOVWF  1D
....................          Menu=1; 
3632:  MOVLW  01
3634:  MOVWF  1A
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3636:  CLRF   39
3638:  CLRF   3A
363A:  CLRF   3B
363C:  CLRF   3C
363E:  BSF    19.3
....................          unidad=11;printf(lcd_putc,"\f"); 
3640:  MOVLW  0B
3642:  MOVWF  1D
3644:  MOVLW  0C
3646:  MOVWF  xE5
3648:  CALL   132A
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
364C:  MOVF   1D,W
364E:  SUBLW  0E
3650:  BTFSC  FD8.0
3652:  BRA    37CA
....................          lcd_gotoxy(1,1); 
3654:  MOVLW  01
3656:  MOVWF  xE6
3658:  MOVWF  xE7
365A:  CALL   12C0
....................          printf(lcd_putc,"                    "); 
365E:  MOVLW  A2
3660:  MOVWF  FF6
3662:  MOVLW  04
3664:  MOVWF  FF7
3666:  CALL   1390
....................          lcd_gotoxy(1,2); 
366A:  MOVLW  01
366C:  MOVWF  xE6
366E:  MOVLW  02
3670:  MOVWF  xE7
3672:  CALL   12C0
....................          printf(lcd_putc,"     Contraseña     "); 
3676:  MOVLW  B8
3678:  MOVWF  FF6
367A:  MOVLW  04
367C:  MOVWF  FF7
367E:  CALL   1390
....................          lcd_gotoxy(1,3); 
3682:  MOVLW  01
3684:  MOVWF  xE6
3686:  MOVLW  03
3688:  MOVWF  xE7
368A:  CALL   12C0
....................          printf(lcd_putc,"     Almacenada     "); 
368E:  MOVLW  CE
3690:  MOVWF  FF6
3692:  MOVLW  04
3694:  MOVWF  FF7
3696:  CALL   1390
....................          lcd_gotoxy(1,4); 
369A:  MOVLW  01
369C:  MOVWF  xE6
369E:  MOVLW  04
36A0:  MOVWF  xE7
36A2:  CALL   12C0
....................          printf(lcd_putc,"                    "); 
36A6:  MOVLW  E4
36A8:  MOVWF  FF6
36AA:  MOVLW  04
36AC:  MOVWF  FF7
36AE:  CALL   1390
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
36B2:  CLRF   FA9
36B4:  MOVFF  39,FA8
36B8:  BCF    FA6.6
36BA:  BCF    FA6.7
36BC:  BSF    FA6.2
36BE:  MOVF   FF2,W
36C0:  MOVWF  00
36C2:  BCF    FF2.6
36C4:  BCF    FF2.7
36C6:  MOVLB  F
36C8:  MOVLW  55
36CA:  MOVWF  FA7
36CC:  MOVLW  AA
36CE:  MOVWF  FA7
36D0:  BSF    FA6.1
36D2:  BTFSC  FA6.1
36D4:  BRA    36D2
36D6:  BCF    FA6.2
36D8:  MOVF   00,W
36DA:  IORWF  FF2,F
36DC:  MOVLW  14
36DE:  MOVLB  0
36E0:  MOVWF  xEA
36E2:  CALL   07E6
36E6:  MOVLW  01
36E8:  MOVWF  FA9
36EA:  MOVFF  3A,FA8
36EE:  BCF    FA6.6
36F0:  BCF    FA6.7
36F2:  BSF    FA6.2
36F4:  MOVF   FF2,W
36F6:  MOVWF  00
36F8:  BCF    FF2.6
36FA:  BCF    FF2.7
36FC:  MOVLB  F
36FE:  MOVLW  55
3700:  MOVWF  FA7
3702:  MOVLW  AA
3704:  MOVWF  FA7
3706:  BSF    FA6.1
3708:  BTFSC  FA6.1
370A:  BRA    3708
370C:  BCF    FA6.2
370E:  MOVF   00,W
3710:  IORWF  FF2,F
3712:  MOVLW  14
3714:  MOVLB  0
3716:  MOVWF  xEA
3718:  CALL   07E6
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
371C:  MOVLW  02
371E:  MOVWF  FA9
3720:  MOVFF  3B,FA8
3724:  BCF    FA6.6
3726:  BCF    FA6.7
3728:  BSF    FA6.2
372A:  MOVF   FF2,W
372C:  MOVWF  00
372E:  BCF    FF2.6
3730:  BCF    FF2.7
3732:  MOVLB  F
3734:  MOVLW  55
3736:  MOVWF  FA7
3738:  MOVLW  AA
373A:  MOVWF  FA7
373C:  BSF    FA6.1
373E:  BTFSC  FA6.1
3740:  BRA    373E
3742:  BCF    FA6.2
3744:  MOVF   00,W
3746:  IORWF  FF2,F
3748:  MOVLW  14
374A:  MOVLB  0
374C:  MOVWF  xEA
374E:  CALL   07E6
3752:  MOVLW  03
3754:  MOVWF  FA9
3756:  MOVFF  3C,FA8
375A:  BCF    FA6.6
375C:  BCF    FA6.7
375E:  BSF    FA6.2
3760:  MOVF   FF2,W
3762:  MOVWF  00
3764:  BCF    FF2.6
3766:  BCF    FF2.7
3768:  MOVLB  F
376A:  MOVLW  55
376C:  MOVWF  FA7
376E:  MOVLW  AA
3770:  MOVWF  FA7
3772:  BSF    FA6.1
3774:  BTFSC  FA6.1
3776:  BRA    3774
3778:  BCF    FA6.2
377A:  MOVF   00,W
377C:  IORWF  FF2,F
377E:  MOVLW  14
3780:  MOVLB  0
3782:  MOVWF  xEA
3784:  CALL   07E6
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3788:  MOVLW  02
378A:  MOVWF  xD4
378C:  MOVLW  FA
378E:  MOVWF  xEA
3790:  CALL   07E6
3794:  DECFSZ xD4,F
3796:  BRA    378C
3798:  MOVLW  01
379A:  MOVWF  1A
379C:  CLRF   35
379E:  MOVLW  02
37A0:  MOVWF  1E
37A2:  MOVWF  20
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
37A4:  MOVFF  39,3D
37A8:  MOVFF  3A,3E
37AC:  MOVFF  3B,3F
37B0:  MOVFF  3C,40
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
37B4:  CLRF   39
37B6:  CLRF   3A
37B8:  CLRF   3B
37BA:  CLRF   3C
37BC:  BSF    19.3
....................          unidad=11;printf(lcd_putc,"\f");          
37BE:  MOVLW  0B
37C0:  MOVWF  1D
37C2:  MOVLW  0C
37C4:  MOVWF  xE5
37C6:  CALL   132A
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
37CA:  MOVF   1A,W
37CC:  SUBLW  04
37CE:  BTFSS  FD8.2
37D0:  BRA    3980
....................    EliminaRuido(); 
37D2:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
37D6:  MOVLW  01
37D8:  MOVWF  xE6
37DA:  MOVWF  xE7
37DC:  CALL   12C0
....................       printf(lcd_putc,"  Tiempo de Trabajo "); 
37E0:  MOVLW  FA
37E2:  MOVWF  FF6
37E4:  MOVLW  04
37E6:  MOVWF  FF7
37E8:  CALL   1390
....................       lcd_gotoxy(1,2); 
37EC:  MOVLW  01
37EE:  MOVWF  xE6
37F0:  MOVLW  02
37F2:  MOVWF  xE7
37F4:  CALL   12C0
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horasTrabajo); 
37F8:  MOVLW  10
37FA:  MOVWF  FF6
37FC:  MOVLW  05
37FE:  MOVWF  FF7
3800:  MOVLW  0B
3802:  MOVWF  xD8
3804:  CALL   15C4
3808:  MOVLW  08
380A:  MOVWF  FE9
380C:  MOVFF  B8,D5
3810:  MOVFF  B7,D4
3814:  GOTO   17F0
3818:  MOVLW  20
381A:  MOVWF  xE5
381C:  CALL   132A
3820:  MOVLW  20
3822:  MOVWF  xE5
3824:  CALL   132A
3828:  MOVLW  20
382A:  MOVWF  xE5
382C:  CALL   132A
....................       lcd_gotoxy(1,4); 
3830:  MOVLW  01
3832:  MOVWF  xE6
3834:  MOVLW  04
3836:  MOVWF  xE7
3838:  CALL   12C0
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
383C:  MOVLW  24
383E:  MOVWF  FF6
3840:  MOVLW  05
3842:  MOVWF  FF7
3844:  CALL   1390
....................        
....................       Cambio=OFF; 
3848:  BCF    19.3
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
384A:  BSF    F92.5
384C:  BTFSC  F80.5
384E:  BRA    393C
3850:  BSF    F96.1
3852:  BTFSC  F84.1
3854:  BRA    393C
....................          delay_ms(20); 
3856:  MOVLW  14
3858:  MOVWF  xEA
385A:  CALL   07E6
....................          if(UP && RIGHT){ 
385E:  BSF    F92.5
3860:  BTFSC  F80.5
3862:  BRA    393C
3864:  BSF    F96.1
3866:  BTFSC  F84.1
3868:  BRA    393C
....................             delay_ms(200); 
386A:  MOVLW  C8
386C:  MOVWF  xEA
386E:  CALL   07E6
....................             printf(lcd_putc,"\f"); 
3872:  MOVLW  0C
3874:  MOVWF  xE5
3876:  CALL   132A
....................             lcd_gotoxy(1,2); 
387A:  MOVLW  01
387C:  MOVWF  xE6
387E:  MOVLW  02
3880:  MOVWF  xE7
3882:  CALL   12C0
....................             printf(lcd_putc," Reset de tiempo "); 
3886:  MOVLW  3A
3888:  MOVWF  FF6
388A:  MOVLW  05
388C:  MOVWF  FF7
388E:  CALL   1390
....................             lcd_gotoxy(1,3); 
3892:  MOVLW  01
3894:  MOVWF  xE6
3896:  MOVLW  03
3898:  MOVWF  xE7
389A:  CALL   12C0
....................             printf(lcd_putc,"     Exitoso     "); 
389E:  MOVLW  4C
38A0:  MOVWF  FF6
38A2:  MOVLW  05
38A4:  MOVWF  FF7
38A6:  CALL   1390
....................             horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
38AA:  CLRF   xB8
38AC:  CLRF   xB7
38AE:  MOVLW  13
38B0:  MOVWF  FA9
38B2:  CLRF   FA8
38B4:  BCF    FA6.6
38B6:  BCF    FA6.7
38B8:  BSF    FA6.2
38BA:  MOVF   FF2,W
38BC:  MOVWF  00
38BE:  BCF    FF2.6
38C0:  BCF    FF2.7
38C2:  MOVLB  F
38C4:  MOVLW  55
38C6:  MOVWF  FA7
38C8:  MOVLW  AA
38CA:  MOVWF  FA7
38CC:  BSF    FA6.1
38CE:  BTFSC  FA6.1
38D0:  BRA    38CE
38D2:  BCF    FA6.2
38D4:  MOVF   00,W
38D6:  IORWF  FF2,F
38D8:  MOVLW  14
38DA:  MOVLB  0
38DC:  MOVWF  xEA
38DE:  CALL   07E6
38E2:  MOVLW  12
38E4:  MOVWF  FA9
38E6:  CLRF   FA8
38E8:  BCF    FA6.6
38EA:  BCF    FA6.7
38EC:  BSF    FA6.2
38EE:  MOVF   FF2,W
38F0:  MOVWF  00
38F2:  BCF    FF2.6
38F4:  BCF    FF2.7
38F6:  MOVLB  F
38F8:  MOVLW  55
38FA:  MOVWF  FA7
38FC:  MOVLW  AA
38FE:  MOVWF  FA7
3900:  BSF    FA6.1
3902:  BTFSC  FA6.1
3904:  BRA    3902
3906:  BCF    FA6.2
3908:  MOVF   00,W
390A:  IORWF  FF2,F
390C:  MOVLW  14
390E:  MOVLB  0
3910:  MOVWF  xEA
3912:  CALL   07E6
....................             segundos=0;minutos=0;horas=0; 
3916:  CLRF   23
3918:  CLRF   24
391A:  CLRF   4A
391C:  CLRF   49
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
391E:  MOVLW  1E
3920:  MOVWF  xEA
3922:  CALL   07E6
3926:  MOVLW  01
3928:  MOVWF  1A
392A:  CLRF   35
392C:  MOVLW  02
392E:  MOVWF  1E
3930:  MOVWF  20
3932:  MOVLW  0C
3934:  MOVWF  xE5
3936:  CALL   132A
....................             Cambio=ON; 
393A:  BSF    19.3
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
393C:  BSF    F96.2
393E:  BTFSC  F84.2
3940:  BRA    397E
....................          delay_ms(20); 
3942:  MOVLW  14
3944:  MOVWF  xEA
3946:  CALL   07E6
....................          if(IZQU){ 
394A:  BSF    F96.2
394C:  BTFSC  F84.2
394E:  BRA    397C
....................             if(Flanco3 == 0){ 
3950:  BTFSC  17.6
3952:  BRA    397C
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3954:  BSF    17.6
3956:  MOVLW  02
3958:  MOVWF  xD4
395A:  MOVLW  FA
395C:  MOVWF  xEA
395E:  CALL   07E6
3962:  DECFSZ xD4,F
3964:  BRA    395A
3966:  MOVLW  01
3968:  MOVWF  1A
396A:  CLRF   35
396C:  MOVLW  02
396E:  MOVWF  1E
3970:  MOVWF  20
3972:  MOVLW  0C
3974:  MOVWF  xE5
3976:  CALL   132A
397A:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
397C:  BRA    3980
....................          Flanco3 = 0; 
397E:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3980:  MOVF   1A,W
3982:  SUBLW  05
3984:  BTFSS  FD8.2
3986:  BRA    3BE0
....................       EliminaRuido(); 
3988:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
398C:  MOVLW  01
398E:  MOVWF  xE6
3990:  MOVWF  xE7
3992:  CALL   12C0
....................          printf(lcd_putc,"  Zero Point Config "); 
3996:  MOVLW  5E
3998:  MOVWF  FF6
399A:  MOVLW  05
399C:  MOVWF  FF7
399E:  CALL   1390
....................          lcd_gotoxy(1,2); 
39A2:  MOVLW  01
39A4:  MOVWF  xE6
39A6:  MOVLW  02
39A8:  MOVWF  xE7
39AA:  CALL   12C0
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
39AE:  MOVLW  05
39B0:  MOVWF  xD4
39B2:  CALL   1DB0
39B6:  MOVFF  00,D4
39BA:  MOVFF  01,D5
39BE:  MOVFF  02,D6
39C2:  MOVFF  03,D7
39C6:  MOVFF  03,EB
39CA:  MOVFF  02,EA
39CE:  MOVFF  01,E9
39D2:  MOVFF  00,E8
39D6:  MOVLW  D7
39D8:  MOVWF  xEF
39DA:  MOVLW  A3
39DC:  MOVWF  xEE
39DE:  CLRF   xED
39E0:  MOVLW  81
39E2:  MOVWF  xEC
39E4:  CALL   18FA
39E8:  MOVFF  00,D4
39EC:  MOVFF  01,D5
39F0:  MOVFF  02,D6
39F4:  MOVFF  03,D7
39F8:  MOVLW  74
39FA:  MOVWF  FF6
39FC:  MOVLW  05
39FE:  MOVWF  FF7
3A00:  MOVLW  09
3A02:  MOVWF  xD8
3A04:  CALL   15C4
3A08:  MOVLW  02
3A0A:  MOVWF  FE9
3A0C:  MOVFF  D7,DB
3A10:  MOVFF  D6,DA
3A14:  MOVFF  D5,D9
3A18:  MOVFF  D4,D8
3A1C:  MOVWF  xDC
3A1E:  CALL   20B8
3A22:  MOVLW  82
3A24:  MOVWF  FF6
3A26:  MOVLW  05
3A28:  MOVWF  FF7
3A2A:  MOVLW  07
3A2C:  MOVWF  xD8
3A2E:  CALL   15C4
....................          lcd_gotoxy(1,3); 
3A32:  MOVLW  01
3A34:  MOVWF  xE6
3A36:  MOVLW  03
3A38:  MOVWF  xE7
3A3A:  CALL   12C0
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3A3E:  CLRF   xE5
3A40:  CALL   18A4
3A44:  MOVFF  00,D4
3A48:  MOVFF  01,D5
3A4C:  MOVFF  02,D6
3A50:  MOVFF  03,D7
3A54:  MOVLW  8A
3A56:  MOVWF  FF6
3A58:  MOVLW  05
3A5A:  MOVWF  FF7
3A5C:  MOVLW  08
3A5E:  MOVWF  xD8
3A60:  CALL   15C4
3A64:  MOVLW  01
3A66:  MOVWF  FE9
3A68:  MOVFF  D7,DB
3A6C:  MOVFF  D6,DA
3A70:  MOVFF  D5,D9
3A74:  MOVFF  D4,D8
3A78:  CLRF   xDC
3A7A:  CALL   20B8
....................          lcd_gotoxy(1,4); 
3A7E:  MOVLW  01
3A80:  MOVWF  xE6
3A82:  MOVLW  04
3A84:  MOVWF  xE7
3A86:  CALL   12C0
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3A8A:  MOVLW  98
3A8C:  MOVWF  FF6
3A8E:  MOVLW  05
3A90:  MOVWF  FF7
3A92:  MOVLW  07
3A94:  MOVWF  xD8
3A96:  CALL   15C4
3A9A:  MOVLW  01
3A9C:  MOVWF  FE9
3A9E:  MOVFF  B0,DB
3AA2:  MOVFF  AF,DA
3AA6:  MOVFF  AE,D9
3AAA:  MOVFF  AD,D8
3AAE:  CLRF   xDC
3AB0:  CALL   20B8
....................           
....................          Cambio=OFF; 
3AB4:  BCF    19.3
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
3AB6:  BSF    F96.1
3AB8:  BTFSC  F84.1
3ABA:  BRA    3BA0
....................          delay_ms(20); 
3ABC:  MOVLW  14
3ABE:  MOVWF  xEA
3AC0:  CALL   07E6
....................          if(RIGHT){ 
3AC4:  BSF    F96.1
3AC6:  BTFSC  F84.1
3AC8:  BRA    3B9E
....................             if(Flanco1 == 0){ 
3ACA:  BTFSC  17.4
3ACC:  BRA    3B9E
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3ACE:  MOVLW  01
3AD0:  MOVWF  1A
3AD2:  CLRF   35
3AD4:  MOVLW  02
3AD6:  MOVWF  1E
3AD8:  MOVWF  20
3ADA:  MOVLW  0B
3ADC:  MOVWF  1D
3ADE:  MOVLW  02
3AE0:  MOVWF  xD4
3AE2:  MOVLW  FA
3AE4:  MOVWF  xEA
3AE6:  CALL   07E6
3AEA:  DECFSZ xD4,F
3AEC:  BRA    3AE2
3AEE:  MOVLW  0C
3AF0:  MOVWF  xE5
3AF2:  CALL   132A
....................                G=sensores(0); 
3AF6:  CLRF   xE5
3AF8:  CALL   18A4
3AFC:  MOVFF  03,B0
3B00:  MOVFF  02,AF
3B04:  MOVFF  01,AE
3B08:  MOVFF  00,AD
....................                G16=(int16)G; 
3B0C:  MOVFF  B0,EB
3B10:  MOVFF  AF,EA
3B14:  MOVFF  AE,E9
3B18:  MOVFF  AD,E8
3B1C:  CALL   223E
3B20:  MOVFF  02,4C
3B24:  MOVFF  01,4B
....................                G_l=G16; G_h=(G16>>8); 
3B28:  MOVFF  4B,27
3B2C:  MOVFF  4C,28
....................                 
....................                write_eeprom(11,G_l); 
3B30:  MOVLW  0B
3B32:  MOVWF  FA9
3B34:  MOVFF  27,FA8
3B38:  BCF    FA6.6
3B3A:  BCF    FA6.7
3B3C:  BSF    FA6.2
3B3E:  MOVF   FF2,W
3B40:  MOVWF  00
3B42:  BCF    FF2.6
3B44:  BCF    FF2.7
3B46:  MOVLB  F
3B48:  MOVLW  55
3B4A:  MOVWF  FA7
3B4C:  MOVLW  AA
3B4E:  MOVWF  FA7
3B50:  BSF    FA6.1
3B52:  BTFSC  FA6.1
3B54:  BRA    3B52
3B56:  BCF    FA6.2
3B58:  MOVF   00,W
3B5A:  IORWF  FF2,F
....................                delay_ms(20); 
3B5C:  MOVLW  14
3B5E:  MOVLB  0
3B60:  MOVWF  xEA
3B62:  CALL   07E6
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3B66:  MOVLW  0C
3B68:  MOVWF  FA9
3B6A:  MOVFF  28,FA8
3B6E:  BCF    FA6.6
3B70:  BCF    FA6.7
3B72:  BSF    FA6.2
3B74:  MOVF   FF2,W
3B76:  MOVWF  00
3B78:  BCF    FF2.6
3B7A:  BCF    FF2.7
3B7C:  MOVLB  F
3B7E:  MOVLW  55
3B80:  MOVWF  FA7
3B82:  MOVLW  AA
3B84:  MOVWF  FA7
3B86:  BSF    FA6.1
3B88:  BTFSC  FA6.1
3B8A:  BRA    3B88
3B8C:  BCF    FA6.2
3B8E:  MOVF   00,W
3B90:  IORWF  FF2,F
....................                delay_ms(20); 
3B92:  MOVLW  14
3B94:  MOVLB  0
3B96:  MOVWF  xEA
3B98:  CALL   07E6
....................                Cambio=ON; 
3B9C:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
3B9E:  BRA    3BA2
....................          Flanco1 = 0; 
3BA0:  BCF    17.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3BA2:  BSF    F96.2
3BA4:  BTFSC  F84.2
3BA6:  BRA    3BDE
....................          delay_ms(20); 
3BA8:  MOVLW  14
3BAA:  MOVWF  xEA
3BAC:  CALL   07E6
....................          if(IZQU){ 
3BB0:  BSF    F96.2
3BB2:  BTFSC  F84.2
3BB4:  BRA    3BDC
....................             if(Flanco3 == 0){ 
3BB6:  BTFSC  17.6
3BB8:  BRA    3BDC
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3BBA:  MOVLW  01
3BBC:  MOVWF  1A
3BBE:  CLRF   35
3BC0:  MOVLW  02
3BC2:  MOVWF  1E
3BC4:  MOVWF  20
3BC6:  MOVLW  0B
3BC8:  MOVWF  1D
3BCA:  MOVLW  1E
3BCC:  MOVWF  xEA
3BCE:  CALL   07E6
3BD2:  MOVLW  0C
3BD4:  MOVWF  xE5
3BD6:  CALL   132A
....................                Cambio=ON; 
3BDA:  BSF    19.3
....................             } 
....................          } 
....................       }else{ 
3BDC:  BRA    3BE0
....................          Flanco3 = 0; 
3BDE:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3BE0:  MOVF   1A,W
3BE2:  SUBLW  06
3BE4:  BTFSS  FD8.2
3BE6:  BRA    3D10
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3BE8:  BTG    18.4
3BEA:  BSF    17.4
3BEC:  MOVLW  01
3BEE:  MOVWF  1A
3BF0:  CLRF   35
....................                        
....................             if(estadoalarma==1) 
3BF2:  BTFSS  18.4
3BF4:  BRA    3C56
....................             {estadoalarma=1; 
3BF6:  BSF    18.4
....................                lcd_gotoxy(1,1); 
3BF8:  MOVLW  01
3BFA:  MOVWF  xE6
3BFC:  MOVWF  xE7
3BFE:  CALL   12C0
....................                printf(lcd_putc,"                    "); 
3C02:  MOVLW  A6
3C04:  MOVWF  FF6
3C06:  MOVLW  05
3C08:  MOVWF  FF7
3C0A:  CALL   1390
....................                lcd_gotoxy(1,2); 
3C0E:  MOVLW  01
3C10:  MOVWF  xE6
3C12:  MOVLW  02
3C14:  MOVWF  xE7
3C16:  CALL   12C0
....................                printf(lcd_putc,"        Activo      "); 
3C1A:  MOVLW  BC
3C1C:  MOVWF  FF6
3C1E:  MOVLW  05
3C20:  MOVWF  FF7
3C22:  CALL   1390
....................                lcd_gotoxy(1,3); 
3C26:  MOVLW  01
3C28:  MOVWF  xE6
3C2A:  MOVLW  03
3C2C:  MOVWF  xE7
3C2E:  CALL   12C0
....................                printf(lcd_putc,"        Alarma      "); 
3C32:  MOVLW  D2
3C34:  MOVWF  FF6
3C36:  MOVLW  05
3C38:  MOVWF  FF7
3C3A:  CALL   1390
....................                lcd_gotoxy(1,4); 
3C3E:  MOVLW  01
3C40:  MOVWF  xE6
3C42:  MOVLW  04
3C44:  MOVWF  xE7
3C46:  CALL   12C0
....................                printf(lcd_putc,"                    ");} 
3C4A:  MOVLW  E8
3C4C:  MOVWF  FF6
3C4E:  MOVLW  05
3C50:  MOVWF  FF7
3C52:  CALL   1390
....................                 
....................             if(estadoalarma==0) 
3C56:  BTFSC  18.4
3C58:  BRA    3CBA
....................             {estadoalarma=0; 
3C5A:  BCF    18.4
....................                lcd_gotoxy(1,1); 
3C5C:  MOVLW  01
3C5E:  MOVWF  xE6
3C60:  MOVWF  xE7
3C62:  CALL   12C0
....................                printf(lcd_putc,"                    "); 
3C66:  MOVLW  FE
3C68:  MOVWF  FF6
3C6A:  MOVLW  05
3C6C:  MOVWF  FF7
3C6E:  CALL   1390
....................                lcd_gotoxy(1,2); 
3C72:  MOVLW  01
3C74:  MOVWF  xE6
3C76:  MOVLW  02
3C78:  MOVWF  xE7
3C7A:  CALL   12C0
....................                printf(lcd_putc,"      Desactivo     "); 
3C7E:  MOVLW  14
3C80:  MOVWF  FF6
3C82:  MOVLW  06
3C84:  MOVWF  FF7
3C86:  CALL   1390
....................                lcd_gotoxy(1,3); 
3C8A:  MOVLW  01
3C8C:  MOVWF  xE6
3C8E:  MOVLW  03
3C90:  MOVWF  xE7
3C92:  CALL   12C0
....................                printf(lcd_putc,"       Alarma       "); 
3C96:  MOVLW  2A
3C98:  MOVWF  FF6
3C9A:  MOVLW  06
3C9C:  MOVWF  FF7
3C9E:  CALL   1390
....................                lcd_gotoxy(1,4); 
3CA2:  MOVLW  01
3CA4:  MOVWF  xE6
3CA6:  MOVLW  04
3CA8:  MOVWF  xE7
3CAA:  CALL   12C0
....................                printf(lcd_putc,"                    ");} 
3CAE:  MOVLW  40
3CB0:  MOVWF  FF6
3CB2:  MOVLW  06
3CB4:  MOVWF  FF7
3CB6:  CALL   1390
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3CBA:  MOVLW  00
3CBC:  BTFSC  18.4
3CBE:  MOVLW  01
3CC0:  MOVWF  xD4
3CC2:  MOVLW  04
3CC4:  MOVWF  FA9
3CC6:  MOVFF  D4,FA8
3CCA:  BCF    FA6.6
3CCC:  BCF    FA6.7
3CCE:  BSF    FA6.2
3CD0:  MOVF   FF2,W
3CD2:  MOVWF  00
3CD4:  BCF    FF2.6
3CD6:  BCF    FF2.7
3CD8:  MOVLB  F
3CDA:  MOVLW  55
3CDC:  MOVWF  FA7
3CDE:  MOVLW  AA
3CE0:  MOVWF  FA7
3CE2:  BSF    FA6.1
3CE4:  BTFSC  FA6.1
3CE6:  BRA    3CE4
3CE8:  BCF    FA6.2
3CEA:  MOVF   00,W
3CEC:  IORWF  FF2,F
3CEE:  MOVLW  04
3CF0:  MOVLB  0
3CF2:  MOVWF  xD4
3CF4:  MOVLW  FA
3CF6:  MOVWF  xEA
3CF8:  CALL   07E6
3CFC:  DECFSZ xD4,F
3CFE:  BRA    3CF4
3D00:  MOVLW  02
3D02:  MOVWF  1E
3D04:  MOVWF  20
3D06:  MOVLW  0C
3D08:  MOVWF  xE5
3D0A:  CALL   132A
....................             Cambio=ON; 
3D0E:  BSF    19.3
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
3D10:  MOVF   1A,W
3D12:  SUBLW  07
3D14:  BTFSS  FD8.2
3D16:  BRA    3EAE
....................       if(Vel1>6) 
3D18:  MOVF   46,W
3D1A:  SUBLW  06
3D1C:  BC    3D22
....................          Vel1=6; 
3D1E:  MOVLW  06
3D20:  MOVWF  46
....................       if(Vel1<1) 
3D22:  MOVF   46,F
3D24:  BNZ   3D2A
....................          Vel1=1; 
3D26:  MOVLW  01
3D28:  MOVWF  46
....................        
....................       lcd_gotoxy(1,1); 
3D2A:  MOVLW  01
3D2C:  MOVWF  xE6
3D2E:  MOVWF  xE7
3D30:  CALL   12C0
....................       printf(lcd_putc,"Seleccione Velocidad"); 
3D34:  MOVLW  56
3D36:  MOVWF  FF6
3D38:  MOVLW  06
3D3A:  MOVWF  FF7
3D3C:  CALL   1390
....................       lcd_gotoxy(1,2); 
3D40:  MOVLW  01
3D42:  MOVWF  xE6
3D44:  MOVLW  02
3D46:  MOVWF  xE7
3D48:  CALL   12C0
....................       printf(lcd_putc,"   del Ventilador   "); 
3D4C:  MOVLW  6C
3D4E:  MOVWF  FF6
3D50:  MOVLW  06
3D52:  MOVWF  FF7
3D54:  CALL   1390
....................       lcd_gotoxy(1,3); 
3D58:  MOVLW  01
3D5A:  MOVWF  xE6
3D5C:  MOVLW  03
3D5E:  MOVWF  xE7
3D60:  CALL   12C0
....................       printf(lcd_putc,"     Vel: %u       ",Vel1); 
3D64:  MOVLW  82
3D66:  MOVWF  FF6
3D68:  MOVLW  06
3D6A:  MOVWF  FF7
3D6C:  MOVLW  0A
3D6E:  MOVWF  xD8
3D70:  CALL   15C4
3D74:  MOVFF  46,D4
3D78:  MOVLW  1B
3D7A:  MOVWF  xD5
3D7C:  CALL   178A
3D80:  MOVLW  8E
3D82:  MOVWF  FF6
3D84:  MOVLW  06
3D86:  MOVWF  FF7
3D88:  MOVLW  07
3D8A:  MOVWF  xD8
3D8C:  CALL   15C4
....................       lcd_gotoxy(1,4); 
3D90:  MOVLW  01
3D92:  MOVWF  xE6
3D94:  MOVLW  04
3D96:  MOVWF  xE7
3D98:  CALL   12C0
....................       printf(lcd_putc,"                    ");       
3D9C:  MOVLW  96
3D9E:  MOVWF  FF6
3DA0:  MOVLW  06
3DA2:  MOVWF  FF7
3DA4:  CALL   1390
....................        
....................       if(UP && Vel1<6)//Si oprime hacia arriba 
3DA8:  BSF    F92.5
3DAA:  BTFSC  F80.5
3DAC:  BRA    3DBE
3DAE:  MOVF   46,W
3DB0:  SUBLW  05
3DB2:  BNC   3DBE
....................       {   
....................          delay_ms(200);Vel1++; 
3DB4:  MOVLW  C8
3DB6:  MOVWF  xEA
3DB8:  CALL   07E6
3DBC:  INCF   46,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
3DBE:  BSF    F96.0
3DC0:  BTFSC  F84.0
3DC2:  BRA    3DD2
3DC4:  MOVF   46,F
3DC6:  BZ    3DD2
....................       {   
....................          delay_ms(200);Vel1--; 
3DC8:  MOVLW  C8
3DCA:  MOVWF  xEA
3DCC:  CALL   07E6
3DD0:  DECF   46,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
3DD2:  BSF    F96.1
3DD4:  BTFSC  F84.1
3DD6:  BRA    3DDC
....................       {            
....................          VelMotor=Vel1; 
3DD8:  MOVFF  46,BC
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
3DDC:  BSF    F96.2
3DDE:  BTFSC  F84.2
3DE0:  BRA    3EAE
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3DE2:  MOVLW  64
3DE4:  MOVWF  xEA
3DE6:  CALL   07E6
3DEA:  MOVLW  02
3DEC:  MOVWF  1E
3DEE:  MOVWF  20
3DF0:  MOVLW  0C
3DF2:  MOVWF  xE5
3DF4:  CALL   132A
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
3DF8:  MOVLW  0D
3DFA:  MOVWF  FA9
3DFC:  MOVFF  46,FA8
3E00:  BCF    FA6.6
3E02:  BCF    FA6.7
3E04:  BSF    FA6.2
3E06:  MOVF   FF2,W
3E08:  MOVWF  00
3E0A:  BCF    FF2.6
3E0C:  BCF    FF2.7
3E0E:  MOVLB  F
3E10:  MOVLW  55
3E12:  MOVWF  FA7
3E14:  MOVLW  AA
3E16:  MOVWF  FA7
3E18:  BSF    FA6.1
3E1A:  BTFSC  FA6.1
3E1C:  BRA    3E1A
3E1E:  BCF    FA6.2
3E20:  MOVF   00,W
3E22:  IORWF  FF2,F
....................          delay_ms(20); 
3E24:  MOVLW  14
3E26:  MOVLB  0
3E28:  MOVWF  xEA
3E2A:  CALL   07E6
....................          lcd_gotoxy(1,1); 
3E2E:  MOVLW  01
3E30:  MOVWF  xE6
3E32:  MOVWF  xE7
3E34:  CALL   12C0
....................          printf(lcd_putc,"                    "); 
3E38:  MOVLW  AC
3E3A:  MOVWF  FF6
3E3C:  MOVLW  06
3E3E:  MOVWF  FF7
3E40:  CALL   1390
....................          lcd_gotoxy(1,2); 
3E44:  MOVLW  01
3E46:  MOVWF  xE6
3E48:  MOVLW  02
3E4A:  MOVWF  xE7
3E4C:  CALL   12C0
....................          printf(lcd_putc,"     Velocidad      "); 
3E50:  MOVLW  C2
3E52:  MOVWF  FF6
3E54:  MOVLW  06
3E56:  MOVWF  FF7
3E58:  CALL   1390
....................          lcd_gotoxy(1,3); 
3E5C:  MOVLW  01
3E5E:  MOVWF  xE6
3E60:  MOVLW  03
3E62:  MOVWF  xE7
3E64:  CALL   12C0
....................          printf(lcd_putc,"      Almacenada    "); 
3E68:  MOVLW  D8
3E6A:  MOVWF  FF6
3E6C:  MOVLW  06
3E6E:  MOVWF  FF7
3E70:  CALL   1390
....................          lcd_gotoxy(1,4); 
3E74:  MOVLW  01
3E76:  MOVWF  xE6
3E78:  MOVLW  04
3E7A:  MOVWF  xE7
3E7C:  CALL   12C0
....................          printf(lcd_putc,"                    ");  
3E80:  MOVLW  EE
3E82:  MOVWF  FF6
3E84:  MOVLW  06
3E86:  MOVWF  FF7
3E88:  CALL   1390
....................          delay_ms(1000); 
3E8C:  MOVLW  04
3E8E:  MOVWF  xD4
3E90:  MOVLW  FA
3E92:  MOVWF  xEA
3E94:  CALL   07E6
3E98:  DECFSZ xD4,F
3E9A:  BRA    3E90
....................          printf(lcd_putc,"\f"); 
3E9C:  MOVLW  0C
3E9E:  MOVWF  xE5
3EA0:  CALL   132A
....................          lcd_init(); 
3EA4:  CALL   08D2
....................          Menu=1; paso=0; 
3EA8:  MOVLW  01
3EAA:  MOVWF  1A
3EAC:  CLRF   35
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Funcionamiento 
3EAE:  MOVF   1A,W
3EB0:  SUBLW  32
3EB2:  BTFSS  FD8.2
3EB4:  GOTO   476E
....................    if(Lectura==1){ 
3EB8:  BTFSS  18.0
3EBA:  BRA    42DE
....................       Lectura=0; 
3EBC:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
3EBE:  MOVLW  08
3EC0:  MOVWF  xD4
3EC2:  CALL   1DB0
3EC6:  MOVFF  03,AC
3ECA:  MOVFF  02,AB
3ECE:  MOVFF  01,AA
3ED2:  MOVFF  00,A9
....................       if((CaidaPresion*4.02>0.1 && CaidaPresion<0.23) || estadomv==0){ 
3ED6:  MOVFF  AC,EB
3EDA:  MOVFF  AB,EA
3EDE:  MOVFF  AA,E9
3EE2:  MOVFF  A9,E8
3EE6:  MOVLW  D7
3EE8:  MOVWF  xEF
3EEA:  MOVLW  A3
3EEC:  MOVWF  xEE
3EEE:  CLRF   xED
3EF0:  MOVLW  81
3EF2:  MOVWF  xEC
3EF4:  CALL   18FA
3EF8:  MOVFF  00,D4
3EFC:  MOVFF  01,D5
3F00:  MOVFF  02,D6
3F04:  MOVFF  03,D7
3F08:  MOVLW  CD
3F0A:  MOVWF  xEB
3F0C:  MOVLW  CC
3F0E:  MOVWF  xEA
3F10:  MOVLW  4C
3F12:  MOVWF  xE9
3F14:  MOVLW  7B
3F16:  MOVWF  xE8
3F18:  MOVFF  03,EF
3F1C:  MOVFF  02,EE
3F20:  MOVFF  01,ED
3F24:  MOVFF  00,EC
3F28:  CALL   0D1C
3F2C:  BNC   3F54
3F2E:  MOVFF  AC,EB
3F32:  MOVFF  AB,EA
3F36:  MOVFF  AA,E9
3F3A:  MOVFF  A9,E8
3F3E:  MOVLW  1F
3F40:  MOVWF  xEF
3F42:  MOVLW  85
3F44:  MOVWF  xEE
3F46:  MOVLW  6B
3F48:  MOVWF  xED
3F4A:  MOVLW  7C
3F4C:  MOVWF  xEC
3F4E:  CALL   0D1C
3F52:  BC    3F58
3F54:  BTFSC  17.2
3F56:  BRA    3FD6
....................          lcd_gotoxy(1,1); 
3F58:  MOVLW  01
3F5A:  MOVWF  xE6
3F5C:  MOVWF  xE7
3F5E:  CALL   12C0
....................          printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
3F62:  MOVFF  AC,EB
3F66:  MOVFF  AB,EA
3F6A:  MOVFF  AA,E9
3F6E:  MOVFF  A9,E8
3F72:  MOVLW  D7
3F74:  MOVWF  xEF
3F76:  MOVLW  A3
3F78:  MOVWF  xEE
3F7A:  CLRF   xED
3F7C:  MOVLW  81
3F7E:  MOVWF  xEC
3F80:  CALL   18FA
3F84:  MOVFF  00,D4
3F88:  MOVFF  01,D5
3F8C:  MOVFF  02,D6
3F90:  MOVFF  03,D7
3F94:  MOVLW  04
3F96:  MOVWF  FF6
3F98:  MOVLW  07
3F9A:  MOVWF  FF7
3F9C:  MOVLW  08
3F9E:  MOVWF  xD8
3FA0:  CALL   15C4
3FA4:  MOVLW  02
3FA6:  MOVWF  FE9
3FA8:  MOVFF  D7,DB
3FAC:  MOVFF  D6,DA
3FB0:  MOVFF  D5,D9
3FB4:  MOVFF  D4,D8
3FB8:  MOVWF  xDC
3FBA:  CALL   20B8
3FBE:  MOVLW  11
3FC0:  MOVWF  FF6
3FC2:  MOVLW  07
3FC4:  MOVWF  FF7
3FC6:  MOVLW  07
3FC8:  MOVWF  xD8
3FCA:  CALL   15C4
....................          ActivaBuzzer=0; 
3FCE:  CLRF   41
....................          Buzzer_off; 
3FD0:  BCF    F8B.0
3FD2:  BCF    F94.0
....................       }else if((CaidaPresion*4.02<=0.1 && estadomv==1)){ 
3FD4:  BRA    4092
3FD6:  MOVFF  AC,EB
3FDA:  MOVFF  AB,EA
3FDE:  MOVFF  AA,E9
3FE2:  MOVFF  A9,E8
3FE6:  MOVLW  D7
3FE8:  MOVWF  xEF
3FEA:  MOVLW  A3
3FEC:  MOVWF  xEE
3FEE:  CLRF   xED
3FF0:  MOVLW  81
3FF2:  MOVWF  xEC
3FF4:  CALL   18FA
3FF8:  MOVFF  00,D4
3FFC:  MOVFF  01,D5
4000:  MOVFF  02,D6
4004:  MOVFF  03,D7
4008:  MOVFF  03,EB
400C:  MOVFF  02,EA
4010:  MOVFF  01,E9
4014:  MOVFF  00,E8
4018:  MOVLW  CD
401A:  MOVWF  xEF
401C:  MOVLW  CC
401E:  MOVWF  xEE
4020:  MOVLW  4C
4022:  MOVWF  xED
4024:  MOVLW  7B
4026:  MOVWF  xEC
4028:  CALL   0D1C
402C:  BC    4030
402E:  BNZ   4050
4030:  BTFSS  17.2
4032:  BRA    4050
....................          lcd_gotoxy(1,1); 
4034:  MOVLW  01
4036:  MOVWF  xE6
4038:  MOVWF  xE7
403A:  CALL   12C0
....................          printf(lcd_putc,"!Verifique Flujo! ");  
403E:  MOVLW  1A
4040:  MOVWF  FF6
4042:  MOVLW  07
4044:  MOVWF  FF7
4046:  CALL   1390
....................          ActivaBuzzer=1; 
404A:  MOVLW  01
404C:  MOVWF  41
....................       }else if(CaidaPresion>=0.23){ 
404E:  BRA    4092
4050:  MOVLW  1F
4052:  MOVWF  xEB
4054:  MOVLW  85
4056:  MOVWF  xEA
4058:  MOVLW  6B
405A:  MOVWF  xE9
405C:  MOVLW  7C
405E:  MOVWF  xE8
4060:  MOVFF  AC,EF
4064:  MOVFF  AB,EE
4068:  MOVFF  AA,ED
406C:  MOVFF  A9,EC
4070:  CALL   0D1C
4074:  BC    4078
4076:  BNZ   4092
....................          lcd_gotoxy(1,1); 
4078:  MOVLW  01
407A:  MOVWF  xE6
407C:  MOVWF  xE7
407E:  CALL   12C0
....................          printf(lcd_putc,"!Verifique Filtro!");  
4082:  MOVLW  2E
4084:  MOVWF  FF6
4086:  MOVLW  07
4088:  MOVWF  FF7
408A:  CALL   1390
....................          ActivaBuzzer=1; 
408E:  MOVLW  01
4090:  MOVWF  41
....................       } 
....................        
....................       Saturacion=(CaidaPresion/0.24)*11; 
4092:  MOVFF  AC,EC
4096:  MOVFF  AB,EB
409A:  MOVFF  AA,EA
409E:  MOVFF  A9,E9
40A2:  MOVLW  8F
40A4:  MOVWF  xF0
40A6:  MOVLW  C2
40A8:  MOVWF  xEF
40AA:  MOVLW  75
40AC:  MOVWF  xEE
40AE:  MOVLW  7C
40B0:  MOVWF  xED
40B2:  CALL   19EC
40B6:  MOVFF  00,D4
40BA:  MOVFF  01,D5
40BE:  MOVFF  02,D6
40C2:  MOVFF  03,D7
40C6:  MOVFF  03,EB
40CA:  MOVFF  02,EA
40CE:  MOVFF  01,E9
40D2:  MOVFF  00,E8
40D6:  CLRF   xEF
40D8:  CLRF   xEE
40DA:  MOVLW  30
40DC:  MOVWF  xED
40DE:  MOVLW  82
40E0:  MOVWF  xEC
40E2:  CALL   18FA
40E6:  MOVFF  03,A8
40EA:  MOVFF  02,A7
40EE:  MOVFF  01,A6
40F2:  MOVFF  00,A5
....................        
....................       if(Saturacion>11) 
40F6:  CLRF   xEB
40F8:  CLRF   xEA
40FA:  MOVLW  30
40FC:  MOVWF  xE9
40FE:  MOVLW  82
4100:  MOVWF  xE8
4102:  MOVFF  A8,EF
4106:  MOVFF  A7,EE
410A:  MOVFF  A6,ED
410E:  MOVFF  A5,EC
4112:  CALL   0D1C
4116:  BNC   4124
....................          Saturacion=11; 
4118:  CLRF   xA8
411A:  CLRF   xA7
411C:  MOVLW  30
411E:  MOVWF  xA6
4120:  MOVLW  82
4122:  MOVWF  xA5
....................        
....................       for(i=0;i<floor(Saturacion);i++){ 
4124:  CLRF   2F
4126:  MOVFF  A8,D7
412A:  MOVFF  A7,D6
412E:  MOVFF  A6,D5
4132:  MOVFF  A5,D4
4136:  CALL   25B4
413A:  MOVFF  00,D4
413E:  MOVFF  01,D5
4142:  MOVFF  02,D6
4146:  MOVFF  03,D7
414A:  CLRF   xED
414C:  MOVFF  2F,EC
4150:  CALL   096C
4154:  MOVFF  03,EB
4158:  MOVFF  02,EA
415C:  MOVFF  01,E9
4160:  MOVFF  00,E8
4164:  MOVFF  D7,EF
4168:  MOVFF  D6,EE
416C:  MOVFF  D5,ED
4170:  MOVFF  D4,EC
4174:  CALL   0D1C
4178:  BNC   4196
....................          lcd_gotoxy(i+8,2); 
417A:  MOVLW  08
417C:  ADDWF  2F,W
417E:  MOVWF  xD4
4180:  MOVWF  xE6
4182:  MOVLW  02
4184:  MOVWF  xE7
4186:  CALL   12C0
....................          printf(lcd_putc,"Ñ"); 
418A:  MOVLW  D1
418C:  MOVWF  xE5
418E:  CALL   132A
....................       } 
4192:  INCF   2F,F
4194:  BRA    4126
....................        
....................       for(i=floor(Saturacion);i<11;i++){ 
4196:  MOVFF  A8,D7
419A:  MOVFF  A7,D6
419E:  MOVFF  A6,D5
41A2:  MOVFF  A5,D4
41A6:  CALL   25B4
41AA:  MOVFF  03,EB
41AE:  MOVFF  02,EA
41B2:  MOVFF  01,E9
41B6:  MOVFF  00,E8
41BA:  CALL   223E
41BE:  MOVFF  01,2F
41C2:  MOVF   2F,W
41C4:  SUBLW  0A
41C6:  BNC   41E4
....................          lcd_gotoxy(i+8,2); 
41C8:  MOVLW  08
41CA:  ADDWF  2F,W
41CC:  MOVWF  xD4
41CE:  MOVWF  xE6
41D0:  MOVLW  02
41D2:  MOVWF  xE7
41D4:  CALL   12C0
....................          printf(lcd_putc," "); 
41D8:  MOVLW  20
41DA:  MOVWF  xE5
41DC:  CALL   132A
....................       } 
41E0:  INCF   2F,F
41E2:  BRA    41C2
....................        
....................       lcd_gotoxy(9,3); 
41E4:  MOVLW  09
41E6:  MOVWF  xE6
41E8:  MOVLW  03
41EA:  MOVWF  xE7
41EC:  CALL   12C0
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
41F0:  MOVLW  42
41F2:  MOVWF  FF6
41F4:  MOVLW  07
41F6:  MOVWF  FF7
41F8:  MOVLW  06
41FA:  MOVWF  xD8
41FC:  CALL   15C4
4200:  MOVFF  29,D4
4204:  MOVLW  03
4206:  MOVWF  xD5
4208:  CALL   178A
420C:  MOVLW  3A
420E:  MOVWF  xE5
4210:  CALL   132A
4214:  MOVFF  2A,D4
4218:  MOVLW  01
421A:  MOVWF  xD5
421C:  CALL   178A
....................       EliminaRuido(); 
4220:  CALL   0004
....................        
....................       lcd_gotoxy(1,2); 
4224:  MOVLW  01
4226:  MOVWF  xE6
4228:  MOVLW  02
422A:  MOVWF  xE7
422C:  CALL   12C0
....................       printf(lcd_putc,"Filtro:"); 
4230:  MOVLW  52
4232:  MOVWF  FF6
4234:  MOVLW  07
4236:  MOVWF  FF7
4238:  CALL   1390
....................        
....................       if(estadomv==1){ 
423C:  BTFSS  17.2
423E:  BRA    425A
....................          lcd_gotoxy(1,4); 
4240:  MOVLW  01
4242:  MOVWF  xE6
4244:  MOVLW  04
4246:  MOVWF  xE7
4248:  CALL   12C0
....................          printf(lcd_putc,"Motor:ON ");       
424C:  MOVLW  5A
424E:  MOVWF  FF6
4250:  MOVLW  07
4252:  MOVWF  FF7
4254:  CALL   1390
....................       }else{ 
4258:  BRA    4272
....................          lcd_gotoxy(1,4); 
425A:  MOVLW  01
425C:  MOVWF  xE6
425E:  MOVLW  04
4260:  MOVWF  xE7
4262:  CALL   12C0
....................          printf(lcd_putc,"Motor:OFF"); 
4266:  MOVLW  64
4268:  MOVWF  FF6
426A:  MOVLW  07
426C:  MOVWF  FF7
426E:  CALL   1390
....................       } 
....................        
....................       if(estadouv==1){ 
4272:  BTFSS  17.0
4274:  BRA    4290
....................          lcd_gotoxy(13,4); 
4276:  MOVLW  0D
4278:  MOVWF  xE6
427A:  MOVLW  04
427C:  MOVWF  xE7
427E:  CALL   12C0
....................          printf(lcd_putc,"UV:ON "); 
4282:  MOVLW  6E
4284:  MOVWF  FF6
4286:  MOVLW  07
4288:  MOVWF  FF7
428A:  CALL   1390
....................       }else{          
428E:  BRA    42A8
....................          lcd_gotoxy(13,4); 
4290:  MOVLW  0D
4292:  MOVWF  xE6
4294:  MOVLW  04
4296:  MOVWF  xE7
4298:  CALL   12C0
....................          printf(lcd_putc,"UV:OFF"); 
429C:  MOVLW  76
429E:  MOVWF  FF6
42A0:  MOVLW  07
42A2:  MOVWF  FF7
42A4:  CALL   1390
....................       } 
....................        
....................       if(estadofl==1){ 
42A8:  BTFSS  17.1
42AA:  BRA    42C6
....................          lcd_gotoxy(1,3); 
42AC:  MOVLW  01
42AE:  MOVWF  xE6
42B0:  MOVLW  03
42B2:  MOVWF  xE7
42B4:  CALL   12C0
....................          printf(lcd_putc,"Luz:ON "); 
42B8:  MOVLW  7E
42BA:  MOVWF  FF6
42BC:  MOVLW  07
42BE:  MOVWF  FF7
42C0:  CALL   1390
....................       }else{ 
42C4:  BRA    42DE
....................          lcd_gotoxy(1,3); 
42C6:  MOVLW  01
42C8:  MOVWF  xE6
42CA:  MOVLW  03
42CC:  MOVWF  xE7
42CE:  CALL   12C0
....................          printf(lcd_putc,"Luz:OFF"); 
42D2:  MOVLW  86
42D4:  MOVWF  FF6
42D6:  MOVLW  07
42D8:  MOVWF  FF7
42DA:  CALL   1390
....................       }  
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
42DE:  BTFSS  17.7
42E0:  BRA    437A
....................       if(estadoalarma==1){ 
42E2:  BTFSS  18.4
42E4:  BRA    4370
....................          printf(lcd_putc,"\f"); 
42E6:  MOVLW  0C
42E8:  MOVWF  xE5
42EA:  CALL   132A
....................          lcd_gotoxy(1,2); 
42EE:  MOVLW  01
42F0:  MOVWF  xE6
42F2:  MOVLW  02
42F4:  MOVWF  xE7
42F6:  CALL   12C0
....................          printf(lcd_putc,"  Temporizador  de  "); 
42FA:  MOVLW  8E
42FC:  MOVWF  FF6
42FE:  MOVLW  07
4300:  MOVWF  FF7
4302:  CALL   1390
....................          lcd_gotoxy(1,3); 
4306:  MOVLW  01
4308:  MOVWF  xE6
430A:  MOVLW  03
430C:  MOVWF  xE7
430E:  CALL   12C0
....................          printf(lcd_putc," Luz UV  Finalizado "); 
4312:  MOVLW  A4
4314:  MOVWF  FF6
4316:  MOVLW  07
4318:  MOVWF  FF7
431A:  CALL   1390
....................          lcd_gotoxy(1,4); 
431E:  MOVLW  01
4320:  MOVWF  xE6
4322:  MOVLW  04
4324:  MOVWF  xE7
4326:  CALL   12C0
....................          printf(lcd_putc,"                    "); 
432A:  MOVLW  BA
432C:  MOVWF  FF6
432E:  MOVLW  07
4330:  MOVWF  FF7
4332:  CALL   1390
....................          lcd_gotoxy(1,1); 
4336:  MOVLW  01
4338:  MOVWF  xE6
433A:  MOVWF  xE7
433C:  CALL   12C0
....................          printf(lcd_putc,"                    "); 
4340:  MOVLW  D0
4342:  MOVWF  FF6
4344:  MOVLW  07
4346:  MOVWF  FF7
4348:  CALL   1390
....................          for(i=0;i<5;i++){ 
434C:  CLRF   2F
434E:  MOVF   2F,W
4350:  SUBLW  04
4352:  BNC   4370
....................             Buzzer_on; 
4354:  BSF    F8B.0
4356:  BCF    F94.0
....................             delay_ms(200); 
4358:  MOVLW  C8
435A:  MOVWF  xEA
435C:  CALL   07E6
....................             Buzzer_off; 
4360:  BCF    F8B.0
4362:  BCF    F94.0
....................             delay_ms(200); 
4364:  MOVLW  C8
4366:  MOVWF  xEA
4368:  CALL   07E6
....................          } 
436C:  INCF   2F,F
436E:  BRA    434E
....................       } 
....................       tiempo_cumplido=0; 
4370:  BCF    17.7
....................       printf(lcd_putc,"\f"); 
4372:  MOVLW  0C
4374:  MOVWF  xE5
4376:  CALL   132A
....................    }   
....................        
....................    //if(Cambio){ 
....................      // Cambio=OFF; 
....................    //} 
....................     
....................    if(estadomv==1){  
437A:  BTFSS  17.2
437C:  BRA    441C
....................       if(flagmv==0){ 
437E:  BTFSC  19.4
4380:  BRA    4416
....................          VelMotor=6; 
4382:  MOVLW  06
4384:  MOVWF  xBC
....................          lcd_init();delay_ms(200);lcd_init(); 
4386:  CALL   08D2
438A:  MOVLW  C8
438C:  MOVWF  xEA
438E:  CALL   07E6
4392:  CALL   08D2
....................          flagmv=1;Cambio=ON;delay_ms(200); 
4396:  BSF    19.4
4398:  BSF    19.3
439A:  MOVLW  C8
439C:  MOVWF  xEA
439E:  CALL   07E6
....................          write_eeprom(20,make8(segundosTrabajo,0)); 
43A2:  MOVFF  B5,D4
43A6:  MOVLW  14
43A8:  MOVWF  FA9
43AA:  MOVFF  D4,FA8
43AE:  BCF    FA6.6
43B0:  BCF    FA6.7
43B2:  BSF    FA6.2
43B4:  MOVF   FF2,W
43B6:  MOVWF  00
43B8:  BCF    FF2.6
43BA:  BCF    FF2.7
43BC:  MOVLB  F
43BE:  MOVLW  55
43C0:  MOVWF  FA7
43C2:  MOVLW  AA
43C4:  MOVWF  FA7
43C6:  BSF    FA6.1
43C8:  BTFSC  FA6.1
43CA:  BRA    43C8
43CC:  BCF    FA6.2
43CE:  MOVF   00,W
43D0:  IORWF  FF2,F
....................          delay_ms(20); 
43D2:  MOVLW  14
43D4:  MOVLB  0
43D6:  MOVWF  xEA
43D8:  CALL   07E6
....................          write_eeprom(21,make8(segundosTrabajo,1)); 
43DC:  MOVFF  B6,D4
43E0:  MOVLW  15
43E2:  MOVWF  FA9
43E4:  MOVFF  D4,FA8
43E8:  BCF    FA6.6
43EA:  BCF    FA6.7
43EC:  BSF    FA6.2
43EE:  MOVF   FF2,W
43F0:  MOVWF  00
43F2:  BCF    FF2.6
43F4:  BCF    FF2.7
43F6:  MOVLB  F
43F8:  MOVLW  55
43FA:  MOVWF  FA7
43FC:  MOVLW  AA
43FE:  MOVWF  FA7
4400:  BSF    FA6.1
4402:  BTFSC  FA6.1
4404:  BRA    4402
4406:  BCF    FA6.2
4408:  MOVF   00,W
440A:  IORWF  FF2,F
....................          delay_ms(20); 
440C:  MOVLW  14
440E:  MOVLB  0
4410:  MOVWF  xEA
4412:  CALL   07E6
....................       } 
....................       VelMotor=Vel1; 
4416:  MOVFF  46,BC
....................    }else{ 
441A:  BRA    44AA
....................       VelMotor=0; 
441C:  CLRF   xBC
....................       if(flagmv==1){ 
441E:  BTFSS  19.4
4420:  BRA    44AA
....................          lcd_init();delay_ms(200);lcd_init(); 
4422:  CALL   08D2
4426:  MOVLW  C8
4428:  MOVWF  xEA
442A:  CALL   07E6
442E:  CALL   08D2
....................          flagmv=0;Cambio=ON; 
4432:  BCF    19.4
4434:  BSF    19.3
....................          write_eeprom(20,make8(segundosTrabajo,0)); 
4436:  MOVFF  B5,D4
443A:  MOVLW  14
443C:  MOVWF  FA9
443E:  MOVFF  D4,FA8
4442:  BCF    FA6.6
4444:  BCF    FA6.7
4446:  BSF    FA6.2
4448:  MOVF   FF2,W
444A:  MOVWF  00
444C:  BCF    FF2.6
444E:  BCF    FF2.7
4450:  MOVLB  F
4452:  MOVLW  55
4454:  MOVWF  FA7
4456:  MOVLW  AA
4458:  MOVWF  FA7
445A:  BSF    FA6.1
445C:  BTFSC  FA6.1
445E:  BRA    445C
4460:  BCF    FA6.2
4462:  MOVF   00,W
4464:  IORWF  FF2,F
....................          delay_ms(20); 
4466:  MOVLW  14
4468:  MOVLB  0
446A:  MOVWF  xEA
446C:  CALL   07E6
....................          write_eeprom(21,make8(segundosTrabajo,1)); 
4470:  MOVFF  B6,D4
4474:  MOVLW  15
4476:  MOVWF  FA9
4478:  MOVFF  D4,FA8
447C:  BCF    FA6.6
447E:  BCF    FA6.7
4480:  BSF    FA6.2
4482:  MOVF   FF2,W
4484:  MOVWF  00
4486:  BCF    FF2.6
4488:  BCF    FF2.7
448A:  MOVLB  F
448C:  MOVLW  55
448E:  MOVWF  FA7
4490:  MOVLW  AA
4492:  MOVWF  FA7
4494:  BSF    FA6.1
4496:  BTFSC  FA6.1
4498:  BRA    4496
449A:  BCF    FA6.2
449C:  MOVF   00,W
449E:  IORWF  FF2,F
....................          delay_ms(20); 
44A0:  MOVLW  14
44A2:  MOVLB  0
44A4:  MOVWF  xEA
44A6:  CALL   07E6
....................       } 
....................    } 
....................     
....................    if(estadofl==1){ 
44AA:  BTFSS  17.1
44AC:  BRA    44CC
....................       Luz_Blanca_on; 
44AE:  BCF    F8A.4
44B0:  BCF    F93.4
....................       if(flagfl==0){ 
44B2:  BTFSC  18.2
44B4:  BRA    44CA
....................          lcd_init();delay_ms(200);lcd_init(); 
44B6:  CALL   08D2
44BA:  MOVLW  C8
44BC:  MOVWF  xEA
44BE:  CALL   07E6
44C2:  CALL   08D2
....................          flagfl=1;Cambio=ON; 
44C6:  BSF    18.2
44C8:  BSF    19.3
....................       } 
....................    }else{ 
44CA:  BRA    44E8
....................       Luz_Blanca_off; 
44CC:  BSF    F8A.4
44CE:  BCF    F93.4
....................       if(flagfl==1){ 
44D0:  BTFSS  18.2
44D2:  BRA    44E8
....................          lcd_init();delay_ms(200);lcd_init(); 
44D4:  CALL   08D2
44D8:  MOVLW  C8
44DA:  MOVWF  xEA
44DC:  CALL   07E6
44E0:  CALL   08D2
....................          flagfl=0;Cambio=ON; 
44E4:  BCF    18.2
44E6:  BSF    19.3
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
44E8:  BTFSS  17.0
44EA:  BRA    451A
....................       Luz_UV_on; 
44EC:  BCF    F8A.3
44EE:  BCF    F93.3
....................       tiempo_cumplido=0;       
44F0:  BCF    17.7
....................       estadomv=0; 
44F2:  BCF    17.2
....................       VelMotor=0; 
44F4:  CLRF   xBC
....................       estadofl=0; 
44F6:  BCF    17.1
....................       Luz_Blanca_off; 
44F8:  BSF    F8A.4
44FA:  BCF    F93.4
....................       if(flaguv==0){ 
44FC:  BTFSC  18.1
44FE:  BRA    4518
....................          lcd_init();delay_ms(200);lcd_init(); 
4500:  CALL   08D2
4504:  MOVLW  C8
4506:  MOVWF  xEA
4508:  CALL   07E6
450C:  CALL   08D2
....................          flaguv=1;guardaruv=1;Cambio=ON; 
4510:  BSF    18.1
4512:  MOVLW  01
4514:  MOVWF  32
4516:  BSF    19.3
....................       } 
....................    }else{ 
4518:  BRA    453C
....................       estadouv=0; 
451A:  BCF    17.0
....................       Luz_UV_off; 
451C:  BSF    F8A.3
451E:  BCF    F93.3
....................       if(flaguv==1){ 
4520:  BTFSS  18.1
4522:  BRA    453C
....................          lcd_init();delay_ms(200);lcd_init(); 
4524:  CALL   08D2
4528:  MOVLW  C8
452A:  MOVWF  xEA
452C:  CALL   07E6
4530:  CALL   08D2
....................          flaguv=0;guardaruv=1;Cambio=ON; 
4534:  BCF    18.1
4536:  MOVLW  01
4538:  MOVWF  32
453A:  BSF    19.3
....................       } 
....................    } 
....................     
....................    if(DOWN){//Si oprime hacia Abajo 
453C:  BSF    F96.0
453E:  BTFSC  F84.0
4540:  BRA    45B2
....................       delay_ms(20); 
4542:  MOVLW  14
4544:  MOVWF  xEA
4546:  CALL   07E6
....................       if(DOWN){ 
454A:  BSF    F96.0
454C:  BTFSC  F84.0
454E:  BRA    45B0
....................          if(Flanco==0){ 
4550:  BTFSC  17.3
4552:  BRA    45B0
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
4554:  BTG    17.1
4556:  BSF    17.3
4558:  MOVLW  02
455A:  MOVWF  xD4
455C:  MOVLW  96
455E:  MOVWF  xEA
4560:  CALL   07E6
4564:  DECFSZ xD4,F
4566:  BRA    455C
4568:  BSF    19.3
....................             write_eeprom(23,estadofl); 
456A:  MOVLW  00
456C:  BTFSC  17.1
456E:  MOVLW  01
4570:  MOVWF  xD4
4572:  MOVLW  17
4574:  MOVWF  FA9
4576:  MOVFF  D4,FA8
457A:  BCF    FA6.6
457C:  BCF    FA6.7
457E:  BSF    FA6.2
4580:  MOVF   FF2,W
4582:  MOVWF  00
4584:  BCF    FF2.6
4586:  BCF    FF2.7
4588:  MOVLB  F
458A:  MOVLW  55
458C:  MOVWF  FA7
458E:  MOVLW  AA
4590:  MOVWF  FA7
4592:  BSF    FA6.1
4594:  BTFSC  FA6.1
4596:  BRA    4594
4598:  BCF    FA6.2
459A:  MOVF   00,W
459C:  IORWF  FF2,F
....................             delay_ms(300); 
459E:  MOVLW  02
45A0:  MOVLB  0
45A2:  MOVWF  xD4
45A4:  MOVLW  96
45A6:  MOVWF  xEA
45A8:  CALL   07E6
45AC:  DECFSZ xD4,F
45AE:  BRA    45A4
....................          } 
....................       } 
....................    }else{ 
45B0:  BRA    45B6
....................       flagdn=0; 
45B2:  BCF    19.1
....................       Flanco=0; 
45B4:  BCF    17.3
....................    }  
....................     
....................    if(RIGHT){//Si oprime hacia abajo 
45B6:  BSF    F96.1
45B8:  BTFSC  F84.1
45BA:  BRA    461C
....................       delay_ms(20); 
45BC:  MOVLW  14
45BE:  MOVWF  xEA
45C0:  CALL   07E6
....................       if(RIGHT){ 
45C4:  BSF    F96.1
45C6:  BTFSC  F84.1
45C8:  BRA    461A
....................          if(Flanco2 == 0){ 
45CA:  BTFSC  17.5
45CC:  BRA    461A
....................             estadomv=!estadomv;Flanco2 = 1;Cambio=ON; 
45CE:  BTG    17.2
45D0:  BSF    17.5
45D2:  BSF    19.3
....................             write_eeprom(22,estadomv); 
45D4:  MOVLW  00
45D6:  BTFSC  17.2
45D8:  MOVLW  01
45DA:  MOVWF  xD4
45DC:  MOVLW  16
45DE:  MOVWF  FA9
45E0:  MOVFF  D4,FA8
45E4:  BCF    FA6.6
45E6:  BCF    FA6.7
45E8:  BSF    FA6.2
45EA:  MOVF   FF2,W
45EC:  MOVWF  00
45EE:  BCF    FF2.6
45F0:  BCF    FF2.7
45F2:  MOVLB  F
45F4:  MOVLW  55
45F6:  MOVWF  FA7
45F8:  MOVLW  AA
45FA:  MOVWF  FA7
45FC:  BSF    FA6.1
45FE:  BTFSC  FA6.1
4600:  BRA    45FE
4602:  BCF    FA6.2
4604:  MOVF   00,W
4606:  IORWF  FF2,F
....................             delay_ms(300); 
4608:  MOVLW  02
460A:  MOVLB  0
460C:  MOVWF  xD4
460E:  MOVLW  96
4610:  MOVWF  xEA
4612:  CALL   07E6
4616:  DECFSZ xD4,F
4618:  BRA    460E
....................          } 
....................       } 
....................    }else{ 
461A:  BRA    461E
....................       Flanco2 = 0; 
461C:  BCF    17.5
....................    } 
....................     
....................    if(IZQU){//Si oprime hacia izquierda 
461E:  BSF    F96.2
4620:  BTFSC  F84.2
4622:  BRA    463E
....................       delay_ms(20); 
4624:  MOVLW  14
4626:  MOVWF  xEA
4628:  CALL   07E6
....................       if(IZQU){ 
462C:  BSF    F96.2
462E:  BTFSC  F84.2
4630:  BRA    463E
....................          delay_ms(150);  
4632:  MOVLW  96
4634:  MOVWF  xEA
4636:  CALL   07E6
....................          //estadouv=!estadouv; 
....................          estadouv=0; 
463A:  BCF    17.0
....................          Cambio=ON; 
463C:  BSF    19.3
....................       } 
....................    } 
....................     
....................    if(UP){// Si oprime Arriba 
463E:  BSF    F92.5
4640:  BTFSC  F80.5
4642:  BRA    466C
....................       Flanco1=1; 
4644:  BSF    17.4
....................          delay_ms(200); 
4646:  MOVLW  C8
4648:  MOVWF  xEA
464A:  CALL   07E6
....................          if(UP){ 
464E:  BSF    F92.5
4650:  BTFSC  F80.5
4652:  BRA    466A
....................             printf(lcd_putc,"\f");             
4654:  MOVLW  0C
4656:  MOVWF  xE5
4658:  CALL   132A
....................             Menu=1;  
465C:  MOVLW  01
465E:  MOVWF  1A
....................             paso=0; 
4660:  CLRF   35
....................             Flecha=2; 
4662:  MOVLW  02
4664:  MOVWF  1E
....................             Flecha2=2; 
4666:  MOVWF  20
....................             Cambio=ON; 
4668:  BSF    19.3
....................          } 
....................    }else{ 
466A:  BRA    4670
....................       flagup=0; 
466C:  BCF    19.2
....................       Flanco1=0; 
466E:  BCF    17.4
....................    } 
....................     
....................    if(flagup){ 
4670:  BTFSS  19.2
4672:  BRA    467A
....................       subirVidrio(); 
4674:  GOTO   25CA
....................    }else{ 
4678:  BRA    4688
....................       if(flagdn){ 
467A:  BTFSS  19.1
467C:  BRA    4684
....................          bajarVidrio(); 
467E:  GOTO   25F0
....................       }else{ 
4682:  BRA    4688
....................          detenerVidrio(); 
4684:  GOTO   2616
....................       } 
....................    } 
....................        
....................    if(guardaruv==1){ 
4688:  DECFSZ 32,W
468A:  BRA    4756
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
468C:  MOVLW  07
468E:  MOVWF  FA9
4690:  MOVFF  23,FA8
4694:  BCF    FA6.6
4696:  BCF    FA6.7
4698:  BSF    FA6.2
469A:  MOVF   FF2,W
469C:  MOVWF  00
469E:  BCF    FF2.6
46A0:  BCF    FF2.7
46A2:  MOVLB  F
46A4:  MOVLW  55
46A6:  MOVWF  FA7
46A8:  MOVLW  AA
46AA:  MOVWF  FA7
46AC:  BSF    FA6.1
46AE:  BTFSC  FA6.1
46B0:  BRA    46AE
46B2:  BCF    FA6.2
46B4:  MOVF   00,W
46B6:  IORWF  FF2,F
46B8:  MOVLW  08
46BA:  MOVWF  FA9
46BC:  MOVFF  24,FA8
46C0:  BCF    FA6.6
46C2:  BCF    FA6.7
46C4:  BSF    FA6.2
46C6:  MOVF   FF2,W
46C8:  MOVWF  00
46CA:  BCF    FF2.6
46CC:  BCF    FF2.7
46CE:  MOVLW  55
46D0:  MOVWF  FA7
46D2:  MOVLW  AA
46D4:  MOVWF  FA7
46D6:  BSF    FA6.1
46D8:  BTFSC  FA6.1
46DA:  BRA    46D8
46DC:  BCF    FA6.2
46DE:  MOVF   00,W
46E0:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
46E2:  MOVFF  49,25
....................       horasH=make8(horas,1); 
46E6:  MOVFF  4A,26
....................       write_eeprom(9,horasL); 
46EA:  MOVLW  09
46EC:  MOVWF  FA9
46EE:  MOVFF  25,FA8
46F2:  BCF    FA6.6
46F4:  BCF    FA6.7
46F6:  BSF    FA6.2
46F8:  MOVFF  FF2,00
46FC:  BCF    FF2.6
46FE:  BCF    FF2.7
4700:  MOVLW  55
4702:  MOVWF  FA7
4704:  MOVLW  AA
4706:  MOVWF  FA7
4708:  BSF    FA6.1
470A:  BTFSC  FA6.1
470C:  BRA    470A
470E:  BCF    FA6.2
4710:  MOVF   00,W
4712:  IORWF  FF2,F
....................       delay_ms(20); 
4714:  MOVLW  14
4716:  MOVLB  0
4718:  MOVWF  xEA
471A:  CALL   07E6
....................       write_eeprom(10,horasH); 
471E:  MOVLW  0A
4720:  MOVWF  FA9
4722:  MOVFF  26,FA8
4726:  BCF    FA6.6
4728:  BCF    FA6.7
472A:  BSF    FA6.2
472C:  MOVF   FF2,W
472E:  MOVWF  00
4730:  BCF    FF2.6
4732:  BCF    FF2.7
4734:  MOVLB  F
4736:  MOVLW  55
4738:  MOVWF  FA7
473A:  MOVLW  AA
473C:  MOVWF  FA7
473E:  BSF    FA6.1
4740:  BTFSC  FA6.1
4742:  BRA    4740
4744:  BCF    FA6.2
4746:  MOVF   00,W
4748:  IORWF  FF2,F
....................       delay_ms(20); 
474A:  MOVLW  14
474C:  MOVLB  0
474E:  MOVWF  xEA
4750:  CALL   07E6
....................       guardaruv=0; 
4754:  CLRF   32
....................    } 
....................     
....................    if(segundos>=60){ 
4756:  MOVF   23,W
4758:  SUBLW  3B
475A:  BC    4760
....................       segundos=0;minutos++; 
475C:  CLRF   23
475E:  INCF   24,F
....................    } 
....................    if(minutos>=60){ 
4760:  MOVF   24,W
4762:  SUBLW  3B
4764:  BC    476E
....................       minutos=0;horas++; 
4766:  CLRF   24
4768:  INCF   49,F
476A:  BTFSC  FD8.2
476C:  INCF   4A,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60){ 
476E:  MOVF   31,W
4770:  SUBLW  3B
4772:  BC    478C
....................       printf(lcd_putc,"\f"); 
4774:  MOVLW  0C
4776:  MOVWF  xE5
4778:  CALL   132A
....................       lcd_init(); 
477C:  CALL   08D2
....................       delay_ms(200); 
4780:  MOVLW  C8
4782:  MOVWF  xEA
4784:  CALL   07E6
....................       tiemporeset=0; 
4788:  CLRF   31
....................       Cambio=ON; 
478A:  BSF    19.3
....................    }    
....................    } 
478C:  GOTO   2816
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
4790:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1B1F   BROWNOUT WDT BORV20 NOPUT WDT8192
   Word  3: 0100   NOPBADEN CCP2C1 NOLPT1OSC NOMCLR
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
