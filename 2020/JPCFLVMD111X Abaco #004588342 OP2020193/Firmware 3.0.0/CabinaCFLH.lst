CCS PCH C Compiler, Version 4.104, 5967               01-sept.-20 09:28

               Filename: D:\Laboratorio\Modulo Flujo Laminar\2020\JPCFLVMD111X Abaco #0045882XX OP2020193\Firmware 3.0.0\CabinaCFLH.lst

               ROM used: 16302 bytes (50%)
                         Largest free fragment is 16464
               RAM used: 190 (9%) at main() level
                         228 (11%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   2100
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   01B2
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=48000000) 
.................... //#use delay(clock=20000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOPUT 
.................... #use delay(clock=16000000) 
*
0198:  MOVLW  04
019A:  SUBWF  xE3,F
019C:  BNC   01B0
019E:  CLRF   FEA
01A0:  MOVLW  E3
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01B0
01A8:  BRA    01AC
01AA:  NOP   
01AC:  DECFSZ FEF,F
01AE:  BRA    01AA
01B0:  RETLW  00
*
0864:  CLRF   FEA
0866:  MOVLW  D1
0868:  MOVWF  FE9
086A:  MOVF   FEF,W
086C:  BZ    088A
086E:  MOVLW  05
0870:  MOVWF  01
0872:  CLRF   00
0874:  DECFSZ 00,F
0876:  BRA    0874
0878:  DECFSZ 01,F
087A:  BRA    0872
087C:  MOVLW  2E
087E:  MOVWF  00
0880:  DECFSZ 00,F
0882:  BRA    0880
0884:  BRA    0886
0886:  DECFSZ FEF,F
0888:  BRA    086E
088A:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1DAC:  BCF    xCD.0
....................    y = x; 
1DAE:  MOVFF  C1,C6
1DB2:  MOVFF  C0,C5
1DB6:  MOVFF  BF,C4
1DBA:  MOVFF  BE,C3
....................  
....................    if (x < 0) 
1DBE:  MOVFF  C1,D1
1DC2:  MOVFF  C0,D0
1DC6:  MOVFF  BF,CF
1DCA:  MOVFF  BE,CE
1DCE:  CLRF   xD5
1DD0:  CLRF   xD4
1DD2:  CLRF   xD3
1DD4:  CLRF   xD2
1DD6:  CALL   0CCC
1DDA:  BNC   1DE4
....................    { 
....................       s = 1; 
1DDC:  BSF    xCD.0
....................       y = -y; 
1DDE:  MOVF   xC4,W
1DE0:  XORLW  80
1DE2:  MOVWF  xC4
....................    } 
....................  
....................    if (y <= 32768.0) 
1DE4:  MOVFF  C6,D1
1DE8:  MOVFF  C5,D0
1DEC:  MOVFF  C4,CF
1DF0:  MOVFF  C3,CE
1DF4:  CLRF   xD5
1DF6:  CLRF   xD4
1DF8:  CLRF   xD3
1DFA:  MOVLW  8E
1DFC:  MOVWF  xD2
1DFE:  CALL   0CCC
1E02:  BC    1E06
1E04:  BNZ   1E36
....................   res = (float32)(unsigned int16)y; 
1E06:  MOVFF  C6,D1
1E0A:  MOVFF  C5,D0
1E0E:  MOVFF  C4,CF
1E12:  MOVFF  C3,CE
1E16:  RCALL  1D74
1E18:  MOVFF  02,D3
1E1C:  MOVFF  01,D2
1E20:  CALL   0AB8
1E24:  MOVFF  03,CA
1E28:  MOVFF  02,C9
1E2C:  MOVFF  01,C8
1E30:  MOVFF  00,C7
....................  
....................  else if (y < 10000000.0) 
1E34:  BRA    1FC4
1E36:  MOVFF  C6,D1
1E3A:  MOVFF  C5,D0
1E3E:  MOVFF  C4,CF
1E42:  MOVFF  C3,CE
1E46:  MOVLW  80
1E48:  MOVWF  xD5
1E4A:  MOVLW  96
1E4C:  MOVWF  xD4
1E4E:  MOVLW  18
1E50:  MOVWF  xD3
1E52:  MOVLW  96
1E54:  MOVWF  xD2
1E56:  CALL   0CCC
1E5A:  BTFSS  FD8.0
1E5C:  BRA    1FB4
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1E5E:  MOVFF  C6,D2
1E62:  MOVFF  C5,D1
1E66:  MOVFF  C4,D0
1E6A:  MOVFF  C3,CF
1E6E:  CLRF   xD6
1E70:  CLRF   xD5
1E72:  CLRF   xD4
1E74:  MOVLW  8E
1E76:  MOVWF  xD3
1E78:  CALL   1522
1E7C:  MOVFF  03,D1
1E80:  MOVFF  02,D0
1E84:  MOVFF  01,CF
1E88:  MOVFF  00,CE
1E8C:  RCALL  1D74
1E8E:  MOVFF  02,CC
1E92:  MOVFF  01,CB
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1E96:  MOVFF  C6,D2
1E9A:  MOVFF  C5,D1
1E9E:  MOVFF  C4,D0
1EA2:  MOVFF  C3,CF
1EA6:  CLRF   xD6
1EA8:  CLRF   xD5
1EAA:  CLRF   xD4
1EAC:  MOVLW  8E
1EAE:  MOVWF  xD3
1EB0:  CALL   1522
1EB4:  MOVFF  00,CE
1EB8:  MOVFF  01,CF
1EBC:  MOVFF  02,D0
1EC0:  MOVFF  03,D1
1EC4:  MOVFF  CC,D3
1EC8:  MOVFF  CB,D2
1ECC:  CALL   0AB8
1ED0:  BSF    FD8.1
1ED2:  MOVFF  D1,D5
1ED6:  MOVFF  D0,D4
1EDA:  MOVFF  CF,D3
1EDE:  MOVFF  CE,D2
1EE2:  MOVFF  03,D9
1EE6:  MOVFF  02,D8
1EEA:  MOVFF  01,D7
1EEE:  MOVFF  00,D6
1EF2:  CALL   167C
1EF6:  CLRF   xD1
1EF8:  CLRF   xD0
1EFA:  CLRF   xCF
1EFC:  MOVLW  8E
1EFE:  MOVWF  xCE
1F00:  MOVFF  03,D5
1F04:  MOVFF  02,D4
1F08:  MOVFF  01,D3
1F0C:  MOVFF  00,D2
1F10:  CALL   1430
1F14:  MOVFF  03,C6
1F18:  MOVFF  02,C5
1F1C:  MOVFF  01,C4
1F20:  MOVFF  00,C3
....................   res = 32768.0*(float32)l; 
1F24:  MOVFF  CC,D3
1F28:  MOVFF  CB,D2
1F2C:  CALL   0AB8
1F30:  CLRF   xD1
1F32:  CLRF   xD0
1F34:  CLRF   xCF
1F36:  MOVLW  8E
1F38:  MOVWF  xCE
1F3A:  MOVFF  03,D5
1F3E:  MOVFF  02,D4
1F42:  MOVFF  01,D3
1F46:  MOVFF  00,D2
1F4A:  CALL   1430
1F4E:  MOVFF  03,CA
1F52:  MOVFF  02,C9
1F56:  MOVFF  01,C8
1F5A:  MOVFF  00,C7
....................   res += (float32)(unsigned int16)y; 
1F5E:  MOVFF  C6,D1
1F62:  MOVFF  C5,D0
1F66:  MOVFF  C4,CF
1F6A:  MOVFF  C3,CE
1F6E:  RCALL  1D74
1F70:  MOVFF  02,D3
1F74:  MOVFF  01,D2
1F78:  CALL   0AB8
1F7C:  BCF    FD8.1
1F7E:  MOVFF  CA,D5
1F82:  MOVFF  C9,D4
1F86:  MOVFF  C8,D3
1F8A:  MOVFF  C7,D2
1F8E:  MOVFF  03,D9
1F92:  MOVFF  02,D8
1F96:  MOVFF  01,D7
1F9A:  MOVFF  00,D6
1F9E:  CALL   167C
1FA2:  MOVFF  03,CA
1FA6:  MOVFF  02,C9
1FAA:  MOVFF  01,C8
1FAE:  MOVFF  00,C7
....................  } 
....................  
....................  else 
1FB2:  BRA    1FC4
....................   res = y; 
1FB4:  MOVFF  C6,CA
1FB8:  MOVFF  C5,C9
1FBC:  MOVFF  C4,C8
1FC0:  MOVFF  C3,C7
....................  
....................  y = y - (float32)(unsigned int16)y; 
1FC4:  MOVFF  C6,D1
1FC8:  MOVFF  C5,D0
1FCC:  MOVFF  C4,CF
1FD0:  MOVFF  C3,CE
1FD4:  RCALL  1D74
1FD6:  MOVFF  02,D3
1FDA:  MOVFF  01,D2
1FDE:  CALL   0AB8
1FE2:  BSF    FD8.1
1FE4:  MOVFF  C6,D5
1FE8:  MOVFF  C5,D4
1FEC:  MOVFF  C4,D3
1FF0:  MOVFF  C3,D2
1FF4:  MOVFF  03,D9
1FF8:  MOVFF  02,D8
1FFC:  MOVFF  01,D7
2000:  MOVFF  00,D6
2004:  CALL   167C
2008:  MOVFF  03,C6
200C:  MOVFF  02,C5
2010:  MOVFF  01,C4
2014:  MOVFF  00,C3
....................  
....................  if (s) 
2018:  BTFSS  xCD.0
201A:  BRA    2022
....................   res = -res; 
201C:  MOVF   xC8,W
201E:  XORLW  80
2020:  MOVWF  xC8
....................  
....................  if (y != 0) 
2022:  MOVFF  C6,D1
2026:  MOVFF  C5,D0
202A:  MOVFF  C4,CF
202E:  MOVFF  C3,CE
2032:  CLRF   xD5
2034:  CLRF   xD4
2036:  CLRF   xD3
2038:  CLRF   xD2
203A:  CALL   0CCC
203E:  BZ    20B0
....................  { 
....................   if (s == 1 && n == 0) 
2040:  BTFSS  xCD.0
2042:  BRA    2078
2044:  MOVF   xC2,F
2046:  BNZ   2078
....................    res -= 1.0; 
2048:  BSF    FD8.1
204A:  MOVFF  CA,D5
204E:  MOVFF  C9,D4
2052:  MOVFF  C8,D3
2056:  MOVFF  C7,D2
205A:  CLRF   xD9
205C:  CLRF   xD8
205E:  CLRF   xD7
2060:  MOVLW  7F
2062:  MOVWF  xD6
2064:  CALL   167C
2068:  MOVFF  03,CA
206C:  MOVFF  02,C9
2070:  MOVFF  01,C8
2074:  MOVFF  00,C7
....................  
....................   if (s == 0 && n == 1) 
2078:  BTFSC  xCD.0
207A:  BRA    20B0
207C:  DECFSZ xC2,W
207E:  BRA    20B0
....................    res += 1.0; 
2080:  BCF    FD8.1
2082:  MOVFF  CA,D5
2086:  MOVFF  C9,D4
208A:  MOVFF  C8,D3
208E:  MOVFF  C7,D2
2092:  CLRF   xD9
2094:  CLRF   xD8
2096:  CLRF   xD7
2098:  MOVLW  7F
209A:  MOVWF  xD6
209C:  CALL   167C
20A0:  MOVFF  03,CA
20A4:  MOVFF  02,C9
20A8:  MOVFF  01,C8
20AC:  MOVFF  00,C7
....................  } 
....................  if (x == 0) 
20B0:  MOVFF  C1,D1
20B4:  MOVFF  C0,D0
20B8:  MOVFF  BF,CF
20BC:  MOVFF  BE,CE
20C0:  CLRF   xD5
20C2:  CLRF   xD4
20C4:  CLRF   xD3
20C6:  CLRF   xD2
20C8:  CALL   0CCC
20CC:  BNZ   20D6
....................     res = 0; 
20CE:  CLRF   xCA
20D0:  CLRF   xC9
20D2:  CLRF   xC8
20D4:  CLRF   xC7
....................  
....................  return (res); 
20D6:  MOVFF  C7,00
20DA:  MOVFF  C8,01
20DE:  MOVFF  C9,02
20E2:  MOVFF  CA,03
.................... } 
20E6:  GOTO   20FE (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
20EA:  MOVFF  BD,C1
20EE:  MOVFF  BC,C0
20F2:  MOVFF  BB,BF
20F6:  MOVFF  BA,BE
20FA:  CLRF   xC2
20FC:  BRA    1DAC
.................... } 
20FE:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A1) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=5,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
088C:  SWAPF  xD2,W
088E:  ANDLW  F0
0890:  MOVWF  00
0892:  MOVLW  0F
0894:  ANDWF  F83,W
0896:  IORWF  00,W
0898:  MOVWF  F83
....................       delay_cycles(30);//30 
089A:  MOVLW  09
089C:  MOVWF  00
089E:  DECFSZ 00,F
08A0:  BRA    089E
08A2:  BRA    08A4
....................       lcd.enable = 1; 
08A4:  BSF    F83.3
....................       delay_us(55);//55 
08A6:  MOVLW  49
08A8:  MOVWF  00
08AA:  DECFSZ 00,F
08AC:  BRA    08AA
....................       lcd.enable = 0; 
08AE:  BCF    F83.3
.................... } 
08B0:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
08B2:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
08B4:  MOVLW  01
08B6:  MOVWF  xD1
08B8:  RCALL  0864
....................       lcd.rs = address; 
08BA:  BTFSS  xCF.0
08BC:  BCF    F83.1
08BE:  BTFSC  xCF.0
08C0:  BSF    F83.1
....................       delay_cycles(30);//30 
08C2:  MOVLW  09
08C4:  MOVWF  00
08C6:  DECFSZ 00,F
08C8:  BRA    08C6
08CA:  BRA    08CC
....................       lcd.rw = 0; 
08CC:  BCF    F83.2
....................       delay_cycles(30);//30 
08CE:  MOVLW  09
08D0:  MOVWF  00
08D2:  DECFSZ 00,F
08D4:  BRA    08D2
08D6:  BRA    08D8
....................       lcd.enable = 0; 
08D8:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
08DA:  SWAPF  xD0,W
08DC:  MOVWF  xD1
08DE:  MOVLW  0F
08E0:  ANDWF  xD1,F
08E2:  MOVFF  D1,D2
08E6:  RCALL  088C
....................       lcd_send_nibble(n & 0xf); 
08E8:  MOVF   xD0,W
08EA:  ANDLW  0F
08EC:  MOVWF  xD1
08EE:  MOVWF  xD2
08F0:  RCALL  088C
.................... } 
08F2:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
08F4:  MOVLW  00
08F6:  MOVWF  F95
....................     lcd.rs = 0; 
08F8:  BCF    F83.1
....................     lcd.rw = 0; 
08FA:  BCF    F83.2
....................     lcd.enable = 0; 
08FC:  BCF    F83.3
....................     delay_ms(15); 
08FE:  MOVLW  0F
0900:  MOVWF  xD1
0902:  RCALL  0864
....................     for(i=1;i<=3;++i) { 
0904:  MOVLW  01
0906:  MOVWF  xBA
0908:  MOVF   xBA,W
090A:  SUBLW  03
090C:  BNC   091E
....................        lcd_send_nibble(3); 
090E:  MOVLW  03
0910:  MOVWF  xD2
0912:  RCALL  088C
....................        delay_ms(5); 
0914:  MOVLW  05
0916:  MOVWF  xD1
0918:  RCALL  0864
....................     } 
091A:  INCF   xBA,F
091C:  BRA    0908
....................     lcd_send_nibble(2); 
091E:  MOVLW  02
0920:  MOVWF  xD2
0922:  RCALL  088C
....................     for(i=0;i<=3;++i) 
0924:  CLRF   xBA
0926:  MOVF   xBA,W
0928:  SUBLW  03
092A:  BNC   094A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
092C:  CLRF   03
092E:  MOVF   xBA,W
0930:  MOVFF  FF2,BB
0934:  BCF    FF2.7
0936:  CALL   0096
093A:  BTFSC  xBB.7
093C:  BSF    FF2.7
093E:  MOVWF  xBB
0940:  CLRF   xCF
0942:  MOVWF  xD0
0944:  RCALL  08B2
0946:  INCF   xBA,F
0948:  BRA    0926
.................... } 
094A:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0972:  MOVLW  01
0974:  SUBWF  xCD,W
0976:  ADDLW  FC
0978:  BC    0998
097A:  ADDLW  04
097C:  GOTO   09A8
....................      case 1 : address=0x80;break; 
0980:  MOVLW  80
0982:  MOVWF  xCE
0984:  BRA    0998
....................      case 2 : address=0xc0;break; 
0986:  MOVLW  C0
0988:  MOVWF  xCE
098A:  BRA    0998
....................      case 3 : address=0x94;break; 
098C:  MOVLW  94
098E:  MOVWF  xCE
0990:  BRA    0998
....................      case 4 : address=0xd4;break; 
0992:  MOVLW  D4
0994:  MOVWF  xCE
0996:  BRA    0998
....................    } 
....................    address+=x-1; 
0998:  MOVLW  01
099A:  SUBWF  xCC,W
099C:  ADDWF  xCE,F
....................    lcd_send_byte(0,address); 
099E:  CLRF   xCF
09A0:  MOVFF  CE,D0
09A4:  RCALL  08B2
.................... } 
09A6:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
09D4:  MOVF   xCB,W
09D6:  SUBLW  F1
09D8:  BNZ   09DE
....................    { 
....................       c=238; 
09DA:  MOVLW  EE
09DC:  MOVWF  xCB
....................    } 
....................    if(c=='Ñ') 
09DE:  MOVF   xCB,W
09E0:  SUBLW  D1
09E2:  BNZ   09E8
....................    { 
....................       c=255; 
09E4:  MOVLW  FF
09E6:  MOVWF  xCB
....................    } 
....................     
....................    switch (c) { 
09E8:  MOVF   xCB,W
09EA:  XORLW  0C
09EC:  BZ    09F8
09EE:  XORLW  06
09F0:  BZ    0A0C
09F2:  XORLW  02
09F4:  BZ    0A1A
09F6:  BRA    0A24
....................      case '\f'   : lcd_send_byte(0,1); 
09F8:  CLRF   xCF
09FA:  MOVLW  01
09FC:  MOVWF  xD0
09FE:  RCALL  08B2
....................                    lcdline=1; 
0A00:  MOVLW  01
0A02:  MOVWF  xB9
....................                    delay_ms(2); 
0A04:  MOVLW  02
0A06:  MOVWF  xD1
0A08:  RCALL  0864
....................                                            break; 
0A0A:  BRA    0A30
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A0C:  INCF   xB9,F
0A0E:  MOVLW  01
0A10:  MOVWF  xCC
0A12:  MOVFF  B9,CD
0A16:  RCALL  0972
0A18:  BRA    0A30
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0A1A:  CLRF   xCF
0A1C:  MOVLW  10
0A1E:  MOVWF  xD0
0A20:  RCALL  08B2
0A22:  BRA    0A30
....................      default     : lcd_send_byte(1,c);     break; 
0A24:  MOVLW  01
0A26:  MOVWF  xCF
0A28:  MOVFF  CB,D0
0A2C:  RCALL  08B2
0A2E:  BRA    0A30
....................    } 
.................... } 
0A30:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <Funciones.h> 
.................... void VelocidadMotor(int8 Vel){ 
....................    if(Vel==6){ 
*
07E0:  MOVF   xBA,W
07E2:  SUBLW  06
07E4:  BNZ   07F0
....................       Motor_on; 
07E6:  BSF    F8B.2
07E8:  BCF    F94.2
....................       Motor2_on; 
07EA:  BSF    F8B.1
07EC:  BCF    F94.1
....................    }else if(Vel==5){ 
07EE:  BRA    0862
07F0:  MOVF   xBA,W
07F2:  SUBLW  05
07F4:  BNZ   0804
....................       Porcentaje=15; 
07F6:  MOVLW  0F
07F8:  MOVWF  xAF
....................       retardo=2000; 
07FA:  MOVLW  07
07FC:  MOVWF  xAB
07FE:  MOVLW  D0
0800:  MOVWF  xAA
....................    }else if(Vel==4){ 
0802:  BRA    0862
0804:  MOVF   xBA,W
0806:  SUBLW  04
0808:  BNZ   0818
....................       Porcentaje=25; 
080A:  MOVLW  19
080C:  MOVWF  xAF
....................       retardo=3000; 
080E:  MOVLW  0B
0810:  MOVWF  xAB
0812:  MOVLW  B8
0814:  MOVWF  xAA
....................    }else if(Vel==3){ 
0816:  BRA    0862
0818:  MOVF   xBA,W
081A:  SUBLW  03
081C:  BNZ   082C
....................       Porcentaje=35; 
081E:  MOVLW  23
0820:  MOVWF  xAF
....................       retardo=3600; 
0822:  MOVLW  0E
0824:  MOVWF  xAB
0826:  MOVLW  10
0828:  MOVWF  xAA
....................    }else if(Vel==2){ 
082A:  BRA    0862
082C:  MOVF   xBA,W
082E:  SUBLW  02
0830:  BNZ   0840
....................       Porcentaje=45; 
0832:  MOVLW  2D
0834:  MOVWF  xAF
....................       retardo=4300; 
0836:  MOVLW  10
0838:  MOVWF  xAB
083A:  MOVLW  CC
083C:  MOVWF  xAA
....................    }else if(Vel==1){ 
083E:  BRA    0862
0840:  DECFSZ xBA,W
0842:  BRA    0852
....................       Porcentaje=50; 
0844:  MOVLW  32
0846:  MOVWF  xAF
....................       retardo=5000; 
0848:  MOVLW  13
084A:  MOVWF  xAB
084C:  MOVLW  88
084E:  MOVWF  xAA
....................    }else if(Vel==0){ 
0850:  BRA    0862
0852:  MOVF   xBA,F
0854:  BNZ   0862
....................       Porcentaje=100; 
0856:  MOVLW  64
0858:  MOVWF  xAF
....................       Motor_off; 
085A:  BCF    F8B.2
085C:  BCF    F94.2
....................       Motor2_off; 
085E:  BCF    F8B.1
0860:  BCF    F94.1
....................    } 
.................... } 
0862:  RETLW  00
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
11E8:  DECFSZ xBB,W
11EA:  BRA    1202
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
11EC:  MOVLW  02
11EE:  MOVWF  xCC
11F0:  MOVFF  BC,CD
11F4:  CALL   0972
11F8:  MOVLW  B4
11FA:  MOVWF  FF6
11FC:  MOVLW  00
11FE:  MOVWF  FF7
1200:  RCALL  0A32
....................    if(x==2) 
1202:  MOVF   xBB,W
1204:  SUBLW  02
1206:  BNZ   121E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1208:  MOVLW  02
120A:  MOVWF  xCC
120C:  MOVFF  BC,CD
1210:  CALL   0972
1214:  MOVLW  C8
1216:  MOVWF  FF6
1218:  MOVLW  00
121A:  MOVWF  FF7
121C:  RCALL  0A32
....................    if(x==3) 
121E:  MOVF   xBB,W
1220:  SUBLW  03
1222:  BNZ   123C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1224:  MOVLW  02
1226:  MOVWF  xCC
1228:  MOVFF  BC,CD
122C:  CALL   0972
1230:  MOVLW  DC
1232:  MOVWF  FF6
1234:  MOVLW  00
1236:  MOVWF  FF7
1238:  CALL   0A32
....................    if(x==4) 
123C:  MOVF   xBB,W
123E:  SUBLW  04
1240:  BNZ   125A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1242:  MOVLW  02
1244:  MOVWF  xCC
1246:  MOVFF  BC,CD
124A:  CALL   0972
124E:  MOVLW  F0
1250:  MOVWF  FF6
1252:  MOVLW  00
1254:  MOVWF  FF7
1256:  CALL   0A32
....................     
....................    if(x==5) 
125A:  MOVF   xBB,W
125C:  SUBLW  05
125E:  BNZ   1298
....................    {if(estadoalarma==0) 
1260:  BTFSC  17.4
1262:  BRA    127C
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1264:  MOVLW  02
1266:  MOVWF  xCC
1268:  MOVFF  BC,CD
126C:  CALL   0972
1270:  MOVLW  04
1272:  MOVWF  FF6
1274:  MOVLW  01
1276:  MOVWF  FF7
1278:  CALL   0A32
....................    if(estadoalarma==1) 
127C:  BTFSS  17.4
127E:  BRA    1298
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1280:  MOVLW  02
1282:  MOVWF  xCC
1284:  MOVFF  BC,CD
1288:  CALL   0972
128C:  MOVLW  18
128E:  MOVWF  FF6
1290:  MOVLW  01
1292:  MOVWF  FF7
1294:  CALL   0A32
....................    } 
....................     
....................    if(x==6) 
1298:  MOVF   xBB,W
129A:  SUBLW  06
129C:  BNZ   12B6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
129E:  MOVLW  02
12A0:  MOVWF  xCC
12A2:  MOVFF  BC,CD
12A6:  CALL   0972
12AA:  MOVLW  2C
12AC:  MOVWF  FF6
12AE:  MOVLW  01
12B0:  MOVWF  FF7
12B2:  CALL   0A32
.................... } 
12B6:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
13DA:  RLCF   xCB,W
13DC:  MOVWF  00
13DE:  RLCF   00,F
13E0:  MOVLW  FC
13E2:  ANDWF  00,F
13E4:  MOVFF  00,01
13E8:  MOVF   FC2,W
13EA:  ANDLW  C3
13EC:  IORWF  00,W
13EE:  MOVWF  FC2
13F0:  MOVLW  0A
13F2:  MOVWF  xD1
13F4:  CALL   0864
13F8:  BSF    FC2.1
13FA:  BTFSC  FC2.1
13FC:  BRA    13FA
13FE:  MOVFF  FC4,03
1402:  MOVFF  FC3,D2
1406:  MOVFF  FC4,D3
140A:  CALL   0AB8
140E:  MOVFF  03,CF
1412:  MOVFF  02,CE
1416:  MOVFF  01,CD
141A:  MOVFF  00,CC
141E:  MOVFF  CC,00
1422:  MOVFF  CD,01
1426:  MOVFF  CE,02
142A:  MOVFF  CF,03
.................... } 
142E:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
18E6:  CLRF   xBE
18E8:  CLRF   xBD
18EA:  CLRF   xBC
18EC:  CLRF   xBB
18EE:  CLRF   xC2
18F0:  CLRF   xC1
18F2:  CLRF   xC0
18F4:  CLRF   xBF
18F6:  CLRF   xC6
18F8:  CLRF   xC5
18FA:  CLRF   xC4
18FC:  CLRF   xC3
18FE:  CLRF   xCA
1900:  CLRF   xC9
1902:  CLRF   xC8
1904:  CLRF   xC7
....................    
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................     
....................    V1=sensores(0);  
1906:  CLRF   xCB
1908:  RCALL  13DA
190A:  MOVFF  03,97
190E:  MOVFF  02,96
1912:  MOVFF  01,95
1916:  MOVFF  00,94
....................    VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
191A:  MOVFF  97,D1
191E:  MOVFF  96,D0
1922:  MOVFF  95,CF
1926:  MOVFF  94,CE
192A:  CLRF   xD5
192C:  CLRF   xD4
192E:  MOVLW  20
1930:  MOVWF  xD3
1932:  MOVLW  81
1934:  MOVWF  xD2
1936:  RCALL  1430
1938:  MOVFF  00,CB
193C:  MOVFF  01,CC
1940:  MOVFF  02,CD
1944:  MOVFF  03,CE
1948:  MOVFF  03,D2
194C:  MOVFF  02,D1
1950:  MOVFF  01,D0
1954:  MOVFF  00,CF
1958:  CLRF   xD6
195A:  MOVLW  C0
195C:  MOVWF  xD5
195E:  MOVLW  7F
1960:  MOVWF  xD4
1962:  MOVLW  88
1964:  MOVWF  xD3
1966:  RCALL  1522
1968:  MOVFF  03,C6
196C:  MOVFF  02,C5
1970:  MOVFF  01,C4
1974:  MOVFF  00,C3
....................    G2=G; 
1978:  MOVFF  A7,CA
197C:  MOVFF  A6,C9
1980:  MOVFF  A5,C8
1984:  MOVFF  A4,C7
....................    VG = (G2*5.0)/1023.0; 
1988:  MOVFF  CA,D1
198C:  MOVFF  C9,D0
1990:  MOVFF  C8,CF
1994:  MOVFF  C7,CE
1998:  CLRF   xD5
199A:  CLRF   xD4
199C:  MOVLW  20
199E:  MOVWF  xD3
19A0:  MOVLW  81
19A2:  MOVWF  xD2
19A4:  RCALL  1430
19A6:  MOVFF  00,CB
19AA:  MOVFF  01,CC
19AE:  MOVFF  02,CD
19B2:  MOVFF  03,CE
19B6:  MOVFF  03,D2
19BA:  MOVFF  02,D1
19BE:  MOVFF  01,D0
19C2:  MOVFF  00,CF
19C6:  CLRF   xD6
19C8:  MOVLW  C0
19CA:  MOVWF  xD5
19CC:  MOVLW  7F
19CE:  MOVWF  xD4
19D0:  MOVLW  88
19D2:  MOVWF  xD3
19D4:  RCALL  1522
19D6:  MOVFF  03,C2
19DA:  MOVFF  02,C1
19DE:  MOVFF  01,C0
19E2:  MOVFF  00,BF
....................    Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
19E6:  BSF    FD8.1
19E8:  MOVFF  C6,D5
19EC:  MOVFF  C5,D4
19F0:  MOVFF  C4,D3
19F4:  MOVFF  C3,D2
19F8:  MOVFF  C2,D9
19FC:  MOVFF  C1,D8
1A00:  MOVFF  C0,D7
1A04:  MOVFF  BF,D6
1A08:  RCALL  167C
1A0A:  MOVFF  03,9B
1A0E:  MOVFF  02,9A
1A12:  MOVFF  01,99
1A16:  MOVFF  00,98
....................  
....................    if(Presion<0.0) 
1A1A:  MOVFF  9B,D1
1A1E:  MOVFF  9A,D0
1A22:  MOVFF  99,CF
1A26:  MOVFF  98,CE
1A2A:  CLRF   xD5
1A2C:  CLRF   xD4
1A2E:  CLRF   xD3
1A30:  CLRF   xD2
1A32:  CALL   0CCC
1A36:  BNC   1A40
....................    { 
....................       Presion=0.0; 
1A38:  CLRF   x9B
1A3A:  CLRF   x9A
1A3C:  CLRF   x99
1A3E:  CLRF   x98
....................    } 
....................  
....................    if(r>media-1) 
1A40:  MOVLW  01
1A42:  SUBWF  xBA,W
1A44:  SUBWF  2B,W
1A46:  BZ    1A4C
1A48:  BNC   1A4C
....................    {r=0;} 
1A4A:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
1A4C:  MOVF   2B,W
1A4E:  MULLW  04
1A50:  MOVF   FF3,W
1A52:  CLRF   03
1A54:  ADDLW  44
1A56:  MOVWF  FE9
1A58:  MOVLW  00
1A5A:  ADDWFC 03,W
1A5C:  MOVWF  FEA
1A5E:  MOVFF  98,FEF
1A62:  MOVFF  99,FEC
1A66:  MOVFF  9A,FEC
1A6A:  MOVFF  9B,FEC
1A6E:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1A70:  CLRF   2C
1A72:  MOVLW  01
1A74:  SUBWF  xBA,W
1A76:  SUBWF  2C,W
1A78:  BZ    1A7C
1A7A:  BC    1AE6
....................    { 
....................       promediopresion+=PromPresion[q]; 
1A7C:  MOVF   2C,W
1A7E:  MULLW  04
1A80:  MOVF   FF3,W
1A82:  CLRF   03
1A84:  ADDLW  44
1A86:  MOVWF  FE9
1A88:  MOVLW  00
1A8A:  ADDWFC 03,W
1A8C:  MOVWF  FEA
1A8E:  MOVFF  FEF,00
1A92:  MOVFF  FEC,01
1A96:  MOVFF  FEC,02
1A9A:  MOVFF  FEC,03
1A9E:  MOVFF  FEA,CC
1AA2:  MOVFF  FE9,CB
1AA6:  BCF    FD8.1
1AA8:  MOVFF  BE,D5
1AAC:  MOVFF  BD,D4
1AB0:  MOVFF  BC,D3
1AB4:  MOVFF  BB,D2
1AB8:  MOVFF  03,D9
1ABC:  MOVFF  02,D8
1AC0:  MOVFF  01,D7
1AC4:  MOVFF  00,D6
1AC8:  RCALL  167C
1ACA:  MOVFF  CC,FEA
1ACE:  MOVFF  CB,FE9
1AD2:  MOVFF  03,BE
1AD6:  MOVFF  02,BD
1ADA:  MOVFF  01,BC
1ADE:  MOVFF  00,BB
....................    }  
1AE2:  INCF   2C,F
1AE4:  BRA    1A72
....................    promediopresion=promediopresion/media;    
1AE6:  CLRF   xD3
1AE8:  MOVFF  BA,D2
1AEC:  CALL   0AB8
1AF0:  MOVFF  BE,D2
1AF4:  MOVFF  BD,D1
1AF8:  MOVFF  BC,D0
1AFC:  MOVFF  BB,CF
1B00:  MOVFF  03,D6
1B04:  MOVFF  02,D5
1B08:  MOVFF  01,D4
1B0C:  MOVFF  00,D3
1B10:  RCALL  1522
1B12:  MOVFF  03,BE
1B16:  MOVFF  02,BD
1B1A:  MOVFF  01,BC
1B1E:  MOVFF  00,BB
....................     
....................    return promediopresion; 
1B22:  MOVFF  BB,00
1B26:  MOVFF  BC,01
1B2A:  MOVFF  BD,02
1B2E:  MOVFF  BE,03
.................... } 
1B32:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    lcd_init(); 
*
094C:  RCALL  08F4
....................    set_tris_a(0XFF); 
094E:  MOVLW  FF
0950:  MOVWF  F92
....................    set_tris_e(0XFF); 
0952:  MOVWF  F96
....................    enable_interrupts(INT_EXT_L2H); 
0954:  BSF    FF2.4
0956:  BSF    FF1.6
....................    setup_adc_ports(AN0); 
0958:  MOVF   FC1,W
095A:  ANDLW  C0
095C:  IORLW  0E
095E:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0960:  BCF    FC0.0
0962:  BSF    FC0.1
0964:  BCF    FC0.2
0966:  BSF    FC0.7
0968:  BSF    FC2.0
....................    enable_interrupts(global); 
096A:  MOVLW  C0
096C:  IORWF  FF2,F
.................... } 
096E:  GOTO   229E (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
0A52:  MOVLW  01
0A54:  MOVWF  xCC
0A56:  MOVWF  xCD
0A58:  RCALL  0972
....................    printf(lcd_putc,"       MODULO       "); 
0A5A:  MOVLW  40
0A5C:  MOVWF  FF6
0A5E:  MOVLW  01
0A60:  MOVWF  FF7
0A62:  RCALL  0A32
....................    lcd_gotoxy(1,2); 
0A64:  MOVLW  01
0A66:  MOVWF  xCC
0A68:  MOVLW  02
0A6A:  MOVWF  xCD
0A6C:  RCALL  0972
....................    printf(lcd_putc,"   FLUJO LAMINAR    "); 
0A6E:  MOVLW  56
0A70:  MOVWF  FF6
0A72:  MOVLW  01
0A74:  MOVWF  FF7
0A76:  RCALL  0A32
....................    lcd_gotoxy(1,3); 
0A78:  MOVLW  01
0A7A:  MOVWF  xCC
0A7C:  MOVLW  03
0A7E:  MOVWF  xCD
0A80:  RCALL  0972
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0A82:  MOVLW  6C
0A84:  MOVWF  FF6
0A86:  MOVLW  01
0A88:  MOVWF  FF7
0A8A:  RCALL  0A32
....................    lcd_gotoxy(1,4); 
0A8C:  MOVLW  01
0A8E:  MOVWF  xCC
0A90:  MOVLW  04
0A92:  MOVWF  xCD
0A94:  RCALL  0972
....................    printf(lcd_putc,"  REF:JPCFLVMD111X  "); 
0A96:  MOVLW  82
0A98:  MOVWF  FF6
0A9A:  MOVLW  01
0A9C:  MOVWF  FF7
0A9E:  RCALL  0A32
....................    delay_ms(2000); 
0AA0:  MOVLW  08
0AA2:  MOVWF  xBA
0AA4:  MOVLW  FA
0AA6:  MOVWF  xD1
0AA8:  RCALL  0864
0AAA:  DECFSZ xBA,F
0AAC:  BRA    0AA4
....................    printf(lcd_putc,"\f"); 
0AAE:  MOVLW  0C
0AB0:  MOVWF  xCB
0AB2:  RCALL  09D4
.................... } 
0AB4:  GOTO   22A2 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0AEE:  MOVFF  FF2,BA
0AF2:  BCF    FF2.7
0AF4:  CLRF   FA9
0AF6:  BCF    FA6.6
0AF8:  BCF    FA6.7
0AFA:  BSF    FA6.0
0AFC:  MOVF   FA8,W
0AFE:  BTFSC  xBA.7
0B00:  BSF    FF2.7
0B02:  MOVWF  39
....................    delay_ms(20);  
0B04:  MOVLW  14
0B06:  MOVWF  xD1
0B08:  RCALL  0864
....................    contrasena[1]=read_eeprom(1); 
0B0A:  MOVFF  FF2,BA
0B0E:  BCF    FF2.7
0B10:  MOVLW  01
0B12:  MOVWF  FA9
0B14:  BCF    FA6.6
0B16:  BCF    FA6.7
0B18:  BSF    FA6.0
0B1A:  MOVF   FA8,W
0B1C:  BTFSC  xBA.7
0B1E:  BSF    FF2.7
0B20:  MOVWF  3A
....................    delay_ms(20); 
0B22:  MOVLW  14
0B24:  MOVWF  xD1
0B26:  RCALL  0864
....................    contrasena[2]=read_eeprom(2); 
0B28:  MOVFF  FF2,BA
0B2C:  BCF    FF2.7
0B2E:  MOVLW  02
0B30:  MOVWF  FA9
0B32:  BCF    FA6.6
0B34:  BCF    FA6.7
0B36:  BSF    FA6.0
0B38:  MOVF   FA8,W
0B3A:  BTFSC  xBA.7
0B3C:  BSF    FF2.7
0B3E:  MOVWF  3B
....................    delay_ms(20);  
0B40:  MOVLW  14
0B42:  MOVWF  xD1
0B44:  RCALL  0864
....................    contrasena[3]=read_eeprom(3); 
0B46:  MOVFF  FF2,BA
0B4A:  BCF    FF2.7
0B4C:  MOVLW  03
0B4E:  MOVWF  FA9
0B50:  BCF    FA6.6
0B52:  BCF    FA6.7
0B54:  BSF    FA6.0
0B56:  MOVF   FA8,W
0B58:  BTFSC  xBA.7
0B5A:  BSF    FF2.7
0B5C:  MOVWF  3C
....................    delay_ms(20); 
0B5E:  MOVLW  14
0B60:  MOVWF  xD1
0B62:  RCALL  0864
....................    estadoalarma=read_eeprom(4); 
0B64:  MOVFF  FF2,BA
0B68:  BCF    FF2.7
0B6A:  MOVLW  04
0B6C:  MOVWF  FA9
0B6E:  BCF    FA6.6
0B70:  BCF    FA6.7
0B72:  BSF    FA6.0
0B74:  MOVF   FA8,W
0B76:  BTFSC  xBA.7
0B78:  BSF    FF2.7
0B7A:  MOVWF  01
0B7C:  BCF    17.4
0B7E:  BTFSC  01.0
0B80:  BSF    17.4
....................    delay_ms(20); 
0B82:  MOVLW  14
0B84:  MOVWF  xD1
0B86:  RCALL  0864
....................    tempo_minutos=read_eeprom(5); 
0B88:  MOVFF  FF2,BA
0B8C:  BCF    FF2.7
0B8E:  MOVLW  05
0B90:  MOVWF  FA9
0B92:  BCF    FA6.6
0B94:  BCF    FA6.7
0B96:  BSF    FA6.0
0B98:  MOVF   FA8,W
0B9A:  BTFSC  xBA.7
0B9C:  BSF    FF2.7
0B9E:  MOVWF  27
....................    delay_ms(20); 
0BA0:  MOVLW  14
0BA2:  MOVWF  xD1
0BA4:  RCALL  0864
....................    tempo_segundos=read_eeprom(6); 
0BA6:  MOVFF  FF2,BA
0BAA:  BCF    FF2.7
0BAC:  MOVLW  06
0BAE:  MOVWF  FA9
0BB0:  BCF    FA6.6
0BB2:  BCF    FA6.7
0BB4:  BSF    FA6.0
0BB6:  MOVF   FA8,W
0BB8:  BTFSC  xBA.7
0BBA:  BSF    FF2.7
0BBC:  MOVWF  28
....................    delay_ms(20); 
0BBE:  MOVLW  14
0BC0:  MOVWF  xD1
0BC2:  RCALL  0864
....................    segundos=read_eeprom(7); 
0BC4:  MOVFF  FF2,BA
0BC8:  BCF    FF2.7
0BCA:  MOVLW  07
0BCC:  MOVWF  FA9
0BCE:  BCF    FA6.6
0BD0:  BCF    FA6.7
0BD2:  BSF    FA6.0
0BD4:  MOVF   FA8,W
0BD6:  BTFSC  xBA.7
0BD8:  BSF    FF2.7
0BDA:  MOVWF  21
....................    delay_ms(20); 
0BDC:  MOVLW  14
0BDE:  MOVWF  xD1
0BE0:  RCALL  0864
....................    minutos=read_eeprom(8); 
0BE2:  MOVFF  FF2,BA
0BE6:  BCF    FF2.7
0BE8:  MOVLW  08
0BEA:  MOVWF  FA9
0BEC:  BCF    FA6.6
0BEE:  BCF    FA6.7
0BF0:  BSF    FA6.0
0BF2:  MOVF   FA8,W
0BF4:  BTFSC  xBA.7
0BF6:  BSF    FF2.7
0BF8:  MOVWF  22
....................    delay_ms(20); 
0BFA:  MOVLW  14
0BFC:  MOVWF  xD1
0BFE:  RCALL  0864
....................    horasL=read_eeprom(9); 
0C00:  MOVFF  FF2,BA
0C04:  BCF    FF2.7
0C06:  MOVLW  09
0C08:  MOVWF  FA9
0C0A:  BCF    FA6.6
0C0C:  BCF    FA6.7
0C0E:  BSF    FA6.0
0C10:  MOVF   FA8,W
0C12:  BTFSC  xBA.7
0C14:  BSF    FF2.7
0C16:  MOVWF  23
....................    delay_ms(20); 
0C18:  MOVLW  14
0C1A:  MOVWF  xD1
0C1C:  RCALL  0864
....................    horasH=read_eeprom(10); 
0C1E:  MOVFF  FF2,BA
0C22:  BCF    FF2.7
0C24:  MOVLW  0A
0C26:  MOVWF  FA9
0C28:  BCF    FA6.6
0C2A:  BCF    FA6.7
0C2C:  BSF    FA6.0
0C2E:  MOVF   FA8,W
0C30:  BTFSC  xBA.7
0C32:  BSF    FF2.7
0C34:  MOVWF  24
....................    delay_ms(20); 
0C36:  MOVLW  14
0C38:  MOVWF  xD1
0C3A:  RCALL  0864
....................    G_l=read_eeprom(11); 
0C3C:  MOVFF  FF2,BA
0C40:  BCF    FF2.7
0C42:  MOVLW  0B
0C44:  MOVWF  FA9
0C46:  BCF    FA6.6
0C48:  BCF    FA6.7
0C4A:  BSF    FA6.0
0C4C:  MOVF   FA8,W
0C4E:  BTFSC  xBA.7
0C50:  BSF    FF2.7
0C52:  MOVWF  25
....................    delay_ms(20); 
0C54:  MOVLW  14
0C56:  MOVWF  xD1
0C58:  RCALL  0864
....................    G_h=read_eeprom(12); 
0C5A:  MOVFF  FF2,BA
0C5E:  BCF    FF2.7
0C60:  MOVLW  0C
0C62:  MOVWF  FA9
0C64:  BCF    FA6.6
0C66:  BCF    FA6.7
0C68:  BSF    FA6.0
0C6A:  MOVF   FA8,W
0C6C:  BTFSC  xBA.7
0C6E:  BSF    FF2.7
0C70:  MOVWF  26
....................    delay_ms(20); 
0C72:  MOVLW  14
0C74:  MOVWF  xD1
0C76:  RCALL  0864
....................    VelMotor=read_eeprom(13); 
0C78:  MOVFF  FF2,BA
0C7C:  BCF    FF2.7
0C7E:  MOVLW  0D
0C80:  MOVWF  FA9
0C82:  BCF    FA6.6
0C84:  BCF    FA6.7
0C86:  BSF    FA6.0
0C88:  MOVF   FA8,W
0C8A:  BTFSC  xBA.7
0C8C:  BSF    FF2.7
0C8E:  MOVWF  xB0
....................    delay_ms(20); 
0C90:  MOVLW  14
0C92:  MOVWF  xD1
0C94:  RCALL  0864
....................    G16=make16(G_h,G_l); 
0C96:  MOVFF  26,43
0C9A:  MOVFF  25,42
....................    G=G16; 
0C9E:  MOVFF  43,D3
0CA2:  MOVFF  42,D2
0CA6:  RCALL  0AB8
0CA8:  MOVFF  03,A7
0CAC:  MOVFF  02,A6
0CB0:  MOVFF  01,A5
0CB4:  MOVFF  00,A4
....................    horas=make16(horasH,horasL); 
0CB8:  MOVFF  24,41
0CBC:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0CC0:  MOVFF  27,29
0CC4:  MOVFF  28,2A
.................... } 
0CC8:  GOTO   22A6 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0D42:  BTFSC  39.7
0D44:  BRA    0D4C
0D46:  MOVF   39,W
0D48:  SUBLW  09
0D4A:  BNC   0D52
0D4C:  BTFSC  39.7
0D4E:  BRA    0D52
0D50:  BRA    0D82
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0D52:  CLRF   39
0D54:  CLRF   FA9
0D56:  CLRF   FA8
0D58:  BCF    FA6.6
0D5A:  BCF    FA6.7
0D5C:  BSF    FA6.2
0D5E:  MOVF   FF2,W
0D60:  MOVWF  00
0D62:  BCF    FF2.7
0D64:  MOVLB  F
0D66:  MOVLW  55
0D68:  MOVWF  FA7
0D6A:  MOVLW  AA
0D6C:  MOVWF  FA7
0D6E:  BSF    FA6.1
0D70:  BTFSC  FA6.1
0D72:  BRA    0D70
0D74:  BCF    FA6.2
0D76:  MOVF   00,W
0D78:  IORWF  FF2,F
0D7A:  MOVLW  14
0D7C:  MOVLB  0
0D7E:  MOVWF  xD1
0D80:  RCALL  0864
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0D82:  BTFSC  3A.7
0D84:  BRA    0D8C
0D86:  MOVF   3A,W
0D88:  SUBLW  09
0D8A:  BNC   0D92
0D8C:  BTFSC  3A.7
0D8E:  BRA    0D92
0D90:  BRA    0DC4
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0D92:  CLRF   3A
0D94:  MOVLW  01
0D96:  MOVWF  FA9
0D98:  CLRF   FA8
0D9A:  BCF    FA6.6
0D9C:  BCF    FA6.7
0D9E:  BSF    FA6.2
0DA0:  MOVF   FF2,W
0DA2:  MOVWF  00
0DA4:  BCF    FF2.7
0DA6:  MOVLB  F
0DA8:  MOVLW  55
0DAA:  MOVWF  FA7
0DAC:  MOVLW  AA
0DAE:  MOVWF  FA7
0DB0:  BSF    FA6.1
0DB2:  BTFSC  FA6.1
0DB4:  BRA    0DB2
0DB6:  BCF    FA6.2
0DB8:  MOVF   00,W
0DBA:  IORWF  FF2,F
0DBC:  MOVLW  14
0DBE:  MOVLB  0
0DC0:  MOVWF  xD1
0DC2:  RCALL  0864
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0DC4:  BTFSC  3B.7
0DC6:  BRA    0DCE
0DC8:  MOVF   3B,W
0DCA:  SUBLW  09
0DCC:  BNC   0DD4
0DCE:  BTFSC  3B.7
0DD0:  BRA    0DD4
0DD2:  BRA    0E06
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0DD4:  CLRF   3B
0DD6:  MOVLW  02
0DD8:  MOVWF  FA9
0DDA:  CLRF   FA8
0DDC:  BCF    FA6.6
0DDE:  BCF    FA6.7
0DE0:  BSF    FA6.2
0DE2:  MOVF   FF2,W
0DE4:  MOVWF  00
0DE6:  BCF    FF2.7
0DE8:  MOVLB  F
0DEA:  MOVLW  55
0DEC:  MOVWF  FA7
0DEE:  MOVLW  AA
0DF0:  MOVWF  FA7
0DF2:  BSF    FA6.1
0DF4:  BTFSC  FA6.1
0DF6:  BRA    0DF4
0DF8:  BCF    FA6.2
0DFA:  MOVF   00,W
0DFC:  IORWF  FF2,F
0DFE:  MOVLW  14
0E00:  MOVLB  0
0E02:  MOVWF  xD1
0E04:  RCALL  0864
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0E06:  BTFSC  3C.7
0E08:  BRA    0E10
0E0A:  MOVF   3C,W
0E0C:  SUBLW  09
0E0E:  BNC   0E16
0E10:  BTFSC  3C.7
0E12:  BRA    0E16
0E14:  BRA    0E48
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0E16:  CLRF   3C
0E18:  MOVLW  03
0E1A:  MOVWF  FA9
0E1C:  CLRF   FA8
0E1E:  BCF    FA6.6
0E20:  BCF    FA6.7
0E22:  BSF    FA6.2
0E24:  MOVF   FF2,W
0E26:  MOVWF  00
0E28:  BCF    FF2.7
0E2A:  MOVLB  F
0E2C:  MOVLW  55
0E2E:  MOVWF  FA7
0E30:  MOVLW  AA
0E32:  MOVWF  FA7
0E34:  BSF    FA6.1
0E36:  BTFSC  FA6.1
0E38:  BRA    0E36
0E3A:  BCF    FA6.2
0E3C:  MOVF   00,W
0E3E:  IORWF  FF2,F
0E40:  MOVLW  14
0E42:  MOVLB  0
0E44:  MOVWF  xD1
0E46:  RCALL  0864
....................    } 
....................    if(estadoalarma>1){ 
0E48:  MOVLW  00
0E4A:  BTFSC  17.4
0E4C:  MOVLW  01
0E4E:  SUBLW  01
0E50:  BC    0E86
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0E52:  BSF    17.4
0E54:  MOVLW  04
0E56:  MOVWF  FA9
0E58:  MOVLW  01
0E5A:  MOVWF  FA8
0E5C:  BCF    FA6.6
0E5E:  BCF    FA6.7
0E60:  BSF    FA6.2
0E62:  MOVF   FF2,W
0E64:  MOVWF  00
0E66:  BCF    FF2.7
0E68:  MOVLB  F
0E6A:  MOVLW  55
0E6C:  MOVWF  FA7
0E6E:  MOVLW  AA
0E70:  MOVWF  FA7
0E72:  BSF    FA6.1
0E74:  BTFSC  FA6.1
0E76:  BRA    0E74
0E78:  BCF    FA6.2
0E7A:  MOVF   00,W
0E7C:  IORWF  FF2,F
0E7E:  MOVLW  14
0E80:  MOVLB  0
0E82:  MOVWF  xD1
0E84:  RCALL  0864
....................    } 
....................    if(tempo_minutos>200){ 
0E86:  MOVF   27,W
0E88:  SUBLW  C8
0E8A:  BC    0EC2
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
0E8C:  MOVLW  14
0E8E:  MOVWF  27
0E90:  MOVLW  05
0E92:  MOVWF  FA9
0E94:  MOVLW  14
0E96:  MOVWF  FA8
0E98:  BCF    FA6.6
0E9A:  BCF    FA6.7
0E9C:  BSF    FA6.2
0E9E:  MOVF   FF2,W
0EA0:  MOVWF  00
0EA2:  BCF    FF2.7
0EA4:  MOVLB  F
0EA6:  MOVLW  55
0EA8:  MOVWF  FA7
0EAA:  MOVLW  AA
0EAC:  MOVWF  FA7
0EAE:  BSF    FA6.1
0EB0:  BTFSC  FA6.1
0EB2:  BRA    0EB0
0EB4:  BCF    FA6.2
0EB6:  MOVF   00,W
0EB8:  IORWF  FF2,F
0EBA:  MOVLW  14
0EBC:  MOVLB  0
0EBE:  MOVWF  xD1
0EC0:  RCALL  0864
....................    } 
....................    if(tempo_segundos>59){ 
0EC2:  MOVF   28,W
0EC4:  SUBLW  3B
0EC6:  BC    0EFA
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0EC8:  CLRF   28
0ECA:  MOVLW  06
0ECC:  MOVWF  FA9
0ECE:  CLRF   FA8
0ED0:  BCF    FA6.6
0ED2:  BCF    FA6.7
0ED4:  BSF    FA6.2
0ED6:  MOVF   FF2,W
0ED8:  MOVWF  00
0EDA:  BCF    FF2.7
0EDC:  MOVLB  F
0EDE:  MOVLW  55
0EE0:  MOVWF  FA7
0EE2:  MOVLW  AA
0EE4:  MOVWF  FA7
0EE6:  BSF    FA6.1
0EE8:  BTFSC  FA6.1
0EEA:  BRA    0EE8
0EEC:  BCF    FA6.2
0EEE:  MOVF   00,W
0EF0:  IORWF  FF2,F
0EF2:  MOVLW  14
0EF4:  MOVLB  0
0EF6:  MOVWF  xD1
0EF8:  RCALL  0864
....................    } 
....................    if(segundos>60){ 
0EFA:  MOVF   21,W
0EFC:  SUBLW  3C
0EFE:  BC    0F32
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0F00:  CLRF   21
0F02:  MOVLW  07
0F04:  MOVWF  FA9
0F06:  CLRF   FA8
0F08:  BCF    FA6.6
0F0A:  BCF    FA6.7
0F0C:  BSF    FA6.2
0F0E:  MOVF   FF2,W
0F10:  MOVWF  00
0F12:  BCF    FF2.7
0F14:  MOVLB  F
0F16:  MOVLW  55
0F18:  MOVWF  FA7
0F1A:  MOVLW  AA
0F1C:  MOVWF  FA7
0F1E:  BSF    FA6.1
0F20:  BTFSC  FA6.1
0F22:  BRA    0F20
0F24:  BCF    FA6.2
0F26:  MOVF   00,W
0F28:  IORWF  FF2,F
0F2A:  MOVLW  14
0F2C:  MOVLB  0
0F2E:  MOVWF  xD1
0F30:  RCALL  0864
....................    } 
....................    if(minutos>60){ 
0F32:  MOVF   22,W
0F34:  SUBLW  3C
0F36:  BC    0F6A
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0F38:  CLRF   22
0F3A:  MOVLW  08
0F3C:  MOVWF  FA9
0F3E:  CLRF   FA8
0F40:  BCF    FA6.6
0F42:  BCF    FA6.7
0F44:  BSF    FA6.2
0F46:  MOVF   FF2,W
0F48:  MOVWF  00
0F4A:  BCF    FF2.7
0F4C:  MOVLB  F
0F4E:  MOVLW  55
0F50:  MOVWF  FA7
0F52:  MOVLW  AA
0F54:  MOVWF  FA7
0F56:  BSF    FA6.1
0F58:  BTFSC  FA6.1
0F5A:  BRA    0F58
0F5C:  BCF    FA6.2
0F5E:  MOVF   00,W
0F60:  IORWF  FF2,F
0F62:  MOVLW  14
0F64:  MOVLB  0
0F66:  MOVWF  xD1
0F68:  RCALL  0864
....................    } 
....................    if(horas>10000){ 
0F6A:  MOVF   41,W
0F6C:  SUBLW  26
0F6E:  BC    0FE0
0F70:  XORLW  FF
0F72:  BNZ   0F7A
0F74:  MOVF   40,W
0F76:  SUBLW  10
0F78:  BC    0FE0
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0F7A:  CLRF   41
0F7C:  CLRF   40
0F7E:  MOVLW  09
0F80:  MOVWF  FA9
0F82:  MOVLW  0A
0F84:  MOVWF  FA8
0F86:  BCF    FA6.6
0F88:  BCF    FA6.7
0F8A:  BSF    FA6.2
0F8C:  MOVF   FF2,W
0F8E:  MOVWF  00
0F90:  BCF    FF2.7
0F92:  MOVLB  F
0F94:  MOVLW  55
0F96:  MOVWF  FA7
0F98:  MOVLW  AA
0F9A:  MOVWF  FA7
0F9C:  BSF    FA6.1
0F9E:  BTFSC  FA6.1
0FA0:  BRA    0F9E
0FA2:  BCF    FA6.2
0FA4:  MOVF   00,W
0FA6:  IORWF  FF2,F
0FA8:  MOVLW  14
0FAA:  MOVLB  0
0FAC:  MOVWF  xD1
0FAE:  RCALL  0864
0FB0:  MOVLW  0A
0FB2:  MOVWF  FA9
0FB4:  CLRF   FA8
0FB6:  BCF    FA6.6
0FB8:  BCF    FA6.7
0FBA:  BSF    FA6.2
0FBC:  MOVF   FF2,W
0FBE:  MOVWF  00
0FC0:  BCF    FF2.7
0FC2:  MOVLB  F
0FC4:  MOVLW  55
0FC6:  MOVWF  FA7
0FC8:  MOVLW  AA
0FCA:  MOVWF  FA7
0FCC:  BSF    FA6.1
0FCE:  BTFSC  FA6.1
0FD0:  BRA    0FCE
0FD2:  BCF    FA6.2
0FD4:  MOVF   00,W
0FD6:  IORWF  FF2,F
0FD8:  MOVLW  14
0FDA:  MOVLB  0
0FDC:  MOVWF  xD1
0FDE:  RCALL  0864
....................    } 
....................    if(G<450 || G>600){ 
0FE0:  MOVFF  A7,D1
0FE4:  MOVFF  A6,D0
0FE8:  MOVFF  A5,CF
0FEC:  MOVFF  A4,CE
0FF0:  CLRF   xD5
0FF2:  CLRF   xD4
0FF4:  MOVLW  61
0FF6:  MOVWF  xD3
0FF8:  MOVLW  87
0FFA:  MOVWF  xD2
0FFC:  RCALL  0CCC
0FFE:  BC    1020
1000:  CLRF   xD1
1002:  CLRF   xD0
1004:  MOVLW  16
1006:  MOVWF  xCF
1008:  MOVLW  88
100A:  MOVWF  xCE
100C:  MOVFF  A7,D5
1010:  MOVFF  A6,D4
1014:  MOVFF  A5,D3
1018:  MOVFF  A4,D2
101C:  RCALL  0CCC
101E:  BNC   1094
....................       G=511;write_eeprom(11,0xff);delay_ms(20);write_eeprom(12,0x01);delay_ms(20); 
1020:  CLRF   xA7
1022:  MOVLW  80
1024:  MOVWF  xA6
1026:  MOVLW  7F
1028:  MOVWF  xA5
102A:  MOVLW  87
102C:  MOVWF  xA4
102E:  MOVLW  0B
1030:  MOVWF  FA9
1032:  MOVLW  FF
1034:  MOVWF  FA8
1036:  BCF    FA6.6
1038:  BCF    FA6.7
103A:  BSF    FA6.2
103C:  MOVF   FF2,W
103E:  MOVWF  00
1040:  BCF    FF2.7
1042:  MOVLB  F
1044:  MOVLW  55
1046:  MOVWF  FA7
1048:  MOVLW  AA
104A:  MOVWF  FA7
104C:  BSF    FA6.1
104E:  BTFSC  FA6.1
1050:  BRA    104E
1052:  BCF    FA6.2
1054:  MOVF   00,W
1056:  IORWF  FF2,F
1058:  MOVLW  14
105A:  MOVLB  0
105C:  MOVWF  xD1
105E:  RCALL  0864
1060:  MOVLW  0C
1062:  MOVWF  FA9
1064:  MOVLW  01
1066:  MOVWF  FA8
1068:  BCF    FA6.6
106A:  BCF    FA6.7
106C:  BSF    FA6.2
106E:  MOVF   FF2,W
1070:  MOVWF  00
1072:  BCF    FF2.7
1074:  MOVLB  F
1076:  MOVLW  55
1078:  MOVWF  FA7
107A:  MOVLW  AA
107C:  MOVWF  FA7
107E:  BSF    FA6.1
1080:  BTFSC  FA6.1
1082:  BRA    1080
1084:  BCF    FA6.2
1086:  MOVF   00,W
1088:  IORWF  FF2,F
108A:  MOVLW  14
108C:  MOVLB  0
108E:  MOVWF  xD1
1090:  CALL   0864
....................    } 
....................    if(VelMotor>6){ 
1094:  MOVF   xB0,W
1096:  SUBLW  06
1098:  BC    10D2
....................       VelMotor=4;write_eeprom(13,4);delay_ms(20); 
109A:  MOVLW  04
109C:  MOVWF  xB0
109E:  MOVLW  0D
10A0:  MOVWF  FA9
10A2:  MOVLW  04
10A4:  MOVWF  FA8
10A6:  BCF    FA6.6
10A8:  BCF    FA6.7
10AA:  BSF    FA6.2
10AC:  MOVF   FF2,W
10AE:  MOVWF  00
10B0:  BCF    FF2.7
10B2:  MOVLB  F
10B4:  MOVLW  55
10B6:  MOVWF  FA7
10B8:  MOVLW  AA
10BA:  MOVWF  FA7
10BC:  BSF    FA6.1
10BE:  BTFSC  FA6.1
10C0:  BRA    10BE
10C2:  BCF    FA6.2
10C4:  MOVF   00,W
10C6:  IORWF  FF2,F
10C8:  MOVLW  14
10CA:  MOVLB  0
10CC:  MOVWF  xD1
10CE:  CALL   0864
....................    } 
.................... } 
10D2:  GOTO   22AA (RETURN)
....................  
....................  
.................... #int_EXT            // Interrupción de encoder para control. 
.................... void ext0() {       // 6 pulsos por vuelta. 
....................    pulsos++; 
*
01B2:  INCF   xA8,F
01B4:  BTFSC  FD8.2
01B6:  INCF   xA9,F
....................    if(pulsos>=120){ 
01B8:  MOVF   xA9,F
01BA:  BNZ   01C2
01BC:  MOVF   xA8,W
01BE:  SUBLW  77
01C0:  BC    0214
....................       pulsos=0; 
01C2:  CLRF   xA9
01C4:  CLRF   xA8
....................       //output_toggle(PIN_C0); 
....................       tiempos=0;tiemporeset++;Lectura=1; 
01C6:  CLRF   3F
01C8:  CLRF   3E
01CA:  INCF   2F,F
01CC:  BSF    17.0
....................     
....................       if(ActivaBuzzer==1){ 
01CE:  DECFSZ 3D,W
01D0:  BRA    01E6
....................          if(estadobuzzer==0){ 
01D2:  BTFSC  17.3
01D4:  BRA    01DC
....................             Buzzer_off; 
01D6:  BCF    F8B.0
01D8:  BCF    F94.0
....................          }else{ 
01DA:  BRA    01E4
....................             if(estadoalarma==1) 
01DC:  BTFSS  17.4
01DE:  BRA    01E4
....................                Buzzer_on; 
01E0:  BSF    F8B.0
01E2:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
01E4:  BTG    17.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
01E6:  BTFSS  16.0
01E8:  BRA    0214
....................          segundos++; 
01EA:  INCF   21,F
....................          if(tiempo_cumplido==0){ 
01EC:  BTFSC  16.7
01EE:  BRA    0214
....................             if(tempo_segundos>0){ 
01F0:  MOVF   28,F
01F2:  BZ    01F8
....................                tempo_segundos--; 
01F4:  DECF   28,F
....................             }else{ 
01F6:  BRA    0214
....................                if(tempo_minutos>0){ 
01F8:  MOVF   27,F
01FA:  BZ    0204
....................                   tempo_minutos--; 
01FC:  DECF   27,F
....................                   tempo_segundos=59; 
01FE:  MOVLW  3B
0200:  MOVWF  28
....................                }else{ 
0202:  BRA    0214
....................                   tiempo_cumplido=1; 
0204:  BSF    16.7
....................                   estadouv=0;Luz_UV_off; 
0206:  BCF    16.0
0208:  BSF    F8A.3
020A:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
020C:  MOVFF  29,27
0210:  MOVFF  2A,28
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    tiempocruce=0; 
0214:  CLRF   xAE
0216:  CLRF   xAD
....................    Cruce=ON; 
0218:  BSF    17.7
....................    if(VelMotor<6){ 
021A:  MOVF   xB0,W
021C:  SUBLW  05
021E:  BNC   0244
....................       if(VelMotor>0 && Porcentaje<100){ 
0220:  MOVF   xB0,F
0222:  BZ    0244
0224:  MOVF   xAF,W
0226:  SUBLW  63
0228:  BNC   0244
....................          delay_us(retardo);       
022A:  MOVFF  AB,E2
022E:  INCF   xE2,F
0230:  DECF   xE2,F
0232:  BTFSC  FD8.2
0234:  BRA    023E
0236:  MOVLW  FF
0238:  MOVWF  xE3
023A:  RCALL  0198
023C:  BRA    0230
023E:  MOVFF  AA,E3
0242:  RCALL  0198
....................          //Motor_on; 
....................          //Motor2_on; 
....................          //delay_us(100);       
....................       } 
....................       //Motor_L1_off; //Se comenta lo de variacion de velocidad debido a que por tamaño de motor se activa con un contactor 
....................       //Motor_L2_off; 
....................    } 
.................... } 
....................  
0244:  BCF    FF2.1
0246:  GOTO   0054
.................... void main () 
.................... { 
*
2100:  CLRF   FF8
2102:  BCF    FD0.7
2104:  BSF    07.7
2106:  CLRF   FEA
2108:  CLRF   FE9
210A:  BCF    16.0
210C:  BCF    16.1
210E:  BCF    16.2
2110:  BCF    16.3
2112:  BCF    16.4
2114:  BCF    16.5
2116:  BCF    16.6
2118:  BCF    16.7
211A:  BCF    17.0
211C:  BCF    17.1
211E:  BCF    17.2
2120:  BCF    17.3
2122:  BCF    17.4
2124:  CLRF   18
2126:  MOVLW  05
2128:  MOVWF  19
212A:  MOVLW  02
212C:  MOVWF  1A
212E:  MOVLW  0B
2130:  MOVWF  1B
2132:  MOVLW  02
2134:  MOVWF  1C
2136:  MOVLW  03
2138:  MOVWF  1D
213A:  MOVLW  02
213C:  MOVWF  1E
213E:  MOVWF  1F
2140:  MOVLW  04
2142:  MOVWF  20
2144:  CLRF   21
2146:  CLRF   22
2148:  CLRF   23
214A:  CLRF   24
214C:  CLRF   25
214E:  CLRF   26
2150:  CLRF   27
2152:  CLRF   28
2154:  CLRF   29
2156:  CLRF   2A
2158:  CLRF   2B
215A:  CLRF   2C
215C:  CLRF   2D
215E:  MOVLW  01
2160:  MOVWF  2E
2162:  CLRF   2F
2164:  CLRF   30
2166:  CLRF   31
2168:  CLRF   3D
216A:  CLRF   41
216C:  CLRF   40
216E:  CLRF   43
2170:  CLRF   42
2172:  CLRF   x97
2174:  CLRF   x96
2176:  CLRF   x95
2178:  CLRF   x94
217A:  CLRF   x9B
217C:  CLRF   x9A
217E:  CLRF   x99
2180:  CLRF   x98
2182:  CLRF   x9F
2184:  CLRF   x9E
2186:  CLRF   x9D
2188:  CLRF   x9C
218A:  CLRF   xA3
218C:  CLRF   xA2
218E:  CLRF   xA1
2190:  CLRF   xA0
2192:  CLRF   xA7
2194:  CLRF   xA6
2196:  CLRF   xA5
2198:  MOVLW  80
219A:  MOVWF  xA4
219C:  BSF    17.5
219E:  BCF    17.6
21A0:  CLRF   xA9
21A2:  CLRF   xA8
21A4:  CLRF   xAB
21A6:  CLRF   xAA
21A8:  BCF    17.7
21AA:  BCF    xAC.0
21AC:  CLRF   xAE
21AE:  CLRF   xAD
21B0:  CLRF   xAF
21B2:  CLRF   xB0
21B4:  CLRF   xB4
21B6:  CLRF   xB3
21B8:  CLRF   xB2
21BA:  CLRF   xB1
21BC:  CLRF   xB8
21BE:  CLRF   xB7
21C0:  CLRF   xB6
21C2:  CLRF   xB5
21C4:  MOVF   FC1,W
21C6:  ANDLW  C0
21C8:  IORLW  0F
21CA:  MOVWF  FC1
21CC:  MOVLW  07
21CE:  MOVWF  FB4
21D0:  MOVLW  3E
21D2:  MOVWF  32
21D4:  MOVLW  20
21D6:  MOVWF  33
21D8:  MOVLW  5E
21DA:  MOVWF  34
21DC:  CLRF   35
21DE:  CLRF   36
21E0:  CLRF   37
21E2:  CLRF   38
21E4:  CLRF   39
21E6:  CLRF   3A
21E8:  CLRF   3B
21EA:  CLRF   3C
21EC:  CLRF   44
21EE:  CLRF   45
21F0:  CLRF   46
21F2:  CLRF   47
21F4:  CLRF   48
21F6:  CLRF   49
21F8:  CLRF   4A
21FA:  CLRF   4B
21FC:  CLRF   4C
21FE:  CLRF   4D
2200:  CLRF   4E
2202:  CLRF   4F
2204:  CLRF   50
2206:  CLRF   51
2208:  CLRF   52
220A:  CLRF   53
220C:  CLRF   54
220E:  CLRF   55
2210:  CLRF   56
2212:  CLRF   57
2214:  CLRF   58
2216:  CLRF   59
2218:  CLRF   5A
221A:  CLRF   5B
221C:  CLRF   5C
221E:  CLRF   5D
2220:  CLRF   5E
2222:  CLRF   5F
2224:  CLRF   x60
2226:  CLRF   x61
2228:  CLRF   x62
222A:  CLRF   x63
222C:  CLRF   x64
222E:  CLRF   x65
2230:  CLRF   x66
2232:  CLRF   x67
2234:  CLRF   x68
2236:  CLRF   x69
2238:  CLRF   x6A
223A:  CLRF   x6B
223C:  CLRF   x6C
223E:  CLRF   x6D
2240:  CLRF   x6E
2242:  CLRF   x6F
2244:  CLRF   x70
2246:  CLRF   x71
2248:  CLRF   x72
224A:  CLRF   x73
224C:  CLRF   x74
224E:  CLRF   x75
2250:  CLRF   x76
2252:  CLRF   x77
2254:  CLRF   x78
2256:  CLRF   x79
2258:  CLRF   x7A
225A:  CLRF   x7B
225C:  CLRF   x7C
225E:  CLRF   x7D
2260:  CLRF   x7E
2262:  CLRF   x7F
2264:  CLRF   x80
2266:  CLRF   x81
2268:  CLRF   x82
226A:  CLRF   x83
226C:  CLRF   x84
226E:  CLRF   x85
2270:  CLRF   x86
2272:  CLRF   x87
2274:  CLRF   x88
2276:  CLRF   x89
2278:  CLRF   x8A
227A:  CLRF   x8B
227C:  CLRF   x8C
227E:  CLRF   x8D
2280:  CLRF   x8E
2282:  CLRF   x8F
2284:  CLRF   x90
2286:  CLRF   x91
2288:  CLRF   x92
228A:  CLRF   x93
....................    VelocidadMotor(0); 
228C:  CLRF   xBA
228E:  CALL   07E0
....................    Motor_off; 
2292:  BCF    F8B.2
2294:  BCF    F94.2
....................    Motor2_off; 
2296:  BCF    F8B.1
2298:  BCF    F94.1
....................    ConfigInterrupciones(); 
229A:  GOTO   094C
....................    MensajeBienvenida(); 
229E:  GOTO   0A52
....................    LeeEEPROM();  
22A2:  GOTO   0AEE
....................    LimitaValores(); 
22A6:  GOTO   0D42
....................    VelocidadMotor(0); 
22AA:  CLRF   xBA
22AC:  CALL   07E0
....................    Motor_off; 
22B0:  BCF    F8B.2
22B2:  BCF    F94.2
....................    Motor2_off; 
22B4:  BCF    F8B.1
22B6:  BCF    F94.1
....................    while(true){ 
....................           
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
22B8:  MOVF   18,F
22BA:  BTFSS  FD8.2
22BC:  BRA    26C0
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
22BE:  MOVLW  01
22C0:  MOVWF  xCC
22C2:  MOVWF  xCD
22C4:  CALL   0972
....................          printf(lcd_putc,"     Ingrese        "); 
22C8:  MOVLW  4A
22CA:  MOVWF  FF6
22CC:  MOVLW  02
22CE:  MOVWF  FF7
22D0:  CALL   0A32
....................          lcd_gotoxy(1,2); 
22D4:  MOVLW  01
22D6:  MOVWF  xCC
22D8:  MOVLW  02
22DA:  MOVWF  xCD
22DC:  CALL   0972
....................          printf(lcd_putc,"    Contraseña      "); 
22E0:  MOVLW  60
22E2:  MOVWF  FF6
22E4:  MOVLW  02
22E6:  MOVWF  FF7
22E8:  CALL   0A32
....................          lcd_gotoxy(1,3); 
22EC:  MOVLW  01
22EE:  MOVWF  xCC
22F0:  MOVLW  03
22F2:  MOVWF  xCD
22F4:  CALL   0972
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
22F8:  MOVLW  76
22FA:  MOVWF  FF6
22FC:  MOVLW  02
22FE:  MOVWF  FF7
2300:  MOVLW  0A
2302:  MOVWF  xBE
2304:  CALL   10D6
2308:  MOVFF  35,BA
230C:  MOVLW  1F
230E:  MOVWF  xBB
2310:  CALL   111C
2314:  MOVFF  36,BA
2318:  MOVLW  1F
231A:  MOVWF  xBB
231C:  CALL   111C
2320:  MOVFF  37,BA
2324:  MOVLW  1F
2326:  MOVWF  xBB
2328:  CALL   111C
232C:  MOVFF  38,BA
2330:  MOVLW  1F
2332:  MOVWF  xBB
2334:  CALL   111C
2338:  MOVLW  20
233A:  MOVWF  xCB
233C:  CALL   09D4
2340:  MOVLW  20
2342:  MOVWF  xCB
2344:  CALL   09D4
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2348:  MOVFF  1B,CC
234C:  MOVLW  04
234E:  MOVWF  xCD
2350:  CALL   0972
....................          lcd_putc(t[2]); 
2354:  MOVFF  34,CB
2358:  CALL   09D4
....................           
....................          if(unidad>11&&unidad<14){ 
235C:  MOVF   1B,W
235E:  SUBLW  0B
2360:  BC    2380
2362:  MOVF   1B,W
2364:  SUBLW  0D
2366:  BNC   2380
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2368:  MOVLW  01
236A:  SUBWF  1B,W
236C:  MOVWF  xBA
236E:  MOVWF  xCC
2370:  MOVLW  04
2372:  MOVWF  xCD
2374:  CALL   0972
....................             lcd_putc(t[1]); 
2378:  MOVFF  33,CB
237C:  CALL   09D4
....................          } 
....................           
....................          Cambio=OFF; 
2380:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2382:  BSF    F92.5
2384:  BTFSC  F80.5
2386:  BRA    23BA
....................          delay_ms(20); 
2388:  MOVLW  14
238A:  MOVWF  xD1
238C:  CALL   0864
....................          if(UP){ 
2390:  BSF    F92.5
2392:  BTFSC  F80.5
2394:  BRA    23B8
....................             if(Flanco == 0) { 
2396:  BTFSC  16.3
2398:  BRA    23B8
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
239A:  MOVLW  0B
239C:  SUBWF  1B,W
239E:  CLRF   03
23A0:  ADDLW  35
23A2:  MOVWF  FE9
23A4:  MOVLW  00
23A6:  ADDWFC 03,W
23A8:  MOVWF  FEA
23AA:  INCF   FEF,F
23AC:  BSF    16.3
23AE:  MOVLW  1E
23B0:  MOVWF  xD1
23B2:  CALL   0864
23B6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
23B8:  BRA    23BC
....................          Flanco = 0; 
23BA:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
23BC:  BSF    F96.0
23BE:  BTFSC  F84.0
23C0:  BRA    23F4
....................          delay_ms(20); 
23C2:  MOVLW  14
23C4:  MOVWF  xD1
23C6:  CALL   0864
....................          if(DOWN){ 
23CA:  BSF    F96.0
23CC:  BTFSC  F84.0
23CE:  BRA    23F2
....................             if(Flanco2 == 0) { 
23D0:  BTFSC  16.5
23D2:  BRA    23F2
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
23D4:  MOVLW  0B
23D6:  SUBWF  1B,W
23D8:  CLRF   03
23DA:  ADDLW  35
23DC:  MOVWF  FE9
23DE:  MOVLW  00
23E0:  ADDWFC 03,W
23E2:  MOVWF  FEA
23E4:  DECF   FEF,F
23E6:  BSF    16.5
23E8:  MOVLW  1E
23EA:  MOVWF  xD1
23EC:  CALL   0864
23F0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
23F2:  BRA    23F6
....................          Flanco2 = 0; 
23F4:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
23F6:  BSF    F96.1
23F8:  BTFSC  F84.1
23FA:  BRA    2426
....................          delay_ms(20); 
23FC:  MOVLW  14
23FE:  MOVWF  xD1
2400:  CALL   0864
....................          if(RIGHT){ 
2404:  BSF    F96.1
2406:  BTFSC  F84.1
2408:  BRA    2424
....................             if(Flanco1 == 0) { 
240A:  BTFSC  16.4
240C:  BRA    2424
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
240E:  BSF    16.4
2410:  INCF   1B,F
2412:  MOVLW  1E
2414:  MOVWF  xD1
2416:  CALL   0864
241A:  MOVLW  0C
241C:  MOVWF  xCB
241E:  CALL   09D4
2422:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2424:  BRA    2428
....................          Flanco1 = 0; 
2426:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2428:  BSF    F96.2
242A:  BTFSC  F84.2
242C:  BRA    2458
....................          delay_ms(150); 
242E:  MOVLW  96
2430:  MOVWF  xD1
2432:  CALL   0864
....................          if(IZQU){ 
2436:  BSF    F96.2
2438:  BTFSC  F84.2
243A:  BRA    2456
....................             if(Flanco3 == 0){ 
243C:  BTFSC  16.6
243E:  BRA    2456
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2440:  BSF    16.6
2442:  DECF   1B,F
2444:  MOVLW  1E
2446:  MOVWF  xD1
2448:  CALL   0864
244C:  MOVLW  0C
244E:  MOVWF  xCB
2450:  CALL   09D4
2454:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2456:  BRA    245A
....................         Flanco3 = 0; 
2458:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
245A:  MOVLW  0B
245C:  SUBWF  1B,W
245E:  CLRF   03
2460:  ADDLW  35
2462:  MOVWF  FE9
2464:  MOVLW  00
2466:  ADDWFC 03,W
2468:  MOVWF  FEA
246A:  BTFSC  FEF.7
246C:  BRA    2470
246E:  BRA    2484
....................          clave[unidad-11]=9; 
2470:  MOVLW  0B
2472:  SUBWF  1B,W
2474:  CLRF   03
2476:  ADDLW  35
2478:  MOVWF  FE9
247A:  MOVLW  00
247C:  ADDWFC 03,W
247E:  MOVWF  FEA
2480:  MOVLW  09
2482:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2484:  MOVLW  0B
2486:  SUBWF  1B,W
2488:  CLRF   03
248A:  ADDLW  35
248C:  MOVWF  FE9
248E:  MOVLW  00
2490:  ADDWFC 03,W
2492:  MOVWF  FEA
2494:  BTFSC  FEF.7
2496:  BRA    24B0
2498:  MOVF   FEF,W
249A:  SUBLW  09
249C:  BC    24B0
....................          clave[unidad-11]=0; 
249E:  MOVLW  0B
24A0:  SUBWF  1B,W
24A2:  CLRF   03
24A4:  ADDLW  35
24A6:  MOVWF  FE9
24A8:  MOVLW  00
24AA:  ADDWFC 03,W
24AC:  MOVWF  FEA
24AE:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
24B0:  MOVF   1B,W
24B2:  SUBLW  0A
24B4:  BNC   24BA
....................          unidad=11; 
24B6:  MOVLW  0B
24B8:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
24BA:  MOVF   1B,W
24BC:  SUBLW  0E
24BE:  BTFSC  FD8.0
24C0:  BRA    26C0
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
24C2:  MOVF   35,W
24C4:  SUBLW  03
24C6:  BNZ   25A2
24C8:  MOVF   36,W
24CA:  SUBLW  08
24CC:  BNZ   25A2
24CE:  MOVF   37,W
24D0:  SUBLW  09
24D2:  BNZ   25A2
24D4:  MOVF   38,W
24D6:  SUBLW  02
24D8:  BNZ   25A2
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
24DA:  CLRF   FA9
24DC:  CLRF   FA8
24DE:  BCF    FA6.6
24E0:  BCF    FA6.7
24E2:  BSF    FA6.2
24E4:  MOVF   FF2,W
24E6:  MOVWF  00
24E8:  BCF    FF2.7
24EA:  MOVLB  F
24EC:  MOVLW  55
24EE:  MOVWF  FA7
24F0:  MOVLW  AA
24F2:  MOVWF  FA7
24F4:  BSF    FA6.1
24F6:  BTFSC  FA6.1
24F8:  BRA    24F6
24FA:  BCF    FA6.2
24FC:  MOVF   00,W
24FE:  IORWF  FF2,F
2500:  MOVLW  14
2502:  MOVLB  0
2504:  MOVWF  xD1
2506:  CALL   0864
250A:  MOVLW  01
250C:  MOVWF  FA9
250E:  CLRF   FA8
2510:  BCF    FA6.6
2512:  BCF    FA6.7
2514:  BSF    FA6.2
2516:  MOVF   FF2,W
2518:  MOVWF  00
251A:  BCF    FF2.7
251C:  MOVLB  F
251E:  MOVLW  55
2520:  MOVWF  FA7
2522:  MOVLW  AA
2524:  MOVWF  FA7
2526:  BSF    FA6.1
2528:  BTFSC  FA6.1
252A:  BRA    2528
252C:  BCF    FA6.2
252E:  MOVF   00,W
2530:  IORWF  FF2,F
2532:  MOVLW  14
2534:  MOVLB  0
2536:  MOVWF  xD1
2538:  CALL   0864
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
253C:  MOVLW  02
253E:  MOVWF  FA9
2540:  CLRF   FA8
2542:  BCF    FA6.6
2544:  BCF    FA6.7
2546:  BSF    FA6.2
2548:  MOVF   FF2,W
254A:  MOVWF  00
254C:  BCF    FF2.7
254E:  MOVLB  F
2550:  MOVLW  55
2552:  MOVWF  FA7
2554:  MOVLW  AA
2556:  MOVWF  FA7
2558:  BSF    FA6.1
255A:  BTFSC  FA6.1
255C:  BRA    255A
255E:  BCF    FA6.2
2560:  MOVF   00,W
2562:  IORWF  FF2,F
2564:  MOVLW  14
2566:  MOVLB  0
2568:  MOVWF  xD1
256A:  CALL   0864
256E:  MOVLW  03
2570:  MOVWF  FA9
2572:  CLRF   FA8
2574:  BCF    FA6.6
2576:  BCF    FA6.7
2578:  BSF    FA6.2
257A:  MOVF   FF2,W
257C:  MOVWF  00
257E:  BCF    FF2.7
2580:  MOVLB  F
2582:  MOVLW  55
2584:  MOVWF  FA7
2586:  MOVLW  AA
2588:  MOVWF  FA7
258A:  BSF    FA6.1
258C:  BTFSC  FA6.1
258E:  BRA    258C
2590:  BCF    FA6.2
2592:  MOVF   00,W
2594:  IORWF  FF2,F
2596:  MOVLW  14
2598:  MOVLB  0
259A:  MOVWF  xD1
259C:  CALL   0864
....................              reset_cpu(); 
25A0:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
25A2:  MOVF   39,W
25A4:  SUBWF  35,W
25A6:  BNZ   2646
25A8:  MOVF   3A,W
25AA:  SUBWF  36,W
25AC:  BNZ   2646
25AE:  MOVF   3B,W
25B0:  SUBWF  37,W
25B2:  BNZ   2646
25B4:  MOVF   3C,W
25B6:  SUBWF  38,W
25B8:  BNZ   2646
....................             lcd_gotoxy(1,1); 
25BA:  MOVLW  01
25BC:  MOVWF  xCC
25BE:  MOVWF  xCD
25C0:  CALL   0972
....................             printf(lcd_putc,"                   "); 
25C4:  MOVLW  8C
25C6:  MOVWF  FF6
25C8:  MOVLW  02
25CA:  MOVWF  FF7
25CC:  CALL   0A32
....................             lcd_gotoxy(1,2); 
25D0:  MOVLW  01
25D2:  MOVWF  xCC
25D4:  MOVLW  02
25D6:  MOVWF  xCD
25D8:  CALL   0972
....................             printf(lcd_putc,"     Contraseña    "); 
25DC:  MOVLW  A0
25DE:  MOVWF  FF6
25E0:  MOVLW  02
25E2:  MOVWF  FF7
25E4:  CALL   0A32
....................             lcd_gotoxy(1,3); 
25E8:  MOVLW  01
25EA:  MOVWF  xCC
25EC:  MOVLW  03
25EE:  MOVWF  xCD
25F0:  CALL   0972
....................             printf(lcd_putc,"      Correcta     "); 
25F4:  MOVLW  B4
25F6:  MOVWF  FF6
25F8:  MOVLW  02
25FA:  MOVWF  FF7
25FC:  CALL   0A32
....................             lcd_gotoxy(1,4); 
2600:  MOVLW  01
2602:  MOVWF  xCC
2604:  MOVLW  04
2606:  MOVWF  xCD
2608:  CALL   0972
....................             printf(lcd_putc,"                   "); 
260C:  MOVLW  C8
260E:  MOVWF  FF6
2610:  MOVLW  02
2612:  MOVWF  FF7
2614:  CALL   0A32
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2618:  MOVLW  04
261A:  MOVWF  xBA
261C:  MOVLW  FA
261E:  MOVWF  xD1
2620:  CALL   0864
2624:  DECFSZ xBA,F
2626:  BRA    261C
2628:  MOVLW  32
262A:  MOVWF  18
262C:  MOVLW  0B
262E:  MOVWF  1B
2630:  MOVLW  0C
2632:  MOVWF  xCB
2634:  CALL   09D4
2638:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
263A:  CLRF   35
263C:  CLRF   36
263E:  CLRF   37
2640:  CLRF   38
2642:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2644:  BRA    26C0
....................             lcd_gotoxy(1,1); 
2646:  MOVLW  01
2648:  MOVWF  xCC
264A:  MOVWF  xCD
264C:  CALL   0972
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2650:  MOVLW  01
2652:  MOVWF  xCC
2654:  MOVLW  02
2656:  MOVWF  xCD
2658:  CALL   0972
....................             printf(lcd_putc,"     Contraseña    "); 
265C:  MOVLW  DC
265E:  MOVWF  FF6
2660:  MOVLW  02
2662:  MOVWF  FF7
2664:  CALL   0A32
....................             lcd_gotoxy(1,3); 
2668:  MOVLW  01
266A:  MOVWF  xCC
266C:  MOVLW  03
266E:  MOVWF  xCD
2670:  CALL   0972
....................             printf(lcd_putc,"     Incorrecta    "); 
2674:  MOVLW  F0
2676:  MOVWF  FF6
2678:  MOVLW  02
267A:  MOVWF  FF7
267C:  CALL   0A32
....................             lcd_gotoxy(1,4); 
2680:  MOVLW  01
2682:  MOVWF  xCC
2684:  MOVLW  04
2686:  MOVWF  xCD
2688:  CALL   0972
....................             printf(lcd_putc,"                   "); 
268C:  MOVLW  04
268E:  MOVWF  FF6
2690:  MOVLW  03
2692:  MOVWF  FF7
2694:  CALL   0A32
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2698:  MOVLW  04
269A:  MOVWF  xBA
269C:  MOVLW  FA
269E:  MOVWF  xD1
26A0:  CALL   0864
26A4:  DECFSZ xBA,F
26A6:  BRA    269C
26A8:  MOVLW  0B
26AA:  MOVWF  1B
26AC:  MOVLW  0C
26AE:  MOVWF  xCB
26B0:  CALL   09D4
26B4:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
26B6:  CLRF   35
26B8:  CLRF   36
26BA:  CLRF   37
26BC:  CLRF   38
26BE:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
26C0:  DECFSZ 18,W
26C2:  BRA    28FA
....................       EliminaRuido(); 
26C4:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
26C8:  MOVLW  01
26CA:  MOVWF  xCC
26CC:  MOVWF  xCD
26CE:  CALL   0972
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
26D2:  MOVLW  18
26D4:  MOVWF  FF6
26D6:  MOVLW  03
26D8:  MOVWF  FF7
26DA:  CALL   0A32
....................          mensajes(1+paso,2); 
26DE:  MOVLW  01
26E0:  ADDWF  31,W
26E2:  MOVWF  xBA
26E4:  MOVWF  xBB
26E6:  MOVLW  02
26E8:  MOVWF  xBC
26EA:  CALL   11E8
....................          mensajes(2+paso,3); 
26EE:  MOVLW  02
26F0:  ADDWF  31,W
26F2:  MOVWF  xBA
26F4:  MOVWF  xBB
26F6:  MOVLW  03
26F8:  MOVWF  xBC
26FA:  CALL   11E8
....................          mensajes(3+paso,4); 
26FE:  MOVLW  03
2700:  ADDWF  31,W
2702:  MOVWF  xBA
2704:  MOVWF  xBB
2706:  MOVLW  04
2708:  MOVWF  xBC
270A:  CALL   11E8
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
270E:  MOVLW  01
2710:  MOVWF  xCC
2712:  MOVFF  1C,CD
2716:  CALL   0972
....................         lcd_putc(t[0]); 
271A:  MOVFF  32,CB
271E:  CALL   09D4
....................  
....................         if(Flecha==2) 
2722:  MOVF   1C,W
2724:  SUBLW  02
2726:  BNZ   2750
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2728:  MOVLW  01
272A:  MOVWF  xCC
272C:  MOVLW  04
272E:  MOVWF  xCD
2730:  CALL   0972
....................             lcd_putc(t[1]); 
2734:  MOVFF  33,CB
2738:  CALL   09D4
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
273C:  MOVLW  01
273E:  MOVWF  xCC
2740:  MOVLW  03
2742:  MOVWF  xCD
2744:  CALL   0972
....................             lcd_putc(t[1]); 
2748:  MOVFF  33,CB
274C:  CALL   09D4
....................           } 
....................          
....................         if(Flecha==4) 
2750:  MOVF   1C,W
2752:  SUBLW  04
2754:  BNZ   277E
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2756:  MOVLW  01
2758:  MOVWF  xCC
275A:  MOVLW  02
275C:  MOVWF  xCD
275E:  CALL   0972
....................             lcd_putc(t[1]); 
2762:  MOVFF  33,CB
2766:  CALL   09D4
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
276A:  MOVLW  01
276C:  MOVWF  xCC
276E:  MOVLW  03
2770:  MOVWF  xCD
2772:  CALL   0972
....................             lcd_putc(t[1]); 
2776:  MOVFF  33,CB
277A:  CALL   09D4
....................           } 
....................          
....................         if(Flecha==3) 
277E:  MOVF   1C,W
2780:  SUBLW  03
2782:  BNZ   27AC
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2784:  MOVLW  01
2786:  MOVWF  xCC
2788:  MOVLW  04
278A:  MOVWF  xCD
278C:  CALL   0972
....................             lcd_putc(t[1]); 
2790:  MOVFF  33,CB
2794:  CALL   09D4
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2798:  MOVLW  01
279A:  MOVWF  xCC
279C:  MOVLW  02
279E:  MOVWF  xCD
27A0:  CALL   0972
....................             lcd_putc(t[1]); 
27A4:  MOVFF  33,CB
27A8:  CALL   09D4
....................           } 
....................          Cambio=OFF; 
27AC:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
27AE:  BSF    F92.5
27B0:  BTFSC  F80.5
27B2:  BRA    27DE
....................          delay_ms(20); 
27B4:  MOVLW  14
27B6:  MOVWF  xD1
27B8:  CALL   0864
....................          if(UP){ 
27BC:  BSF    F92.5
27BE:  BTFSC  F80.5
27C0:  BRA    27DC
....................             if(Flanco == 0){ 
27C2:  BTFSC  16.3
27C4:  BRA    27DC
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(10);Cambio=ON; 
27C6:  DECF   1E,F
27C8:  DECF   1C,F
27CA:  MOVLW  01
27CC:  ADDWF  1C,W
27CE:  MOVWF  1D
27D0:  BSF    16.3
27D2:  MOVLW  0A
27D4:  MOVWF  xD1
27D6:  CALL   0864
27DA:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
27DC:  BRA    27E0
....................          Flanco = 0; 
27DE:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
27E0:  BSF    F96.0
27E2:  BTFSC  F84.0
27E4:  BRA    2810
....................          delay_ms(20); 
27E6:  MOVLW  14
27E8:  MOVWF  xD1
27EA:  CALL   0864
....................          if(DOWN){ 
27EE:  BSF    F96.0
27F0:  BTFSC  F84.0
27F2:  BRA    280E
....................             if(Flanco2 == 0){ 
27F4:  BTFSC  16.5
27F6:  BRA    280E
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(10);Cambio=ON; 
27F8:  INCF   1E,F
27FA:  INCF   1C,F
27FC:  MOVLW  01
27FE:  SUBWF  1C,W
2800:  MOVWF  1D
2802:  BSF    16.5
2804:  MOVLW  0A
2806:  MOVWF  xD1
2808:  CALL   0864
280C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
280E:  BRA    2812
....................          Flanco2 = 0; 
2810:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2812:  MOVF   1E,W
2814:  SUBWF  20,W
2816:  BC    2828
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2818:  INCF   31,F
281A:  MOVFF  1E,20
281E:  MOVLW  02
2820:  SUBWF  20,W
2822:  MOVWF  1F
2824:  MOVLW  04
2826:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2828:  MOVF   1F,W
282A:  SUBWF  1E,W
282C:  BC    283E
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
282E:  DECF   31,F
2830:  MOVFF  1E,1F
2834:  MOVLW  02
2836:  ADDWF  1F,W
2838:  MOVWF  20
283A:  MOVLW  02
283C:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
283E:  MOVF   1E,W
2840:  SUBWF  19,W
2842:  BC    2856
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2844:  MOVFF  1A,1E
2848:  MOVLW  02
284A:  MOVWF  1C
284C:  CLRF   31
284E:  MOVFF  1E,1F
2852:  ADDWF  1F,W
2854:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
2856:  MOVF   1A,W
2858:  SUBWF  1E,W
285A:  BC    2872
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
285C:  MOVFF  19,1E
2860:  MOVLW  04
2862:  MOVWF  1C
2864:  SUBWF  19,W
2866:  MOVWF  31
2868:  MOVFF  1E,20
286C:  MOVLW  02
286E:  SUBWF  20,W
2870:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
2872:  BTFSC  31.7
2874:  BRA    2878
2876:  BRA    287A
....................          paso=0; 
2878:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
287A:  BSF    F96.1
287C:  BTFSC  F84.1
287E:  BRA    28C6
....................          delay_ms(20); 
2880:  MOVLW  14
2882:  MOVWF  xD1
2884:  CALL   0864
....................          if(RIGHT){ 
2888:  BSF    F96.1
288A:  BTFSC  F84.1
288C:  BRA    28C2
....................             if(Flanco1 == 0){ 
288E:  BTFSC  16.4
2890:  BRA    28C2
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2892:  BSF    16.4
2894:  MOVFF  1E,18
2898:  MOVLW  03
289A:  MOVWF  1C
289C:  MOVLW  02
289E:  MOVWF  xBA
28A0:  MOVLW  96
28A2:  MOVWF  xD1
28A4:  CALL   0864
28A8:  DECFSZ xBA,F
28AA:  BRA    28A0
28AC:  MOVLW  0C
28AE:  MOVWF  xCB
28B0:  CALL   09D4
....................                if(Menu==6){ 
28B4:  MOVF   18,W
28B6:  SUBLW  06
28B8:  BNZ   28C2
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
28BA:  CLRF   35
28BC:  CLRF   36
28BE:  CLRF   37
28C0:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
28C2:  BSF    17.5
....................       }else{ 
28C4:  BRA    28C8
....................         Flanco1 = 0; 
28C6:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
28C8:  BSF    F96.2
28CA:  BTFSC  F84.2
28CC:  BRA    28FA
....................          delay_ms(20); 
28CE:  MOVLW  14
28D0:  MOVWF  xD1
28D2:  CALL   0864
....................          if(IZQU){ 
28D6:  BSF    F96.2
28D8:  BTFSC  F84.2
28DA:  BRA    28FA
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
28DC:  MOVLW  02
28DE:  MOVWF  xBA
28E0:  MOVLW  FA
28E2:  MOVWF  xD1
28E4:  CALL   0864
28E8:  DECFSZ xBA,F
28EA:  BRA    28E0
28EC:  MOVLW  32
28EE:  MOVWF  18
28F0:  MOVLW  0C
28F2:  MOVWF  xCB
28F4:  CALL   09D4
28F8:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
28FA:  MOVF   18,W
28FC:  SUBLW  02
28FE:  BTFSS  FD8.2
2900:  BRA    2B56
....................    EliminaRuido(); 
2902:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2906:  MOVLW  01
2908:  MOVWF  xCC
290A:  MOVWF  xCD
290C:  CALL   0972
....................       printf(lcd_putc,"    Temporizador     "); 
2910:  MOVLW  2E
2912:  MOVWF  FF6
2914:  MOVLW  03
2916:  MOVWF  FF7
2918:  CALL   0A32
....................       lcd_gotoxy(1,2); 
291C:  MOVLW  01
291E:  MOVWF  xCC
2920:  MOVLW  02
2922:  MOVWF  xCD
2924:  CALL   0972
....................       printf(lcd_putc,"       Luz UV        "); 
2928:  MOVLW  44
292A:  MOVWF  FF6
292C:  MOVLW  03
292E:  MOVWF  FF7
2930:  CALL   0A32
....................       lcd_gotoxy(6,3); 
2934:  MOVLW  06
2936:  MOVWF  xCC
2938:  MOVLW  03
293A:  MOVWF  xCD
293C:  CALL   0972
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2940:  MOVFF  29,BA
2944:  MOVLW  03
2946:  MOVWF  xBB
2948:  CALL   12B8
294C:  MOVLW  3A
294E:  MOVWF  xCB
2950:  CALL   09D4
2954:  MOVFF  2A,BA
2958:  MOVLW  01
295A:  MOVWF  xBB
295C:  CALL   12B8
2960:  MOVLW  63
2962:  MOVWF  FF6
2964:  MOVLW  03
2966:  MOVWF  FF7
2968:  MOVLW  08
296A:  MOVWF  xBE
296C:  CALL   10D6
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2970:  MOVLW  06
2972:  ADDWF  2E,W
2974:  MOVWF  xBA
2976:  MOVWF  xCC
2978:  MOVLW  04
297A:  MOVWF  xCD
297C:  CALL   0972
....................       lcd_putc(t[2]); 
2980:  MOVFF  34,CB
2984:  CALL   09D4
....................        
....................       Cambio=OFF; 
2988:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
298A:  BSF    F92.5
298C:  BTFSC  F80.5
298E:  BRA    29DC
....................    { 
....................       delay_ms(20); 
2990:  MOVLW  14
2992:  MOVWF  xD1
2994:  CALL   0864
....................       if(UP){ 
2998:  BSF    F92.5
299A:  BTFSC  F80.5
299C:  BRA    29DC
....................          if(unidad2==1) 
299E:  DECFSZ 2E,W
29A0:  BRA    29BC
....................          { 
....................             if(tempo_minutos_pro<240) 
29A2:  MOVF   29,W
29A4:  SUBLW  EF
29A6:  BNC   29BC
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
29A8:  MOVLW  05
29AA:  ADDWF  29,F
29AC:  MOVLW  02
29AE:  MOVWF  xBA
29B0:  MOVLW  96
29B2:  MOVWF  xD1
29B4:  CALL   0864
29B8:  DECFSZ xBA,F
29BA:  BRA    29B0
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
29BC:  MOVF   2E,W
29BE:  SUBLW  04
29C0:  BNZ   29DA
....................          { 
....................             if(tempo_segundos_pro<59) 
29C2:  MOVF   2A,W
29C4:  SUBLW  3A
29C6:  BNC   29DA
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
29C8:  INCF   2A,F
29CA:  MOVLW  02
29CC:  MOVWF  xBA
29CE:  MOVLW  96
29D0:  MOVWF  xD1
29D2:  CALL   0864
29D6:  DECFSZ xBA,F
29D8:  BRA    29CE
....................             } 
....................          }      
....................       Cambio=ON; 
29DA:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
29DC:  BSF    F96.0
29DE:  BTFSC  F84.0
29E0:  BRA    2A2A
....................    { 
....................       delay_ms(20); 
29E2:  MOVLW  14
29E4:  MOVWF  xD1
29E6:  CALL   0864
....................       if(DOWN){ 
29EA:  BSF    F96.0
29EC:  BTFSC  F84.0
29EE:  BRA    2A2A
....................          if(unidad2==1) 
29F0:  DECFSZ 2E,W
29F2:  BRA    2A0C
....................          { 
....................             if(tempo_minutos_pro>0) 
29F4:  MOVF   29,F
29F6:  BZ    2A0C
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
29F8:  MOVLW  05
29FA:  SUBWF  29,F
29FC:  MOVLW  02
29FE:  MOVWF  xBA
2A00:  MOVLW  96
2A02:  MOVWF  xD1
2A04:  CALL   0864
2A08:  DECFSZ xBA,F
2A0A:  BRA    2A00
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2A0C:  MOVF   2E,W
2A0E:  SUBLW  04
2A10:  BNZ   2A28
....................          { 
....................             if(tempo_segundos_pro>0) 
2A12:  MOVF   2A,F
2A14:  BZ    2A28
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2A16:  DECF   2A,F
2A18:  MOVLW  02
2A1A:  MOVWF  xBA
2A1C:  MOVLW  96
2A1E:  MOVWF  xD1
2A20:  CALL   0864
2A24:  DECFSZ xBA,F
2A26:  BRA    2A1C
....................             }    
....................          } 
....................       Cambio=ON; 
2A28:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2A2A:  BSF    F96.1
2A2C:  BTFSC  F84.1
2A2E:  BRA    2A6C
....................    { 
....................       delay_ms(20); 
2A30:  MOVLW  14
2A32:  MOVWF  xD1
2A34:  CALL   0864
....................       if(RIGHT){ 
2A38:  BSF    F96.1
2A3A:  BTFSC  F84.1
2A3C:  BRA    2A6C
....................          if(unidad2==1) 
2A3E:  DECFSZ 2E,W
2A40:  BRA    2A48
....................          { 
....................             unidad2=4; 
2A42:  MOVLW  04
2A44:  MOVWF  2E
....................          } 
....................          else 
2A46:  BRA    2A52
....................          { 
....................             if(unidad2==4) 
2A48:  MOVF   2E,W
2A4A:  SUBLW  04
2A4C:  BNZ   2A52
....................             { 
....................                unidad2=1; 
2A4E:  MOVLW  01
2A50:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
2A52:  MOVLW  02
2A54:  MOVWF  xBA
2A56:  MOVLW  FA
2A58:  MOVWF  xD1
2A5A:  CALL   0864
2A5E:  DECFSZ xBA,F
2A60:  BRA    2A56
....................       printf(lcd_putc,"\f"); 
2A62:  MOVLW  0C
2A64:  MOVWF  xCB
2A66:  CALL   09D4
....................       Cambio=ON; 
2A6A:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2A6C:  BSF    F96.2
2A6E:  BTFSC  F84.2
2A70:  BRA    2B56
....................    { 
....................       if(IZQU){ 
2A72:  BSF    F96.2
2A74:  BTFSC  F84.2
2A76:  BRA    2B56
....................          delay_ms(200); 
2A78:  MOVLW  C8
2A7A:  MOVWF  xD1
2A7C:  CALL   0864
....................          printf(lcd_putc,"\f"); 
2A80:  MOVLW  0C
2A82:  MOVWF  xCB
2A84:  CALL   09D4
....................          lcd_gotoxy(1,2); 
2A88:  MOVLW  01
2A8A:  MOVWF  xCC
2A8C:  MOVLW  02
2A8E:  MOVWF  xCD
2A90:  CALL   0972
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2A94:  MOVLW  6C
2A96:  MOVWF  FF6
2A98:  MOVLW  03
2A9A:  MOVWF  FF7
2A9C:  CALL   0A32
....................          lcd_gotoxy(1,3); 
2AA0:  MOVLW  01
2AA2:  MOVWF  xCC
2AA4:  MOVLW  03
2AA6:  MOVWF  xCD
2AA8:  CALL   0972
....................          printf(lcd_putc,"  Correctamente  "); 
2AAC:  MOVLW  7E
2AAE:  MOVWF  FF6
2AB0:  MOVLW  03
2AB2:  MOVWF  FF7
2AB4:  CALL   0A32
....................          write_eeprom(5,tempo_minutos_pro); 
2AB8:  MOVLW  05
2ABA:  MOVWF  FA9
2ABC:  MOVFF  29,FA8
2AC0:  BCF    FA6.6
2AC2:  BCF    FA6.7
2AC4:  BSF    FA6.2
2AC6:  MOVF   FF2,W
2AC8:  MOVWF  00
2ACA:  BCF    FF2.7
2ACC:  MOVLB  F
2ACE:  MOVLW  55
2AD0:  MOVWF  FA7
2AD2:  MOVLW  AA
2AD4:  MOVWF  FA7
2AD6:  BSF    FA6.1
2AD8:  BTFSC  FA6.1
2ADA:  BRA    2AD8
2ADC:  BCF    FA6.2
2ADE:  MOVF   00,W
2AE0:  IORWF  FF2,F
....................          delay_ms(20); 
2AE2:  MOVLW  14
2AE4:  MOVLB  0
2AE6:  MOVWF  xD1
2AE8:  CALL   0864
....................          write_eeprom(6,tempo_segundos_pro); 
2AEC:  MOVLW  06
2AEE:  MOVWF  FA9
2AF0:  MOVFF  2A,FA8
2AF4:  BCF    FA6.6
2AF6:  BCF    FA6.7
2AF8:  BSF    FA6.2
2AFA:  MOVF   FF2,W
2AFC:  MOVWF  00
2AFE:  BCF    FF2.7
2B00:  MOVLB  F
2B02:  MOVLW  55
2B04:  MOVWF  FA7
2B06:  MOVLW  AA
2B08:  MOVWF  FA7
2B0A:  BSF    FA6.1
2B0C:  BTFSC  FA6.1
2B0E:  BRA    2B0C
2B10:  BCF    FA6.2
2B12:  MOVF   00,W
2B14:  IORWF  FF2,F
....................          delay_ms(20); 
2B16:  MOVLW  14
2B18:  MOVLB  0
2B1A:  MOVWF  xD1
2B1C:  CALL   0864
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2B20:  MOVFF  29,27
2B24:  MOVFF  2A,28
....................          delay_ms(700); 
2B28:  MOVLW  04
2B2A:  MOVWF  xBA
2B2C:  MOVLW  AF
2B2E:  MOVWF  xD1
2B30:  CALL   0864
2B34:  DECFSZ xBA,F
2B36:  BRA    2B2C
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2B38:  MOVLW  1E
2B3A:  MOVWF  xD1
2B3C:  CALL   0864
2B40:  MOVLW  01
2B42:  MOVWF  18
2B44:  CLRF   31
2B46:  MOVLW  02
2B48:  MOVWF  1C
2B4A:  MOVWF  1E
2B4C:  MOVLW  0C
2B4E:  MOVWF  xCB
2B50:  CALL   09D4
....................          Cambio=ON; 
2B54:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2B56:  MOVF   18,W
2B58:  SUBLW  03
2B5A:  BTFSS  FD8.2
2B5C:  BRA    2EA8
....................       EliminaRuido(); 
2B5E:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2B62:  MOVLW  01
2B64:  MOVWF  xCC
2B66:  MOVWF  xCD
2B68:  CALL   0972
....................          printf(lcd_putc,"     Ingrese        "); 
2B6C:  MOVLW  90
2B6E:  MOVWF  FF6
2B70:  MOVLW  03
2B72:  MOVWF  FF7
2B74:  CALL   0A32
....................          lcd_gotoxy(1,2); 
2B78:  MOVLW  01
2B7A:  MOVWF  xCC
2B7C:  MOVLW  02
2B7E:  MOVWF  xCD
2B80:  CALL   0972
....................          printf(lcd_putc,"    Contraseña      "); 
2B84:  MOVLW  A6
2B86:  MOVWF  FF6
2B88:  MOVLW  03
2B8A:  MOVWF  FF7
2B8C:  CALL   0A32
....................          lcd_gotoxy(1,3); 
2B90:  MOVLW  01
2B92:  MOVWF  xCC
2B94:  MOVLW  03
2B96:  MOVWF  xCD
2B98:  CALL   0972
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2B9C:  MOVLW  BC
2B9E:  MOVWF  FF6
2BA0:  MOVLW  03
2BA2:  MOVWF  FF7
2BA4:  MOVLW  0A
2BA6:  MOVWF  xBE
2BA8:  CALL   10D6
2BAC:  MOVFF  35,BA
2BB0:  MOVLW  1F
2BB2:  MOVWF  xBB
2BB4:  CALL   111C
2BB8:  MOVFF  36,BA
2BBC:  MOVLW  1F
2BBE:  MOVWF  xBB
2BC0:  CALL   111C
2BC4:  MOVFF  37,BA
2BC8:  MOVLW  1F
2BCA:  MOVWF  xBB
2BCC:  CALL   111C
2BD0:  MOVFF  38,BA
2BD4:  MOVLW  1F
2BD6:  MOVWF  xBB
2BD8:  CALL   111C
2BDC:  MOVLW  20
2BDE:  MOVWF  xCB
2BE0:  CALL   09D4
2BE4:  MOVLW  20
2BE6:  MOVWF  xCB
2BE8:  CALL   09D4
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2BEC:  MOVFF  1B,CC
2BF0:  MOVLW  04
2BF2:  MOVWF  xCD
2BF4:  CALL   0972
....................          lcd_putc(t[2]); 
2BF8:  MOVFF  34,CB
2BFC:  CALL   09D4
....................           
....................          if(unidad>11&&unidad<14){ 
2C00:  MOVF   1B,W
2C02:  SUBLW  0B
2C04:  BC    2C24
2C06:  MOVF   1B,W
2C08:  SUBLW  0D
2C0A:  BNC   2C24
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2C0C:  MOVLW  01
2C0E:  SUBWF  1B,W
2C10:  MOVWF  xBA
2C12:  MOVWF  xCC
2C14:  MOVLW  04
2C16:  MOVWF  xCD
2C18:  CALL   0972
....................             lcd_putc(t[1]); 
2C1C:  MOVFF  33,CB
2C20:  CALL   09D4
....................          } 
....................           
....................          Cambio=OFF; 
2C24:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2C26:  BSF    F92.5
2C28:  BTFSC  F80.5
2C2A:  BRA    2C5E
....................          delay_ms(20); 
2C2C:  MOVLW  14
2C2E:  MOVWF  xD1
2C30:  CALL   0864
....................          if(UP){ 
2C34:  BSF    F92.5
2C36:  BTFSC  F80.5
2C38:  BRA    2C5C
....................             if(Flanco == 0) { 
2C3A:  BTFSC  16.3
2C3C:  BRA    2C5C
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2C3E:  MOVLW  0B
2C40:  SUBWF  1B,W
2C42:  CLRF   03
2C44:  ADDLW  35
2C46:  MOVWF  FE9
2C48:  MOVLW  00
2C4A:  ADDWFC 03,W
2C4C:  MOVWF  FEA
2C4E:  INCF   FEF,F
2C50:  BSF    16.3
2C52:  MOVLW  1E
2C54:  MOVWF  xD1
2C56:  CALL   0864
2C5A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C5C:  BRA    2C60
....................          Flanco = 0; 
2C5E:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2C60:  BSF    F96.0
2C62:  BTFSC  F84.0
2C64:  BRA    2C98
....................          delay_ms(20); 
2C66:  MOVLW  14
2C68:  MOVWF  xD1
2C6A:  CALL   0864
....................          if(DOWN){ 
2C6E:  BSF    F96.0
2C70:  BTFSC  F84.0
2C72:  BRA    2C96
....................             if(Flanco2 == 0) { 
2C74:  BTFSC  16.5
2C76:  BRA    2C96
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2C78:  MOVLW  0B
2C7A:  SUBWF  1B,W
2C7C:  CLRF   03
2C7E:  ADDLW  35
2C80:  MOVWF  FE9
2C82:  MOVLW  00
2C84:  ADDWFC 03,W
2C86:  MOVWF  FEA
2C88:  DECF   FEF,F
2C8A:  BSF    16.5
2C8C:  MOVLW  1E
2C8E:  MOVWF  xD1
2C90:  CALL   0864
2C94:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C96:  BRA    2C9A
....................          Flanco2 = 0; 
2C98:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2C9A:  BSF    F96.1
2C9C:  BTFSC  F84.1
2C9E:  BRA    2CCA
....................          delay_ms(20); 
2CA0:  MOVLW  14
2CA2:  MOVWF  xD1
2CA4:  CALL   0864
....................          if(RIGHT){ 
2CA8:  BSF    F96.1
2CAA:  BTFSC  F84.1
2CAC:  BRA    2CC8
....................             if(Flanco1 == 0) { 
2CAE:  BTFSC  16.4
2CB0:  BRA    2CC8
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2CB2:  BSF    16.4
2CB4:  INCF   1B,F
2CB6:  MOVLW  1E
2CB8:  MOVWF  xD1
2CBA:  CALL   0864
2CBE:  MOVLW  0C
2CC0:  MOVWF  xCB
2CC2:  CALL   09D4
2CC6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2CC8:  BRA    2CCC
....................          Flanco1 = 0; 
2CCA:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2CCC:  BSF    F96.2
2CCE:  BTFSC  F84.2
2CD0:  BRA    2CFC
....................          delay_ms(150); 
2CD2:  MOVLW  96
2CD4:  MOVWF  xD1
2CD6:  CALL   0864
....................          if(IZQU){ 
2CDA:  BSF    F96.2
2CDC:  BTFSC  F84.2
2CDE:  BRA    2CFA
....................             if(Flanco3 == 0){ 
2CE0:  BTFSC  16.6
2CE2:  BRA    2CFA
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2CE4:  BSF    16.6
2CE6:  DECF   1B,F
2CE8:  MOVLW  1E
2CEA:  MOVWF  xD1
2CEC:  CALL   0864
2CF0:  MOVLW  0C
2CF2:  MOVWF  xCB
2CF4:  CALL   09D4
2CF8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2CFA:  BRA    2CFE
....................         Flanco3 = 0; 
2CFC:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2CFE:  MOVLW  0B
2D00:  SUBWF  1B,W
2D02:  CLRF   03
2D04:  ADDLW  35
2D06:  MOVWF  FE9
2D08:  MOVLW  00
2D0A:  ADDWFC 03,W
2D0C:  MOVWF  FEA
2D0E:  BTFSC  FEF.7
2D10:  BRA    2D14
2D12:  BRA    2D28
....................          clave[unidad-11]=9; 
2D14:  MOVLW  0B
2D16:  SUBWF  1B,W
2D18:  CLRF   03
2D1A:  ADDLW  35
2D1C:  MOVWF  FE9
2D1E:  MOVLW  00
2D20:  ADDWFC 03,W
2D22:  MOVWF  FEA
2D24:  MOVLW  09
2D26:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2D28:  MOVLW  0B
2D2A:  SUBWF  1B,W
2D2C:  CLRF   03
2D2E:  ADDLW  35
2D30:  MOVWF  FE9
2D32:  MOVLW  00
2D34:  ADDWFC 03,W
2D36:  MOVWF  FEA
2D38:  BTFSC  FEF.7
2D3A:  BRA    2D54
2D3C:  MOVF   FEF,W
2D3E:  SUBLW  09
2D40:  BC    2D54
....................          clave[unidad-11]=0; 
2D42:  MOVLW  0B
2D44:  SUBWF  1B,W
2D46:  CLRF   03
2D48:  ADDLW  35
2D4A:  MOVWF  FE9
2D4C:  MOVLW  00
2D4E:  ADDWFC 03,W
2D50:  MOVWF  FEA
2D52:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2D54:  MOVF   1B,W
2D56:  SUBLW  0A
2D58:  BNC   2D7A
....................          unidad=11; 
2D5A:  MOVLW  0B
2D5C:  MOVWF  1B
....................          Menu=1; 
2D5E:  MOVLW  01
2D60:  MOVWF  18
....................          paso=0; 
2D62:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2D64:  CLRF   35
2D66:  CLRF   36
2D68:  CLRF   37
2D6A:  CLRF   38
2D6C:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2D6E:  MOVLW  0B
2D70:  MOVWF  1B
2D72:  MOVLW  0C
2D74:  MOVWF  xCB
2D76:  CALL   09D4
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2D7A:  MOVF   1B,W
2D7C:  SUBLW  0E
2D7E:  BTFSC  FD8.0
2D80:  BRA    2EA8
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2D82:  MOVF   39,W
2D84:  SUBWF  35,W
2D86:  BNZ   2E24
2D88:  MOVF   3A,W
2D8A:  SUBWF  36,W
2D8C:  BNZ   2E24
2D8E:  MOVF   3B,W
2D90:  SUBWF  37,W
2D92:  BNZ   2E24
2D94:  MOVF   3C,W
2D96:  SUBWF  38,W
2D98:  BNZ   2E24
....................             lcd_gotoxy(1,1); 
2D9A:  MOVLW  01
2D9C:  MOVWF  xCC
2D9E:  MOVWF  xCD
2DA0:  CALL   0972
....................             printf(lcd_putc,"                    "); 
2DA4:  MOVLW  D2
2DA6:  MOVWF  FF6
2DA8:  MOVLW  03
2DAA:  MOVWF  FF7
2DAC:  CALL   0A32
....................             lcd_gotoxy(1,2); 
2DB0:  MOVLW  01
2DB2:  MOVWF  xCC
2DB4:  MOVLW  02
2DB6:  MOVWF  xCD
2DB8:  CALL   0972
....................             printf(lcd_putc,"     Contraseña     "); 
2DBC:  MOVLW  E8
2DBE:  MOVWF  FF6
2DC0:  MOVLW  03
2DC2:  MOVWF  FF7
2DC4:  CALL   0A32
....................             lcd_gotoxy(1,3); 
2DC8:  MOVLW  01
2DCA:  MOVWF  xCC
2DCC:  MOVLW  03
2DCE:  MOVWF  xCD
2DD0:  CALL   0972
....................             printf(lcd_putc,"      Correcta      "); 
2DD4:  MOVLW  FE
2DD6:  MOVWF  FF6
2DD8:  MOVLW  03
2DDA:  MOVWF  FF7
2DDC:  CALL   0A32
....................             lcd_gotoxy(1,4); 
2DE0:  MOVLW  01
2DE2:  MOVWF  xCC
2DE4:  MOVLW  04
2DE6:  MOVWF  xCD
2DE8:  CALL   0972
....................             printf(lcd_putc,"                    "); 
2DEC:  MOVLW  14
2DEE:  MOVWF  FF6
2DF0:  MOVLW  04
2DF2:  MOVWF  FF7
2DF4:  CALL   0A32
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2DF8:  MOVLW  02
2DFA:  MOVWF  xBA
2DFC:  MOVLW  FA
2DFE:  MOVWF  xD1
2E00:  CALL   0864
2E04:  DECFSZ xBA,F
2E06:  BRA    2DFC
2E08:  MOVLW  3D
2E0A:  MOVWF  18
2E0C:  MOVLW  0B
2E0E:  MOVWF  1B
2E10:  MOVLW  0C
2E12:  MOVWF  xCB
2E14:  CALL   09D4
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2E18:  CLRF   35
2E1A:  CLRF   36
2E1C:  CLRF   37
2E1E:  CLRF   38
2E20:  BSF    17.5
....................          }else{ 
2E22:  BRA    2EA8
....................             lcd_gotoxy(1,1); 
2E24:  MOVLW  01
2E26:  MOVWF  xCC
2E28:  MOVWF  xCD
2E2A:  CALL   0972
....................             printf(lcd_putc,"                    "); 
2E2E:  MOVLW  2A
2E30:  MOVWF  FF6
2E32:  MOVLW  04
2E34:  MOVWF  FF7
2E36:  CALL   0A32
....................             lcd_gotoxy(1,2); 
2E3A:  MOVLW  01
2E3C:  MOVWF  xCC
2E3E:  MOVLW  02
2E40:  MOVWF  xCD
2E42:  CALL   0972
....................             printf(lcd_putc,"     Contraseña     "); 
2E46:  MOVLW  40
2E48:  MOVWF  FF6
2E4A:  MOVLW  04
2E4C:  MOVWF  FF7
2E4E:  CALL   0A32
....................             lcd_gotoxy(1,3); 
2E52:  MOVLW  01
2E54:  MOVWF  xCC
2E56:  MOVLW  03
2E58:  MOVWF  xCD
2E5A:  CALL   0972
....................             printf(lcd_putc,"     Incorrecta     "); 
2E5E:  MOVLW  56
2E60:  MOVWF  FF6
2E62:  MOVLW  04
2E64:  MOVWF  FF7
2E66:  CALL   0A32
....................             lcd_gotoxy(1,4); 
2E6A:  MOVLW  01
2E6C:  MOVWF  xCC
2E6E:  MOVLW  04
2E70:  MOVWF  xCD
2E72:  CALL   0972
....................             printf(lcd_putc,"                    "); 
2E76:  MOVLW  6C
2E78:  MOVWF  FF6
2E7A:  MOVLW  04
2E7C:  MOVWF  FF7
2E7E:  CALL   0A32
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2E82:  MOVLW  02
2E84:  MOVWF  xBA
2E86:  MOVLW  FA
2E88:  MOVWF  xD1
2E8A:  CALL   0864
2E8E:  DECFSZ xBA,F
2E90:  BRA    2E86
2E92:  MOVLW  0B
2E94:  MOVWF  1B
2E96:  MOVLW  0C
2E98:  MOVWF  xCB
2E9A:  CALL   09D4
2E9E:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2EA0:  CLRF   35
2EA2:  CLRF   36
2EA4:  CLRF   37
2EA6:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2EA8:  MOVF   18,W
2EAA:  SUBLW  3D
2EAC:  BTFSS  FD8.2
2EAE:  BRA    3238
....................       EliminaRuido(); 
2EB0:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2EB4:  MOVLW  01
2EB6:  MOVWF  xCC
2EB8:  MOVWF  xCD
2EBA:  CALL   0972
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
2EBE:  MOVLW  82
2EC0:  MOVWF  FF6
2EC2:  MOVLW  04
2EC4:  MOVWF  FF7
2EC6:  CALL   0A32
....................          lcd_gotoxy(1,2); 
2ECA:  MOVLW  01
2ECC:  MOVWF  xCC
2ECE:  MOVLW  02
2ED0:  MOVWF  xCD
2ED2:  CALL   0972
....................          printf(lcd_putc,"     Contraseña     "); 
2ED6:  MOVLW  98
2ED8:  MOVWF  FF6
2EDA:  MOVLW  04
2EDC:  MOVWF  FF7
2EDE:  CALL   0A32
....................          lcd_gotoxy(1,3); 
2EE2:  MOVLW  01
2EE4:  MOVWF  xCC
2EE6:  MOVLW  03
2EE8:  MOVWF  xCD
2EEA:  CALL   0972
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2EEE:  MOVLW  AE
2EF0:  MOVWF  FF6
2EF2:  MOVLW  04
2EF4:  MOVWF  FF7
2EF6:  MOVLW  0A
2EF8:  MOVWF  xBE
2EFA:  CALL   10D6
2EFE:  MOVFF  35,BA
2F02:  MOVLW  1F
2F04:  MOVWF  xBB
2F06:  CALL   111C
2F0A:  MOVFF  36,BA
2F0E:  MOVLW  1F
2F10:  MOVWF  xBB
2F12:  CALL   111C
2F16:  MOVFF  37,BA
2F1A:  MOVLW  1F
2F1C:  MOVWF  xBB
2F1E:  CALL   111C
2F22:  MOVFF  38,BA
2F26:  MOVLW  1F
2F28:  MOVWF  xBB
2F2A:  CALL   111C
2F2E:  MOVLW  20
2F30:  MOVWF  xCB
2F32:  CALL   09D4
2F36:  MOVLW  20
2F38:  MOVWF  xCB
2F3A:  CALL   09D4
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2F3E:  MOVFF  1B,CC
2F42:  MOVLW  04
2F44:  MOVWF  xCD
2F46:  CALL   0972
....................          lcd_putc(t[2]); 
2F4A:  MOVFF  34,CB
2F4E:  CALL   09D4
....................           
....................          if(unidad>11&&unidad<14){ 
2F52:  MOVF   1B,W
2F54:  SUBLW  0B
2F56:  BC    2F76
2F58:  MOVF   1B,W
2F5A:  SUBLW  0D
2F5C:  BNC   2F76
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2F5E:  MOVLW  01
2F60:  SUBWF  1B,W
2F62:  MOVWF  xBA
2F64:  MOVWF  xCC
2F66:  MOVLW  04
2F68:  MOVWF  xCD
2F6A:  CALL   0972
....................             lcd_putc(t[1]); 
2F6E:  MOVFF  33,CB
2F72:  CALL   09D4
....................          } 
....................           
....................          Cambio=OFF; 
2F76:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2F78:  BSF    F92.5
2F7A:  BTFSC  F80.5
2F7C:  BRA    2FB0
....................          delay_ms(20); 
2F7E:  MOVLW  14
2F80:  MOVWF  xD1
2F82:  CALL   0864
....................          if(UP){ 
2F86:  BSF    F92.5
2F88:  BTFSC  F80.5
2F8A:  BRA    2FAE
....................             if(Flanco == 0) { 
2F8C:  BTFSC  16.3
2F8E:  BRA    2FAE
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2F90:  MOVLW  0B
2F92:  SUBWF  1B,W
2F94:  CLRF   03
2F96:  ADDLW  35
2F98:  MOVWF  FE9
2F9A:  MOVLW  00
2F9C:  ADDWFC 03,W
2F9E:  MOVWF  FEA
2FA0:  INCF   FEF,F
2FA2:  BSF    16.3
2FA4:  MOVLW  1E
2FA6:  MOVWF  xD1
2FA8:  CALL   0864
2FAC:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2FAE:  BRA    2FB2
....................          Flanco = 0; 
2FB0:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2FB2:  BSF    F96.0
2FB4:  BTFSC  F84.0
2FB6:  BRA    2FEA
....................          delay_ms(20); 
2FB8:  MOVLW  14
2FBA:  MOVWF  xD1
2FBC:  CALL   0864
....................          if(DOWN){ 
2FC0:  BSF    F96.0
2FC2:  BTFSC  F84.0
2FC4:  BRA    2FE8
....................             if(Flanco2 == 0) { 
2FC6:  BTFSC  16.5
2FC8:  BRA    2FE8
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2FCA:  MOVLW  0B
2FCC:  SUBWF  1B,W
2FCE:  CLRF   03
2FD0:  ADDLW  35
2FD2:  MOVWF  FE9
2FD4:  MOVLW  00
2FD6:  ADDWFC 03,W
2FD8:  MOVWF  FEA
2FDA:  DECF   FEF,F
2FDC:  BSF    16.5
2FDE:  MOVLW  1E
2FE0:  MOVWF  xD1
2FE2:  CALL   0864
2FE6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2FE8:  BRA    2FEC
....................          Flanco2 = 0; 
2FEA:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2FEC:  BSF    F96.1
2FEE:  BTFSC  F84.1
2FF0:  BRA    3014
....................          if(RIGHT){ 
2FF2:  BSF    F96.1
2FF4:  BTFSC  F84.1
2FF6:  BRA    3012
....................             if(Flanco1 == 0) { 
2FF8:  BTFSC  16.4
2FFA:  BRA    3012
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2FFC:  BSF    16.4
2FFE:  INCF   1B,F
3000:  MOVLW  1E
3002:  MOVWF  xD1
3004:  CALL   0864
3008:  MOVLW  0C
300A:  MOVWF  xCB
300C:  CALL   09D4
3010:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3012:  BRA    3016
....................          Flanco1 = 0; 
3014:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3016:  BSF    F96.2
3018:  BTFSC  F84.2
301A:  BRA    3046
....................          delay_ms(150); 
301C:  MOVLW  96
301E:  MOVWF  xD1
3020:  CALL   0864
....................          if(IZQU){ 
3024:  BSF    F96.2
3026:  BTFSC  F84.2
3028:  BRA    3044
....................             if(Flanco3 == 0){ 
302A:  BTFSC  16.6
302C:  BRA    3044
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
302E:  BSF    16.6
3030:  DECF   1B,F
3032:  MOVLW  1E
3034:  MOVWF  xD1
3036:  CALL   0864
303A:  MOVLW  0C
303C:  MOVWF  xCB
303E:  CALL   09D4
3042:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3044:  BRA    3048
....................         Flanco3 = 0; 
3046:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3048:  MOVLW  0B
304A:  SUBWF  1B,W
304C:  CLRF   03
304E:  ADDLW  35
3050:  MOVWF  FE9
3052:  MOVLW  00
3054:  ADDWFC 03,W
3056:  MOVWF  FEA
3058:  BTFSC  FEF.7
305A:  BRA    305E
305C:  BRA    3072
....................          clave[unidad-11]=9; 
305E:  MOVLW  0B
3060:  SUBWF  1B,W
3062:  CLRF   03
3064:  ADDLW  35
3066:  MOVWF  FE9
3068:  MOVLW  00
306A:  ADDWFC 03,W
306C:  MOVWF  FEA
306E:  MOVLW  09
3070:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3072:  MOVLW  0B
3074:  SUBWF  1B,W
3076:  CLRF   03
3078:  ADDLW  35
307A:  MOVWF  FE9
307C:  MOVLW  00
307E:  ADDWFC 03,W
3080:  MOVWF  FEA
3082:  BTFSC  FEF.7
3084:  BRA    309E
3086:  MOVF   FEF,W
3088:  SUBLW  09
308A:  BC    309E
....................          clave[unidad-11]=0; 
308C:  MOVLW  0B
308E:  SUBWF  1B,W
3090:  CLRF   03
3092:  ADDLW  35
3094:  MOVWF  FE9
3096:  MOVLW  00
3098:  ADDWFC 03,W
309A:  MOVWF  FEA
309C:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
309E:  MOVF   1B,W
30A0:  SUBLW  0A
30A2:  BNC   30C2
....................          unidad=11; 
30A4:  MOVLW  0B
30A6:  MOVWF  1B
....................          Menu=1; 
30A8:  MOVLW  01
30AA:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
30AC:  CLRF   35
30AE:  CLRF   36
30B0:  CLRF   37
30B2:  CLRF   38
30B4:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
30B6:  MOVLW  0B
30B8:  MOVWF  1B
30BA:  MOVLW  0C
30BC:  MOVWF  xCB
30BE:  CALL   09D4
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
30C2:  MOVF   1B,W
30C4:  SUBLW  0E
30C6:  BTFSC  FD8.0
30C8:  BRA    3238
....................          lcd_gotoxy(1,1); 
30CA:  MOVLW  01
30CC:  MOVWF  xCC
30CE:  MOVWF  xCD
30D0:  CALL   0972
....................          printf(lcd_putc,"                    "); 
30D4:  MOVLW  C4
30D6:  MOVWF  FF6
30D8:  MOVLW  04
30DA:  MOVWF  FF7
30DC:  CALL   0A32
....................          lcd_gotoxy(1,2); 
30E0:  MOVLW  01
30E2:  MOVWF  xCC
30E4:  MOVLW  02
30E6:  MOVWF  xCD
30E8:  CALL   0972
....................          printf(lcd_putc,"     Contraseña     "); 
30EC:  MOVLW  DA
30EE:  MOVWF  FF6
30F0:  MOVLW  04
30F2:  MOVWF  FF7
30F4:  CALL   0A32
....................          lcd_gotoxy(1,3); 
30F8:  MOVLW  01
30FA:  MOVWF  xCC
30FC:  MOVLW  03
30FE:  MOVWF  xCD
3100:  CALL   0972
....................          printf(lcd_putc,"     Almacenada     "); 
3104:  MOVLW  F0
3106:  MOVWF  FF6
3108:  MOVLW  04
310A:  MOVWF  FF7
310C:  CALL   0A32
....................          lcd_gotoxy(1,4); 
3110:  MOVLW  01
3112:  MOVWF  xCC
3114:  MOVLW  04
3116:  MOVWF  xCD
3118:  CALL   0972
....................          printf(lcd_putc,"                    "); 
311C:  MOVLW  06
311E:  MOVWF  FF6
3120:  MOVLW  05
3122:  MOVWF  FF7
3124:  CALL   0A32
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3128:  CLRF   FA9
312A:  MOVFF  35,FA8
312E:  BCF    FA6.6
3130:  BCF    FA6.7
3132:  BSF    FA6.2
3134:  MOVF   FF2,W
3136:  MOVWF  00
3138:  BCF    FF2.7
313A:  MOVLB  F
313C:  MOVLW  55
313E:  MOVWF  FA7
3140:  MOVLW  AA
3142:  MOVWF  FA7
3144:  BSF    FA6.1
3146:  BTFSC  FA6.1
3148:  BRA    3146
314A:  BCF    FA6.2
314C:  MOVF   00,W
314E:  IORWF  FF2,F
3150:  MOVLW  14
3152:  MOVLB  0
3154:  MOVWF  xD1
3156:  CALL   0864
315A:  MOVLW  01
315C:  MOVWF  FA9
315E:  MOVFF  36,FA8
3162:  BCF    FA6.6
3164:  BCF    FA6.7
3166:  BSF    FA6.2
3168:  MOVF   FF2,W
316A:  MOVWF  00
316C:  BCF    FF2.7
316E:  MOVLB  F
3170:  MOVLW  55
3172:  MOVWF  FA7
3174:  MOVLW  AA
3176:  MOVWF  FA7
3178:  BSF    FA6.1
317A:  BTFSC  FA6.1
317C:  BRA    317A
317E:  BCF    FA6.2
3180:  MOVF   00,W
3182:  IORWF  FF2,F
3184:  MOVLW  14
3186:  MOVLB  0
3188:  MOVWF  xD1
318A:  CALL   0864
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
318E:  MOVLW  02
3190:  MOVWF  FA9
3192:  MOVFF  37,FA8
3196:  BCF    FA6.6
3198:  BCF    FA6.7
319A:  BSF    FA6.2
319C:  MOVF   FF2,W
319E:  MOVWF  00
31A0:  BCF    FF2.7
31A2:  MOVLB  F
31A4:  MOVLW  55
31A6:  MOVWF  FA7
31A8:  MOVLW  AA
31AA:  MOVWF  FA7
31AC:  BSF    FA6.1
31AE:  BTFSC  FA6.1
31B0:  BRA    31AE
31B2:  BCF    FA6.2
31B4:  MOVF   00,W
31B6:  IORWF  FF2,F
31B8:  MOVLW  14
31BA:  MOVLB  0
31BC:  MOVWF  xD1
31BE:  CALL   0864
31C2:  MOVLW  03
31C4:  MOVWF  FA9
31C6:  MOVFF  38,FA8
31CA:  BCF    FA6.6
31CC:  BCF    FA6.7
31CE:  BSF    FA6.2
31D0:  MOVF   FF2,W
31D2:  MOVWF  00
31D4:  BCF    FF2.7
31D6:  MOVLB  F
31D8:  MOVLW  55
31DA:  MOVWF  FA7
31DC:  MOVLW  AA
31DE:  MOVWF  FA7
31E0:  BSF    FA6.1
31E2:  BTFSC  FA6.1
31E4:  BRA    31E2
31E6:  BCF    FA6.2
31E8:  MOVF   00,W
31EA:  IORWF  FF2,F
31EC:  MOVLW  14
31EE:  MOVLB  0
31F0:  MOVWF  xD1
31F2:  CALL   0864
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
31F6:  MOVLW  02
31F8:  MOVWF  xBA
31FA:  MOVLW  FA
31FC:  MOVWF  xD1
31FE:  CALL   0864
3202:  DECFSZ xBA,F
3204:  BRA    31FA
3206:  MOVLW  01
3208:  MOVWF  18
320A:  CLRF   31
320C:  MOVLW  02
320E:  MOVWF  1C
3210:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3212:  MOVFF  35,39
3216:  MOVFF  36,3A
321A:  MOVFF  37,3B
321E:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3222:  CLRF   35
3224:  CLRF   36
3226:  CLRF   37
3228:  CLRF   38
322A:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
322C:  MOVLW  0B
322E:  MOVWF  1B
3230:  MOVLW  0C
3232:  MOVWF  xCB
3234:  CALL   09D4
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3238:  MOVF   18,W
323A:  SUBLW  04
323C:  BTFSS  FD8.2
323E:  BRA    3452
....................    EliminaRuido(); 
3240:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3244:  MOVLW  01
3246:  MOVWF  xCC
3248:  MOVWF  xCD
324A:  CALL   0972
....................       printf(lcd_putc,"  Duracion Actual   "); 
324E:  MOVLW  1C
3250:  MOVWF  FF6
3252:  MOVLW  05
3254:  MOVWF  FF7
3256:  CALL   0A32
....................       lcd_gotoxy(1,2); 
325A:  MOVLW  01
325C:  MOVWF  xCC
325E:  MOVLW  02
3260:  MOVWF  xCD
3262:  CALL   0972
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
3266:  MOVLW  32
3268:  MOVWF  FF6
326A:  MOVLW  05
326C:  MOVWF  FF7
326E:  MOVLW  0B
3270:  MOVWF  xBE
3272:  CALL   10D6
3276:  MOVLW  08
3278:  MOVWF  FE9
327A:  MOVFF  41,BB
327E:  MOVFF  40,BA
3282:  GOTO   1324
3286:  MOVLW  20
3288:  MOVWF  xCB
328A:  CALL   09D4
328E:  MOVLW  20
3290:  MOVWF  xCB
3292:  CALL   09D4
3296:  MOVLW  20
3298:  MOVWF  xCB
329A:  CALL   09D4
....................       lcd_gotoxy(1,4); 
329E:  MOVLW  01
32A0:  MOVWF  xCC
32A2:  MOVLW  04
32A4:  MOVWF  xCD
32A6:  CALL   0972
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
32AA:  MOVLW  46
32AC:  MOVWF  FF6
32AE:  MOVLW  05
32B0:  MOVWF  FF7
32B2:  CALL   0A32
....................        
....................       Cambio=OFF; 
32B6:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
32B8:  BSF    F92.5
32BA:  BTFSC  F80.5
32BC:  BRA    340E
32BE:  BSF    F96.1
32C0:  BTFSC  F84.1
32C2:  BRA    340E
....................          delay_ms(20); 
32C4:  MOVLW  14
32C6:  MOVWF  xD1
32C8:  CALL   0864
....................          if(UP && RIGHT){ 
32CC:  BSF    F92.5
32CE:  BTFSC  F80.5
32D0:  BRA    340E
32D2:  BSF    F96.1
32D4:  BTFSC  F84.1
32D6:  BRA    340E
....................             delay_ms(200); 
32D8:  MOVLW  C8
32DA:  MOVWF  xD1
32DC:  CALL   0864
....................             printf(lcd_putc,"\f"); 
32E0:  MOVLW  0C
32E2:  MOVWF  xCB
32E4:  CALL   09D4
....................             lcd_gotoxy(1,2); 
32E8:  MOVLW  01
32EA:  MOVWF  xCC
32EC:  MOVLW  02
32EE:  MOVWF  xCD
32F0:  CALL   0972
....................             printf(lcd_putc," Reset de tiempo "); 
32F4:  MOVLW  5C
32F6:  MOVWF  FF6
32F8:  MOVLW  05
32FA:  MOVWF  FF7
32FC:  CALL   0A32
....................             lcd_gotoxy(1,3); 
3300:  MOVLW  01
3302:  MOVWF  xCC
3304:  MOVLW  03
3306:  MOVWF  xCD
3308:  CALL   0972
....................             printf(lcd_putc,"     Exitoso     "); 
330C:  MOVLW  6E
330E:  MOVWF  FF6
3310:  MOVLW  05
3312:  MOVWF  FF7
3314:  CALL   0A32
....................             write_eeprom(7,0); 
3318:  MOVLW  07
331A:  MOVWF  FA9
331C:  CLRF   FA8
331E:  BCF    FA6.6
3320:  BCF    FA6.7
3322:  BSF    FA6.2
3324:  MOVF   FF2,W
3326:  MOVWF  00
3328:  BCF    FF2.7
332A:  MOVLB  F
332C:  MOVLW  55
332E:  MOVWF  FA7
3330:  MOVLW  AA
3332:  MOVWF  FA7
3334:  BSF    FA6.1
3336:  BTFSC  FA6.1
3338:  BRA    3336
333A:  BCF    FA6.2
333C:  MOVF   00,W
333E:  IORWF  FF2,F
....................             delay_ms(20); 
3340:  MOVLW  14
3342:  MOVLB  0
3344:  MOVWF  xD1
3346:  CALL   0864
....................             write_eeprom(8,0); 
334A:  MOVLW  08
334C:  MOVWF  FA9
334E:  CLRF   FA8
3350:  BCF    FA6.6
3352:  BCF    FA6.7
3354:  BSF    FA6.2
3356:  MOVF   FF2,W
3358:  MOVWF  00
335A:  BCF    FF2.7
335C:  MOVLB  F
335E:  MOVLW  55
3360:  MOVWF  FA7
3362:  MOVLW  AA
3364:  MOVWF  FA7
3366:  BSF    FA6.1
3368:  BTFSC  FA6.1
336A:  BRA    3368
336C:  BCF    FA6.2
336E:  MOVF   00,W
3370:  IORWF  FF2,F
....................             delay_ms(20); 
3372:  MOVLW  14
3374:  MOVLB  0
3376:  MOVWF  xD1
3378:  CALL   0864
....................             write_eeprom(9,0); 
337C:  MOVLW  09
337E:  MOVWF  FA9
3380:  CLRF   FA8
3382:  BCF    FA6.6
3384:  BCF    FA6.7
3386:  BSF    FA6.2
3388:  MOVF   FF2,W
338A:  MOVWF  00
338C:  BCF    FF2.7
338E:  MOVLB  F
3390:  MOVLW  55
3392:  MOVWF  FA7
3394:  MOVLW  AA
3396:  MOVWF  FA7
3398:  BSF    FA6.1
339A:  BTFSC  FA6.1
339C:  BRA    339A
339E:  BCF    FA6.2
33A0:  MOVF   00,W
33A2:  IORWF  FF2,F
....................             delay_ms(20); 
33A4:  MOVLW  14
33A6:  MOVLB  0
33A8:  MOVWF  xD1
33AA:  CALL   0864
....................             write_eeprom(10,0); 
33AE:  MOVLW  0A
33B0:  MOVWF  FA9
33B2:  CLRF   FA8
33B4:  BCF    FA6.6
33B6:  BCF    FA6.7
33B8:  BSF    FA6.2
33BA:  MOVF   FF2,W
33BC:  MOVWF  00
33BE:  BCF    FF2.7
33C0:  MOVLB  F
33C2:  MOVLW  55
33C4:  MOVWF  FA7
33C6:  MOVLW  AA
33C8:  MOVWF  FA7
33CA:  BSF    FA6.1
33CC:  BTFSC  FA6.1
33CE:  BRA    33CC
33D0:  BCF    FA6.2
33D2:  MOVF   00,W
33D4:  IORWF  FF2,F
....................             delay_ms(700); 
33D6:  MOVLW  04
33D8:  MOVLB  0
33DA:  MOVWF  xBA
33DC:  MOVLW  AF
33DE:  MOVWF  xD1
33E0:  CALL   0864
33E4:  DECFSZ xBA,F
33E6:  BRA    33DC
....................             segundos=0;minutos=0;horas=0; 
33E8:  CLRF   21
33EA:  CLRF   22
33EC:  CLRF   41
33EE:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
33F0:  MOVLW  1E
33F2:  MOVWF  xD1
33F4:  CALL   0864
33F8:  MOVLW  01
33FA:  MOVWF  18
33FC:  CLRF   31
33FE:  MOVLW  02
3400:  MOVWF  1C
3402:  MOVWF  1E
3404:  MOVLW  0C
3406:  MOVWF  xCB
3408:  CALL   09D4
....................             Cambio=ON; 
340C:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
340E:  BSF    F96.2
3410:  BTFSC  F84.2
3412:  BRA    3450
....................          delay_ms(20); 
3414:  MOVLW  14
3416:  MOVWF  xD1
3418:  CALL   0864
....................          if(IZQU){ 
341C:  BSF    F96.2
341E:  BTFSC  F84.2
3420:  BRA    344E
....................             if(Flanco3 == 0){ 
3422:  BTFSC  16.6
3424:  BRA    344E
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3426:  BSF    16.6
3428:  MOVLW  02
342A:  MOVWF  xBA
342C:  MOVLW  FA
342E:  MOVWF  xD1
3430:  CALL   0864
3434:  DECFSZ xBA,F
3436:  BRA    342C
3438:  MOVLW  01
343A:  MOVWF  18
343C:  CLRF   31
343E:  MOVLW  02
3440:  MOVWF  1C
3442:  MOVWF  1E
3444:  MOVLW  0C
3446:  MOVWF  xCB
3448:  CALL   09D4
344C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
344E:  BRA    3452
....................          Flanco3 = 0; 
3450:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3452:  MOVF   18,W
3454:  SUBLW  05
3456:  BTFSS  FD8.2
3458:  BRA    36AE
....................       EliminaRuido(); 
345A:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
345E:  MOVLW  01
3460:  MOVWF  xCC
3462:  MOVWF  xCD
3464:  CALL   0972
....................          printf(lcd_putc,"  Zero Point Config "); 
3468:  MOVLW  80
346A:  MOVWF  FF6
346C:  MOVLW  05
346E:  MOVWF  FF7
3470:  CALL   0A32
....................          lcd_gotoxy(1,2); 
3474:  MOVLW  01
3476:  MOVWF  xCC
3478:  MOVLW  02
347A:  MOVWF  xCD
347C:  CALL   0972
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3480:  MOVLW  05
3482:  MOVWF  xBA
3484:  CALL   18E6
3488:  MOVFF  00,BA
348C:  MOVFF  01,BB
3490:  MOVFF  02,BC
3494:  MOVFF  03,BD
3498:  MOVFF  03,D1
349C:  MOVFF  02,D0
34A0:  MOVFF  01,CF
34A4:  MOVFF  00,CE
34A8:  MOVLW  D7
34AA:  MOVWF  xD5
34AC:  MOVLW  A3
34AE:  MOVWF  xD4
34B0:  CLRF   xD3
34B2:  MOVLW  81
34B4:  MOVWF  xD2
34B6:  CALL   1430
34BA:  MOVFF  00,BA
34BE:  MOVFF  01,BB
34C2:  MOVFF  02,BC
34C6:  MOVFF  03,BD
34CA:  MOVLW  96
34CC:  MOVWF  FF6
34CE:  MOVLW  05
34D0:  MOVWF  FF7
34D2:  MOVLW  09
34D4:  MOVWF  xBE
34D6:  CALL   10D6
34DA:  MOVLW  02
34DC:  MOVWF  FE9
34DE:  MOVFF  BD,C1
34E2:  MOVFF  BC,C0
34E6:  MOVFF  BB,BF
34EA:  MOVFF  BA,BE
34EE:  MOVWF  xC2
34F0:  CALL   1BEE
34F4:  MOVLW  A4
34F6:  MOVWF  FF6
34F8:  MOVLW  05
34FA:  MOVWF  FF7
34FC:  MOVLW  07
34FE:  MOVWF  xBE
3500:  CALL   10D6
....................          lcd_gotoxy(1,3); 
3504:  MOVLW  01
3506:  MOVWF  xCC
3508:  MOVLW  03
350A:  MOVWF  xCD
350C:  CALL   0972
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3510:  CLRF   xCB
3512:  CALL   13DA
3516:  MOVFF  00,BA
351A:  MOVFF  01,BB
351E:  MOVFF  02,BC
3522:  MOVFF  03,BD
3526:  MOVLW  AC
3528:  MOVWF  FF6
352A:  MOVLW  05
352C:  MOVWF  FF7
352E:  MOVLW  08
3530:  MOVWF  xBE
3532:  CALL   10D6
3536:  MOVLW  01
3538:  MOVWF  FE9
353A:  MOVFF  BD,C1
353E:  MOVFF  BC,C0
3542:  MOVFF  BB,BF
3546:  MOVFF  BA,BE
354A:  CLRF   xC2
354C:  CALL   1BEE
....................          lcd_gotoxy(1,4); 
3550:  MOVLW  01
3552:  MOVWF  xCC
3554:  MOVLW  04
3556:  MOVWF  xCD
3558:  CALL   0972
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
355C:  MOVLW  BA
355E:  MOVWF  FF6
3560:  MOVLW  05
3562:  MOVWF  FF7
3564:  MOVLW  07
3566:  MOVWF  xBE
3568:  CALL   10D6
356C:  MOVLW  01
356E:  MOVWF  FE9
3570:  MOVFF  A7,C1
3574:  MOVFF  A6,C0
3578:  MOVFF  A5,BF
357C:  MOVFF  A4,BE
3580:  CLRF   xC2
3582:  CALL   1BEE
....................           
....................          Cambio=OFF; 
3586:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
3588:  BSF    F96.1
358A:  BTFSC  F84.1
358C:  BRA    366E
....................          delay_ms(20); 
358E:  MOVLW  14
3590:  MOVWF  xD1
3592:  CALL   0864
....................          if(RIGHT){ 
3596:  BSF    F96.1
3598:  BTFSC  F84.1
359A:  BRA    366C
....................             if(Flanco1 == 0){ 
359C:  BTFSC  16.4
359E:  BRA    366C
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
35A0:  MOVLW  01
35A2:  MOVWF  18
35A4:  CLRF   31
35A6:  MOVLW  02
35A8:  MOVWF  1C
35AA:  MOVWF  1E
35AC:  MOVLW  0B
35AE:  MOVWF  1B
35B0:  MOVLW  02
35B2:  MOVWF  xBA
35B4:  MOVLW  FA
35B6:  MOVWF  xD1
35B8:  CALL   0864
35BC:  DECFSZ xBA,F
35BE:  BRA    35B4
35C0:  MOVLW  0C
35C2:  MOVWF  xCB
35C4:  CALL   09D4
....................                G=sensores(0); 
35C8:  CLRF   xCB
35CA:  CALL   13DA
35CE:  MOVFF  03,A7
35D2:  MOVFF  02,A6
35D6:  MOVFF  01,A5
35DA:  MOVFF  00,A4
....................                G16=(int16)G; 
35DE:  MOVFF  A7,D1
35E2:  MOVFF  A6,D0
35E6:  MOVFF  A5,CF
35EA:  MOVFF  A4,CE
35EE:  CALL   1D74
35F2:  MOVFF  02,43
35F6:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
35FA:  MOVFF  42,25
35FE:  MOVFF  43,26
....................                 
....................                write_eeprom(11,G_l); 
3602:  MOVLW  0B
3604:  MOVWF  FA9
3606:  MOVFF  25,FA8
360A:  BCF    FA6.6
360C:  BCF    FA6.7
360E:  BSF    FA6.2
3610:  MOVF   FF2,W
3612:  MOVWF  00
3614:  BCF    FF2.7
3616:  MOVLB  F
3618:  MOVLW  55
361A:  MOVWF  FA7
361C:  MOVLW  AA
361E:  MOVWF  FA7
3620:  BSF    FA6.1
3622:  BTFSC  FA6.1
3624:  BRA    3622
3626:  BCF    FA6.2
3628:  MOVF   00,W
362A:  IORWF  FF2,F
....................                delay_ms(20); 
362C:  MOVLW  14
362E:  MOVLB  0
3630:  MOVWF  xD1
3632:  CALL   0864
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3636:  MOVLW  0C
3638:  MOVWF  FA9
363A:  MOVFF  26,FA8
363E:  BCF    FA6.6
3640:  BCF    FA6.7
3642:  BSF    FA6.2
3644:  MOVF   FF2,W
3646:  MOVWF  00
3648:  BCF    FF2.7
364A:  MOVLB  F
364C:  MOVLW  55
364E:  MOVWF  FA7
3650:  MOVLW  AA
3652:  MOVWF  FA7
3654:  BSF    FA6.1
3656:  BTFSC  FA6.1
3658:  BRA    3656
365A:  BCF    FA6.2
365C:  MOVF   00,W
365E:  IORWF  FF2,F
....................                delay_ms(20); 
3660:  MOVLW  14
3662:  MOVLB  0
3664:  MOVWF  xD1
3666:  CALL   0864
....................                Cambio=ON; 
366A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
366C:  BRA    3670
....................          Flanco1 = 0; 
366E:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3670:  BSF    F96.2
3672:  BTFSC  F84.2
3674:  BRA    36AC
....................          delay_ms(20); 
3676:  MOVLW  14
3678:  MOVWF  xD1
367A:  CALL   0864
....................          if(IZQU){ 
367E:  BSF    F96.2
3680:  BTFSC  F84.2
3682:  BRA    36AA
....................             if(Flanco3 == 0){ 
3684:  BTFSC  16.6
3686:  BRA    36AA
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3688:  MOVLW  01
368A:  MOVWF  18
368C:  CLRF   31
368E:  MOVLW  02
3690:  MOVWF  1C
3692:  MOVWF  1E
3694:  MOVLW  0B
3696:  MOVWF  1B
3698:  MOVLW  1E
369A:  MOVWF  xD1
369C:  CALL   0864
36A0:  MOVLW  0C
36A2:  MOVWF  xCB
36A4:  CALL   09D4
....................                Cambio=ON; 
36A8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
36AA:  BRA    36AE
....................          Flanco3 = 0; 
36AC:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
36AE:  MOVF   18,W
36B0:  SUBLW  06
36B2:  BTFSS  FD8.2
36B4:  BRA    37DC
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
36B6:  BTG    17.4
36B8:  BSF    16.4
36BA:  MOVLW  01
36BC:  MOVWF  18
36BE:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
36C0:  BTFSS  17.4
36C2:  BRA    3724
....................             {estadoalarma=1; 
36C4:  BSF    17.4
....................                lcd_gotoxy(1,1); 
36C6:  MOVLW  01
36C8:  MOVWF  xCC
36CA:  MOVWF  xCD
36CC:  CALL   0972
....................                printf(lcd_putc,"                    "); 
36D0:  MOVLW  C8
36D2:  MOVWF  FF6
36D4:  MOVLW  05
36D6:  MOVWF  FF7
36D8:  CALL   0A32
....................                lcd_gotoxy(1,2); 
36DC:  MOVLW  01
36DE:  MOVWF  xCC
36E0:  MOVLW  02
36E2:  MOVWF  xCD
36E4:  CALL   0972
....................                printf(lcd_putc,"        Activo      "); 
36E8:  MOVLW  DE
36EA:  MOVWF  FF6
36EC:  MOVLW  05
36EE:  MOVWF  FF7
36F0:  CALL   0A32
....................                lcd_gotoxy(1,3); 
36F4:  MOVLW  01
36F6:  MOVWF  xCC
36F8:  MOVLW  03
36FA:  MOVWF  xCD
36FC:  CALL   0972
....................                printf(lcd_putc,"        Alarma      "); 
3700:  MOVLW  F4
3702:  MOVWF  FF6
3704:  MOVLW  05
3706:  MOVWF  FF7
3708:  CALL   0A32
....................                lcd_gotoxy(1,4); 
370C:  MOVLW  01
370E:  MOVWF  xCC
3710:  MOVLW  04
3712:  MOVWF  xCD
3714:  CALL   0972
....................                printf(lcd_putc,"                    ");} 
3718:  MOVLW  0A
371A:  MOVWF  FF6
371C:  MOVLW  06
371E:  MOVWF  FF7
3720:  CALL   0A32
....................                 
....................             if(estadoalarma==0) 
3724:  BTFSC  17.4
3726:  BRA    3788
....................             {estadoalarma=0; 
3728:  BCF    17.4
....................                lcd_gotoxy(1,1); 
372A:  MOVLW  01
372C:  MOVWF  xCC
372E:  MOVWF  xCD
3730:  CALL   0972
....................                printf(lcd_putc,"                    "); 
3734:  MOVLW  20
3736:  MOVWF  FF6
3738:  MOVLW  06
373A:  MOVWF  FF7
373C:  CALL   0A32
....................                lcd_gotoxy(1,2); 
3740:  MOVLW  01
3742:  MOVWF  xCC
3744:  MOVLW  02
3746:  MOVWF  xCD
3748:  CALL   0972
....................                printf(lcd_putc,"      Desactivo     "); 
374C:  MOVLW  36
374E:  MOVWF  FF6
3750:  MOVLW  06
3752:  MOVWF  FF7
3754:  CALL   0A32
....................                lcd_gotoxy(1,3); 
3758:  MOVLW  01
375A:  MOVWF  xCC
375C:  MOVLW  03
375E:  MOVWF  xCD
3760:  CALL   0972
....................                printf(lcd_putc,"       Alarma       "); 
3764:  MOVLW  4C
3766:  MOVWF  FF6
3768:  MOVLW  06
376A:  MOVWF  FF7
376C:  CALL   0A32
....................                lcd_gotoxy(1,4); 
3770:  MOVLW  01
3772:  MOVWF  xCC
3774:  MOVLW  04
3776:  MOVWF  xCD
3778:  CALL   0972
....................                printf(lcd_putc,"                    ");} 
377C:  MOVLW  62
377E:  MOVWF  FF6
3780:  MOVLW  06
3782:  MOVWF  FF7
3784:  CALL   0A32
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3788:  MOVLW  00
378A:  BTFSC  17.4
378C:  MOVLW  01
378E:  MOVWF  xBA
3790:  MOVLW  04
3792:  MOVWF  FA9
3794:  MOVFF  BA,FA8
3798:  BCF    FA6.6
379A:  BCF    FA6.7
379C:  BSF    FA6.2
379E:  MOVF   FF2,W
37A0:  MOVWF  00
37A2:  BCF    FF2.7
37A4:  MOVLB  F
37A6:  MOVLW  55
37A8:  MOVWF  FA7
37AA:  MOVLW  AA
37AC:  MOVWF  FA7
37AE:  BSF    FA6.1
37B0:  BTFSC  FA6.1
37B2:  BRA    37B0
37B4:  BCF    FA6.2
37B6:  MOVF   00,W
37B8:  IORWF  FF2,F
37BA:  MOVLW  04
37BC:  MOVLB  0
37BE:  MOVWF  xBA
37C0:  MOVLW  FA
37C2:  MOVWF  xD1
37C4:  CALL   0864
37C8:  DECFSZ xBA,F
37CA:  BRA    37C0
37CC:  MOVLW  02
37CE:  MOVWF  1C
37D0:  MOVWF  1E
37D2:  MOVLW  0C
37D4:  MOVWF  xCB
37D6:  CALL   09D4
....................             Cambio=ON; 
37DA:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
37DC:  MOVF   18,W
37DE:  SUBLW  07
37E0:  BTFSS  FD8.2
37E2:  BRA    397C
....................       if(VelMotor>6)VelMotor=6; 
37E4:  MOVF   xB0,W
37E6:  SUBLW  06
37E8:  BC    37EE
37EA:  MOVLW  06
37EC:  MOVWF  xB0
....................       if(VelMotor<1)VelMotor=1; 
37EE:  MOVF   xB0,F
37F0:  BNZ   37F6
37F2:  MOVLW  01
37F4:  MOVWF  xB0
....................        
....................       lcd_gotoxy(1,1); 
37F6:  MOVLW  01
37F8:  MOVWF  xCC
37FA:  MOVWF  xCD
37FC:  CALL   0972
....................       printf(lcd_putc,"Seleccione Velocidad"); 
3800:  MOVLW  78
3802:  MOVWF  FF6
3804:  MOVLW  06
3806:  MOVWF  FF7
3808:  CALL   0A32
....................       lcd_gotoxy(1,2); 
380C:  MOVLW  01
380E:  MOVWF  xCC
3810:  MOVLW  02
3812:  MOVWF  xCD
3814:  CALL   0972
....................       printf(lcd_putc,"   del Ventilador   "); 
3818:  MOVLW  8E
381A:  MOVWF  FF6
381C:  MOVLW  06
381E:  MOVWF  FF7
3820:  CALL   0A32
....................       lcd_gotoxy(1,3); 
3824:  MOVLW  01
3826:  MOVWF  xCC
3828:  MOVLW  03
382A:  MOVWF  xCD
382C:  CALL   0972
....................       printf(lcd_putc,"     Vel: %u       ",VelMotor); 
3830:  MOVLW  A4
3832:  MOVWF  FF6
3834:  MOVLW  06
3836:  MOVWF  FF7
3838:  MOVLW  0A
383A:  MOVWF  xBE
383C:  CALL   10D6
3840:  MOVFF  B0,BA
3844:  MOVLW  1B
3846:  MOVWF  xBB
3848:  CALL   12B8
384C:  MOVLW  B0
384E:  MOVWF  FF6
3850:  MOVLW  06
3852:  MOVWF  FF7
3854:  MOVLW  07
3856:  MOVWF  xBE
3858:  CALL   10D6
....................       lcd_gotoxy(1,4); 
385C:  MOVLW  01
385E:  MOVWF  xCC
3860:  MOVLW  04
3862:  MOVWF  xCD
3864:  CALL   0972
....................       printf(lcd_putc,"                    ");       
3868:  MOVLW  B8
386A:  MOVWF  FF6
386C:  MOVLW  06
386E:  MOVWF  FF7
3870:  CALL   0A32
....................        
....................       if(UP && VelMotor<6)//Si oprime hacia arriba 
3874:  BSF    F92.5
3876:  BTFSC  F80.5
3878:  BRA    388A
387A:  MOVF   xB0,W
387C:  SUBLW  05
387E:  BNC   388A
....................       {   
....................          delay_ms(100);VelMotor++; 
3880:  MOVLW  64
3882:  MOVWF  xD1
3884:  CALL   0864
3888:  INCF   xB0,F
....................       } 
....................              
....................       if(DOWN && VelMotor>0)//Si oprime hacia abajo 
388A:  BSF    F96.0
388C:  BTFSC  F84.0
388E:  BRA    389E
3890:  MOVF   xB0,F
3892:  BZ    389E
....................       {   
....................          delay_ms(100);VelMotor--; 
3894:  MOVLW  64
3896:  MOVWF  xD1
3898:  CALL   0864
389C:  DECF   xB0,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
389E:  BSF    F96.1
38A0:  BTFSC  F84.1
38A2:  BRA    38AC
....................       {            
....................          VelocidadMotor(VelMotor); 
38A4:  MOVFF  B0,BA
38A8:  CALL   07E0
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
38AC:  BSF    F96.2
38AE:  BTFSC  F84.2
38B0:  BRA    397C
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
38B2:  MOVLW  64
38B4:  MOVWF  xD1
38B6:  CALL   0864
38BA:  MOVLW  02
38BC:  MOVWF  1C
38BE:  MOVWF  1E
38C0:  MOVLW  0C
38C2:  MOVWF  xCB
38C4:  CALL   09D4
....................          write_eeprom(13,VelMotor);//Guardar valor de Setpoint en eeprom 
38C8:  MOVLW  0D
38CA:  MOVWF  FA9
38CC:  MOVFF  B0,FA8
38D0:  BCF    FA6.6
38D2:  BCF    FA6.7
38D4:  BSF    FA6.2
38D6:  MOVF   FF2,W
38D8:  MOVWF  00
38DA:  BCF    FF2.7
38DC:  MOVLB  F
38DE:  MOVLW  55
38E0:  MOVWF  FA7
38E2:  MOVLW  AA
38E4:  MOVWF  FA7
38E6:  BSF    FA6.1
38E8:  BTFSC  FA6.1
38EA:  BRA    38E8
38EC:  BCF    FA6.2
38EE:  MOVF   00,W
38F0:  IORWF  FF2,F
....................          delay_ms(20); 
38F2:  MOVLW  14
38F4:  MOVLB  0
38F6:  MOVWF  xD1
38F8:  CALL   0864
....................          lcd_gotoxy(1,1); 
38FC:  MOVLW  01
38FE:  MOVWF  xCC
3900:  MOVWF  xCD
3902:  CALL   0972
....................          printf(lcd_putc,"                    "); 
3906:  MOVLW  CE
3908:  MOVWF  FF6
390A:  MOVLW  06
390C:  MOVWF  FF7
390E:  CALL   0A32
....................          lcd_gotoxy(1,2); 
3912:  MOVLW  01
3914:  MOVWF  xCC
3916:  MOVLW  02
3918:  MOVWF  xCD
391A:  CALL   0972
....................          printf(lcd_putc,"     Velocidad      "); 
391E:  MOVLW  E4
3920:  MOVWF  FF6
3922:  MOVLW  06
3924:  MOVWF  FF7
3926:  CALL   0A32
....................          lcd_gotoxy(1,3); 
392A:  MOVLW  01
392C:  MOVWF  xCC
392E:  MOVLW  03
3930:  MOVWF  xCD
3932:  CALL   0972
....................          printf(lcd_putc,"      Almacenada    "); 
3936:  MOVLW  FA
3938:  MOVWF  FF6
393A:  MOVLW  06
393C:  MOVWF  FF7
393E:  CALL   0A32
....................          lcd_gotoxy(1,4); 
3942:  MOVLW  01
3944:  MOVWF  xCC
3946:  MOVLW  04
3948:  MOVWF  xCD
394A:  CALL   0972
....................          printf(lcd_putc,"                    ");  
394E:  MOVLW  10
3950:  MOVWF  FF6
3952:  MOVLW  07
3954:  MOVWF  FF7
3956:  CALL   0A32
....................          delay_ms(1000); 
395A:  MOVLW  04
395C:  MOVWF  xBA
395E:  MOVLW  FA
3960:  MOVWF  xD1
3962:  CALL   0864
3966:  DECFSZ xBA,F
3968:  BRA    395E
....................          printf(lcd_putc,"\f"); 
396A:  MOVLW  0C
396C:  MOVWF  xCB
396E:  CALL   09D4
....................          lcd_init(); 
3972:  CALL   08F4
....................          Menu=1; paso=0; 
3976:  MOVLW  01
3978:  MOVWF  18
397A:  CLRF   31
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
397C:  MOVF   18,W
397E:  SUBLW  32
3980:  BTFSS  FD8.2
3982:  BRA    3F90
....................    if(Lectura==1){ 
3984:  BTFSS  17.0
3986:  BRA    3BDE
....................       Lectura=0; 
3988:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
398A:  MOVLW  05
398C:  MOVWF  xBA
398E:  CALL   18E6
3992:  MOVFF  03,A3
3996:  MOVFF  02,A2
399A:  MOVFF  01,A1
399E:  MOVFF  00,A0
....................       lcd_gotoxy(1,1); 
39A2:  MOVLW  01
39A4:  MOVWF  xCC
39A6:  MOVWF  xCD
39A8:  CALL   0972
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));    //   
39AC:  MOVFF  A3,D1
39B0:  MOVFF  A2,D0
39B4:  MOVFF  A1,CF
39B8:  MOVFF  A0,CE
39BC:  MOVLW  D7
39BE:  MOVWF  xD5
39C0:  MOVLW  A3
39C2:  MOVWF  xD4
39C4:  CLRF   xD3
39C6:  MOVLW  81
39C8:  MOVWF  xD2
39CA:  CALL   1430
39CE:  MOVFF  00,BA
39D2:  MOVFF  01,BB
39D6:  MOVFF  02,BC
39DA:  MOVFF  03,BD
39DE:  MOVLW  26
39E0:  MOVWF  FF6
39E2:  MOVLW  07
39E4:  MOVWF  FF7
39E6:  MOVLW  08
39E8:  MOVWF  xBE
39EA:  CALL   10D6
39EE:  MOVLW  02
39F0:  MOVWF  FE9
39F2:  MOVFF  BD,C1
39F6:  MOVFF  BC,C0
39FA:  MOVFF  BB,BF
39FE:  MOVFF  BA,BE
3A02:  MOVWF  xC2
3A04:  CALL   1BEE
3A08:  MOVLW  33
3A0A:  MOVWF  FF6
3A0C:  MOVLW  07
3A0E:  MOVWF  FF7
3A10:  MOVLW  07
3A12:  MOVWF  xBE
3A14:  CALL   10D6
....................       //Saturacion=((CaidaPresion-0.07462)/0.15)*11; 
....................       Saturacion=((CaidaPresion-0.1243)/0.29)*20; 
3A18:  BSF    FD8.1
3A1A:  MOVFF  A3,D5
3A1E:  MOVFF  A2,D4
3A22:  MOVFF  A1,D3
3A26:  MOVFF  A0,D2
3A2A:  CLRF   xD9
3A2C:  MOVLW  91
3A2E:  MOVWF  xD8
3A30:  MOVLW  7E
3A32:  MOVWF  xD7
3A34:  MOVLW  7B
3A36:  MOVWF  xD6
3A38:  CALL   167C
3A3C:  MOVFF  00,BA
3A40:  MOVFF  01,BB
3A44:  MOVFF  02,BC
3A48:  MOVFF  03,BD
3A4C:  MOVFF  03,D2
3A50:  MOVFF  02,D1
3A54:  MOVFF  01,D0
3A58:  MOVFF  00,CF
3A5C:  MOVLW  E1
3A5E:  MOVWF  xD6
3A60:  MOVLW  7A
3A62:  MOVWF  xD5
3A64:  MOVLW  14
3A66:  MOVWF  xD4
3A68:  MOVLW  7D
3A6A:  MOVWF  xD3
3A6C:  CALL   1522
3A70:  MOVFF  00,BA
3A74:  MOVFF  01,BB
3A78:  MOVFF  02,BC
3A7C:  MOVFF  03,BD
3A80:  MOVFF  03,D1
3A84:  MOVFF  02,D0
3A88:  MOVFF  01,CF
3A8C:  MOVFF  00,CE
3A90:  CLRF   xD5
3A92:  CLRF   xD4
3A94:  MOVLW  20
3A96:  MOVWF  xD3
3A98:  MOVLW  83
3A9A:  MOVWF  xD2
3A9C:  CALL   1430
3AA0:  MOVFF  03,9F
3AA4:  MOVFF  02,9E
3AA8:  MOVFF  01,9D
3AAC:  MOVFF  00,9C
....................        
....................       if(Saturacion>11) 
3AB0:  CLRF   xD1
3AB2:  CLRF   xD0
3AB4:  MOVLW  30
3AB6:  MOVWF  xCF
3AB8:  MOVLW  82
3ABA:  MOVWF  xCE
3ABC:  MOVFF  9F,D5
3AC0:  MOVFF  9E,D4
3AC4:  MOVFF  9D,D3
3AC8:  MOVFF  9C,D2
3ACC:  CALL   0CCC
3AD0:  BNC   3ADE
....................       { 
....................          Saturacion=11; 
3AD2:  CLRF   x9F
3AD4:  CLRF   x9E
3AD6:  MOVLW  30
3AD8:  MOVWF  x9D
3ADA:  MOVLW  82
3ADC:  MOVWF  x9C
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
3ADE:  CLRF   2D
3AE0:  MOVFF  9F,BD
3AE4:  MOVFF  9E,BC
3AE8:  MOVFF  9D,BB
3AEC:  MOVFF  9C,BA
3AF0:  CALL   20EA
3AF4:  MOVFF  00,BA
3AF8:  MOVFF  01,BB
3AFC:  MOVFF  02,BC
3B00:  MOVFF  03,BD
3B04:  CLRF   xD3
3B06:  MOVFF  2D,D2
3B0A:  CALL   0AB8
3B0E:  MOVFF  03,D1
3B12:  MOVFF  02,D0
3B16:  MOVFF  01,CF
3B1A:  MOVFF  00,CE
3B1E:  MOVFF  BD,D5
3B22:  MOVFF  BC,D4
3B26:  MOVFF  BB,D3
3B2A:  MOVFF  BA,D2
3B2E:  CALL   0CCC
3B32:  BNC   3B50
....................       { 
....................          lcd_gotoxy(i+8,2); 
3B34:  MOVLW  08
3B36:  ADDWF  2D,W
3B38:  MOVWF  xBA
3B3A:  MOVWF  xCC
3B3C:  MOVLW  02
3B3E:  MOVWF  xCD
3B40:  CALL   0972
....................          printf(lcd_putc,"Ñ"); 
3B44:  MOVLW  D1
3B46:  MOVWF  xCB
3B48:  CALL   09D4
....................       } 
3B4C:  INCF   2D,F
3B4E:  BRA    3AE0
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3B50:  MOVFF  9F,BD
3B54:  MOVFF  9E,BC
3B58:  MOVFF  9D,BB
3B5C:  MOVFF  9C,BA
3B60:  CALL   20EA
3B64:  MOVFF  03,D1
3B68:  MOVFF  02,D0
3B6C:  MOVFF  01,CF
3B70:  MOVFF  00,CE
3B74:  CALL   1D74
3B78:  MOVFF  01,2D
3B7C:  MOVF   2D,W
3B7E:  SUBLW  0A
3B80:  BNC   3B9E
....................       { 
....................          lcd_gotoxy(i+8,2); 
3B82:  MOVLW  08
3B84:  ADDWF  2D,W
3B86:  MOVWF  xBA
3B88:  MOVWF  xCC
3B8A:  MOVLW  02
3B8C:  MOVWF  xCD
3B8E:  CALL   0972
....................          printf(lcd_putc," "); 
3B92:  MOVLW  20
3B94:  MOVWF  xCB
3B96:  CALL   09D4
....................       } 
3B9A:  INCF   2D,F
3B9C:  BRA    3B7C
....................        
....................       lcd_gotoxy(9,3); 
3B9E:  MOVLW  09
3BA0:  MOVWF  xCC
3BA2:  MOVLW  03
3BA4:  MOVWF  xCD
3BA6:  CALL   0972
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3BAA:  MOVLW  3C
3BAC:  MOVWF  FF6
3BAE:  MOVLW  07
3BB0:  MOVWF  FF7
3BB2:  MOVLW  06
3BB4:  MOVWF  xBE
3BB6:  CALL   10D6
3BBA:  MOVFF  27,BA
3BBE:  MOVLW  03
3BC0:  MOVWF  xBB
3BC2:  CALL   12B8
3BC6:  MOVLW  3A
3BC8:  MOVWF  xCB
3BCA:  CALL   09D4
3BCE:  MOVFF  28,BA
3BD2:  MOVLW  01
3BD4:  MOVWF  xBB
3BD6:  CALL   12B8
....................       EliminaRuido(); 
3BDA:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3BDE:  BTFSS  16.7
3BE0:  BRA    3C7A
....................    { 
....................       if(estadoalarma==1) 
3BE2:  BTFSS  17.4
3BE4:  BRA    3C70
....................       { 
....................          printf(lcd_putc,"\f"); 
3BE6:  MOVLW  0C
3BE8:  MOVWF  xCB
3BEA:  CALL   09D4
....................          lcd_gotoxy(1,2); 
3BEE:  MOVLW  01
3BF0:  MOVWF  xCC
3BF2:  MOVLW  02
3BF4:  MOVWF  xCD
3BF6:  CALL   0972
....................          printf(lcd_putc,"  Temporizador  de  "); 
3BFA:  MOVLW  4C
3BFC:  MOVWF  FF6
3BFE:  MOVLW  07
3C00:  MOVWF  FF7
3C02:  CALL   0A32
....................          lcd_gotoxy(1,3); 
3C06:  MOVLW  01
3C08:  MOVWF  xCC
3C0A:  MOVLW  03
3C0C:  MOVWF  xCD
3C0E:  CALL   0972
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3C12:  MOVLW  62
3C14:  MOVWF  FF6
3C16:  MOVLW  07
3C18:  MOVWF  FF7
3C1A:  CALL   0A32
....................          lcd_gotoxy(1,4); 
3C1E:  MOVLW  01
3C20:  MOVWF  xCC
3C22:  MOVLW  04
3C24:  MOVWF  xCD
3C26:  CALL   0972
....................          printf(lcd_putc,"                    "); 
3C2A:  MOVLW  78
3C2C:  MOVWF  FF6
3C2E:  MOVLW  07
3C30:  MOVWF  FF7
3C32:  CALL   0A32
....................          lcd_gotoxy(1,1); 
3C36:  MOVLW  01
3C38:  MOVWF  xCC
3C3A:  MOVWF  xCD
3C3C:  CALL   0972
....................          printf(lcd_putc,"                    "); 
3C40:  MOVLW  8E
3C42:  MOVWF  FF6
3C44:  MOVLW  07
3C46:  MOVWF  FF7
3C48:  CALL   0A32
....................          for(i=0;i<5;i++) 
3C4C:  CLRF   2D
3C4E:  MOVF   2D,W
3C50:  SUBLW  04
3C52:  BNC   3C70
....................          { 
....................             Buzzer_on; 
3C54:  BSF    F8B.0
3C56:  BCF    F94.0
....................             delay_ms(200); 
3C58:  MOVLW  C8
3C5A:  MOVWF  xD1
3C5C:  CALL   0864
....................             Buzzer_off; 
3C60:  BCF    F8B.0
3C62:  BCF    F94.0
....................             delay_ms(200); 
3C64:  MOVLW  C8
3C66:  MOVWF  xD1
3C68:  CALL   0864
....................          } 
3C6C:  INCF   2D,F
3C6E:  BRA    3C4E
....................       } 
....................       tiempo_cumplido=0; 
3C70:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3C72:  MOVLW  0C
3C74:  MOVWF  xCB
3C76:  CALL   09D4
....................    } 
....................     
....................    if(CaidaPresion>=0.285)//Maxima caida de Presion = 1.2inH20 = 0.29kPa 
3C7A:  MOVLW  85
3C7C:  MOVWF  xD1
3C7E:  MOVLW  EB
3C80:  MOVWF  xD0
3C82:  MOVLW  11
3C84:  MOVWF  xCF
3C86:  MOVLW  7D
3C88:  MOVWF  xCE
3C8A:  MOVFF  A3,D5
3C8E:  MOVFF  A2,D4
3C92:  MOVFF  A1,D3
3C96:  MOVFF  A0,D2
3C9A:  CALL   0CCC
3C9E:  BC    3CA2
3CA0:  BNZ   3CA8
....................    {  
....................       ActivaBuzzer=1; 
3CA2:  MOVLW  01
3CA4:  MOVWF  3D
....................    } 
....................    else 
3CA6:  BRA    3CAE
....................    { 
....................       ActivaBuzzer=0; 
3CA8:  CLRF   3D
....................       Buzzer_off; 
3CAA:  BCF    F8B.0
3CAC:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3CAE:  MOVLW  01
3CB0:  MOVWF  xCC
3CB2:  MOVLW  02
3CB4:  MOVWF  xCD
3CB6:  CALL   0972
....................       printf(lcd_putc,"Filtro:"); 
3CBA:  MOVLW  A4
3CBC:  MOVWF  FF6
3CBE:  MOVLW  07
3CC0:  MOVWF  FF7
3CC2:  CALL   0A32
....................        
....................       if(estadomv==1) 
3CC6:  BTFSS  16.2
3CC8:  BRA    3CE4
....................       { 
....................          lcd_gotoxy(1,4); 
3CCA:  MOVLW  01
3CCC:  MOVWF  xCC
3CCE:  MOVLW  04
3CD0:  MOVWF  xCD
3CD2:  CALL   0972
....................          printf(lcd_putc,"Motor:ON ");       
3CD6:  MOVLW  AC
3CD8:  MOVWF  FF6
3CDA:  MOVLW  07
3CDC:  MOVWF  FF7
3CDE:  CALL   0A32
....................       } 
....................       else 
3CE2:  BRA    3CFC
....................       { 
....................          lcd_gotoxy(1,4); 
3CE4:  MOVLW  01
3CE6:  MOVWF  xCC
3CE8:  MOVLW  04
3CEA:  MOVWF  xCD
3CEC:  CALL   0972
....................          printf(lcd_putc,"Motor:OFF"); 
3CF0:  MOVLW  B6
3CF2:  MOVWF  FF6
3CF4:  MOVLW  07
3CF6:  MOVWF  FF7
3CF8:  CALL   0A32
....................       } 
....................        
....................       if(estadouv==1) 
3CFC:  BTFSS  16.0
3CFE:  BRA    3D1A
....................       { 
....................          lcd_gotoxy(13,4); 
3D00:  MOVLW  0D
3D02:  MOVWF  xCC
3D04:  MOVLW  04
3D06:  MOVWF  xCD
3D08:  CALL   0972
....................          printf(lcd_putc,"UV:ON "); 
3D0C:  MOVLW  C0
3D0E:  MOVWF  FF6
3D10:  MOVLW  07
3D12:  MOVWF  FF7
3D14:  CALL   0A32
....................       } 
....................       else 
3D18:  BRA    3D32
....................       {          
....................          lcd_gotoxy(13,4); 
3D1A:  MOVLW  0D
3D1C:  MOVWF  xCC
3D1E:  MOVLW  04
3D20:  MOVWF  xCD
3D22:  CALL   0972
....................          printf(lcd_putc,"UV:OFF"); 
3D26:  MOVLW  C8
3D28:  MOVWF  FF6
3D2A:  MOVLW  07
3D2C:  MOVWF  FF7
3D2E:  CALL   0A32
....................       } 
....................        
....................       if(estadofl==1) 
3D32:  BTFSS  16.1
3D34:  BRA    3D50
....................       { 
....................          lcd_gotoxy(1,3); 
3D36:  MOVLW  01
3D38:  MOVWF  xCC
3D3A:  MOVLW  03
3D3C:  MOVWF  xCD
3D3E:  CALL   0972
....................          printf(lcd_putc,"Luz:ON "); 
3D42:  MOVLW  D0
3D44:  MOVWF  FF6
3D46:  MOVLW  07
3D48:  MOVWF  FF7
3D4A:  CALL   0A32
....................       } 
....................       else 
3D4E:  BRA    3D68
....................       { 
....................          lcd_gotoxy(1,3); 
3D50:  MOVLW  01
3D52:  MOVWF  xCC
3D54:  MOVLW  03
3D56:  MOVWF  xCD
3D58:  CALL   0972
....................          printf(lcd_putc,"Luz:OFF"); 
3D5C:  MOVLW  D8
3D5E:  MOVWF  FF6
3D60:  MOVLW  07
3D62:  MOVWF  FF7
3D64:  CALL   0A32
....................       }  
....................       Cambio=OFF; 
3D68:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
3D6A:  BTFSS  16.2
3D6C:  BRA    3D98
....................       if(flagmv==0){ 
3D6E:  BTFSC  17.6
3D70:  BRA    3D8E
....................          VelocidadMotor(6);lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
3D72:  MOVLW  06
3D74:  MOVWF  xBA
3D76:  CALL   07E0
3D7A:  CALL   08F4
3D7E:  MOVLW  C8
3D80:  MOVWF  xD1
3D82:  CALL   0864
3D86:  CALL   08F4
3D8A:  BSF    17.6
3D8C:  BSF    17.5
....................       } 
....................       VelocidadMotor(VelMotor); 
3D8E:  MOVFF  B0,BA
3D92:  CALL   07E0
....................    }else{ 
3D96:  BRA    3DB6
....................       VelocidadMotor(0); 
3D98:  CLRF   xBA
3D9A:  CALL   07E0
....................       if(flagmv==1){ 
3D9E:  BTFSS  17.6
3DA0:  BRA    3DB6
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
3DA2:  CALL   08F4
3DA6:  MOVLW  C8
3DA8:  MOVWF  xD1
3DAA:  CALL   0864
3DAE:  CALL   08F4
3DB2:  BCF    17.6
3DB4:  BSF    17.5
....................       } 
....................    } 
....................    /* 
....................    if(estadouv==1){ 
....................       estadomv=0; 
....................       VelocidadMotor(0); 
....................       estadofl=0; 
....................       Luz_Blanca_off; 
....................       Luz_UV_on; 
....................       tiempo_cumplido=0; 
....................       if(flaguv==0){ 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
....................       } 
....................    }else{ 
....................       estadouv=0; 
....................       Luz_UV_off; 
....................       if(flaguv==1){ 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
....................       } 
....................    } 
....................    */    
....................    if(estadofl==1) 
3DB6:  BTFSS  16.1
3DB8:  BRA    3DD8
....................    { 
....................       Luz_Blanca_on; 
3DBA:  BCF    F8A.4
3DBC:  BCF    F93.4
....................       if(flagfl==0) 
3DBE:  BTFSC  17.2
3DC0:  BRA    3DD6
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
3DC2:  CALL   08F4
3DC6:  MOVLW  C8
3DC8:  MOVWF  xD1
3DCA:  CALL   0864
3DCE:  CALL   08F4
3DD2:  BSF    17.2
3DD4:  BSF    17.5
....................       } 
....................    } 
....................    else 
3DD6:  BRA    3DF4
....................    { 
....................       Luz_Blanca_off; 
3DD8:  BSF    F8A.4
3DDA:  BCF    F93.4
....................       if(flagfl==1) 
3DDC:  BTFSS  17.2
3DDE:  BRA    3DF4
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3DE0:  CALL   08F4
3DE4:  MOVLW  C8
3DE6:  MOVWF  xD1
3DE8:  CALL   0864
3DEC:  CALL   08F4
3DF0:  BCF    17.2
3DF2:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
3DF4:  BSF    F96.0
3DF6:  BTFSC  F84.0
3DF8:  BRA    3E24
....................    { 
....................       delay_ms(20); 
3DFA:  MOVLW  14
3DFC:  MOVWF  xD1
3DFE:  CALL   0864
....................       if(DOWN){ 
3E02:  BSF    F96.0
3E04:  BTFSC  F84.0
3E06:  BRA    3E22
....................          if(Flanco == 0) 
3E08:  BTFSC  16.3
3E0A:  BRA    3E22
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
3E0C:  BTG    16.1
3E0E:  BSF    16.3
3E10:  MOVLW  02
3E12:  MOVWF  xBA
3E14:  MOVLW  96
3E16:  MOVWF  xD1
3E18:  CALL   0864
3E1C:  DECFSZ xBA,F
3E1E:  BRA    3E14
3E20:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3E22:  BRA    3E26
....................    { 
....................       Flanco = 0; 
3E24:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3E26:  BSF    F96.1
3E28:  BTFSC  F84.1
3E2A:  BRA    3E56
....................    { 
....................       delay_ms(20); 
3E2C:  MOVLW  14
3E2E:  MOVWF  xD1
3E30:  CALL   0864
....................       if(RIGHT){ 
3E34:  BSF    F96.1
3E36:  BTFSC  F84.1
3E38:  BRA    3E54
....................          if(Flanco1 == 0) 
3E3A:  BTFSC  16.4
3E3C:  BRA    3E54
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
3E3E:  BTG    16.2
3E40:  BSF    16.4
3E42:  MOVLW  02
3E44:  MOVWF  xBA
3E46:  MOVLW  96
3E48:  MOVWF  xD1
3E4A:  CALL   0864
3E4E:  DECFSZ xBA,F
3E50:  BRA    3E46
3E52:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3E54:  BRA    3E58
....................    { 
....................       Flanco1 = 0; 
3E56:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3E58:  BSF    F96.2
3E5A:  BTFSC  F84.2
3E5C:  BRA    3E78
....................    { 
....................       delay_ms(20); 
3E5E:  MOVLW  14
3E60:  MOVWF  xD1
3E62:  CALL   0864
....................       if(IZQU){ 
3E66:  BSF    F96.2
3E68:  BTFSC  F84.2
3E6A:  BRA    3E78
....................          delay_ms(150);  
3E6C:  MOVLW  96
3E6E:  MOVWF  xD1
3E70:  CALL   0864
....................          estadouv=!estadouv; 
3E74:  BTG    16.0
....................          Cambio=ON; 
3E76:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3E78:  BSF    F92.5
3E7A:  BTFSC  F80.5
3E7C:  BRA    3EB2
....................    { 
....................       delay_ms(20); 
3E7E:  MOVLW  14
3E80:  MOVWF  xD1
3E82:  CALL   0864
....................       if(UP){ 
3E86:  BSF    F92.5
3E88:  BTFSC  F80.5
3E8A:  BRA    3EB2
....................          printf(lcd_putc,"\f"); 
3E8C:  MOVLW  0C
3E8E:  MOVWF  xCB
3E90:  CALL   09D4
....................          delay_ms(300); 
3E94:  MOVLW  02
3E96:  MOVWF  xBA
3E98:  MOVLW  96
3E9A:  MOVWF  xD1
3E9C:  CALL   0864
3EA0:  DECFSZ xBA,F
3EA2:  BRA    3E98
....................          Menu=1;  
3EA4:  MOVLW  01
3EA6:  MOVWF  18
....................          paso=0; 
3EA8:  CLRF   31
....................          Flecha=2; 
3EAA:  MOVLW  02
3EAC:  MOVWF  1C
....................          Flecha2=2; 
3EAE:  MOVWF  1E
....................          Cambio=ON; 
3EB0:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
3EB2:  DECFSZ 30,W
3EB4:  BRA    3F78
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
3EB6:  MOVLW  07
3EB8:  MOVWF  FA9
3EBA:  MOVFF  21,FA8
3EBE:  BCF    FA6.6
3EC0:  BCF    FA6.7
3EC2:  BSF    FA6.2
3EC4:  MOVF   FF2,W
3EC6:  MOVWF  00
3EC8:  BCF    FF2.7
3ECA:  MOVLB  F
3ECC:  MOVLW  55
3ECE:  MOVWF  FA7
3ED0:  MOVLW  AA
3ED2:  MOVWF  FA7
3ED4:  BSF    FA6.1
3ED6:  BTFSC  FA6.1
3ED8:  BRA    3ED6
3EDA:  BCF    FA6.2
3EDC:  MOVF   00,W
3EDE:  IORWF  FF2,F
3EE0:  MOVLW  08
3EE2:  MOVWF  FA9
3EE4:  MOVFF  22,FA8
3EE8:  BCF    FA6.6
3EEA:  BCF    FA6.7
3EEC:  BSF    FA6.2
3EEE:  MOVF   FF2,W
3EF0:  MOVWF  00
3EF2:  BCF    FF2.7
3EF4:  MOVLW  55
3EF6:  MOVWF  FA7
3EF8:  MOVLW  AA
3EFA:  MOVWF  FA7
3EFC:  BSF    FA6.1
3EFE:  BTFSC  FA6.1
3F00:  BRA    3EFE
3F02:  BCF    FA6.2
3F04:  MOVF   00,W
3F06:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3F08:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3F0C:  MOVFF  41,24
....................       write_eeprom(9,horasL); 
3F10:  MOVLW  09
3F12:  MOVWF  FA9
3F14:  MOVFF  23,FA8
3F18:  BCF    FA6.6
3F1A:  BCF    FA6.7
3F1C:  BSF    FA6.2
3F1E:  MOVFF  FF2,00
3F22:  BCF    FF2.7
3F24:  MOVLW  55
3F26:  MOVWF  FA7
3F28:  MOVLW  AA
3F2A:  MOVWF  FA7
3F2C:  BSF    FA6.1
3F2E:  BTFSC  FA6.1
3F30:  BRA    3F2E
3F32:  BCF    FA6.2
3F34:  MOVF   00,W
3F36:  IORWF  FF2,F
....................       delay_ms(20); 
3F38:  MOVLW  14
3F3A:  MOVLB  0
3F3C:  MOVWF  xD1
3F3E:  CALL   0864
....................       write_eeprom(10,horasH); 
3F42:  MOVLW  0A
3F44:  MOVWF  FA9
3F46:  MOVFF  24,FA8
3F4A:  BCF    FA6.6
3F4C:  BCF    FA6.7
3F4E:  BSF    FA6.2
3F50:  MOVF   FF2,W
3F52:  MOVWF  00
3F54:  BCF    FF2.7
3F56:  MOVLB  F
3F58:  MOVLW  55
3F5A:  MOVWF  FA7
3F5C:  MOVLW  AA
3F5E:  MOVWF  FA7
3F60:  BSF    FA6.1
3F62:  BTFSC  FA6.1
3F64:  BRA    3F62
3F66:  BCF    FA6.2
3F68:  MOVF   00,W
3F6A:  IORWF  FF2,F
....................       delay_ms(20); 
3F6C:  MOVLW  14
3F6E:  MOVLB  0
3F70:  MOVWF  xD1
3F72:  CALL   0864
....................       guardaruv=0; 
3F76:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3F78:  MOVF   21,W
3F7A:  SUBLW  3B
3F7C:  BC    3F82
....................    { 
....................       segundos=0;minutos++; 
3F7E:  CLRF   21
3F80:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3F82:  MOVF   22,W
3F84:  SUBLW  3C
3F86:  BNZ   3F90
....................    { 
....................       minutos=0;horas++; 
3F88:  CLRF   22
3F8A:  INCF   40,F
3F8C:  BTFSC  FD8.2
3F8E:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3F90:  MOVF   2F,W
3F92:  SUBLW  3B
3F94:  BC    3FAA
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3F96:  CALL   08F4
3F9A:  MOVLW  C8
3F9C:  MOVWF  xD1
3F9E:  CALL   0864
3FA2:  CALL   08F4
....................       tiemporeset=0; 
3FA6:  CLRF   2F
....................       Cambio=ON; 
3FA8:  BSF    17.5
....................    }    
....................    } 
3FAA:  GOTO   22B8
.................... } 
....................  
3FAE:  SLEEP 

Configuration Fuses:
   Word  1: CE3C   IESO FCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E3F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
