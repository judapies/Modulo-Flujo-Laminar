CCS PCH C Compiler, Version 4.104, 5967               09-dic.-20 07:36

               Filename: D:\Laboratorio\Modulo Flujo Laminar\2020\JPCFLVMD48IX Abaco #004588416 OP2020334\Firmware 2.1.2 - Con Presion-MPXV5004GV-DosDigitos\CabinaCFLH.lst

               ROM used: 35128 bytes (54%)
                         Largest free fragment is 30406
               RAM used: 2035 (51%) at main() level
                         2133 (54%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
00000:  GOTO   54EA
*
00008:  GOTO   00A6
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  00,0E
0004C:  MOVFF  01,0F
00050:  MOVFF  02,10
00054:  MOVFF  03,11
00058:  BTFSS  F9D.0
0005A:  GOTO   0064
0005E:  BTFSC  F9E.0
00060:  GOTO   0426
00064:  MOVFF  0E,00
00068:  MOVFF  0F,01
0006C:  MOVFF  10,02
00070:  MOVFF  11,03
00074:  MOVFF  0C,FE9
00078:  MOVFF  07,FEA
0007C:  BSF    07.7
0007E:  MOVFF  08,FE1
00082:  MOVFF  09,FE2
00086:  MOVFF  0A,FD9
0008A:  MOVFF  0B,FDA
0008E:  MOVFF  12,FF3
00092:  MOVFF  13,FF4
00096:  MOVFF  14,FFA
0009A:  MOVF   04,W
0009C:  MOVFF  06,FE0
000A0:  MOVFF  05,FD8
000A4:  RETFIE 0
000A6:  MOVWF  16
000A8:  MOVFF  FD8,17
000AC:  MOVFF  FE0,18
000B0:  MOVLB  0
000B2:  MOVFF  FE9,1E
000B6:  MOVFF  FEA,19
000BA:  MOVFF  FE1,1A
000BE:  MOVFF  FE2,1B
000C2:  MOVFF  FD9,1C
000C6:  MOVFF  FDA,1D
000CA:  MOVFF  FF3,24
000CE:  MOVFF  FF4,25
000D2:  MOVFF  FFA,26
000D6:  MOVFF  00,20
000DA:  MOVFF  01,21
000DE:  MOVFF  02,22
000E2:  MOVFF  03,23
000E6:  BTFSS  FF2.5
000E8:  GOTO   00F2
000EC:  BTFSC  FF2.2
000EE:  GOTO   03F4
000F2:  BTFSS  FF2.4
000F4:  GOTO   00FE
000F8:  BTFSC  FF2.1
000FA:  GOTO   0248
000FE:  MOVFF  20,00
00102:  MOVFF  21,01
00106:  MOVFF  22,02
0010A:  MOVFF  23,03
0010E:  MOVFF  1E,FE9
00112:  MOVFF  19,FEA
00116:  BSF    19.7
00118:  MOVFF  1A,FE1
0011C:  MOVFF  1B,FE2
00120:  MOVFF  1C,FD9
00124:  MOVFF  1D,FDA
00128:  MOVFF  24,FF3
0012C:  MOVFF  25,FF4
00130:  MOVFF  26,FFA
00134:  MOVF   16,W
00136:  MOVFF  18,FE0
0013A:  MOVFF  17,FD8
0013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4620.h> 
.................... //////// Standard Header file for the PIC18F4620 device //////////////// 
.................... #device PIC18F4620 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... //#use delay(clock=20000000) 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
00CCE:  MOVLW  08
00CD0:  MOVWF  FEA
00CD2:  MOVLW  06
00CD4:  MOVWF  FE9
00CD6:  MOVF   FEF,W
00CD8:  BZ    0CF4
00CDA:  MOVLW  06
00CDC:  MOVWF  01
00CDE:  CLRF   00
00CE0:  DECFSZ 00,F
00CE2:  BRA    0CE0
00CE4:  DECFSZ 01,F
00CE6:  BRA    0CDE
00CE8:  MOVLW  7B
00CEA:  MOVWF  00
00CEC:  DECFSZ 00,F
00CEE:  BRA    0CEC
00CF0:  DECFSZ FEF,F
00CF2:  BRA    0CDA
00CF4:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
024A8:  MOVLB  8
024AA:  BCF    x3F.0
....................    y = x; 
024AC:  MOVFF  833,838
024B0:  MOVFF  832,837
024B4:  MOVFF  831,836
024B8:  MOVFF  830,835
....................  
....................    if (x < 0) 
024BC:  MOVFF  833,843
024C0:  MOVFF  832,842
024C4:  MOVFF  831,841
024C8:  MOVFF  830,840
024CC:  CLRF   x47
024CE:  CLRF   x46
024D0:  CLRF   x45
024D2:  CLRF   x44
024D4:  MOVLB  0
024D6:  CALL   18DC
024DA:  BNC   24E6
....................    { 
....................       s = 1; 
024DC:  MOVLB  8
024DE:  BSF    x3F.0
....................       y = -y; 
024E0:  MOVF   x36,W
024E2:  XORLW  80
024E4:  MOVWF  x36
....................    } 
....................  
....................    if (y <= 32768.0) 
024E6:  MOVFF  838,843
024EA:  MOVFF  837,842
024EE:  MOVFF  836,841
024F2:  MOVFF  835,840
024F6:  MOVLB  8
024F8:  CLRF   x47
024FA:  CLRF   x46
024FC:  CLRF   x45
024FE:  MOVLW  8E
02500:  MOVWF  x44
02502:  MOVLB  0
02504:  CALL   18DC
02508:  BC    250C
0250A:  BNZ   253C
....................   res = (float32)(unsigned int16)y; 
0250C:  MOVFF  838,843
02510:  MOVFF  837,842
02514:  MOVFF  836,841
02518:  MOVFF  835,840
0251C:  RCALL  246C
0251E:  MOVFF  02,845
02522:  MOVFF  01,844
02526:  CALL   0E38
0252A:  MOVFF  03,83C
0252E:  MOVFF  02,83B
02532:  MOVFF  01,83A
02536:  MOVFF  00,839
....................  
....................  else if (y < 10000000.0) 
0253A:  BRA    26DA
0253C:  MOVFF  838,843
02540:  MOVFF  837,842
02544:  MOVFF  836,841
02548:  MOVFF  835,840
0254C:  MOVLW  80
0254E:  MOVLB  8
02550:  MOVWF  x47
02552:  MOVLW  96
02554:  MOVWF  x46
02556:  MOVLW  18
02558:  MOVWF  x45
0255A:  MOVLW  96
0255C:  MOVWF  x44
0255E:  MOVLB  0
02560:  CALL   18DC
02564:  BTFSS  FD8.0
02566:  BRA    26CA
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
02568:  MOVFF  838,843
0256C:  MOVFF  837,842
02570:  MOVFF  836,841
02574:  MOVFF  835,840
02578:  MOVLB  8
0257A:  CLRF   x47
0257C:  CLRF   x46
0257E:  CLRF   x45
02580:  MOVLW  8E
02582:  MOVWF  x44
02584:  MOVLB  0
02586:  CALL   0E6E
0258A:  MOVFF  03,843
0258E:  MOVFF  02,842
02592:  MOVFF  01,841
02596:  MOVFF  00,840
0259A:  RCALL  246C
0259C:  MOVFF  02,83E
025A0:  MOVFF  01,83D
....................       y = 32768.0*(y/32768.0 - (float32)l); 
025A4:  MOVFF  838,843
025A8:  MOVFF  837,842
025AC:  MOVFF  836,841
025B0:  MOVFF  835,840
025B4:  MOVLB  8
025B6:  CLRF   x47
025B8:  CLRF   x46
025BA:  CLRF   x45
025BC:  MOVLW  8E
025BE:  MOVWF  x44
025C0:  MOVLB  0
025C2:  CALL   0E6E
025C6:  MOVFF  00,840
025CA:  MOVFF  01,841
025CE:  MOVFF  02,842
025D2:  MOVFF  03,843
025D6:  MOVFF  83E,845
025DA:  MOVFF  83D,844
025DE:  CALL   0E38
025E2:  BSF    FD8.1
025E4:  MOVFF  843,847
025E8:  MOVFF  842,846
025EC:  MOVFF  841,845
025F0:  MOVFF  840,844
025F4:  MOVFF  03,84B
025F8:  MOVFF  02,84A
025FC:  MOVFF  01,849
02600:  MOVFF  00,848
02604:  CALL   0FCC
02608:  MOVLB  8
0260A:  CLRF   x43
0260C:  CLRF   x42
0260E:  CLRF   x41
02610:  MOVLW  8E
02612:  MOVWF  x40
02614:  MOVFF  03,847
02618:  MOVFF  02,846
0261C:  MOVFF  01,845
02620:  MOVFF  00,844
02624:  MOVLB  0
02626:  RCALL  2376
02628:  MOVFF  03,838
0262C:  MOVFF  02,837
02630:  MOVFF  01,836
02634:  MOVFF  00,835
....................   res = 32768.0*(float32)l; 
02638:  MOVFF  83E,845
0263C:  MOVFF  83D,844
02640:  CALL   0E38
02644:  MOVLB  8
02646:  CLRF   x43
02648:  CLRF   x42
0264A:  CLRF   x41
0264C:  MOVLW  8E
0264E:  MOVWF  x40
02650:  MOVFF  03,847
02654:  MOVFF  02,846
02658:  MOVFF  01,845
0265C:  MOVFF  00,844
02660:  MOVLB  0
02662:  RCALL  2376
02664:  MOVFF  03,83C
02668:  MOVFF  02,83B
0266C:  MOVFF  01,83A
02670:  MOVFF  00,839
....................   res += (float32)(unsigned int16)y; 
02674:  MOVFF  838,843
02678:  MOVFF  837,842
0267C:  MOVFF  836,841
02680:  MOVFF  835,840
02684:  RCALL  246C
02686:  MOVFF  02,845
0268A:  MOVFF  01,844
0268E:  CALL   0E38
02692:  BCF    FD8.1
02694:  MOVFF  83C,847
02698:  MOVFF  83B,846
0269C:  MOVFF  83A,845
026A0:  MOVFF  839,844
026A4:  MOVFF  03,84B
026A8:  MOVFF  02,84A
026AC:  MOVFF  01,849
026B0:  MOVFF  00,848
026B4:  CALL   0FCC
026B8:  MOVFF  03,83C
026BC:  MOVFF  02,83B
026C0:  MOVFF  01,83A
026C4:  MOVFF  00,839
....................  } 
....................  
....................  else 
026C8:  BRA    26DA
....................   res = y; 
026CA:  MOVFF  838,83C
026CE:  MOVFF  837,83B
026D2:  MOVFF  836,83A
026D6:  MOVFF  835,839
....................  
....................  y = y - (float32)(unsigned int16)y; 
026DA:  MOVFF  838,843
026DE:  MOVFF  837,842
026E2:  MOVFF  836,841
026E6:  MOVFF  835,840
026EA:  RCALL  246C
026EC:  MOVFF  02,845
026F0:  MOVFF  01,844
026F4:  CALL   0E38
026F8:  BSF    FD8.1
026FA:  MOVFF  838,847
026FE:  MOVFF  837,846
02702:  MOVFF  836,845
02706:  MOVFF  835,844
0270A:  MOVFF  03,84B
0270E:  MOVFF  02,84A
02712:  MOVFF  01,849
02716:  MOVFF  00,848
0271A:  CALL   0FCC
0271E:  MOVFF  03,838
02722:  MOVFF  02,837
02726:  MOVFF  01,836
0272A:  MOVFF  00,835
....................  
....................  if (s) 
0272E:  MOVLB  8
02730:  BTFSS  x3F.0
02732:  BRA    273A
....................   res = -res; 
02734:  MOVF   x3A,W
02736:  XORLW  80
02738:  MOVWF  x3A
....................  
....................  if (y != 0) 
0273A:  MOVFF  838,843
0273E:  MOVFF  837,842
02742:  MOVFF  836,841
02746:  MOVFF  835,840
0274A:  CLRF   x47
0274C:  CLRF   x46
0274E:  CLRF   x45
02750:  CLRF   x44
02752:  MOVLB  0
02754:  CALL   18DC
02758:  BZ    27D2
....................  { 
....................   if (s == 1 && n == 0) 
0275A:  MOVLB  8
0275C:  BTFSS  x3F.0
0275E:  BRA    2798
02760:  MOVF   x34,F
02762:  BNZ   2798
....................    res -= 1.0; 
02764:  BSF    FD8.1
02766:  MOVFF  83C,847
0276A:  MOVFF  83B,846
0276E:  MOVFF  83A,845
02772:  MOVFF  839,844
02776:  CLRF   x4B
02778:  CLRF   x4A
0277A:  CLRF   x49
0277C:  MOVLW  7F
0277E:  MOVWF  x48
02780:  MOVLB  0
02782:  CALL   0FCC
02786:  MOVFF  03,83C
0278A:  MOVFF  02,83B
0278E:  MOVFF  01,83A
02792:  MOVFF  00,839
02796:  MOVLB  8
....................  
....................   if (s == 0 && n == 1) 
02798:  BTFSC  x3F.0
0279A:  BRA    27D4
0279C:  DECFSZ x34,W
0279E:  BRA    27D4
....................    res += 1.0; 
027A0:  BCF    FD8.1
027A2:  MOVFF  83C,847
027A6:  MOVFF  83B,846
027AA:  MOVFF  83A,845
027AE:  MOVFF  839,844
027B2:  CLRF   x4B
027B4:  CLRF   x4A
027B6:  CLRF   x49
027B8:  MOVLW  7F
027BA:  MOVWF  x48
027BC:  MOVLB  0
027BE:  CALL   0FCC
027C2:  MOVFF  03,83C
027C6:  MOVFF  02,83B
027CA:  MOVFF  01,83A
027CE:  MOVFF  00,839
027D2:  MOVLB  8
....................  } 
....................  if (x == 0) 
027D4:  MOVFF  833,843
027D8:  MOVFF  832,842
027DC:  MOVFF  831,841
027E0:  MOVFF  830,840
027E4:  CLRF   x47
027E6:  CLRF   x46
027E8:  CLRF   x45
027EA:  CLRF   x44
027EC:  MOVLB  0
027EE:  CALL   18DC
027F2:  BNZ   2800
....................     res = 0; 
027F4:  MOVLB  8
027F6:  CLRF   x3C
027F8:  CLRF   x3B
027FA:  CLRF   x3A
027FC:  CLRF   x39
027FE:  MOVLB  0
....................  
....................  return (res); 
02800:  MOVFF  839,00
02804:  MOVFF  83A,01
02808:  MOVFF  83B,02
0280C:  MOVFF  83C,03
.................... } 
02810:  RETLW  00
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
*
02830:  MOVFF  82F,833
02834:  MOVFF  82E,832
02838:  MOVFF  82D,831
0283C:  MOVFF  82C,830
02840:  MOVLB  8
02842:  CLRF   x34
02844:  MOVLB  0
02846:  RCALL  24A8
.................... } 
02848:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
02812:  MOVFF  82F,833
02816:  MOVFF  82E,832
0281A:  MOVFF  82D,831
0281E:  MOVFF  82C,830
02822:  MOVLW  01
02824:  MOVLB  8
02826:  MOVWF  x34
02828:  MOVLB  0
0282A:  RCALL  24A8
.................... } 
0282C:  GOTO   290A (RETURN)
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
*
0284A:  MOVFF  823,843
0284E:  MOVFF  822,842
02852:  MOVFF  821,841
02856:  MOVFF  820,840
0285A:  MOVLB  8
0285C:  CLRF   x47
0285E:  CLRF   x46
02860:  CLRF   x45
02862:  CLRF   x44
02864:  MOVLB  0
02866:  CALL   18DC
0286A:  BTFSC  FD8.2
0286C:  BRA    29AE
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
0286E:  MOVFF  81F,843
02872:  MOVFF  81E,842
02876:  MOVFF  81D,841
0287A:  MOVFF  81C,840
0287E:  MOVFF  823,847
02882:  MOVFF  822,846
02886:  MOVFF  821,845
0288A:  MOVFF  820,844
0288E:  CALL   0E6E
02892:  MOVFF  00,828
02896:  MOVFF  01,829
0289A:  MOVFF  02,82A
0289E:  MOVFF  03,82B
028A2:  MOVFF  03,843
028A6:  MOVFF  02,842
028AA:  MOVFF  01,841
028AE:  MOVFF  00,840
028B2:  MOVLB  8
028B4:  CLRF   x47
028B6:  CLRF   x46
028B8:  CLRF   x45
028BA:  CLRF   x44
028BC:  MOVLB  0
028BE:  CALL   18DC
028C2:  BNC   290C
028C4:  MOVFF  81F,843
028C8:  MOVFF  81E,842
028CC:  MOVFF  81D,841
028D0:  MOVFF  81C,840
028D4:  MOVFF  823,847
028D8:  MOVFF  822,846
028DC:  MOVFF  821,845
028E0:  MOVFF  820,844
028E4:  CALL   0E6E
028E8:  MOVFF  00,828
028EC:  MOVFF  01,829
028F0:  MOVFF  02,82A
028F4:  MOVFF  03,82B
028F8:  MOVFF  03,82F
028FC:  MOVFF  02,82E
02900:  MOVFF  01,82D
02904:  MOVFF  00,82C
02908:  BRA    2812
0290A:  BRA    2952
0290C:  MOVFF  81F,843
02910:  MOVFF  81E,842
02914:  MOVFF  81D,841
02918:  MOVFF  81C,840
0291C:  MOVFF  823,847
02920:  MOVFF  822,846
02924:  MOVFF  821,845
02928:  MOVFF  820,844
0292C:  CALL   0E6E
02930:  MOVFF  00,828
02934:  MOVFF  01,829
02938:  MOVFF  02,82A
0293C:  MOVFF  03,82B
02940:  MOVFF  03,82F
02944:  MOVFF  02,82E
02948:  MOVFF  01,82D
0294C:  MOVFF  00,82C
02950:  RCALL  2830
02952:  MOVFF  03,827
02956:  MOVFF  02,826
0295A:  MOVFF  01,825
0295E:  MOVFF  00,824
....................       return(x-(i*y)); 
02962:  MOVFF  827,843
02966:  MOVFF  826,842
0296A:  MOVFF  825,841
0296E:  MOVFF  824,840
02972:  MOVFF  823,847
02976:  MOVFF  822,846
0297A:  MOVFF  821,845
0297E:  MOVFF  820,844
02982:  RCALL  2376
02984:  BSF    FD8.1
02986:  MOVFF  81F,847
0298A:  MOVFF  81E,846
0298E:  MOVFF  81D,845
02992:  MOVFF  81C,844
02996:  MOVFF  03,84B
0299A:  MOVFF  02,84A
0299E:  MOVFF  01,849
029A2:  MOVFF  00,848
029A6:  CALL   0FCC
029AA:  BRA    29AE
....................    } 
....................    else 
029AC:  BRA    29AE
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
029AE:  RETLW  00
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
*
02EDC:  MOVFF  823,843
02EE0:  MOVFF  822,842
02EE4:  MOVFF  821,841
02EE8:  MOVFF  820,840
02EEC:  MOVLW  18
02EEE:  MOVLB  8
02EF0:  MOVWF  x47
02EF2:  MOVLW  72
02EF4:  MOVWF  x46
02EF6:  MOVLW  31
02EF8:  MOVWF  x45
02EFA:  MOVLW  7E
02EFC:  MOVWF  x44
02EFE:  MOVLB  0
02F00:  CALL   0E6E
02F04:  MOVFF  03,843
02F08:  MOVFF  02,842
02F0C:  MOVFF  01,841
02F10:  MOVFF  00,840
02F14:  CALL   246C
02F18:  MOVFF  01,830
....................    s = 0; 
02F1C:  MOVLB  8
02F1E:  BCF    x31.0
....................    y = x; 
02F20:  MOVFF  823,827
02F24:  MOVFF  822,826
02F28:  MOVFF  821,825
02F2C:  MOVFF  820,824
....................  
....................    if (x < 0) 
02F30:  MOVFF  823,843
02F34:  MOVFF  822,842
02F38:  MOVFF  821,841
02F3C:  MOVFF  820,840
02F40:  CLRF   x47
02F42:  CLRF   x46
02F44:  CLRF   x45
02F46:  CLRF   x44
02F48:  MOVLB  0
02F4A:  CALL   18DC
02F4E:  BNC   2F5C
....................    { 
....................       s = 1; 
02F50:  MOVLB  8
02F52:  BSF    x31.0
....................       n = -n; 
02F54:  NEGF   x30
....................       y = -y; 
02F56:  MOVF   x25,W
02F58:  XORLW  80
02F5A:  MOVWF  x25
....................    } 
....................  
....................    res = 0.0; 
02F5C:  MOVLB  8
02F5E:  CLRF   x2B
02F60:  CLRF   x2A
02F62:  CLRF   x29
02F64:  CLRF   x28
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
02F66:  MOVLW  08
02F68:  MOVWF  x33
02F6A:  MOVLW  28
02F6C:  MOVWF  FE9
02F6E:  MOVFF  833,FEA
02F72:  MOVLW  7F
02F74:  ADDWF  x30,W
02F76:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
02F78:  MOVFF  827,843
02F7C:  MOVFF  826,842
02F80:  MOVFF  825,841
02F84:  MOVFF  824,840
02F88:  MOVLW  18
02F8A:  MOVWF  x47
02F8C:  MOVLW  72
02F8E:  MOVWF  x46
02F90:  MOVLW  31
02F92:  MOVWF  x45
02F94:  MOVLW  7E
02F96:  MOVWF  x44
02F98:  MOVLB  0
02F9A:  CALL   0E6E
02F9E:  MOVFF  00,832
02FA2:  MOVFF  01,833
02FA6:  MOVFF  02,834
02FAA:  MOVFF  03,835
02FAE:  MOVLB  8
02FB0:  CLRF   x37
02FB2:  MOVFF  830,836
02FB6:  BTFSC  x36.7
02FB8:  DECF   x37,F
02FBA:  MOVLB  0
02FBC:  RCALL  29B0
02FBE:  BSF    FD8.1
02FC0:  MOVFF  835,847
02FC4:  MOVFF  834,846
02FC8:  MOVFF  833,845
02FCC:  MOVFF  832,844
02FD0:  MOVFF  03,84B
02FD4:  MOVFF  02,84A
02FD8:  MOVFF  01,849
02FDC:  MOVFF  00,848
02FE0:  CALL   0FCC
02FE4:  MOVFF  03,827
02FE8:  MOVFF  02,826
02FEC:  MOVFF  01,825
02FF0:  MOVFF  00,824
....................  
....................    r = pe[0]*y + pe[1]; 
02FF4:  MOVLW  7C
02FF6:  MOVLB  8
02FF8:  MOVWF  x43
02FFA:  MOVLW  88
02FFC:  MOVWF  x42
02FFE:  MOVLW  59
03000:  MOVWF  x41
03002:  MOVLW  72
03004:  MOVWF  x40
03006:  MOVFF  827,847
0300A:  MOVFF  826,846
0300E:  MOVFF  825,845
03012:  MOVFF  824,844
03016:  MOVLB  0
03018:  CALL   2376
0301C:  MOVFF  00,832
03020:  MOVFF  01,833
03024:  MOVFF  02,834
03028:  MOVFF  03,835
0302C:  BCF    FD8.1
0302E:  MOVFF  03,847
03032:  MOVFF  02,846
03036:  MOVFF  01,845
0303A:  MOVFF  00,844
0303E:  MOVLW  E0
03040:  MOVLB  8
03042:  MOVWF  x4B
03044:  MOVLW  97
03046:  MOVWF  x4A
03048:  MOVLW  26
0304A:  MOVWF  x49
0304C:  MOVLW  75
0304E:  MOVWF  x48
03050:  MOVLB  0
03052:  CALL   0FCC
03056:  MOVFF  03,82F
0305A:  MOVFF  02,82E
0305E:  MOVFF  01,82D
03062:  MOVFF  00,82C
....................    r = r*y + pe[2]; 
03066:  MOVFF  82F,843
0306A:  MOVFF  82E,842
0306E:  MOVFF  82D,841
03072:  MOVFF  82C,840
03076:  MOVFF  827,847
0307A:  MOVFF  826,846
0307E:  MOVFF  825,845
03082:  MOVFF  824,844
03086:  CALL   2376
0308A:  MOVFF  00,832
0308E:  MOVFF  01,833
03092:  MOVFF  02,834
03096:  MOVFF  03,835
0309A:  BCF    FD8.1
0309C:  MOVFF  03,847
030A0:  MOVFF  02,846
030A4:  MOVFF  01,845
030A8:  MOVFF  00,844
030AC:  MOVLW  C4
030AE:  MOVLB  8
030B0:  MOVWF  x4B
030B2:  MOVLW  1D
030B4:  MOVWF  x4A
030B6:  MOVLW  1E
030B8:  MOVWF  x49
030BA:  MOVLW  78
030BC:  MOVWF  x48
030BE:  MOVLB  0
030C0:  CALL   0FCC
030C4:  MOVFF  03,82F
030C8:  MOVFF  02,82E
030CC:  MOVFF  01,82D
030D0:  MOVFF  00,82C
....................    r = r*y + pe[3]; 
030D4:  MOVFF  82F,843
030D8:  MOVFF  82E,842
030DC:  MOVFF  82D,841
030E0:  MOVFF  82C,840
030E4:  MOVFF  827,847
030E8:  MOVFF  826,846
030EC:  MOVFF  825,845
030F0:  MOVFF  824,844
030F4:  CALL   2376
030F8:  MOVFF  00,832
030FC:  MOVFF  01,833
03100:  MOVFF  02,834
03104:  MOVFF  03,835
03108:  BCF    FD8.1
0310A:  MOVFF  03,847
0310E:  MOVFF  02,846
03112:  MOVFF  01,845
03116:  MOVFF  00,844
0311A:  MOVLW  5E
0311C:  MOVLB  8
0311E:  MOVWF  x4B
03120:  MOVLW  50
03122:  MOVWF  x4A
03124:  MOVLW  63
03126:  MOVWF  x49
03128:  MOVLW  7A
0312A:  MOVWF  x48
0312C:  MOVLB  0
0312E:  CALL   0FCC
03132:  MOVFF  03,82F
03136:  MOVFF  02,82E
0313A:  MOVFF  01,82D
0313E:  MOVFF  00,82C
....................    r = r*y + pe[4]; 
03142:  MOVFF  82F,843
03146:  MOVFF  82E,842
0314A:  MOVFF  82D,841
0314E:  MOVFF  82C,840
03152:  MOVFF  827,847
03156:  MOVFF  826,846
0315A:  MOVFF  825,845
0315E:  MOVFF  824,844
03162:  CALL   2376
03166:  MOVFF  00,832
0316A:  MOVFF  01,833
0316E:  MOVFF  02,834
03172:  MOVFF  03,835
03176:  BCF    FD8.1
03178:  MOVFF  03,847
0317C:  MOVFF  02,846
03180:  MOVFF  01,845
03184:  MOVFF  00,844
03188:  MOVLW  1A
0318A:  MOVLB  8
0318C:  MOVWF  x4B
0318E:  MOVLW  FE
03190:  MOVWF  x4A
03192:  MOVLW  75
03194:  MOVWF  x49
03196:  MOVLW  7C
03198:  MOVWF  x48
0319A:  MOVLB  0
0319C:  CALL   0FCC
031A0:  MOVFF  03,82F
031A4:  MOVFF  02,82E
031A8:  MOVFF  01,82D
031AC:  MOVFF  00,82C
....................    r = r*y + pe[5]; 
031B0:  MOVFF  82F,843
031B4:  MOVFF  82E,842
031B8:  MOVFF  82D,841
031BC:  MOVFF  82C,840
031C0:  MOVFF  827,847
031C4:  MOVFF  826,846
031C8:  MOVFF  825,845
031CC:  MOVFF  824,844
031D0:  CALL   2376
031D4:  MOVFF  00,832
031D8:  MOVFF  01,833
031DC:  MOVFF  02,834
031E0:  MOVFF  03,835
031E4:  BCF    FD8.1
031E6:  MOVFF  03,847
031EA:  MOVFF  02,846
031EE:  MOVFF  01,845
031F2:  MOVFF  00,844
031F6:  MOVLW  18
031F8:  MOVLB  8
031FA:  MOVWF  x4B
031FC:  MOVLW  72
031FE:  MOVWF  x4A
03200:  MOVLW  31
03202:  MOVWF  x49
03204:  MOVLW  7E
03206:  MOVWF  x48
03208:  MOVLB  0
0320A:  CALL   0FCC
0320E:  MOVFF  03,82F
03212:  MOVFF  02,82E
03216:  MOVFF  01,82D
0321A:  MOVFF  00,82C
....................  
....................    res = res*(1.0 + y*r); 
0321E:  MOVFF  827,843
03222:  MOVFF  826,842
03226:  MOVFF  825,841
0322A:  MOVFF  824,840
0322E:  MOVFF  82F,847
03232:  MOVFF  82E,846
03236:  MOVFF  82D,845
0323A:  MOVFF  82C,844
0323E:  CALL   2376
03242:  BCF    FD8.1
03244:  MOVLB  8
03246:  CLRF   x47
03248:  CLRF   x46
0324A:  CLRF   x45
0324C:  MOVLW  7F
0324E:  MOVWF  x44
03250:  MOVFF  03,84B
03254:  MOVFF  02,84A
03258:  MOVFF  01,849
0325C:  MOVFF  00,848
03260:  MOVLB  0
03262:  CALL   0FCC
03266:  MOVFF  82B,843
0326A:  MOVFF  82A,842
0326E:  MOVFF  829,841
03272:  MOVFF  828,840
03276:  MOVFF  03,847
0327A:  MOVFF  02,846
0327E:  MOVFF  01,845
03282:  MOVFF  00,844
03286:  CALL   2376
0328A:  MOVFF  03,82B
0328E:  MOVFF  02,82A
03292:  MOVFF  01,829
03296:  MOVFF  00,828
....................  
....................    if (s) 
0329A:  MOVLB  8
0329C:  BTFSS  x31.0
0329E:  BRA    32D2
....................       res = 1.0/res; 
032A0:  CLRF   x43
032A2:  CLRF   x42
032A4:  CLRF   x41
032A6:  MOVLW  7F
032A8:  MOVWF  x40
032AA:  MOVFF  82B,847
032AE:  MOVFF  82A,846
032B2:  MOVFF  829,845
032B6:  MOVFF  828,844
032BA:  MOVLB  0
032BC:  CALL   0E6E
032C0:  MOVFF  03,82B
032C4:  MOVFF  02,82A
032C8:  MOVFF  01,829
032CC:  MOVFF  00,828
032D0:  MOVLB  8
....................    return(res); 
032D2:  MOVFF  828,00
032D6:  MOVFF  829,01
032DA:  MOVFF  82A,02
032DE:  MOVFF  82B,03
.................... } 
032E2:  MOVLB  0
032E4:  RETLW  00
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
02A00:  MOVFF  823,827
02A04:  MOVFF  822,826
02A08:  MOVFF  821,825
02A0C:  MOVFF  820,824
....................  
....................    if (y != 1.0) 
02A10:  MOVFF  827,843
02A14:  MOVFF  826,842
02A18:  MOVFF  825,841
02A1C:  MOVFF  824,840
02A20:  MOVLB  8
02A22:  CLRF   x47
02A24:  CLRF   x46
02A26:  CLRF   x45
02A28:  MOVLW  7F
02A2A:  MOVWF  x44
02A2C:  MOVLB  0
02A2E:  CALL   18DC
02A32:  BTFSC  FD8.2
02A34:  BRA    2EBE
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
02A36:  MOVLW  08
02A38:  MOVLB  8
02A3A:  MOVWF  x36
02A3C:  MOVLW  24
02A3E:  MOVWF  FE9
02A40:  MOVFF  836,FEA
02A44:  MOVLW  7E
02A46:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
02A48:  BSF    FD8.1
02A4A:  MOVFF  827,847
02A4E:  MOVFF  826,846
02A52:  MOVFF  825,845
02A56:  MOVFF  824,844
02A5A:  CLRF   x4B
02A5C:  CLRF   x4A
02A5E:  CLRF   x49
02A60:  MOVLW  7F
02A62:  MOVWF  x48
02A64:  MOVLB  0
02A66:  CALL   0FCC
02A6A:  MOVFF  00,835
02A6E:  MOVFF  01,836
02A72:  MOVFF  02,837
02A76:  MOVFF  03,838
02A7A:  BCF    FD8.1
02A7C:  MOVFF  827,847
02A80:  MOVFF  826,846
02A84:  MOVFF  825,845
02A88:  MOVFF  824,844
02A8C:  MOVLB  8
02A8E:  CLRF   x4B
02A90:  CLRF   x4A
02A92:  CLRF   x49
02A94:  MOVLW  7F
02A96:  MOVWF  x48
02A98:  MOVLB  0
02A9A:  CALL   0FCC
02A9E:  MOVFF  838,843
02AA2:  MOVFF  837,842
02AA6:  MOVFF  836,841
02AAA:  MOVFF  835,840
02AAE:  MOVFF  03,847
02AB2:  MOVFF  02,846
02AB6:  MOVFF  01,845
02ABA:  MOVFF  00,844
02ABE:  CALL   0E6E
02AC2:  MOVFF  03,827
02AC6:  MOVFF  02,826
02ACA:  MOVFF  01,825
02ACE:  MOVFF  00,824
....................  
....................       y2=y*y; 
02AD2:  MOVFF  827,843
02AD6:  MOVFF  826,842
02ADA:  MOVFF  825,841
02ADE:  MOVFF  824,840
02AE2:  MOVFF  827,847
02AE6:  MOVFF  826,846
02AEA:  MOVFF  825,845
02AEE:  MOVFF  824,844
02AF2:  RCALL  2376
02AF4:  MOVFF  03,833
02AF8:  MOVFF  02,832
02AFC:  MOVFF  01,831
02B00:  MOVFF  00,830
....................  
....................       res = pl[0]*y2 + pl[1]; 
02B04:  MOVLW  BC
02B06:  MOVLB  8
02B08:  MOVWF  x43
02B0A:  MOVLW  24
02B0C:  MOVWF  x42
02B0E:  MOVLW  67
02B10:  MOVWF  x41
02B12:  MOVLW  7D
02B14:  MOVWF  x40
02B16:  MOVFF  833,847
02B1A:  MOVFF  832,846
02B1E:  MOVFF  831,845
02B22:  MOVFF  830,844
02B26:  MOVLB  0
02B28:  RCALL  2376
02B2A:  MOVFF  00,835
02B2E:  MOVFF  01,836
02B32:  MOVFF  02,837
02B36:  MOVFF  03,838
02B3A:  BCF    FD8.1
02B3C:  MOVFF  03,847
02B40:  MOVFF  02,846
02B44:  MOVFF  01,845
02B48:  MOVFF  00,844
02B4C:  MOVLW  E3
02B4E:  MOVLB  8
02B50:  MOVWF  x4B
02B52:  MOVLW  E4
02B54:  MOVWF  x4A
02B56:  MOVLW  90
02B58:  MOVWF  x49
02B5A:  MOVLW  82
02B5C:  MOVWF  x48
02B5E:  MOVLB  0
02B60:  CALL   0FCC
02B64:  MOVFF  03,82B
02B68:  MOVFF  02,82A
02B6C:  MOVFF  01,829
02B70:  MOVFF  00,828
....................       res = res*y2 + pl[2]; 
02B74:  MOVFF  82B,843
02B78:  MOVFF  82A,842
02B7C:  MOVFF  829,841
02B80:  MOVFF  828,840
02B84:  MOVFF  833,847
02B88:  MOVFF  832,846
02B8C:  MOVFF  831,845
02B90:  MOVFF  830,844
02B94:  CALL   2376
02B98:  MOVFF  00,835
02B9C:  MOVFF  01,836
02BA0:  MOVFF  02,837
02BA4:  MOVFF  03,838
02BA8:  BCF    FD8.1
02BAA:  MOVFF  03,847
02BAE:  MOVFF  02,846
02BB2:  MOVFF  01,845
02BB6:  MOVFF  00,844
02BBA:  MOVLW  1C
02BBC:  MOVLB  8
02BBE:  MOVWF  x4B
02BC0:  MOVLW  87
02BC2:  MOVWF  x4A
02BC4:  MOVLW  57
02BC6:  MOVWF  x49
02BC8:  MOVLW  83
02BCA:  MOVWF  x48
02BCC:  MOVLB  0
02BCE:  CALL   0FCC
02BD2:  MOVFF  03,82B
02BD6:  MOVFF  02,82A
02BDA:  MOVFF  01,829
02BDE:  MOVFF  00,828
....................       res = res*y2 + pl[3]; 
02BE2:  MOVFF  82B,843
02BE6:  MOVFF  82A,842
02BEA:  MOVFF  829,841
02BEE:  MOVFF  828,840
02BF2:  MOVFF  833,847
02BF6:  MOVFF  832,846
02BFA:  MOVFF  831,845
02BFE:  MOVFF  830,844
02C02:  CALL   2376
02C06:  MOVFF  00,835
02C0A:  MOVFF  01,836
02C0E:  MOVFF  02,837
02C12:  MOVFF  03,838
02C16:  BCF    FD8.1
02C18:  MOVFF  03,847
02C1C:  MOVFF  02,846
02C20:  MOVFF  01,845
02C24:  MOVFF  00,844
02C28:  MOVLW  AB
02C2A:  MOVLB  8
02C2C:  MOVWF  x4B
02C2E:  MOVLW  E1
02C30:  MOVWF  x4A
02C32:  MOVLW  9E
02C34:  MOVWF  x49
02C36:  MOVLW  83
02C38:  MOVWF  x48
02C3A:  MOVLB  0
02C3C:  CALL   0FCC
02C40:  MOVFF  03,82B
02C44:  MOVFF  02,82A
02C48:  MOVFF  01,829
02C4C:  MOVFF  00,828
....................  
....................       r = ql[0]*y2 + ql[1]; 
02C50:  MOVLB  8
02C52:  CLRF   x43
02C54:  CLRF   x42
02C56:  CLRF   x41
02C58:  MOVLW  7F
02C5A:  MOVWF  x40
02C5C:  MOVFF  833,847
02C60:  MOVFF  832,846
02C64:  MOVFF  831,845
02C68:  MOVFF  830,844
02C6C:  MOVLB  0
02C6E:  CALL   2376
02C72:  MOVFF  00,835
02C76:  MOVFF  01,836
02C7A:  MOVFF  02,837
02C7E:  MOVFF  03,838
02C82:  BCF    FD8.1
02C84:  MOVFF  03,847
02C88:  MOVFF  02,846
02C8C:  MOVFF  01,845
02C90:  MOVFF  00,844
02C94:  MOVLW  B4
02C96:  MOVLB  8
02C98:  MOVWF  x4B
02C9A:  MOVLW  2A
02C9C:  MOVWF  x4A
02C9E:  MOVLW  82
02CA0:  MOVWF  x49
02CA2:  MOVWF  x48
02CA4:  MOVLB  0
02CA6:  CALL   0FCC
02CAA:  MOVFF  03,82F
02CAE:  MOVFF  02,82E
02CB2:  MOVFF  01,82D
02CB6:  MOVFF  00,82C
....................       r = r*y2 + ql[2]; 
02CBA:  MOVFF  82F,843
02CBE:  MOVFF  82E,842
02CC2:  MOVFF  82D,841
02CC6:  MOVFF  82C,840
02CCA:  MOVFF  833,847
02CCE:  MOVFF  832,846
02CD2:  MOVFF  831,845
02CD6:  MOVFF  830,844
02CDA:  CALL   2376
02CDE:  MOVFF  00,835
02CE2:  MOVFF  01,836
02CE6:  MOVFF  02,837
02CEA:  MOVFF  03,838
02CEE:  BCF    FD8.1
02CF0:  MOVFF  03,847
02CF4:  MOVFF  02,846
02CF8:  MOVFF  01,845
02CFC:  MOVFF  00,844
02D00:  MOVLW  80
02D02:  MOVLB  8
02D04:  MOVWF  x4B
02D06:  MOVLW  3E
02D08:  MOVWF  x4A
02D0A:  MOVLW  06
02D0C:  MOVWF  x49
02D0E:  MOVLW  83
02D10:  MOVWF  x48
02D12:  MOVLB  0
02D14:  CALL   0FCC
02D18:  MOVFF  03,82F
02D1C:  MOVFF  02,82E
02D20:  MOVFF  01,82D
02D24:  MOVFF  00,82C
....................       r = r*y2 + ql[3]; 
02D28:  MOVFF  82F,843
02D2C:  MOVFF  82E,842
02D30:  MOVFF  82D,841
02D34:  MOVFF  82C,840
02D38:  MOVFF  833,847
02D3C:  MOVFF  832,846
02D40:  MOVFF  831,845
02D44:  MOVFF  830,844
02D48:  CALL   2376
02D4C:  MOVFF  00,835
02D50:  MOVFF  01,836
02D54:  MOVFF  02,837
02D58:  MOVFF  03,838
02D5C:  BCF    FD8.1
02D5E:  MOVFF  03,847
02D62:  MOVFF  02,846
02D66:  MOVFF  01,845
02D6A:  MOVFF  00,844
02D6E:  MOVLW  AB
02D70:  MOVLB  8
02D72:  MOVWF  x4B
02D74:  MOVLW  E1
02D76:  MOVWF  x4A
02D78:  MOVLW  9E
02D7A:  MOVWF  x49
02D7C:  MOVLW  82
02D7E:  MOVWF  x48
02D80:  MOVLB  0
02D82:  CALL   0FCC
02D86:  MOVFF  03,82F
02D8A:  MOVFF  02,82E
02D8E:  MOVFF  01,82D
02D92:  MOVFF  00,82C
....................  
....................       res = y*res/r; 
02D96:  MOVFF  827,843
02D9A:  MOVFF  826,842
02D9E:  MOVFF  825,841
02DA2:  MOVFF  824,840
02DA6:  MOVFF  82B,847
02DAA:  MOVFF  82A,846
02DAE:  MOVFF  829,845
02DB2:  MOVFF  828,844
02DB6:  CALL   2376
02DBA:  MOVFF  00,835
02DBE:  MOVFF  01,836
02DC2:  MOVFF  02,837
02DC6:  MOVFF  03,838
02DCA:  MOVFF  03,843
02DCE:  MOVFF  02,842
02DD2:  MOVFF  01,841
02DD6:  MOVFF  00,840
02DDA:  MOVFF  82F,847
02DDE:  MOVFF  82E,846
02DE2:  MOVFF  82D,845
02DE6:  MOVFF  82C,844
02DEA:  CALL   0E6E
02DEE:  MOVFF  03,82B
02DF2:  MOVFF  02,82A
02DF6:  MOVFF  01,829
02DFA:  MOVFF  00,828
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
02DFE:  MOVLW  08
02E00:  MOVLB  8
02E02:  MOVWF  x36
02E04:  MOVLW  20
02E06:  MOVWF  FE9
02E08:  MOVFF  836,FEA
02E0C:  MOVLW  7E
02E0E:  SUBWF  FEF,W
02E10:  MOVWF  x34
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
02E12:  BTFSC  x34.7
02E14:  BRA    2E18
02E16:  BRA    2E40
....................          r = -(float32)-n; 
02E18:  MOVLW  00
02E1A:  BSF    FD8.0
02E1C:  SUBFWB x34,W
02E1E:  CLRF   x37
02E20:  MOVWF  x36
02E22:  BTFSC  x36.7
02E24:  DECF   x37,F
02E26:  MOVLB  0
02E28:  RCALL  29B0
02E2A:  MOVFF  00,82C
02E2E:  MOVF   01,W
02E30:  XORLW  80
02E32:  MOVLB  8
02E34:  MOVWF  x2D
02E36:  MOVFF  02,82E
02E3A:  MOVFF  03,82F
....................       else 
02E3E:  BRA    2E60
....................          r = (float32)n; 
02E40:  CLRF   x37
02E42:  MOVFF  834,836
02E46:  BTFSC  x36.7
02E48:  DECF   x37,F
02E4A:  MOVLB  0
02E4C:  RCALL  29B0
02E4E:  MOVFF  03,82F
02E52:  MOVFF  02,82E
02E56:  MOVFF  01,82D
02E5A:  MOVFF  00,82C
02E5E:  MOVLB  8
....................  
....................       res += r*LN2; 
02E60:  MOVFF  82F,843
02E64:  MOVFF  82E,842
02E68:  MOVFF  82D,841
02E6C:  MOVFF  82C,840
02E70:  MOVLW  18
02E72:  MOVWF  x47
02E74:  MOVLW  72
02E76:  MOVWF  x46
02E78:  MOVLW  31
02E7A:  MOVWF  x45
02E7C:  MOVLW  7E
02E7E:  MOVWF  x44
02E80:  MOVLB  0
02E82:  CALL   2376
02E86:  BCF    FD8.1
02E88:  MOVFF  82B,847
02E8C:  MOVFF  82A,846
02E90:  MOVFF  829,845
02E94:  MOVFF  828,844
02E98:  MOVFF  03,84B
02E9C:  MOVFF  02,84A
02EA0:  MOVFF  01,849
02EA4:  MOVFF  00,848
02EA8:  CALL   0FCC
02EAC:  MOVFF  03,82B
02EB0:  MOVFF  02,82A
02EB4:  MOVFF  01,829
02EB8:  MOVFF  00,828
....................    } 
....................  
....................    else 
02EBC:  BRA    2ECA
....................       res = 0.0; 
02EBE:  MOVLB  8
02EC0:  CLRF   x2B
02EC2:  CLRF   x2A
02EC4:  CLRF   x29
02EC6:  CLRF   x28
02EC8:  MOVLB  0
....................  
....................    return(res); 
02ECA:  MOVFF  828,00
02ECE:  MOVFF  829,01
02ED2:  MOVFF  82A,02
02ED6:  MOVFF  82B,03
.................... } 
02EDA:  RETLW  00
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
*
032E6:  MOVFF  817,843
032EA:  MOVFF  816,842
032EE:  MOVFF  815,841
032F2:  MOVFF  814,840
032F6:  MOVLB  8
032F8:  CLRF   x47
032FA:  CLRF   x46
032FC:  CLRF   x45
032FE:  CLRF   x44
03300:  MOVLB  0
03302:  CALL   18DC
03306:  BTFSS  FD8.0
03308:  BRA    34BC
0330A:  MOVFF  81B,81F
0330E:  MOVFF  81A,81E
03312:  MOVFF  819,81D
03316:  MOVFF  818,81C
0331A:  MOVLB  8
0331C:  CLRF   x23
0331E:  CLRF   x22
03320:  CLRF   x21
03322:  MOVLW  7F
03324:  MOVWF  x20
03326:  MOVLB  0
03328:  CALL   284A
0332C:  MOVFF  00,81C
03330:  MOVFF  01,81D
03334:  MOVFF  02,81E
03338:  MOVFF  03,81F
0333C:  MOVFF  03,843
03340:  MOVFF  02,842
03344:  MOVFF  01,841
03348:  MOVFF  00,840
0334C:  MOVLB  8
0334E:  CLRF   x47
03350:  CLRF   x46
03352:  CLRF   x45
03354:  CLRF   x44
03356:  MOVLB  0
03358:  CALL   18DC
0335C:  BTFSS  FD8.2
0335E:  BRA    34BC
....................       if(fmod(y, 2) == 0) { 
03360:  MOVFF  81B,81F
03364:  MOVFF  81A,81E
03368:  MOVFF  819,81D
0336C:  MOVFF  818,81C
03370:  MOVLB  8
03372:  CLRF   x23
03374:  CLRF   x22
03376:  CLRF   x21
03378:  MOVLW  80
0337A:  MOVWF  x20
0337C:  MOVLB  0
0337E:  CALL   284A
03382:  MOVFF  00,81C
03386:  MOVFF  01,81D
0338A:  MOVFF  02,81E
0338E:  MOVFF  03,81F
03392:  MOVFF  03,843
03396:  MOVFF  02,842
0339A:  MOVFF  01,841
0339E:  MOVFF  00,840
033A2:  MOVLB  8
033A4:  CLRF   x47
033A6:  CLRF   x46
033A8:  CLRF   x45
033AA:  CLRF   x44
033AC:  MOVLB  0
033AE:  CALL   18DC
033B2:  BNZ   3436
....................          return (exp(log(-x) * y)); 
033B4:  MOVFF  814,81C
033B8:  MOVLB  8
033BA:  MOVF   x15,W
033BC:  XORLW  80
033BE:  MOVWF  x1D
033C0:  MOVFF  816,81E
033C4:  MOVFF  817,81F
033C8:  MOVFF  817,823
033CC:  MOVFF  816,822
033D0:  MOVWF  x21
033D2:  MOVFF  814,820
033D6:  MOVLB  0
033D8:  CALL   2A00
033DC:  MOVFF  00,81C
033E0:  MOVFF  01,81D
033E4:  MOVFF  02,81E
033E8:  MOVFF  03,81F
033EC:  MOVFF  03,843
033F0:  MOVFF  02,842
033F4:  MOVFF  01,841
033F8:  MOVFF  00,840
033FC:  MOVFF  81B,847
03400:  MOVFF  81A,846
03404:  MOVFF  819,845
03408:  MOVFF  818,844
0340C:  CALL   2376
03410:  MOVFF  00,81C
03414:  MOVFF  01,81D
03418:  MOVFF  02,81E
0341C:  MOVFF  03,81F
03420:  MOVFF  03,823
03424:  MOVFF  02,822
03428:  MOVFF  01,821
0342C:  MOVFF  00,820
03430:  RCALL  2EDC
03432:  BRA    35F0
....................       } else { 
03434:  BRA    34BA
....................          return (-exp(log(-x) * y)); 
03436:  MOVFF  814,81C
0343A:  MOVLB  8
0343C:  MOVF   x15,W
0343E:  XORLW  80
03440:  MOVWF  x1D
03442:  MOVFF  816,81E
03446:  MOVFF  817,81F
0344A:  MOVFF  817,823
0344E:  MOVFF  816,822
03452:  MOVWF  x21
03454:  MOVFF  814,820
03458:  MOVLB  0
0345A:  CALL   2A00
0345E:  MOVFF  00,81C
03462:  MOVFF  01,81D
03466:  MOVFF  02,81E
0346A:  MOVFF  03,81F
0346E:  MOVFF  03,843
03472:  MOVFF  02,842
03476:  MOVFF  01,841
0347A:  MOVFF  00,840
0347E:  MOVFF  81B,847
03482:  MOVFF  81A,846
03486:  MOVFF  819,845
0348A:  MOVFF  818,844
0348E:  CALL   2376
03492:  MOVFF  00,81C
03496:  MOVFF  01,81D
0349A:  MOVFF  02,81E
0349E:  MOVFF  03,81F
034A2:  MOVFF  03,823
034A6:  MOVFF  02,822
034AA:  MOVFF  01,821
034AE:  MOVFF  00,820
034B2:  RCALL  2EDC
034B4:  MOVLW  80
034B6:  XORWF  01,F
034B8:  BRA    35F0
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
034BA:  BRA    35F0
034BC:  MOVFF  817,843
034C0:  MOVFF  816,842
034C4:  MOVFF  815,841
034C8:  MOVFF  814,840
034CC:  MOVLB  8
034CE:  CLRF   x47
034D0:  CLRF   x46
034D2:  CLRF   x45
034D4:  CLRF   x44
034D6:  MOVLB  0
034D8:  CALL   18DC
034DC:  BNC   353E
034DE:  MOVFF  81B,81F
034E2:  MOVFF  81A,81E
034E6:  MOVFF  819,81D
034EA:  MOVFF  818,81C
034EE:  MOVLB  8
034F0:  CLRF   x23
034F2:  CLRF   x22
034F4:  CLRF   x21
034F6:  MOVLW  7F
034F8:  MOVWF  x20
034FA:  MOVLB  0
034FC:  CALL   284A
03500:  MOVFF  00,81C
03504:  MOVFF  01,81D
03508:  MOVFF  02,81E
0350C:  MOVFF  03,81F
03510:  MOVFF  03,843
03514:  MOVFF  02,842
03518:  MOVFF  01,841
0351C:  MOVFF  00,840
03520:  MOVLB  8
03522:  CLRF   x47
03524:  CLRF   x46
03526:  CLRF   x45
03528:  CLRF   x44
0352A:  MOVLB  0
0352C:  CALL   18DC
03530:  BZ    353E
....................       return 0; 
03532:  CLRF   00
03534:  CLRF   01
03536:  CLRF   02
03538:  CLRF   03
0353A:  BRA    35F0
....................    } else { 
0353C:  BRA    35F0
....................       if(x != 0 || 0 >= y) { 
0353E:  MOVFF  817,843
03542:  MOVFF  816,842
03546:  MOVFF  815,841
0354A:  MOVFF  814,840
0354E:  MOVLB  8
03550:  CLRF   x47
03552:  CLRF   x46
03554:  CLRF   x45
03556:  CLRF   x44
03558:  MOVLB  0
0355A:  CALL   18DC
0355E:  BNZ   3584
03560:  MOVFF  81B,843
03564:  MOVFF  81A,842
03568:  MOVFF  819,841
0356C:  MOVFF  818,840
03570:  MOVLB  8
03572:  CLRF   x47
03574:  CLRF   x46
03576:  CLRF   x45
03578:  CLRF   x44
0357A:  MOVLB  0
0357C:  CALL   18DC
03580:  BC    3584
03582:  BNZ   35F0
....................          return (exp(log(x) * y)); 
03584:  MOVFF  817,823
03588:  MOVFF  816,822
0358C:  MOVFF  815,821
03590:  MOVFF  814,820
03594:  CALL   2A00
03598:  MOVFF  00,81C
0359C:  MOVFF  01,81D
035A0:  MOVFF  02,81E
035A4:  MOVFF  03,81F
035A8:  MOVFF  03,843
035AC:  MOVFF  02,842
035B0:  MOVFF  01,841
035B4:  MOVFF  00,840
035B8:  MOVFF  81B,847
035BC:  MOVFF  81A,846
035C0:  MOVFF  819,845
035C4:  MOVFF  818,844
035C8:  CALL   2376
035CC:  MOVFF  00,81C
035D0:  MOVFF  01,81D
035D4:  MOVFF  02,81E
035D8:  MOVFF  03,81F
035DC:  MOVFF  03,823
035E0:  MOVFF  02,822
035E4:  MOVFF  01,821
035E8:  MOVFF  00,820
035EC:  RCALL  2EDC
035EE:  BRA    35F0
....................       } 
....................    } 
.................... } 
035F0:  RETLW  00
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00CF6:  MOVLB  8
00CF8:  SWAPF  x07,W
00CFA:  ANDLW  F0
00CFC:  MOVWF  00
00CFE:  MOVLW  0F
00D00:  ANDWF  F83,W
00D02:  IORWF  00,W
00D04:  MOVWF  F83
....................       delay_cycles(30);//30 
00D06:  MOVLW  09
00D08:  MOVWF  00
00D0A:  DECFSZ 00,F
00D0C:  BRA    0D0A
00D0E:  BRA    0D10
....................       lcd.enable = 1; 
00D10:  BSF    F83.3
....................       delay_us(55);//55 
00D12:  MOVLW  5B
00D14:  MOVWF  00
00D16:  DECFSZ 00,F
00D18:  BRA    0D16
00D1A:  NOP   
....................       lcd.enable = 0; 
00D1C:  BCF    F83.3
.................... } 
00D1E:  MOVLB  0
00D20:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
00D22:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
00D24:  MOVLW  01
00D26:  MOVLB  8
00D28:  MOVWF  x06
00D2A:  MOVLB  0
00D2C:  RCALL  0CCE
....................       lcd.rs = address; 
00D2E:  MOVLB  8
00D30:  BTFSS  x04.0
00D32:  BCF    F83.1
00D34:  BTFSC  x04.0
00D36:  BSF    F83.1
....................       delay_cycles(30);//30 
00D38:  MOVLW  09
00D3A:  MOVWF  00
00D3C:  DECFSZ 00,F
00D3E:  BRA    0D3C
00D40:  BRA    0D42
....................       lcd.rw = 0; 
00D42:  BCF    F83.2
....................       delay_cycles(30);//30 
00D44:  MOVLW  09
00D46:  MOVWF  00
00D48:  DECFSZ 00,F
00D4A:  BRA    0D48
00D4C:  BRA    0D4E
....................       lcd.enable = 0; 
00D4E:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
00D50:  SWAPF  x05,W
00D52:  MOVWF  x06
00D54:  MOVLW  0F
00D56:  ANDWF  x06,F
00D58:  MOVFF  806,807
00D5C:  MOVLB  0
00D5E:  RCALL  0CF6
....................       lcd_send_nibble(n & 0xf); 
00D60:  MOVLB  8
00D62:  MOVF   x05,W
00D64:  ANDLW  0F
00D66:  MOVWF  x06
00D68:  MOVWF  x07
00D6A:  MOVLB  0
00D6C:  RCALL  0CF6
.................... } 
00D6E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
00D70:  MOVLW  00
00D72:  MOVWF  F95
....................     lcd.rs = 0; 
00D74:  BCF    F83.1
....................     lcd.rw = 0; 
00D76:  BCF    F83.2
....................     lcd.enable = 0; 
00D78:  BCF    F83.3
....................     delay_ms(15); 
00D7A:  MOVLW  0F
00D7C:  MOVLB  8
00D7E:  MOVWF  x06
00D80:  MOVLB  0
00D82:  RCALL  0CCE
....................     for(i=1;i<=3;++i) { 
00D84:  MOVLW  01
00D86:  MOVLB  7
00D88:  MOVWF  xEF
00D8A:  MOVF   xEF,W
00D8C:  SUBLW  03
00D8E:  BNC   0DAA
....................        lcd_send_nibble(3); 
00D90:  MOVLW  03
00D92:  MOVLB  8
00D94:  MOVWF  x07
00D96:  MOVLB  0
00D98:  RCALL  0CF6
....................        delay_ms(5); 
00D9A:  MOVLW  05
00D9C:  MOVLB  8
00D9E:  MOVWF  x06
00DA0:  MOVLB  0
00DA2:  RCALL  0CCE
....................     } 
00DA4:  MOVLB  7
00DA6:  INCF   xEF,F
00DA8:  BRA    0D8A
....................     lcd_send_nibble(2); 
00DAA:  MOVLW  02
00DAC:  MOVLB  8
00DAE:  MOVWF  x07
00DB0:  MOVLB  0
00DB2:  RCALL  0CF6
....................     for(i=0;i<=3;++i) 
00DB4:  MOVLB  7
00DB6:  CLRF   xEF
00DB8:  MOVF   xEF,W
00DBA:  SUBLW  03
00DBC:  BNC   0DEC
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
00DBE:  CLRF   03
00DC0:  MOVF   xEF,W
00DC2:  MOVFF  FF2,7F0
00DC6:  BCF    FF2.6
00DC8:  BCF    FF2.7
00DCA:  MOVLB  0
00DCC:  CALL   0140
00DD0:  MOVLB  7
00DD2:  BTFSC  xF0.6
00DD4:  BSF    FF2.6
00DD6:  BTFSC  xF0.7
00DD8:  BSF    FF2.7
00DDA:  MOVWF  xF0
00DDC:  MOVLB  8
00DDE:  CLRF   x04
00DE0:  MOVWF  x05
00DE2:  MOVLB  0
00DE4:  RCALL  0D22
00DE6:  MOVLB  7
00DE8:  INCF   xEF,F
00DEA:  BRA    0DB8
.................... } 
00DEC:  MOVLB  0
00DEE:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
021DA:  MOVLW  01
021DC:  MOVLB  8
021DE:  SUBWF  x02,W
021E0:  ADDLW  FC
021E2:  BC    220E
021E4:  ADDLW  04
021E6:  MOVLB  0
021E8:  GOTO   2222
....................      case 1 : address=0x80;break; 
021EC:  MOVLW  80
021EE:  MOVLB  8
021F0:  MOVWF  x03
021F2:  BRA    220E
....................      case 2 : address=0xc0;break; 
021F4:  MOVLW  C0
021F6:  MOVLB  8
021F8:  MOVWF  x03
021FA:  BRA    220E
....................      case 3 : address=0x94;break; 
021FC:  MOVLW  94
021FE:  MOVLB  8
02200:  MOVWF  x03
02202:  BRA    220E
....................      case 4 : address=0xd4;break; 
02204:  MOVLW  D4
02206:  MOVLB  8
02208:  MOVWF  x03
0220A:  BRA    220E
0220C:  MOVLB  8
....................    } 
....................    address+=x-1; 
0220E:  MOVLW  01
02210:  SUBWF  x01,W
02212:  ADDWF  x03,F
....................    lcd_send_byte(0,address); 
02214:  CLRF   x04
02216:  MOVFF  803,805
0221A:  MOVLB  0
0221C:  CALL   0D22
.................... } 
02220:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
02254:  MOVLB  8
02256:  MOVF   x00,W
02258:  SUBLW  F1
0225A:  BNZ   2260
....................    { 
....................       c=238; 
0225C:  MOVLW  EE
0225E:  MOVWF  x00
....................    } 
....................    if(c=='Ñ') 
02260:  MOVF   x00,W
02262:  SUBLW  D1
02264:  BNZ   226A
....................    { 
....................       c=255; 
02266:  MOVLW  FF
02268:  MOVWF  x00
....................    } 
....................     
....................    switch (c) { 
0226A:  MOVF   x00,W
0226C:  XORLW  0C
0226E:  MOVLB  0
02270:  BZ    227C
02272:  XORLW  06
02274:  BZ    229C
02276:  XORLW  02
02278:  BZ    22AE
0227A:  BRA    22BE
....................      case '\f'   : lcd_send_byte(0,1); 
0227C:  MOVLB  8
0227E:  CLRF   x04
02280:  MOVLW  01
02282:  MOVWF  x05
02284:  MOVLB  0
02286:  CALL   0D22
....................                    lcdline=1; 
0228A:  MOVLW  01
0228C:  MOVWF  28
....................                    delay_ms(2); 
0228E:  MOVLW  02
02290:  MOVLB  8
02292:  MOVWF  x06
02294:  MOVLB  0
02296:  CALL   0CCE
....................                                            break; 
0229A:  BRA    22D0
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0229C:  INCF   28,F
0229E:  MOVLW  01
022A0:  MOVLB  8
022A2:  MOVWF  x01
022A4:  MOVFF  28,802
022A8:  MOVLB  0
022AA:  RCALL  21DA
022AC:  BRA    22D0
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
022AE:  MOVLB  8
022B0:  CLRF   x04
022B2:  MOVLW  10
022B4:  MOVWF  x05
022B6:  MOVLB  0
022B8:  CALL   0D22
022BC:  BRA    22D0
....................      default     : lcd_send_byte(1,c);     break; 
022BE:  MOVLW  01
022C0:  MOVLB  8
022C2:  MOVWF  x04
022C4:  MOVFF  800,805
022C8:  MOVLB  0
022CA:  CALL   0D22
022CE:  BRA    22D0
....................    } 
.................... } 
022D0:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B4,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B3,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B3,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0,velocidadInicial=10; 
.................... signed int8   paso=0,OpcionMenu=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,Vel1=4,Media=40; 
.................... int16 tiempos,horas=0,G16=0,tEncendido=0; 
.................... float PromPresion[20]; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0,DownFlow=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,tup=0,tdown=0,tright=0,tleft=0,segundosTrabajo=0,horasTrabajo=0,Temporal1=0; 
.................... short Cruce=OFF; 
.................... float p1=8.0175,p2=-52.32,p3=135.13,p4=-65.076,p5=-24.203; 
....................  
.................... int8 VelMotor=0,Entero=0,Decimal1=0; 
.................... float zero_fabrica=199.0,x_uno=0.0,densidad=1.2,Temp=0.0,TempK=0.0,Pa=0.0,Psv=0.0,f=0.0,Xv=0.0,Z1=0.0,Pr=0.0,Temporal=0.0,HR=0,Temporal2=0.0; 
....................  
.................... int1 BITS[32]; 
.................... Int1 NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... typedef struct{ 
....................    float zero_actual; 
....................    float Diferencia; 
....................    int16 adc; 
....................    int8 negativo ; 
....................    float Velocidad; 
....................    int8 l; 
....................    int8 h; 
....................    float Flujo;    
....................    float Ajuste; 
....................    float promedio[80];    
.................... }SensorFlujo; 
....................  
.................... SensorFlujo Flujo[5]; 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
053E8:  MOVLB  7
053EA:  DECFSZ xF0,W
053EC:  BRA    540C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
053EE:  MOVLW  02
053F0:  MOVLB  8
053F2:  MOVWF  x01
053F4:  MOVFF  7F1,802
053F8:  MOVLB  0
053FA:  CALL   21DA
053FE:  MOVLW  64
05400:  MOVWF  FF6
05402:  MOVLW  01
05404:  MOVWF  FF7
05406:  CALL   22D2
0540A:  MOVLB  7
....................    if(x==2) 
0540C:  MOVF   xF0,W
0540E:  SUBLW  02
05410:  BNZ   5430
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
05412:  MOVLW  02
05414:  MOVLB  8
05416:  MOVWF  x01
05418:  MOVFF  7F1,802
0541C:  MOVLB  0
0541E:  CALL   21DA
05422:  MOVLW  78
05424:  MOVWF  FF6
05426:  MOVLW  01
05428:  MOVWF  FF7
0542A:  CALL   22D2
0542E:  MOVLB  7
....................    if(x==3) 
05430:  MOVF   xF0,W
05432:  SUBLW  03
05434:  BNZ   5454
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
05436:  MOVLW  02
05438:  MOVLB  8
0543A:  MOVWF  x01
0543C:  MOVFF  7F1,802
05440:  MOVLB  0
05442:  CALL   21DA
05446:  MOVLW  8C
05448:  MOVWF  FF6
0544A:  MOVLW  01
0544C:  MOVWF  FF7
0544E:  CALL   22D2
05452:  MOVLB  7
....................    if(x==4) 
05454:  MOVF   xF0,W
05456:  SUBLW  04
05458:  BNZ   5478
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero Presion ");} 
0545A:  MOVLW  02
0545C:  MOVLB  8
0545E:  MOVWF  x01
05460:  MOVFF  7F1,802
05464:  MOVLB  0
05466:  CALL   21DA
0546A:  MOVLW  A0
0546C:  MOVWF  FF6
0546E:  MOVLW  01
05470:  MOVWF  FF7
05472:  CALL   22D2
05476:  MOVLB  7
....................     
....................    if(x==5) 
05478:  MOVF   xF0,W
0547A:  SUBLW  05
0547C:  BNZ   54C2
....................    {if(estadoalarma==0) 
0547E:  BTFSC  2A.4
05480:  BRA    54A0
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
05482:  MOVLW  02
05484:  MOVLB  8
05486:  MOVWF  x01
05488:  MOVFF  7F1,802
0548C:  MOVLB  0
0548E:  CALL   21DA
05492:  MOVLW  B4
05494:  MOVWF  FF6
05496:  MOVLW  01
05498:  MOVWF  FF7
0549A:  CALL   22D2
0549E:  MOVLB  7
....................    if(estadoalarma==1) 
054A0:  BTFSS  2A.4
054A2:  BRA    54C2
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
054A4:  MOVLW  02
054A6:  MOVLB  8
054A8:  MOVWF  x01
054AA:  MOVFF  7F1,802
054AE:  MOVLB  0
054B0:  CALL   21DA
054B4:  MOVLW  C8
054B6:  MOVWF  FF6
054B8:  MOVLW  01
054BA:  MOVWF  FF7
054BC:  CALL   22D2
054C0:  MOVLB  7
....................    } 
....................     
....................    if(x==6) 
054C2:  MOVF   xF0,W
054C4:  SUBLW  06
054C6:  BNZ   54E6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
054C8:  MOVLW  02
054CA:  MOVLB  8
054CC:  MOVWF  x01
054CE:  MOVFF  7F1,802
054D2:  MOVLB  0
054D4:  CALL   21DA
054D8:  MOVLW  DC
054DA:  MOVWF  FF6
054DC:  MOVLW  01
054DE:  MOVWF  FF7
054E0:  CALL   22D2
054E4:  MOVLB  7
.................... } 
054E6:  MOVLB  0
054E8:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
03FCC:  MOVLB  7
03FCE:  RLCF   xF7,W
03FD0:  MOVWF  00
03FD2:  RLCF   00,F
03FD4:  MOVLW  FC
03FD6:  ANDWF  00,F
03FD8:  MOVFF  00,01
03FDC:  MOVF   FC2,W
03FDE:  ANDLW  C3
03FE0:  IORWF  00,W
03FE2:  MOVWF  FC2
03FE4:  MOVLW  0A
03FE6:  MOVLB  8
03FE8:  MOVWF  x06
03FEA:  MOVLB  0
03FEC:  CALL   0CCE
03FF0:  BSF    FC2.1
03FF2:  BTFSC  FC2.1
03FF4:  BRA    3FF2
03FF6:  MOVFF  FC4,845
03FFA:  MOVFF  FC3,844
03FFE:  MOVLB  0
04000:  CALL   0E38
04004:  MOVFF  03,7FB
04008:  MOVFF  02,7FA
0400C:  MOVFF  01,7F9
04010:  MOVFF  00,7F8
04014:  MOVFF  7F8,00
04018:  MOVFF  7F9,01
0401C:  MOVFF  7FA,02
04020:  MOVFF  7FB,03
.................... } 
04024:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
04B18:  MOVLB  7
04B1A:  CLRF   xF3
04B1C:  CLRF   xF2
04B1E:  CLRF   xF1
04B20:  CLRF   xF0
....................    float promediopresion=0.0;    
....................     
....................    V1=sensores(0);  
04B22:  CLRF   xF7
04B24:  MOVLB  0
04B26:  CALL   3FCC
04B2A:  MOVFF  03,B5
04B2E:  MOVFF  02,B4
04B32:  MOVFF  01,B3
04B36:  MOVFF  00,B2
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
04B3A:  MOVFF  B5,843
04B3E:  MOVFF  B4,842
04B42:  MOVFF  B3,841
04B46:  MOVFF  B2,840
04B4A:  MOVFF  C9,847
04B4E:  MOVFF  C8,846
04B52:  MOVFF  C7,845
04B56:  MOVFF  C6,844
04B5A:  CALL   0E6E
04B5E:  MOVFF  00,7F4
04B62:  MOVFF  01,7F5
04B66:  MOVFF  02,7F6
04B6A:  MOVFF  03,7F7
04B6E:  BSF    FD8.1
04B70:  MOVFF  03,847
04B74:  MOVFF  02,846
04B78:  MOVFF  01,845
04B7C:  MOVFF  00,844
04B80:  MOVLB  8
04B82:  CLRF   x4B
04B84:  CLRF   x4A
04B86:  CLRF   x49
04B88:  MOVLW  7F
04B8A:  MOVWF  x48
04B8C:  MOVLB  0
04B8E:  CALL   0FCC
04B92:  MOVFF  03,B9
04B96:  MOVFF  02,B8
04B9A:  MOVFF  01,B7
04B9E:  MOVFF  00,B6
....................    //VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //G2=G; 
....................    //VG = (G2*5.0)/1023.0; 
....................    //Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
....................     
....................    if(Presion>0) 
04BA2:  MOVLB  8
04BA4:  CLRF   x43
04BA6:  CLRF   x42
04BA8:  CLRF   x41
04BAA:  CLRF   x40
04BAC:  MOVFF  B9,847
04BB0:  MOVFF  B8,846
04BB4:  MOVFF  B7,845
04BB8:  MOVFF  B6,844
04BBC:  MOVLB  0
04BBE:  CALL   18DC
04BC2:  BNC   4BCC
....................       Presion=0.0; 
04BC4:  CLRF   xB9
04BC6:  CLRF   xB8
04BC8:  CLRF   xB7
04BCA:  CLRF   xB6
....................    
....................    if(Presion<0.0){ 
04BCC:  MOVFF  B9,843
04BD0:  MOVFF  B8,842
04BD4:  MOVFF  B7,841
04BD8:  MOVFF  B6,840
04BDC:  MOVLB  8
04BDE:  CLRF   x47
04BE0:  CLRF   x46
04BE2:  CLRF   x45
04BE4:  CLRF   x44
04BE6:  MOVLB  0
04BE8:  CALL   18DC
04BEC:  BNC   4C22
....................       Presion=Presion*-1; 
04BEE:  MOVFF  B9,843
04BF2:  MOVFF  B8,842
04BF6:  MOVFF  B7,841
04BFA:  MOVFF  B6,840
04BFE:  MOVLB  8
04C00:  CLRF   x47
04C02:  CLRF   x46
04C04:  MOVLW  80
04C06:  MOVWF  x45
04C08:  MOVLW  7F
04C0A:  MOVWF  x44
04C0C:  MOVLB  0
04C0E:  CALL   2376
04C12:  MOVFF  03,B9
04C16:  MOVFF  02,B8
04C1A:  MOVFF  01,B7
04C1E:  MOVFF  00,B6
....................    } 
....................  
....................    if(r>media-1) 
04C22:  MOVLW  01
04C24:  MOVLB  7
04C26:  SUBWF  xEF,W
04C28:  SUBWF  3E,W
04C2A:  BZ    4C30
04C2C:  BNC   4C30
....................    {r=0;} 
04C2E:  CLRF   3E
....................    PromPresion[r]=Presion;r++; 
04C30:  MOVF   3E,W
04C32:  MULLW  04
04C34:  MOVF   FF3,W
04C36:  CLRF   03
04C38:  ADDLW  62
04C3A:  MOVWF  FE9
04C3C:  MOVLW  00
04C3E:  ADDWFC 03,W
04C40:  MOVWF  FEA
04C42:  MOVFF  B6,FEF
04C46:  MOVFF  B7,FEC
04C4A:  MOVFF  B8,FEC
04C4E:  MOVFF  B9,FEC
04C52:  INCF   3E,F
....................           
....................    for(q=0;q<=(media-1);q++) 
04C54:  CLRF   3F
04C56:  MOVLW  01
04C58:  SUBWF  xEF,W
04C5A:  SUBWF  3F,W
04C5C:  BZ    4C60
04C5E:  BC    4CD0
....................    { 
....................       promediopresion+=PromPresion[q]; 
04C60:  MOVF   3F,W
04C62:  MULLW  04
04C64:  MOVF   FF3,W
04C66:  CLRF   03
04C68:  ADDLW  62
04C6A:  MOVWF  FE9
04C6C:  MOVLW  00
04C6E:  ADDWFC 03,W
04C70:  MOVWF  FEA
04C72:  MOVFF  FEF,00
04C76:  MOVFF  FEC,01
04C7A:  MOVFF  FEC,02
04C7E:  MOVFF  FEC,03
04C82:  MOVFF  FEA,7F5
04C86:  MOVFF  FE9,7F4
04C8A:  BCF    FD8.1
04C8C:  MOVFF  7F3,847
04C90:  MOVFF  7F2,846
04C94:  MOVFF  7F1,845
04C98:  MOVFF  7F0,844
04C9C:  MOVFF  03,84B
04CA0:  MOVFF  02,84A
04CA4:  MOVFF  01,849
04CA8:  MOVFF  00,848
04CAC:  MOVLB  0
04CAE:  CALL   0FCC
04CB2:  MOVFF  7F5,FEA
04CB6:  MOVFF  7F4,FE9
04CBA:  MOVFF  03,7F3
04CBE:  MOVFF  02,7F2
04CC2:  MOVFF  01,7F1
04CC6:  MOVFF  00,7F0
....................    }  
04CCA:  INCF   3F,F
04CCC:  MOVLB  7
04CCE:  BRA    4C56
....................    promediopresion=promediopresion/media;    
04CD0:  MOVLB  8
04CD2:  CLRF   x45
04CD4:  MOVFF  7EF,844
04CD8:  MOVLB  0
04CDA:  CALL   0E38
04CDE:  MOVFF  7F3,843
04CE2:  MOVFF  7F2,842
04CE6:  MOVFF  7F1,841
04CEA:  MOVFF  7F0,840
04CEE:  MOVFF  03,847
04CF2:  MOVFF  02,846
04CF6:  MOVFF  01,845
04CFA:  MOVFF  00,844
04CFE:  CALL   0E6E
04D02:  MOVFF  03,7F3
04D06:  MOVFF  02,7F2
04D0A:  MOVFF  01,7F1
04D0E:  MOVFF  00,7F0
....................     
....................    return promediopresion; 
04D12:  MOVFF  7F0,00
04D16:  MOVFF  7F1,01
04D1A:  MOVFF  7F2,02
04D1E:  MOVFF  7F3,03
.................... } 
04D22:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
00004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
00DF0:  MOVLW  C8
00DF2:  MOVLB  8
00DF4:  MOVWF  x06
00DF6:  MOVLB  0
00DF8:  RCALL  0CCE
....................    lcd_init(); 
00DFA:  RCALL  0D70
....................    set_tris_a(0XFF); 
00DFC:  MOVLW  FF
00DFE:  MOVWF  F92
....................    set_tris_e(0XFF); 
00E00:  BSF    F96.1
00E02:  BSF    F96.1
00E04:  BSF    F96.1
00E06:  BSF    F96.1
....................    enable_interrupts(global); 
00E08:  MOVLW  C0
00E0A:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
00E0C:  BSF    FF2.4
00E0E:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
00E10:  MOVLW  C7
00E12:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
00E14:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
00E16:  MOVLW  85
00E18:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
00E1A:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
00E1C:  MOVF   FC1,W
00E1E:  ANDLW  C0
00E20:  IORLW  0E
00E22:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
00E24:  MOVF   FC0,W
00E26:  ANDLW  C0
00E28:  IORLW  02
00E2A:  MOVWF  FC0
00E2C:  BSF    FC0.7
00E2E:  BSF    FC2.0
....................    enable_interrupts(global); 
00E30:  MOVLW  C0
00E32:  IORWF  FF2,F
.................... } 
00E34:  GOTO   56E4 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
022F2:  MOVLW  01
022F4:  MOVLB  8
022F6:  MOVWF  x01
022F8:  MOVWF  x02
022FA:  MOVLB  0
022FC:  RCALL  21DA
....................    printf(lcd_putc,"       MODULO       "); 
022FE:  MOVLW  F0
02300:  MOVWF  FF6
02302:  MOVLW  01
02304:  MOVWF  FF7
02306:  RCALL  22D2
....................    lcd_gotoxy(1,2); 
02308:  MOVLW  01
0230A:  MOVLB  8
0230C:  MOVWF  x01
0230E:  MOVLW  02
02310:  MOVWF  x02
02312:  MOVLB  0
02314:  RCALL  21DA
....................    printf(lcd_putc,"   FLUJO LAMINAR    "); 
02316:  MOVLW  06
02318:  MOVWF  FF6
0231A:  MOVLW  02
0231C:  MOVWF  FF7
0231E:  RCALL  22D2
....................    lcd_gotoxy(1,3); 
02320:  MOVLW  01
02322:  MOVLB  8
02324:  MOVWF  x01
02326:  MOVLW  03
02328:  MOVWF  x02
0232A:  MOVLB  0
0232C:  RCALL  21DA
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0232E:  MOVLW  1C
02330:  MOVWF  FF6
02332:  MOVLW  02
02334:  MOVWF  FF7
02336:  RCALL  22D2
....................    lcd_gotoxy(1,4); 
02338:  MOVLW  01
0233A:  MOVLB  8
0233C:  MOVWF  x01
0233E:  MOVLW  04
02340:  MOVWF  x02
02342:  MOVLB  0
02344:  RCALL  21DA
....................    printf(lcd_putc,"  REF:JPCFLVMD48IX  "); 
02346:  MOVLW  32
02348:  MOVWF  FF6
0234A:  MOVLW  02
0234C:  MOVWF  FF7
0234E:  RCALL  22D2
....................    delay_ms(2000); 
02350:  MOVLW  08
02352:  MOVLB  7
02354:  MOVWF  xEF
02356:  MOVLW  FA
02358:  MOVLB  8
0235A:  MOVWF  x06
0235C:  MOVLB  0
0235E:  CALL   0CCE
02362:  MOVLB  7
02364:  DECFSZ xEF,F
02366:  BRA    2356
....................    printf(lcd_putc,"\f"); 
02368:  MOVLW  0C
0236A:  MOVLB  8
0236C:  MOVWF  x00
0236E:  MOVLB  0
02370:  RCALL  2254
.................... } 
02372:  GOTO   56F6 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
01244:  MOVFF  FF2,7EF
01248:  BCF    FF2.6
0124A:  BCF    FF2.7
0124C:  CLRF   FAA
0124E:  CLRF   FA9
01250:  BCF    FA6.6
01252:  BCF    FA6.7
01254:  BSF    FA6.0
01256:  MOVF   FA8,W
01258:  MOVLB  7
0125A:  BTFSC  xEF.6
0125C:  BSF    FF2.6
0125E:  BTFSC  xEF.7
01260:  BSF    FF2.7
01262:  MOVWF  50
....................    delay_ms(20);  
01264:  MOVLW  14
01266:  MOVLB  8
01268:  MOVWF  x06
0126A:  MOVLB  0
0126C:  RCALL  0CCE
....................    contrasena[1]=read_eeprom(1); 
0126E:  MOVFF  FF2,7EF
01272:  BCF    FF2.6
01274:  BCF    FF2.7
01276:  CLRF   FAA
01278:  MOVLW  01
0127A:  MOVWF  FA9
0127C:  BCF    FA6.6
0127E:  BCF    FA6.7
01280:  BSF    FA6.0
01282:  MOVF   FA8,W
01284:  MOVLB  7
01286:  BTFSC  xEF.6
01288:  BSF    FF2.6
0128A:  BTFSC  xEF.7
0128C:  BSF    FF2.7
0128E:  MOVWF  51
....................    delay_ms(20); 
01290:  MOVLW  14
01292:  MOVLB  8
01294:  MOVWF  x06
01296:  MOVLB  0
01298:  RCALL  0CCE
....................    contrasena[2]=read_eeprom(2); 
0129A:  MOVFF  FF2,7EF
0129E:  BCF    FF2.6
012A0:  BCF    FF2.7
012A2:  CLRF   FAA
012A4:  MOVLW  02
012A6:  MOVWF  FA9
012A8:  BCF    FA6.6
012AA:  BCF    FA6.7
012AC:  BSF    FA6.0
012AE:  MOVF   FA8,W
012B0:  MOVLB  7
012B2:  BTFSC  xEF.6
012B4:  BSF    FF2.6
012B6:  BTFSC  xEF.7
012B8:  BSF    FF2.7
012BA:  MOVWF  52
....................    delay_ms(20);  
012BC:  MOVLW  14
012BE:  MOVLB  8
012C0:  MOVWF  x06
012C2:  MOVLB  0
012C4:  RCALL  0CCE
....................    contrasena[3]=read_eeprom(3); 
012C6:  MOVFF  FF2,7EF
012CA:  BCF    FF2.6
012CC:  BCF    FF2.7
012CE:  CLRF   FAA
012D0:  MOVLW  03
012D2:  MOVWF  FA9
012D4:  BCF    FA6.6
012D6:  BCF    FA6.7
012D8:  BSF    FA6.0
012DA:  MOVF   FA8,W
012DC:  MOVLB  7
012DE:  BTFSC  xEF.6
012E0:  BSF    FF2.6
012E2:  BTFSC  xEF.7
012E4:  BSF    FF2.7
012E6:  MOVWF  53
....................    delay_ms(20); 
012E8:  MOVLW  14
012EA:  MOVLB  8
012EC:  MOVWF  x06
012EE:  MOVLB  0
012F0:  RCALL  0CCE
....................    estadoalarma=read_eeprom(4); 
012F2:  MOVFF  FF2,7EF
012F6:  BCF    FF2.6
012F8:  BCF    FF2.7
012FA:  CLRF   FAA
012FC:  MOVLW  04
012FE:  MOVWF  FA9
01300:  BCF    FA6.6
01302:  BCF    FA6.7
01304:  BSF    FA6.0
01306:  MOVF   FA8,W
01308:  MOVLB  7
0130A:  BTFSC  xEF.6
0130C:  BSF    FF2.6
0130E:  BTFSC  xEF.7
01310:  BSF    FF2.7
01312:  MOVWF  01
01314:  BCF    2A.4
01316:  BTFSC  01.0
01318:  BSF    2A.4
....................    delay_ms(20); 
0131A:  MOVLW  14
0131C:  MOVLB  8
0131E:  MOVWF  x06
01320:  MOVLB  0
01322:  RCALL  0CCE
....................    tempo_minutos=read_eeprom(5); 
01324:  MOVFF  FF2,7EF
01328:  BCF    FF2.6
0132A:  BCF    FF2.7
0132C:  CLRF   FAA
0132E:  MOVLW  05
01330:  MOVWF  FA9
01332:  BCF    FA6.6
01334:  BCF    FA6.7
01336:  BSF    FA6.0
01338:  MOVF   FA8,W
0133A:  MOVLB  7
0133C:  BTFSC  xEF.6
0133E:  BSF    FF2.6
01340:  BTFSC  xEF.7
01342:  BSF    FF2.7
01344:  MOVWF  3A
....................    delay_ms(20); 
01346:  MOVLW  14
01348:  MOVLB  8
0134A:  MOVWF  x06
0134C:  MOVLB  0
0134E:  RCALL  0CCE
....................    tempo_segundos=read_eeprom(6); 
01350:  MOVFF  FF2,7EF
01354:  BCF    FF2.6
01356:  BCF    FF2.7
01358:  CLRF   FAA
0135A:  MOVLW  06
0135C:  MOVWF  FA9
0135E:  BCF    FA6.6
01360:  BCF    FA6.7
01362:  BSF    FA6.0
01364:  MOVF   FA8,W
01366:  MOVLB  7
01368:  BTFSC  xEF.6
0136A:  BSF    FF2.6
0136C:  BTFSC  xEF.7
0136E:  BSF    FF2.7
01370:  MOVWF  3B
....................    delay_ms(20); 
01372:  MOVLW  14
01374:  MOVLB  8
01376:  MOVWF  x06
01378:  MOVLB  0
0137A:  RCALL  0CCE
....................    segundos=read_eeprom(7); 
0137C:  MOVFF  FF2,7EF
01380:  BCF    FF2.6
01382:  BCF    FF2.7
01384:  CLRF   FAA
01386:  MOVLW  07
01388:  MOVWF  FA9
0138A:  BCF    FA6.6
0138C:  BCF    FA6.7
0138E:  BSF    FA6.0
01390:  MOVF   FA8,W
01392:  MOVLB  7
01394:  BTFSC  xEF.6
01396:  BSF    FF2.6
01398:  BTFSC  xEF.7
0139A:  BSF    FF2.7
0139C:  MOVWF  34
....................    delay_ms(20); 
0139E:  MOVLW  14
013A0:  MOVLB  8
013A2:  MOVWF  x06
013A4:  MOVLB  0
013A6:  RCALL  0CCE
....................    minutos=read_eeprom(8); 
013A8:  MOVFF  FF2,7EF
013AC:  BCF    FF2.6
013AE:  BCF    FF2.7
013B0:  CLRF   FAA
013B2:  MOVLW  08
013B4:  MOVWF  FA9
013B6:  BCF    FA6.6
013B8:  BCF    FA6.7
013BA:  BSF    FA6.0
013BC:  MOVF   FA8,W
013BE:  MOVLB  7
013C0:  BTFSC  xEF.6
013C2:  BSF    FF2.6
013C4:  BTFSC  xEF.7
013C6:  BSF    FF2.7
013C8:  MOVWF  35
....................    delay_ms(20); 
013CA:  MOVLW  14
013CC:  MOVLB  8
013CE:  MOVWF  x06
013D0:  MOVLB  0
013D2:  RCALL  0CCE
....................    horasL=read_eeprom(9); 
013D4:  MOVFF  FF2,7EF
013D8:  BCF    FF2.6
013DA:  BCF    FF2.7
013DC:  CLRF   FAA
013DE:  MOVLW  09
013E0:  MOVWF  FA9
013E2:  BCF    FA6.6
013E4:  BCF    FA6.7
013E6:  BSF    FA6.0
013E8:  MOVF   FA8,W
013EA:  MOVLB  7
013EC:  BTFSC  xEF.6
013EE:  BSF    FF2.6
013F0:  BTFSC  xEF.7
013F2:  BSF    FF2.7
013F4:  MOVWF  36
....................    delay_ms(20); 
013F6:  MOVLW  14
013F8:  MOVLB  8
013FA:  MOVWF  x06
013FC:  MOVLB  0
013FE:  RCALL  0CCE
....................    horasH=read_eeprom(10); 
01400:  MOVFF  FF2,7EF
01404:  BCF    FF2.6
01406:  BCF    FF2.7
01408:  CLRF   FAA
0140A:  MOVLW  0A
0140C:  MOVWF  FA9
0140E:  BCF    FA6.6
01410:  BCF    FA6.7
01412:  BSF    FA6.0
01414:  MOVF   FA8,W
01416:  MOVLB  7
01418:  BTFSC  xEF.6
0141A:  BSF    FF2.6
0141C:  BTFSC  xEF.7
0141E:  BSF    FF2.7
01420:  MOVWF  37
....................    delay_ms(20); 
01422:  MOVLW  14
01424:  MOVLB  8
01426:  MOVWF  x06
01428:  MOVLB  0
0142A:  RCALL  0CCE
....................    G_l=read_eeprom(11); 
0142C:  MOVFF  FF2,7EF
01430:  BCF    FF2.6
01432:  BCF    FF2.7
01434:  CLRF   FAA
01436:  MOVLW  0B
01438:  MOVWF  FA9
0143A:  BCF    FA6.6
0143C:  BCF    FA6.7
0143E:  BSF    FA6.0
01440:  MOVF   FA8,W
01442:  MOVLB  7
01444:  BTFSC  xEF.6
01446:  BSF    FF2.6
01448:  BTFSC  xEF.7
0144A:  BSF    FF2.7
0144C:  MOVWF  38
....................    delay_ms(20); 
0144E:  MOVLW  14
01450:  MOVLB  8
01452:  MOVWF  x06
01454:  MOVLB  0
01456:  RCALL  0CCE
....................    G_h=read_eeprom(12); 
01458:  MOVFF  FF2,7EF
0145C:  BCF    FF2.6
0145E:  BCF    FF2.7
01460:  CLRF   FAA
01462:  MOVLW  0C
01464:  MOVWF  FA9
01466:  BCF    FA6.6
01468:  BCF    FA6.7
0146A:  BSF    FA6.0
0146C:  MOVF   FA8,W
0146E:  MOVLB  7
01470:  BTFSC  xEF.6
01472:  BSF    FF2.6
01474:  BTFSC  xEF.7
01476:  BSF    FF2.7
01478:  MOVWF  39
....................    delay_ms(20); 
0147A:  MOVLW  14
0147C:  MOVLB  8
0147E:  MOVWF  x06
01480:  MOVLB  0
01482:  RCALL  0CCE
....................    Vel1=read_eeprom(13); 
01484:  MOVFF  FF2,7EF
01488:  BCF    FF2.6
0148A:  BCF    FF2.7
0148C:  CLRF   FAA
0148E:  MOVLW  0D
01490:  MOVWF  FA9
01492:  BCF    FA6.6
01494:  BCF    FA6.7
01496:  BSF    FA6.0
01498:  MOVF   FA8,W
0149A:  MOVLB  7
0149C:  BTFSC  xEF.6
0149E:  BSF    FF2.6
014A0:  BTFSC  xEF.7
014A2:  BSF    FF2.7
014A4:  MOVWF  58
....................    delay_ms(20); 
014A6:  MOVLW  14
014A8:  MOVLB  8
014AA:  MOVWF  x06
014AC:  MOVLB  0
014AE:  RCALL  0CCE
....................    codigoSubir=read_eeprom(15); 
014B0:  MOVFF  FF2,7EF
014B4:  BCF    FF2.6
014B6:  BCF    FF2.7
014B8:  CLRF   FAA
014BA:  MOVLW  0F
014BC:  MOVWF  FA9
014BE:  BCF    FA6.6
014C0:  BCF    FA6.7
014C2:  BSF    FA6.0
014C4:  MOVF   FA8,W
014C6:  MOVLB  7
014C8:  BTFSC  xEF.6
014CA:  BSF    FF2.6
014CC:  BTFSC  xEF.7
014CE:  BSF    FF2.7
014D0:  MOVWF  55
....................    delay_ms(20); 
014D2:  MOVLW  14
014D4:  MOVLB  8
014D6:  MOVWF  x06
014D8:  MOVLB  0
014DA:  CALL   0CCE
....................    codigoBajar=read_eeprom(16); 
014DE:  MOVFF  FF2,7EF
014E2:  BCF    FF2.6
014E4:  BCF    FF2.7
014E6:  CLRF   FAA
014E8:  MOVLW  10
014EA:  MOVWF  FA9
014EC:  BCF    FA6.6
014EE:  BCF    FA6.7
014F0:  BSF    FA6.0
014F2:  MOVF   FA8,W
014F4:  MOVLB  7
014F6:  BTFSC  xEF.6
014F8:  BSF    FF2.6
014FA:  BTFSC  xEF.7
014FC:  BSF    FF2.7
014FE:  MOVWF  56
....................    delay_ms(20); 
01500:  MOVLW  14
01502:  MOVLB  8
01504:  MOVWF  x06
01506:  MOVLB  0
01508:  CALL   0CCE
....................    codigoDetener=read_eeprom(17); 
0150C:  MOVFF  FF2,7EF
01510:  BCF    FF2.6
01512:  BCF    FF2.7
01514:  CLRF   FAA
01516:  MOVLW  11
01518:  MOVWF  FA9
0151A:  BCF    FA6.6
0151C:  BCF    FA6.7
0151E:  BSF    FA6.0
01520:  MOVF   FA8,W
01522:  MOVLB  7
01524:  BTFSC  xEF.6
01526:  BSF    FF2.6
01528:  BTFSC  xEF.7
0152A:  BSF    FF2.7
0152C:  MOVWF  57
....................    delay_ms(20); 
0152E:  MOVLW  14
01530:  MOVLB  8
01532:  MOVWF  x06
01534:  MOVLB  0
01536:  CALL   0CCE
....................    G16=make16(G_h,G_l); 
0153A:  MOVFF  39,5F
0153E:  MOVFF  38,5E
....................    G=G16; 
01542:  MOVFF  5F,845
01546:  MOVFF  5E,844
0154A:  RCALL  0E38
0154C:  MOVFF  03,C9
01550:  MOVFF  02,C8
01554:  MOVFF  01,C7
01558:  MOVFF  00,C6
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
0155C:  MOVFF  FF2,7EF
01560:  BCF    FF2.6
01562:  BCF    FF2.7
01564:  CLRF   FAA
01566:  MOVLW  13
01568:  MOVWF  FA9
0156A:  BCF    FA6.6
0156C:  BCF    FA6.7
0156E:  BSF    FA6.0
01570:  MOVF   FA8,W
01572:  MOVLB  7
01574:  BTFSC  xEF.6
01576:  BSF    FF2.6
01578:  BTFSC  xEF.7
0157A:  BSF    FF2.7
0157C:  MOVWF  xF0
0157E:  MOVFF  FF2,7F1
01582:  BCF    FF2.6
01584:  BCF    FF2.7
01586:  CLRF   FAA
01588:  MOVLW  12
0158A:  MOVWF  FA9
0158C:  BCF    FA6.6
0158E:  BCF    FA6.7
01590:  BSF    FA6.0
01592:  MOVF   FA8,W
01594:  BTFSC  xF1.6
01596:  BSF    FF2.6
01598:  BTFSC  xF1.7
0159A:  BSF    FF2.7
0159C:  MOVWF  xF2
0159E:  MOVFF  7F0,D8
015A2:  MOVFF  7F2,D7
....................    delay_ms(20); 
015A6:  MOVLW  14
015A8:  MOVLB  8
015AA:  MOVWF  x06
015AC:  MOVLB  0
015AE:  CALL   0CCE
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
015B2:  MOVFF  FF2,7EF
015B6:  BCF    FF2.6
015B8:  BCF    FF2.7
015BA:  CLRF   FAA
015BC:  MOVLW  15
015BE:  MOVWF  FA9
015C0:  BCF    FA6.6
015C2:  BCF    FA6.7
015C4:  BSF    FA6.0
015C6:  MOVF   FA8,W
015C8:  MOVLB  7
015CA:  BTFSC  xEF.6
015CC:  BSF    FF2.6
015CE:  BTFSC  xEF.7
015D0:  BSF    FF2.7
015D2:  MOVWF  xF0
015D4:  MOVFF  FF2,7F1
015D8:  BCF    FF2.6
015DA:  BCF    FF2.7
015DC:  CLRF   FAA
015DE:  MOVLW  14
015E0:  MOVWF  FA9
015E2:  BCF    FA6.6
015E4:  BCF    FA6.7
015E6:  BSF    FA6.0
015E8:  MOVF   FA8,W
015EA:  BTFSC  xF1.6
015EC:  BSF    FF2.6
015EE:  BTFSC  xF1.7
015F0:  BSF    FF2.7
015F2:  MOVWF  xF2
015F4:  MOVFF  7F0,D6
015F8:  MOVFF  7F2,D5
....................    delay_ms(20); 
015FC:  MOVLW  14
015FE:  MOVLB  8
01600:  MOVWF  x06
01602:  MOVLB  0
01604:  CALL   0CCE
....................    motor=read_eeprom(22); 
01608:  MOVFF  FF2,7EF
0160C:  BCF    FF2.6
0160E:  BCF    FF2.7
01610:  CLRF   FAA
01612:  MOVLW  16
01614:  MOVWF  FA9
01616:  BCF    FA6.6
01618:  BCF    FA6.7
0161A:  BSF    FA6.0
0161C:  MOVF   FA8,W
0161E:  MOVLB  7
01620:  BTFSC  xEF.6
01622:  BSF    FF2.6
01624:  BTFSC  xEF.7
01626:  BSF    FF2.7
01628:  MOVWF  44
....................    delay_ms(20); 
0162A:  MOVLW  14
0162C:  MOVLB  8
0162E:  MOVWF  x06
01630:  MOVLB  0
01632:  CALL   0CCE
....................    luz=read_eeprom(23); 
01636:  MOVFF  FF2,7EF
0163A:  BCF    FF2.6
0163C:  BCF    FF2.7
0163E:  CLRF   FAA
01640:  MOVLW  17
01642:  MOVWF  FA9
01644:  BCF    FA6.6
01646:  BCF    FA6.7
01648:  BSF    FA6.0
0164A:  MOVF   FA8,W
0164C:  MOVLB  7
0164E:  BTFSC  xEF.6
01650:  BSF    FF2.6
01652:  BTFSC  xEF.7
01654:  BSF    FF2.7
01656:  MOVWF  45
....................    delay_ms(20); 
01658:  MOVLW  14
0165A:  MOVLB  8
0165C:  MOVWF  x06
0165E:  MOVLB  0
01660:  CALL   0CCE
....................    velocidadInicial=read_eeprom(24); 
01664:  MOVFF  FF2,7EF
01668:  BCF    FF2.6
0166A:  BCF    FF2.7
0166C:  CLRF   FAA
0166E:  MOVLW  18
01670:  MOVWF  FA9
01672:  BCF    FA6.6
01674:  BCF    FA6.7
01676:  BSF    FA6.0
01678:  MOVF   FA8,W
0167A:  MOVLB  7
0167C:  BTFSC  xEF.6
0167E:  BSF    FF2.6
01680:  BTFSC  xEF.7
01682:  BSF    FF2.7
01684:  MOVWF  46
....................    delay_ms(20); 
01686:  MOVLW  14
01688:  MOVLB  8
0168A:  MOVWF  x06
0168C:  MOVLB  0
0168E:  CALL   0CCE
....................    delay_ms(10); 
01692:  MOVLW  0A
01694:  MOVLB  8
01696:  MOVWF  x06
01698:  MOVLB  0
0169A:  CALL   0CCE
....................    Entero=read_eeprom(25); 
0169E:  MOVFF  FF2,7EF
016A2:  BCF    FF2.6
016A4:  BCF    FF2.7
016A6:  CLRF   FAA
016A8:  MOVLW  19
016AA:  MOVWF  FA9
016AC:  BCF    FA6.6
016AE:  BCF    FA6.7
016B0:  BSF    FA6.0
016B2:  MOVF   FA8,W
016B4:  MOVLB  7
016B6:  BTFSC  xEF.6
016B8:  BSF    FF2.6
016BA:  BTFSC  xEF.7
016BC:  BSF    FF2.7
016BE:  MOVLB  0
016C0:  MOVWF  xF0
....................    delay_ms(10); 
016C2:  MOVLW  0A
016C4:  MOVLB  8
016C6:  MOVWF  x06
016C8:  MOVLB  0
016CA:  CALL   0CCE
....................    Temporal=read_eeprom(26); 
016CE:  MOVFF  FF2,7EF
016D2:  BCF    FF2.6
016D4:  BCF    FF2.7
016D6:  CLRF   FAA
016D8:  MOVLW  1A
016DA:  MOVWF  FA9
016DC:  BCF    FA6.6
016DE:  BCF    FA6.7
016E0:  BSF    FA6.0
016E2:  MOVF   FA8,W
016E4:  MOVLB  7
016E6:  BTFSC  xEF.6
016E8:  BSF    FF2.6
016EA:  BTFSC  xEF.7
016EC:  BSF    FF2.7
016EE:  MOVLB  8
016F0:  CLRF   x45
016F2:  MOVWF  x44
016F4:  MOVLB  0
016F6:  CALL   0E38
016FA:  MOVFF  03,121
016FE:  MOVFF  02,120
01702:  MOVFF  01,11F
01706:  MOVFF  00,11E
....................    delay_ms(10); 
0170A:  MOVLW  0A
0170C:  MOVLB  8
0170E:  MOVWF  x06
01710:  MOVLB  0
01712:  CALL   0CCE
....................    Temporal=Temporal/100.0; 
01716:  MOVFF  121,843
0171A:  MOVFF  120,842
0171E:  MOVFF  11F,841
01722:  MOVFF  11E,840
01726:  MOVLB  8
01728:  CLRF   x47
0172A:  CLRF   x46
0172C:  MOVLW  48
0172E:  MOVWF  x45
01730:  MOVLW  85
01732:  MOVWF  x44
01734:  MOVLB  0
01736:  CALL   0E6E
0173A:  MOVFF  03,121
0173E:  MOVFF  02,120
01742:  MOVFF  01,11F
01746:  MOVFF  00,11E
....................    Flujo[1].Ajuste=Entero+Temporal; 
0174A:  MOVLB  8
0174C:  CLRF   x45
0174E:  MOVFF  F0,844
01752:  MOVLB  0
01754:  CALL   0E38
01758:  BCF    FD8.1
0175A:  MOVFF  03,847
0175E:  MOVFF  02,846
01762:  MOVFF  01,845
01766:  MOVFF  00,844
0176A:  MOVFF  121,84B
0176E:  MOVFF  120,84A
01772:  MOVFF  11F,849
01776:  MOVFF  11E,848
0177A:  RCALL  0FCC
0177C:  MOVFF  03,2A3
01780:  MOVFF  02,2A2
01784:  MOVFF  01,2A1
01788:  MOVFF  00,2A0
....................    delay_ms(10); 
0178C:  MOVLW  0A
0178E:  MOVLB  8
01790:  MOVWF  x06
01792:  MOVLB  0
01794:  CALL   0CCE
....................    Flujo[1].zero_actual=make16(read_eeprom(28),read_eeprom(27)); 
01798:  MOVFF  FF2,7EF
0179C:  BCF    FF2.6
0179E:  BCF    FF2.7
017A0:  CLRF   FAA
017A2:  MOVLW  1C
017A4:  MOVWF  FA9
017A6:  BCF    FA6.6
017A8:  BCF    FA6.7
017AA:  BSF    FA6.0
017AC:  MOVF   FA8,W
017AE:  MOVLB  7
017B0:  BTFSC  xEF.6
017B2:  BSF    FF2.6
017B4:  BTFSC  xEF.7
017B6:  BSF    FF2.7
017B8:  MOVWF  xF0
017BA:  MOVFF  FF2,7F1
017BE:  BCF    FF2.6
017C0:  BCF    FF2.7
017C2:  CLRF   FAA
017C4:  MOVLW  1B
017C6:  MOVWF  FA9
017C8:  BCF    FA6.6
017CA:  BCF    FA6.7
017CC:  BSF    FA6.0
017CE:  MOVF   FA8,W
017D0:  BTFSC  xF1.6
017D2:  BSF    FF2.6
017D4:  BTFSC  xF1.7
017D6:  BSF    FF2.7
017D8:  MOVWF  xF2
017DA:  MOVFF  7F0,03
017DE:  MOVF   xF2,W
017E0:  MOVLB  8
017E2:  MOVWF  x44
017E4:  MOVFF  03,845
017E8:  MOVLB  0
017EA:  CALL   0E38
017EE:  MOVFF  03,28E
017F2:  MOVFF  02,28D
017F6:  MOVFF  01,28C
017FA:  MOVFF  00,28B
....................    delay_ms(10); 
017FE:  MOVLW  0A
01800:  MOVLB  8
01802:  MOVWF  x06
01804:  MOVLB  0
01806:  CALL   0CCE
....................     
....................    Pr=read_eeprom(29); 
0180A:  MOVFF  FF2,7EF
0180E:  BCF    FF2.6
01810:  BCF    FF2.7
01812:  CLRF   FAA
01814:  MOVLW  1D
01816:  MOVWF  FA9
01818:  BCF    FA6.6
0181A:  BCF    FA6.7
0181C:  BSF    FA6.0
0181E:  MOVF   FA8,W
01820:  MOVLB  7
01822:  BTFSC  xEF.6
01824:  BSF    FF2.6
01826:  BTFSC  xEF.7
01828:  BSF    FF2.7
0182A:  MOVLB  8
0182C:  CLRF   x45
0182E:  MOVWF  x44
01830:  MOVLB  0
01832:  CALL   0E38
01836:  MOVFF  03,11D
0183A:  MOVFF  02,11C
0183E:  MOVFF  01,11B
01842:  MOVFF  00,11A
....................    delay_ms(10); 
01846:  MOVLW  0A
01848:  MOVLB  8
0184A:  MOVWF  x06
0184C:  MOVLB  0
0184E:  CALL   0CCE
....................    HR=read_eeprom(30); 
01852:  MOVFF  FF2,7EF
01856:  BCF    FF2.6
01858:  BCF    FF2.7
0185A:  CLRF   FAA
0185C:  MOVLW  1E
0185E:  MOVWF  FA9
01860:  BCF    FA6.6
01862:  BCF    FA6.7
01864:  BSF    FA6.0
01866:  MOVF   FA8,W
01868:  MOVLB  7
0186A:  BTFSC  xEF.6
0186C:  BSF    FF2.6
0186E:  BTFSC  xEF.7
01870:  BSF    FF2.7
01872:  MOVLB  8
01874:  CLRF   x45
01876:  MOVWF  x44
01878:  MOVLB  0
0187A:  CALL   0E38
0187E:  MOVFF  03,125
01882:  MOVFF  02,124
01886:  MOVFF  01,123
0188A:  MOVFF  00,122
....................    delay_ms(10); 
0188E:  MOVLW  0A
01890:  MOVLB  8
01892:  MOVWF  x06
01894:  MOVLB  0
01896:  CALL   0CCE
....................    Media=read_eeprom(31); 
0189A:  MOVFF  FF2,7EF
0189E:  BCF    FF2.6
018A0:  BCF    FF2.7
018A2:  CLRF   FAA
018A4:  MOVLW  1F
018A6:  MOVWF  FA9
018A8:  BCF    FA6.6
018AA:  BCF    FA6.7
018AC:  BSF    FA6.0
018AE:  MOVF   FA8,W
018B0:  MOVLB  7
018B2:  BTFSC  xEF.6
018B4:  BSF    FF2.6
018B6:  BTFSC  xEF.7
018B8:  BSF    FF2.7
018BA:  MOVWF  59
....................    delay_ms(10); 
018BC:  MOVLW  0A
018BE:  MOVLB  8
018C0:  MOVWF  x06
018C2:  MOVLB  0
018C4:  CALL   0CCE
....................     
....................    horas=make16(horasH,horasL); 
018C8:  MOVFF  37,5D
018CC:  MOVFF  36,5C
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
018D0:  MOVFF  3A,3C
018D4:  MOVFF  3B,3D
.................... } 
018D8:  GOTO   56E8 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
01956:  BTFSC  50.7
01958:  BRA    1960
0195A:  MOVF   50,W
0195C:  SUBLW  09
0195E:  BNC   1966
01960:  BTFSC  50.7
01962:  BRA    1966
01964:  BRA    199E
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
01966:  CLRF   50
01968:  CLRF   FAA
0196A:  CLRF   FA9
0196C:  CLRF   FA8
0196E:  BCF    FA6.6
01970:  BCF    FA6.7
01972:  BSF    FA6.2
01974:  MOVF   FF2,W
01976:  MOVWF  00
01978:  BCF    FF2.6
0197A:  BCF    FF2.7
0197C:  MOVLB  F
0197E:  MOVLW  55
01980:  MOVWF  FA7
01982:  MOVLW  AA
01984:  MOVWF  FA7
01986:  BSF    FA6.1
01988:  BTFSC  FA6.1
0198A:  BRA    1988
0198C:  BCF    FA6.2
0198E:  MOVF   00,W
01990:  IORWF  FF2,F
01992:  MOVLW  14
01994:  MOVLB  8
01996:  MOVWF  x06
01998:  MOVLB  0
0199A:  CALL   0CCE
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0199E:  BTFSC  51.7
019A0:  BRA    19A8
019A2:  MOVF   51,W
019A4:  SUBLW  09
019A6:  BNC   19AE
019A8:  BTFSC  51.7
019AA:  BRA    19AE
019AC:  BRA    19E8
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
019AE:  CLRF   51
019B0:  CLRF   FAA
019B2:  MOVLW  01
019B4:  MOVWF  FA9
019B6:  CLRF   FA8
019B8:  BCF    FA6.6
019BA:  BCF    FA6.7
019BC:  BSF    FA6.2
019BE:  MOVF   FF2,W
019C0:  MOVWF  00
019C2:  BCF    FF2.6
019C4:  BCF    FF2.7
019C6:  MOVLB  F
019C8:  MOVLW  55
019CA:  MOVWF  FA7
019CC:  MOVLW  AA
019CE:  MOVWF  FA7
019D0:  BSF    FA6.1
019D2:  BTFSC  FA6.1
019D4:  BRA    19D2
019D6:  BCF    FA6.2
019D8:  MOVF   00,W
019DA:  IORWF  FF2,F
019DC:  MOVLW  14
019DE:  MOVLB  8
019E0:  MOVWF  x06
019E2:  MOVLB  0
019E4:  CALL   0CCE
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
019E8:  BTFSC  52.7
019EA:  BRA    19F2
019EC:  MOVF   52,W
019EE:  SUBLW  09
019F0:  BNC   19F8
019F2:  BTFSC  52.7
019F4:  BRA    19F8
019F6:  BRA    1A32
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
019F8:  CLRF   52
019FA:  CLRF   FAA
019FC:  MOVLW  02
019FE:  MOVWF  FA9
01A00:  CLRF   FA8
01A02:  BCF    FA6.6
01A04:  BCF    FA6.7
01A06:  BSF    FA6.2
01A08:  MOVF   FF2,W
01A0A:  MOVWF  00
01A0C:  BCF    FF2.6
01A0E:  BCF    FF2.7
01A10:  MOVLB  F
01A12:  MOVLW  55
01A14:  MOVWF  FA7
01A16:  MOVLW  AA
01A18:  MOVWF  FA7
01A1A:  BSF    FA6.1
01A1C:  BTFSC  FA6.1
01A1E:  BRA    1A1C
01A20:  BCF    FA6.2
01A22:  MOVF   00,W
01A24:  IORWF  FF2,F
01A26:  MOVLW  14
01A28:  MOVLB  8
01A2A:  MOVWF  x06
01A2C:  MOVLB  0
01A2E:  CALL   0CCE
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
01A32:  BTFSC  53.7
01A34:  BRA    1A3C
01A36:  MOVF   53,W
01A38:  SUBLW  09
01A3A:  BNC   1A42
01A3C:  BTFSC  53.7
01A3E:  BRA    1A42
01A40:  BRA    1A7C
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
01A42:  CLRF   53
01A44:  CLRF   FAA
01A46:  MOVLW  03
01A48:  MOVWF  FA9
01A4A:  CLRF   FA8
01A4C:  BCF    FA6.6
01A4E:  BCF    FA6.7
01A50:  BSF    FA6.2
01A52:  MOVF   FF2,W
01A54:  MOVWF  00
01A56:  BCF    FF2.6
01A58:  BCF    FF2.7
01A5A:  MOVLB  F
01A5C:  MOVLW  55
01A5E:  MOVWF  FA7
01A60:  MOVLW  AA
01A62:  MOVWF  FA7
01A64:  BSF    FA6.1
01A66:  BTFSC  FA6.1
01A68:  BRA    1A66
01A6A:  BCF    FA6.2
01A6C:  MOVF   00,W
01A6E:  IORWF  FF2,F
01A70:  MOVLW  14
01A72:  MOVLB  8
01A74:  MOVWF  x06
01A76:  MOVLB  0
01A78:  CALL   0CCE
....................    } 
....................    if(estadoalarma>1){ 
01A7C:  MOVLW  00
01A7E:  BTFSC  2A.4
01A80:  MOVLW  01
01A82:  SUBLW  01
01A84:  BC    1AC2
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
01A86:  BSF    2A.4
01A88:  CLRF   FAA
01A8A:  MOVLW  04
01A8C:  MOVWF  FA9
01A8E:  MOVLW  01
01A90:  MOVWF  FA8
01A92:  BCF    FA6.6
01A94:  BCF    FA6.7
01A96:  BSF    FA6.2
01A98:  MOVF   FF2,W
01A9A:  MOVWF  00
01A9C:  BCF    FF2.6
01A9E:  BCF    FF2.7
01AA0:  MOVLB  F
01AA2:  MOVLW  55
01AA4:  MOVWF  FA7
01AA6:  MOVLW  AA
01AA8:  MOVWF  FA7
01AAA:  BSF    FA6.1
01AAC:  BTFSC  FA6.1
01AAE:  BRA    1AAC
01AB0:  BCF    FA6.2
01AB2:  MOVF   00,W
01AB4:  IORWF  FF2,F
01AB6:  MOVLW  14
01AB8:  MOVLB  8
01ABA:  MOVWF  x06
01ABC:  MOVLB  0
01ABE:  CALL   0CCE
....................    } 
....................    if(tempo_minutos>200){ 
01AC2:  MOVF   3A,W
01AC4:  SUBLW  C8
01AC6:  BC    1B06
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
01AC8:  MOVLW  14
01ACA:  MOVWF  3A
01ACC:  CLRF   FAA
01ACE:  MOVLW  05
01AD0:  MOVWF  FA9
01AD2:  MOVLW  14
01AD4:  MOVWF  FA8
01AD6:  BCF    FA6.6
01AD8:  BCF    FA6.7
01ADA:  BSF    FA6.2
01ADC:  MOVF   FF2,W
01ADE:  MOVWF  00
01AE0:  BCF    FF2.6
01AE2:  BCF    FF2.7
01AE4:  MOVLB  F
01AE6:  MOVLW  55
01AE8:  MOVWF  FA7
01AEA:  MOVLW  AA
01AEC:  MOVWF  FA7
01AEE:  BSF    FA6.1
01AF0:  BTFSC  FA6.1
01AF2:  BRA    1AF0
01AF4:  BCF    FA6.2
01AF6:  MOVF   00,W
01AF8:  IORWF  FF2,F
01AFA:  MOVLW  14
01AFC:  MOVLB  8
01AFE:  MOVWF  x06
01B00:  MOVLB  0
01B02:  CALL   0CCE
....................    } 
....................    if(tempo_segundos>59){ 
01B06:  MOVF   3B,W
01B08:  SUBLW  3B
01B0A:  BC    1B46
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
01B0C:  CLRF   3B
01B0E:  CLRF   FAA
01B10:  MOVLW  06
01B12:  MOVWF  FA9
01B14:  CLRF   FA8
01B16:  BCF    FA6.6
01B18:  BCF    FA6.7
01B1A:  BSF    FA6.2
01B1C:  MOVF   FF2,W
01B1E:  MOVWF  00
01B20:  BCF    FF2.6
01B22:  BCF    FF2.7
01B24:  MOVLB  F
01B26:  MOVLW  55
01B28:  MOVWF  FA7
01B2A:  MOVLW  AA
01B2C:  MOVWF  FA7
01B2E:  BSF    FA6.1
01B30:  BTFSC  FA6.1
01B32:  BRA    1B30
01B34:  BCF    FA6.2
01B36:  MOVF   00,W
01B38:  IORWF  FF2,F
01B3A:  MOVLW  14
01B3C:  MOVLB  8
01B3E:  MOVWF  x06
01B40:  MOVLB  0
01B42:  CALL   0CCE
....................    } 
....................    if(segundos>60){ 
01B46:  MOVF   34,W
01B48:  SUBLW  3C
01B4A:  BC    1B86
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
01B4C:  CLRF   34
01B4E:  CLRF   FAA
01B50:  MOVLW  07
01B52:  MOVWF  FA9
01B54:  CLRF   FA8
01B56:  BCF    FA6.6
01B58:  BCF    FA6.7
01B5A:  BSF    FA6.2
01B5C:  MOVF   FF2,W
01B5E:  MOVWF  00
01B60:  BCF    FF2.6
01B62:  BCF    FF2.7
01B64:  MOVLB  F
01B66:  MOVLW  55
01B68:  MOVWF  FA7
01B6A:  MOVLW  AA
01B6C:  MOVWF  FA7
01B6E:  BSF    FA6.1
01B70:  BTFSC  FA6.1
01B72:  BRA    1B70
01B74:  BCF    FA6.2
01B76:  MOVF   00,W
01B78:  IORWF  FF2,F
01B7A:  MOVLW  14
01B7C:  MOVLB  8
01B7E:  MOVWF  x06
01B80:  MOVLB  0
01B82:  CALL   0CCE
....................    } 
....................    if(minutos>60){ 
01B86:  MOVF   35,W
01B88:  SUBLW  3C
01B8A:  BC    1BC6
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
01B8C:  CLRF   35
01B8E:  CLRF   FAA
01B90:  MOVLW  08
01B92:  MOVWF  FA9
01B94:  CLRF   FA8
01B96:  BCF    FA6.6
01B98:  BCF    FA6.7
01B9A:  BSF    FA6.2
01B9C:  MOVF   FF2,W
01B9E:  MOVWF  00
01BA0:  BCF    FF2.6
01BA2:  BCF    FF2.7
01BA4:  MOVLB  F
01BA6:  MOVLW  55
01BA8:  MOVWF  FA7
01BAA:  MOVLW  AA
01BAC:  MOVWF  FA7
01BAE:  BSF    FA6.1
01BB0:  BTFSC  FA6.1
01BB2:  BRA    1BB0
01BB4:  BCF    FA6.2
01BB6:  MOVF   00,W
01BB8:  IORWF  FF2,F
01BBA:  MOVLW  14
01BBC:  MOVLB  8
01BBE:  MOVWF  x06
01BC0:  MOVLB  0
01BC2:  CALL   0CCE
....................    } 
....................    if(horas>10000){ 
01BC6:  MOVF   5D,W
01BC8:  SUBLW  26
01BCA:  BC    1C4C
01BCC:  XORLW  FF
01BCE:  BNZ   1BD6
01BD0:  MOVF   5C,W
01BD2:  SUBLW  10
01BD4:  BC    1C4C
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
01BD6:  CLRF   5D
01BD8:  CLRF   5C
01BDA:  CLRF   FAA
01BDC:  MOVLW  09
01BDE:  MOVWF  FA9
01BE0:  MOVLW  0A
01BE2:  MOVWF  FA8
01BE4:  BCF    FA6.6
01BE6:  BCF    FA6.7
01BE8:  BSF    FA6.2
01BEA:  MOVF   FF2,W
01BEC:  MOVWF  00
01BEE:  BCF    FF2.6
01BF0:  BCF    FF2.7
01BF2:  MOVLB  F
01BF4:  MOVLW  55
01BF6:  MOVWF  FA7
01BF8:  MOVLW  AA
01BFA:  MOVWF  FA7
01BFC:  BSF    FA6.1
01BFE:  BTFSC  FA6.1
01C00:  BRA    1BFE
01C02:  BCF    FA6.2
01C04:  MOVF   00,W
01C06:  IORWF  FF2,F
01C08:  MOVLW  14
01C0A:  MOVLB  8
01C0C:  MOVWF  x06
01C0E:  MOVLB  0
01C10:  CALL   0CCE
01C14:  CLRF   FAA
01C16:  MOVLW  0A
01C18:  MOVWF  FA9
01C1A:  CLRF   FA8
01C1C:  BCF    FA6.6
01C1E:  BCF    FA6.7
01C20:  BSF    FA6.2
01C22:  MOVF   FF2,W
01C24:  MOVWF  00
01C26:  BCF    FF2.6
01C28:  BCF    FF2.7
01C2A:  MOVLB  F
01C2C:  MOVLW  55
01C2E:  MOVWF  FA7
01C30:  MOVLW  AA
01C32:  MOVWF  FA7
01C34:  BSF    FA6.1
01C36:  BTFSC  FA6.1
01C38:  BRA    1C36
01C3A:  BCF    FA6.2
01C3C:  MOVF   00,W
01C3E:  IORWF  FF2,F
01C40:  MOVLW  14
01C42:  MOVLB  8
01C44:  MOVWF  x06
01C46:  MOVLB  0
01C48:  CALL   0CCE
....................    } 
....................    if(G<150 || G>300){ 
01C4C:  MOVFF  C9,843
01C50:  MOVFF  C8,842
01C54:  MOVFF  C7,841
01C58:  MOVFF  C6,840
01C5C:  MOVLB  8
01C5E:  CLRF   x47
01C60:  CLRF   x46
01C62:  MOVLW  16
01C64:  MOVWF  x45
01C66:  MOVLW  86
01C68:  MOVWF  x44
01C6A:  MOVLB  0
01C6C:  RCALL  18DC
01C6E:  BC    1C94
01C70:  MOVLB  8
01C72:  CLRF   x43
01C74:  CLRF   x42
01C76:  MOVLW  16
01C78:  MOVWF  x41
01C7A:  MOVLW  87
01C7C:  MOVWF  x40
01C7E:  MOVFF  C9,847
01C82:  MOVFF  C8,846
01C86:  MOVFF  C7,845
01C8A:  MOVFF  C6,844
01C8E:  MOVLB  0
01C90:  RCALL  18DC
01C92:  BNC   1D12
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
01C94:  CLRF   xC9
01C96:  CLRF   xC8
01C98:  MOVLW  5C
01C9A:  MOVWF  xC7
01C9C:  MOVLW  86
01C9E:  MOVWF  xC6
01CA0:  CLRF   FAA
01CA2:  MOVLW  0B
01CA4:  MOVWF  FA9
01CA6:  MOVLW  DC
01CA8:  MOVWF  FA8
01CAA:  BCF    FA6.6
01CAC:  BCF    FA6.7
01CAE:  BSF    FA6.2
01CB0:  MOVF   FF2,W
01CB2:  MOVWF  00
01CB4:  BCF    FF2.6
01CB6:  BCF    FF2.7
01CB8:  MOVLB  F
01CBA:  MOVLW  55
01CBC:  MOVWF  FA7
01CBE:  MOVLW  AA
01CC0:  MOVWF  FA7
01CC2:  BSF    FA6.1
01CC4:  BTFSC  FA6.1
01CC6:  BRA    1CC4
01CC8:  BCF    FA6.2
01CCA:  MOVF   00,W
01CCC:  IORWF  FF2,F
01CCE:  MOVLW  14
01CD0:  MOVLB  8
01CD2:  MOVWF  x06
01CD4:  MOVLB  0
01CD6:  CALL   0CCE
01CDA:  CLRF   FAA
01CDC:  MOVLW  0C
01CDE:  MOVWF  FA9
01CE0:  CLRF   FA8
01CE2:  BCF    FA6.6
01CE4:  BCF    FA6.7
01CE6:  BSF    FA6.2
01CE8:  MOVF   FF2,W
01CEA:  MOVWF  00
01CEC:  BCF    FF2.6
01CEE:  BCF    FF2.7
01CF0:  MOVLB  F
01CF2:  MOVLW  55
01CF4:  MOVWF  FA7
01CF6:  MOVLW  AA
01CF8:  MOVWF  FA7
01CFA:  BSF    FA6.1
01CFC:  BTFSC  FA6.1
01CFE:  BRA    1CFC
01D00:  BCF    FA6.2
01D02:  MOVF   00,W
01D04:  IORWF  FF2,F
01D06:  MOVLW  14
01D08:  MOVLB  8
01D0A:  MOVWF  x06
01D0C:  MOVLB  0
01D0E:  CALL   0CCE
....................    } 
....................    if(Vel1>20 || Vel1<1){ 
01D12:  MOVF   58,W
01D14:  SUBLW  14
01D16:  BNC   1D1C
01D18:  MOVF   58,F
01D1A:  BNZ   1D5A
....................       Vel1=10;write_eeprom(13,10);delay_ms(20); 
01D1C:  MOVLW  0A
01D1E:  MOVWF  58
01D20:  CLRF   FAA
01D22:  MOVLW  0D
01D24:  MOVWF  FA9
01D26:  MOVLW  0A
01D28:  MOVWF  FA8
01D2A:  BCF    FA6.6
01D2C:  BCF    FA6.7
01D2E:  BSF    FA6.2
01D30:  MOVF   FF2,W
01D32:  MOVWF  00
01D34:  BCF    FF2.6
01D36:  BCF    FF2.7
01D38:  MOVLB  F
01D3A:  MOVLW  55
01D3C:  MOVWF  FA7
01D3E:  MOVLW  AA
01D40:  MOVWF  FA7
01D42:  BSF    FA6.1
01D44:  BTFSC  FA6.1
01D46:  BRA    1D44
01D48:  BCF    FA6.2
01D4A:  MOVF   00,W
01D4C:  IORWF  FF2,F
01D4E:  MOVLW  14
01D50:  MOVLB  8
01D52:  MOVWF  x06
01D54:  MOVLB  0
01D56:  CALL   0CCE
....................    } 
....................    if(horasTrabajo>60000){ 
01D5A:  MOVF   xD8,W
01D5C:  SUBLW  E9
01D5E:  BC    1DDE
01D60:  XORLW  FF
01D62:  BNZ   1D6A
01D64:  MOVF   xD7,W
01D66:  SUBLW  60
01D68:  BC    1DDE
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
01D6A:  CLRF   xD8
01D6C:  CLRF   xD7
01D6E:  CLRF   FAA
01D70:  MOVLW  13
01D72:  MOVWF  FA9
01D74:  CLRF   FA8
01D76:  BCF    FA6.6
01D78:  BCF    FA6.7
01D7A:  BSF    FA6.2
01D7C:  MOVF   FF2,W
01D7E:  MOVWF  00
01D80:  BCF    FF2.6
01D82:  BCF    FF2.7
01D84:  MOVLB  F
01D86:  MOVLW  55
01D88:  MOVWF  FA7
01D8A:  MOVLW  AA
01D8C:  MOVWF  FA7
01D8E:  BSF    FA6.1
01D90:  BTFSC  FA6.1
01D92:  BRA    1D90
01D94:  BCF    FA6.2
01D96:  MOVF   00,W
01D98:  IORWF  FF2,F
01D9A:  MOVLW  14
01D9C:  MOVLB  8
01D9E:  MOVWF  x06
01DA0:  MOVLB  0
01DA2:  CALL   0CCE
01DA6:  CLRF   FAA
01DA8:  MOVLW  12
01DAA:  MOVWF  FA9
01DAC:  CLRF   FA8
01DAE:  BCF    FA6.6
01DB0:  BCF    FA6.7
01DB2:  BSF    FA6.2
01DB4:  MOVF   FF2,W
01DB6:  MOVWF  00
01DB8:  BCF    FF2.6
01DBA:  BCF    FF2.7
01DBC:  MOVLB  F
01DBE:  MOVLW  55
01DC0:  MOVWF  FA7
01DC2:  MOVLW  AA
01DC4:  MOVWF  FA7
01DC6:  BSF    FA6.1
01DC8:  BTFSC  FA6.1
01DCA:  BRA    1DC8
01DCC:  BCF    FA6.2
01DCE:  MOVF   00,W
01DD0:  IORWF  FF2,F
01DD2:  MOVLW  14
01DD4:  MOVLB  8
01DD6:  MOVWF  x06
01DD8:  MOVLB  0
01DDA:  CALL   0CCE
....................    } 
....................    if(segundosTrabajo>3600){ 
01DDE:  MOVF   xD6,W
01DE0:  SUBLW  0D
01DE2:  BC    1E62
01DE4:  XORLW  FF
01DE6:  BNZ   1DEE
01DE8:  MOVF   xD5,W
01DEA:  SUBLW  10
01DEC:  BC    1E62
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
01DEE:  CLRF   xD6
01DF0:  CLRF   xD5
01DF2:  CLRF   FAA
01DF4:  MOVLW  14
01DF6:  MOVWF  FA9
01DF8:  CLRF   FA8
01DFA:  BCF    FA6.6
01DFC:  BCF    FA6.7
01DFE:  BSF    FA6.2
01E00:  MOVF   FF2,W
01E02:  MOVWF  00
01E04:  BCF    FF2.6
01E06:  BCF    FF2.7
01E08:  MOVLB  F
01E0A:  MOVLW  55
01E0C:  MOVWF  FA7
01E0E:  MOVLW  AA
01E10:  MOVWF  FA7
01E12:  BSF    FA6.1
01E14:  BTFSC  FA6.1
01E16:  BRA    1E14
01E18:  BCF    FA6.2
01E1A:  MOVF   00,W
01E1C:  IORWF  FF2,F
01E1E:  MOVLW  14
01E20:  MOVLB  8
01E22:  MOVWF  x06
01E24:  MOVLB  0
01E26:  CALL   0CCE
01E2A:  CLRF   FAA
01E2C:  MOVLW  15
01E2E:  MOVWF  FA9
01E30:  CLRF   FA8
01E32:  BCF    FA6.6
01E34:  BCF    FA6.7
01E36:  BSF    FA6.2
01E38:  MOVF   FF2,W
01E3A:  MOVWF  00
01E3C:  BCF    FF2.6
01E3E:  BCF    FF2.7
01E40:  MOVLB  F
01E42:  MOVLW  55
01E44:  MOVWF  FA7
01E46:  MOVLW  AA
01E48:  MOVWF  FA7
01E4A:  BSF    FA6.1
01E4C:  BTFSC  FA6.1
01E4E:  BRA    1E4C
01E50:  BCF    FA6.2
01E52:  MOVF   00,W
01E54:  IORWF  FF2,F
01E56:  MOVLW  14
01E58:  MOVLB  8
01E5A:  MOVWF  x06
01E5C:  MOVLB  0
01E5E:  CALL   0CCE
....................    } 
....................    if(motor>1){ 
01E62:  MOVF   44,W
01E64:  SUBLW  01
01E66:  BC    1EA6
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
01E68:  MOVLW  01
01E6A:  MOVWF  44
01E6C:  CLRF   FAA
01E6E:  MOVLW  16
01E70:  MOVWF  FA9
01E72:  MOVLW  01
01E74:  MOVWF  FA8
01E76:  BCF    FA6.6
01E78:  BCF    FA6.7
01E7A:  BSF    FA6.2
01E7C:  MOVF   FF2,W
01E7E:  MOVWF  00
01E80:  BCF    FF2.6
01E82:  BCF    FF2.7
01E84:  MOVLB  F
01E86:  MOVLW  55
01E88:  MOVWF  FA7
01E8A:  MOVLW  AA
01E8C:  MOVWF  FA7
01E8E:  BSF    FA6.1
01E90:  BTFSC  FA6.1
01E92:  BRA    1E90
01E94:  BCF    FA6.2
01E96:  MOVF   00,W
01E98:  IORWF  FF2,F
01E9A:  MOVLW  14
01E9C:  MOVLB  8
01E9E:  MOVWF  x06
01EA0:  MOVLB  0
01EA2:  CALL   0CCE
....................    } 
....................    if(luz>1){ 
01EA6:  MOVF   45,W
01EA8:  SUBLW  01
01EAA:  BC    1EEA
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
01EAC:  MOVLW  01
01EAE:  MOVWF  45
01EB0:  CLRF   FAA
01EB2:  MOVLW  17
01EB4:  MOVWF  FA9
01EB6:  MOVLW  01
01EB8:  MOVWF  FA8
01EBA:  BCF    FA6.6
01EBC:  BCF    FA6.7
01EBE:  BSF    FA6.2
01EC0:  MOVF   FF2,W
01EC2:  MOVWF  00
01EC4:  BCF    FF2.6
01EC6:  BCF    FF2.7
01EC8:  MOVLB  F
01ECA:  MOVLW  55
01ECC:  MOVWF  FA7
01ECE:  MOVLW  AA
01ED0:  MOVWF  FA7
01ED2:  BSF    FA6.1
01ED4:  BTFSC  FA6.1
01ED6:  BRA    1ED4
01ED8:  BCF    FA6.2
01EDA:  MOVF   00,W
01EDC:  IORWF  FF2,F
01EDE:  MOVLW  14
01EE0:  MOVLB  8
01EE2:  MOVWF  x06
01EE4:  MOVLB  0
01EE6:  CALL   0CCE
....................    } 
....................    if(velocidadInicial>15){ 
01EEA:  MOVF   46,W
01EEC:  SUBLW  0F
01EEE:  BC    1F2E
....................       velocidadInicial=10;write_eeprom(24,10);delay_ms(20); 
01EF0:  MOVLW  0A
01EF2:  MOVWF  46
01EF4:  CLRF   FAA
01EF6:  MOVLW  18
01EF8:  MOVWF  FA9
01EFA:  MOVLW  0A
01EFC:  MOVWF  FA8
01EFE:  BCF    FA6.6
01F00:  BCF    FA6.7
01F02:  BSF    FA6.2
01F04:  MOVF   FF2,W
01F06:  MOVWF  00
01F08:  BCF    FF2.6
01F0A:  BCF    FF2.7
01F0C:  MOVLB  F
01F0E:  MOVLW  55
01F10:  MOVWF  FA7
01F12:  MOVLW  AA
01F14:  MOVWF  FA7
01F16:  BSF    FA6.1
01F18:  BTFSC  FA6.1
01F1A:  BRA    1F18
01F1C:  BCF    FA6.2
01F1E:  MOVF   00,W
01F20:  IORWF  FF2,F
01F22:  MOVLW  14
01F24:  MOVLB  8
01F26:  MOVWF  x06
01F28:  MOVLB  0
01F2A:  CALL   0CCE
....................    } 
....................    if(Flujo[1].Ajuste>10.0 || Flujo[1].Ajuste==0.0){ 
01F2E:  MOVLB  8
01F30:  CLRF   x43
01F32:  CLRF   x42
01F34:  MOVLW  20
01F36:  MOVWF  x41
01F38:  MOVLW  82
01F3A:  MOVWF  x40
01F3C:  MOVFF  2A3,847
01F40:  MOVFF  2A2,846
01F44:  MOVFF  2A1,845
01F48:  MOVFF  2A0,844
01F4C:  MOVLB  0
01F4E:  RCALL  18DC
01F50:  BC    1F72
01F52:  MOVFF  2A3,843
01F56:  MOVFF  2A2,842
01F5A:  MOVFF  2A1,841
01F5E:  MOVFF  2A0,840
01F62:  MOVLB  8
01F64:  CLRF   x47
01F66:  CLRF   x46
01F68:  CLRF   x45
01F6A:  CLRF   x44
01F6C:  MOVLB  0
01F6E:  RCALL  18DC
01F70:  BNZ   1FDA
....................       Flujo[1].Ajuste=1.5;write_eeprom(25,1);write_eeprom(26,50); 
01F72:  MOVLB  2
01F74:  CLRF   xA3
01F76:  CLRF   xA2
01F78:  MOVLW  40
01F7A:  MOVWF  xA1
01F7C:  MOVLW  7F
01F7E:  MOVWF  xA0
01F80:  CLRF   FAA
01F82:  MOVLW  19
01F84:  MOVWF  FA9
01F86:  MOVLW  01
01F88:  MOVWF  FA8
01F8A:  BCF    FA6.6
01F8C:  BCF    FA6.7
01F8E:  BSF    FA6.2
01F90:  MOVF   FF2,W
01F92:  MOVWF  00
01F94:  BCF    FF2.6
01F96:  BCF    FF2.7
01F98:  MOVLB  F
01F9A:  MOVLW  55
01F9C:  MOVWF  FA7
01F9E:  MOVLW  AA
01FA0:  MOVWF  FA7
01FA2:  BSF    FA6.1
01FA4:  BTFSC  FA6.1
01FA6:  BRA    1FA4
01FA8:  BCF    FA6.2
01FAA:  MOVF   00,W
01FAC:  IORWF  FF2,F
01FAE:  CLRF   FAA
01FB0:  MOVLW  1A
01FB2:  MOVWF  FA9
01FB4:  MOVLW  32
01FB6:  MOVWF  FA8
01FB8:  BCF    FA6.6
01FBA:  BCF    FA6.7
01FBC:  BSF    FA6.2
01FBE:  MOVF   FF2,W
01FC0:  MOVWF  00
01FC2:  BCF    FF2.6
01FC4:  BCF    FF2.7
01FC6:  MOVLW  55
01FC8:  MOVWF  FA7
01FCA:  MOVLW  AA
01FCC:  MOVWF  FA7
01FCE:  BSF    FA6.1
01FD0:  BTFSC  FA6.1
01FD2:  BRA    1FD0
01FD4:  BCF    FA6.2
01FD6:  MOVF   00,W
01FD8:  IORWF  FF2,F
....................    } 
....................    if(Flujo[1].zero_actual>280 ||Flujo[1].zero_actual<180 ){ 
01FDA:  MOVLB  8
01FDC:  CLRF   x43
01FDE:  CLRF   x42
01FE0:  MOVLW  0C
01FE2:  MOVWF  x41
01FE4:  MOVLW  87
01FE6:  MOVWF  x40
01FE8:  MOVFF  28E,847
01FEC:  MOVFF  28D,846
01FF0:  MOVFF  28C,845
01FF4:  MOVFF  28B,844
01FF8:  MOVLB  0
01FFA:  RCALL  18DC
01FFC:  BC    2022
01FFE:  MOVFF  28E,843
02002:  MOVFF  28D,842
02006:  MOVFF  28C,841
0200A:  MOVFF  28B,840
0200E:  MOVLB  8
02010:  CLRF   x47
02012:  CLRF   x46
02014:  MOVLW  34
02016:  MOVWF  x45
02018:  MOVLW  86
0201A:  MOVWF  x44
0201C:  MOVLB  0
0201E:  RCALL  18DC
02020:  BNC   2088
....................       Flujo[1].zero_actual=203;write_eeprom(27,203);write_eeprom(28,0); 
02022:  MOVLB  2
02024:  CLRF   x8E
02026:  CLRF   x8D
02028:  MOVLW  4B
0202A:  MOVWF  x8C
0202C:  MOVLW  86
0202E:  MOVWF  x8B
02030:  CLRF   FAA
02032:  MOVLW  1B
02034:  MOVWF  FA9
02036:  MOVLW  CB
02038:  MOVWF  FA8
0203A:  BCF    FA6.6
0203C:  BCF    FA6.7
0203E:  BSF    FA6.2
02040:  MOVF   FF2,W
02042:  MOVWF  00
02044:  BCF    FF2.6
02046:  BCF    FF2.7
02048:  MOVLB  F
0204A:  MOVLW  55
0204C:  MOVWF  FA7
0204E:  MOVLW  AA
02050:  MOVWF  FA7
02052:  BSF    FA6.1
02054:  BTFSC  FA6.1
02056:  BRA    2054
02058:  BCF    FA6.2
0205A:  MOVF   00,W
0205C:  IORWF  FF2,F
0205E:  CLRF   FAA
02060:  MOVLW  1C
02062:  MOVWF  FA9
02064:  CLRF   FA8
02066:  BCF    FA6.6
02068:  BCF    FA6.7
0206A:  BSF    FA6.2
0206C:  MOVF   FF2,W
0206E:  MOVWF  00
02070:  BCF    FF2.6
02072:  BCF    FF2.7
02074:  MOVLW  55
02076:  MOVWF  FA7
02078:  MOVLW  AA
0207A:  MOVWF  FA7
0207C:  BSF    FA6.1
0207E:  BTFSC  FA6.1
02080:  BRA    207E
02082:  BCF    FA6.2
02084:  MOVF   00,W
02086:  IORWF  FF2,F
....................    } 
....................    if(Pr>110 || Pr<60){ 
02088:  MOVLB  8
0208A:  CLRF   x43
0208C:  CLRF   x42
0208E:  MOVLW  5C
02090:  MOVWF  x41
02092:  MOVLW  85
02094:  MOVWF  x40
02096:  MOVFF  11D,847
0209A:  MOVFF  11C,846
0209E:  MOVFF  11B,845
020A2:  MOVFF  11A,844
020A6:  MOVLB  0
020A8:  RCALL  18DC
020AA:  BC    20D0
020AC:  MOVFF  11D,843
020B0:  MOVFF  11C,842
020B4:  MOVFF  11B,841
020B8:  MOVFF  11A,840
020BC:  MOVLB  8
020BE:  CLRF   x47
020C0:  CLRF   x46
020C2:  MOVLW  70
020C4:  MOVWF  x45
020C6:  MOVLW  84
020C8:  MOVWF  x44
020CA:  MOVLB  0
020CC:  RCALL  18DC
020CE:  BNC   210C
....................       Pr=71;write_eeprom(29,71); 
020D0:  MOVLB  1
020D2:  CLRF   x1D
020D4:  CLRF   x1C
020D6:  MOVLW  0E
020D8:  MOVWF  x1B
020DA:  MOVLW  85
020DC:  MOVWF  x1A
020DE:  CLRF   FAA
020E0:  MOVLW  1D
020E2:  MOVWF  FA9
020E4:  MOVLW  47
020E6:  MOVWF  FA8
020E8:  BCF    FA6.6
020EA:  BCF    FA6.7
020EC:  BSF    FA6.2
020EE:  MOVF   FF2,W
020F0:  MOVWF  00
020F2:  BCF    FF2.6
020F4:  BCF    FF2.7
020F6:  MOVLB  F
020F8:  MOVLW  55
020FA:  MOVWF  FA7
020FC:  MOVLW  AA
020FE:  MOVWF  FA7
02100:  BSF    FA6.1
02102:  BTFSC  FA6.1
02104:  BRA    2102
02106:  BCF    FA6.2
02108:  MOVF   00,W
0210A:  IORWF  FF2,F
....................    } 
....................    if(HR>100 || HR<20){ 
0210C:  MOVLB  8
0210E:  CLRF   x43
02110:  CLRF   x42
02112:  MOVLW  48
02114:  MOVWF  x41
02116:  MOVLW  85
02118:  MOVWF  x40
0211A:  MOVFF  125,847
0211E:  MOVFF  124,846
02122:  MOVFF  123,845
02126:  MOVFF  122,844
0212A:  MOVLB  0
0212C:  CALL   18DC
02130:  BC    2158
02132:  MOVFF  125,843
02136:  MOVFF  124,842
0213A:  MOVFF  123,841
0213E:  MOVFF  122,840
02142:  MOVLB  8
02144:  CLRF   x47
02146:  CLRF   x46
02148:  MOVLW  20
0214A:  MOVWF  x45
0214C:  MOVLW  83
0214E:  MOVWF  x44
02150:  MOVLB  0
02152:  CALL   18DC
02156:  BNC   2196
....................       HR=60;write_eeprom(30,60); 
02158:  MOVLB  1
0215A:  CLRF   x25
0215C:  CLRF   x24
0215E:  MOVLW  70
02160:  MOVWF  x23
02162:  MOVLW  84
02164:  MOVWF  x22
02166:  CLRF   FAA
02168:  MOVLW  1E
0216A:  MOVWF  FA9
0216C:  MOVLW  3C
0216E:  MOVWF  FA8
02170:  BCF    FA6.6
02172:  BCF    FA6.7
02174:  BSF    FA6.2
02176:  MOVF   FF2,W
02178:  MOVWF  00
0217A:  BCF    FF2.6
0217C:  BCF    FF2.7
0217E:  MOVLB  F
02180:  MOVLW  55
02182:  MOVWF  FA7
02184:  MOVLW  AA
02186:  MOVWF  FA7
02188:  BSF    FA6.1
0218A:  BTFSC  FA6.1
0218C:  BRA    218A
0218E:  BCF    FA6.2
02190:  MOVF   00,W
02192:  IORWF  FF2,F
02194:  MOVLB  0
....................    } 
....................    if(Media>80 || Media<10){ 
02196:  MOVF   59,W
02198:  SUBLW  50
0219A:  BNC   21A2
0219C:  MOVF   59,W
0219E:  SUBLW  09
021A0:  BNC   21D4
....................       Media=40;write_eeprom(31,40); 
021A2:  MOVLW  28
021A4:  MOVWF  59
021A6:  CLRF   FAA
021A8:  MOVLW  1F
021AA:  MOVWF  FA9
021AC:  MOVLW  28
021AE:  MOVWF  FA8
021B0:  BCF    FA6.6
021B2:  BCF    FA6.7
021B4:  BSF    FA6.2
021B6:  MOVF   FF2,W
021B8:  MOVWF  00
021BA:  BCF    FF2.6
021BC:  BCF    FF2.7
021BE:  MOVLB  F
021C0:  MOVLW  55
021C2:  MOVWF  FA7
021C4:  MOVLW  AA
021C6:  MOVWF  FA7
021C8:  BSF    FA6.1
021CA:  BTFSC  FA6.1
021CC:  BRA    21CA
021CE:  BCF    FA6.2
021D0:  MOVF   00,W
021D2:  IORWF  FF2,F
021D4:  MOVLB  0
....................    } 
.................... } 
021D6:  GOTO   56EC (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
0513A:  MOVF   xD6,W
0513C:  SUBLW  0D
0513E:  BTFSC  FD8.0
05140:  BRA    525E
05142:  XORLW  FF
05144:  BNZ   514E
05146:  MOVF   xD5,W
05148:  SUBLW  0F
0514A:  BTFSC  FD8.0
0514C:  BRA    525E
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
0514E:  CLRF   xD6
05150:  CLRF   xD5
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
05152:  MOVFF  D5,7EF
05156:  CLRF   FAA
05158:  MOVLW  14
0515A:  MOVWF  FA9
0515C:  MOVFF  7EF,FA8
05160:  BCF    FA6.6
05162:  BCF    FA6.7
05164:  BSF    FA6.2
05166:  MOVF   FF2,W
05168:  MOVWF  00
0516A:  BCF    FF2.6
0516C:  BCF    FF2.7
0516E:  MOVLB  F
05170:  MOVLW  55
05172:  MOVWF  FA7
05174:  MOVLW  AA
05176:  MOVWF  FA7
05178:  BSF    FA6.1
0517A:  BTFSC  FA6.1
0517C:  BRA    517A
0517E:  BCF    FA6.2
05180:  MOVF   00,W
05182:  IORWF  FF2,F
....................       delay_ms(20); 
05184:  MOVLW  14
05186:  MOVLB  8
05188:  MOVWF  x06
0518A:  MOVLB  0
0518C:  CALL   0CCE
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
05190:  MOVFF  D6,7EF
05194:  CLRF   FAA
05196:  MOVLW  15
05198:  MOVWF  FA9
0519A:  MOVFF  7EF,FA8
0519E:  BCF    FA6.6
051A0:  BCF    FA6.7
051A2:  BSF    FA6.2
051A4:  MOVF   FF2,W
051A6:  MOVWF  00
051A8:  BCF    FF2.6
051AA:  BCF    FF2.7
051AC:  MOVLB  F
051AE:  MOVLW  55
051B0:  MOVWF  FA7
051B2:  MOVLW  AA
051B4:  MOVWF  FA7
051B6:  BSF    FA6.1
051B8:  BTFSC  FA6.1
051BA:  BRA    51B8
051BC:  BCF    FA6.2
051BE:  MOVF   00,W
051C0:  IORWF  FF2,F
....................       delay_ms(20); 
051C2:  MOVLW  14
051C4:  MOVLB  8
051C6:  MOVWF  x06
051C8:  MOVLB  0
051CA:  CALL   0CCE
....................       horasTrabajo++; 
051CE:  INCF   xD7,F
051D0:  BTFSC  FD8.2
051D2:  INCF   xD8,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
051D4:  MOVFF  D7,7EF
051D8:  CLRF   FAA
051DA:  MOVLW  12
051DC:  MOVWF  FA9
051DE:  MOVFF  7EF,FA8
051E2:  BCF    FA6.6
051E4:  BCF    FA6.7
051E6:  BSF    FA6.2
051E8:  MOVF   FF2,W
051EA:  MOVWF  00
051EC:  BCF    FF2.6
051EE:  BCF    FF2.7
051F0:  MOVLB  F
051F2:  MOVLW  55
051F4:  MOVWF  FA7
051F6:  MOVLW  AA
051F8:  MOVWF  FA7
051FA:  BSF    FA6.1
051FC:  BTFSC  FA6.1
051FE:  BRA    51FC
05200:  BCF    FA6.2
05202:  MOVF   00,W
05204:  IORWF  FF2,F
....................       delay_ms(20); 
05206:  MOVLW  14
05208:  MOVLB  8
0520A:  MOVWF  x06
0520C:  MOVLB  0
0520E:  CALL   0CCE
....................       write_eeprom(19,make8(horasTrabajo,1)); 
05212:  MOVFF  D8,7EF
05216:  CLRF   FAA
05218:  MOVLW  13
0521A:  MOVWF  FA9
0521C:  MOVFF  7EF,FA8
05220:  BCF    FA6.6
05222:  BCF    FA6.7
05224:  BSF    FA6.2
05226:  MOVF   FF2,W
05228:  MOVWF  00
0522A:  BCF    FF2.6
0522C:  BCF    FF2.7
0522E:  MOVLB  F
05230:  MOVLW  55
05232:  MOVWF  FA7
05234:  MOVLW  AA
05236:  MOVWF  FA7
05238:  BSF    FA6.1
0523A:  BTFSC  FA6.1
0523C:  BRA    523A
0523E:  BCF    FA6.2
05240:  MOVF   00,W
05242:  IORWF  FF2,F
....................       delay_ms(20); 
05244:  MOVLW  14
05246:  MOVLB  8
05248:  MOVWF  x06
0524A:  MOVLB  0
0524C:  CALL   0CCE
....................       delay_ms(20); 
05250:  MOVLW  14
05252:  MOVLB  8
05254:  MOVWF  x06
05256:  MOVLB  0
05258:  CALL   0CCE
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
0525C:  BRA    52FE
0525E:  MOVF   xD5,W
05260:  SUBLW  84
05262:  BNZ   526A
05264:  MOVF   xD6,W
05266:  SUBLW  03
05268:  BZ    5282
0526A:  MOVF   xD5,W
0526C:  SUBLW  08
0526E:  BNZ   5276
05270:  MOVF   xD6,W
05272:  SUBLW  07
05274:  BZ    5282
05276:  MOVF   xD5,W
05278:  SUBLW  8C
0527A:  BNZ   52FE
0527C:  MOVF   xD6,W
0527E:  SUBLW  0A
05280:  BNZ   52FE
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
05282:  MOVFF  D5,7EF
05286:  CLRF   FAA
05288:  MOVLW  14
0528A:  MOVWF  FA9
0528C:  MOVFF  7EF,FA8
05290:  BCF    FA6.6
05292:  BCF    FA6.7
05294:  BSF    FA6.2
05296:  MOVF   FF2,W
05298:  MOVWF  00
0529A:  BCF    FF2.6
0529C:  BCF    FF2.7
0529E:  MOVLB  F
052A0:  MOVLW  55
052A2:  MOVWF  FA7
052A4:  MOVLW  AA
052A6:  MOVWF  FA7
052A8:  BSF    FA6.1
052AA:  BTFSC  FA6.1
052AC:  BRA    52AA
052AE:  BCF    FA6.2
052B0:  MOVF   00,W
052B2:  IORWF  FF2,F
....................       delay_ms(20); 
052B4:  MOVLW  14
052B6:  MOVLB  8
052B8:  MOVWF  x06
052BA:  MOVLB  0
052BC:  CALL   0CCE
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
052C0:  MOVFF  D6,7EF
052C4:  CLRF   FAA
052C6:  MOVLW  15
052C8:  MOVWF  FA9
052CA:  MOVFF  7EF,FA8
052CE:  BCF    FA6.6
052D0:  BCF    FA6.7
052D2:  BSF    FA6.2
052D4:  MOVF   FF2,W
052D6:  MOVWF  00
052D8:  BCF    FF2.6
052DA:  BCF    FF2.7
052DC:  MOVLB  F
052DE:  MOVLW  55
052E0:  MOVWF  FA7
052E2:  MOVLW  AA
052E4:  MOVWF  FA7
052E6:  BSF    FA6.1
052E8:  BTFSC  FA6.1
052EA:  BRA    52E8
052EC:  BCF    FA6.2
052EE:  MOVF   00,W
052F0:  IORWF  FF2,F
....................       delay_ms(20); 
052F2:  MOVLW  14
052F4:  MOVLB  8
052F6:  MOVWF  x06
052F8:  MOVLB  0
052FA:  CALL   0CCE
....................    } 
.................... //----------------------------------------// 
.................... } 
052FE:  GOTO   6538 (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    //output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    //output_bit(PIN_C4,0); 
....................    //output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }  
....................  
.................... Float LeerFlujo(int8 media,int8 canal){ 
*
04026:  MOVLB  7
04028:  CLRF   xF4
0402A:  CLRF   xF3
0402C:  CLRF   xF2
0402E:  CLRF   xF1
....................     float dif=0.0; 
....................     Flujo[canal].adc=sensores(canal); 
04030:  CLRF   xFE
04032:  MOVFF  7F0,7FD
04036:  MOVLW  01
04038:  MOVLB  8
0403A:  MOVWF  x00
0403C:  MOVLW  59
0403E:  MOVLB  7
04040:  MOVWF  xFF
04042:  MOVLB  0
04044:  RCALL  3FA6
04046:  MOVFF  01,7F5
0404A:  MOVLW  08
0404C:  MOVLB  7
0404E:  ADDWF  01,W
04050:  MOVWF  01
04052:  MOVLW  00
04054:  ADDWFC 02,W
04056:  MOVWF  03
04058:  MOVF   01,W
0405A:  ADDLW  32
0405C:  MOVWF  01
0405E:  MOVLW  01
04060:  ADDWFC 03,F
04062:  MOVFF  01,7F5
04066:  MOVFF  03,7F6
0406A:  MOVFF  7F0,7F7
0406E:  MOVLB  0
04070:  RCALL  3FCC
04072:  MOVFF  03,843
04076:  MOVFF  02,842
0407A:  MOVFF  01,841
0407E:  MOVFF  00,840
04082:  CALL   246C
04086:  MOVFF  7F6,FEA
0408A:  MOVFF  7F5,FE9
0408E:  MOVFF  02,FEC
04092:  MOVF   FED,F
04094:  MOVFF  01,FEF
....................      
....................     dif=zero_fabrica-Flujo[canal].zero_actual; 
04098:  MOVLB  7
0409A:  CLRF   xFE
0409C:  MOVFF  7F0,7FD
040A0:  MOVLW  01
040A2:  MOVLB  8
040A4:  MOVWF  x00
040A6:  MOVLW  59
040A8:  MOVLB  7
040AA:  MOVWF  xFF
040AC:  MOVLB  0
040AE:  RCALL  3FA6
040B0:  MOVFF  02,7F6
040B4:  MOVFF  01,7F5
040B8:  MOVLW  32
040BA:  MOVLB  7
040BC:  ADDWF  01,W
040BE:  MOVWF  FE9
040C0:  MOVLW  01
040C2:  ADDWFC 02,W
040C4:  MOVWF  FEA
040C6:  MOVFF  FEF,00
040CA:  MOVFF  FEC,01
040CE:  MOVFF  FEC,02
040D2:  MOVFF  FEC,03
040D6:  MOVFF  FEA,7F6
040DA:  MOVFF  FE9,7F5
040DE:  BSF    FD8.1
040E0:  MOVFF  F5,847
040E4:  MOVFF  F4,846
040E8:  MOVFF  F3,845
040EC:  MOVFF  F2,844
040F0:  MOVFF  03,84B
040F4:  MOVFF  02,84A
040F8:  MOVFF  01,849
040FC:  MOVFF  00,848
04100:  MOVLB  0
04102:  CALL   0FCC
04106:  MOVFF  7F6,FEA
0410A:  MOVFF  7F5,FE9
0410E:  MOVFF  03,7F4
04112:  MOVFF  02,7F3
04116:  MOVFF  01,7F2
0411A:  MOVFF  00,7F1
....................     x_uno=Flujo[canal].adc+dif; 
0411E:  MOVLB  7
04120:  CLRF   xFE
04122:  MOVFF  7F0,7FD
04126:  MOVLW  01
04128:  MOVLB  8
0412A:  MOVWF  x00
0412C:  MOVLW  59
0412E:  MOVLB  7
04130:  MOVWF  xFF
04132:  MOVLB  0
04134:  RCALL  3FA6
04136:  MOVFF  01,7F5
0413A:  MOVLW  08
0413C:  MOVLB  7
0413E:  ADDWF  01,W
04140:  MOVWF  01
04142:  MOVLW  00
04144:  ADDWFC 02,W
04146:  MOVWF  03
04148:  MOVF   01,W
0414A:  ADDLW  32
0414C:  MOVWF  FE9
0414E:  MOVLW  01
04150:  ADDWFC 03,W
04152:  MOVWF  FEA
04154:  MOVFF  FEC,7F6
04158:  MOVF   FED,F
0415A:  MOVFF  FEF,7F5
0415E:  MOVFF  7F6,845
04162:  MOVFF  7F5,844
04166:  MOVLB  0
04168:  CALL   0E38
0416C:  MOVFF  FEA,7F8
04170:  MOVFF  FE9,7F7
04174:  BCF    FD8.1
04176:  MOVFF  03,847
0417A:  MOVFF  02,846
0417E:  MOVFF  01,845
04182:  MOVFF  00,844
04186:  MOVFF  7F4,84B
0418A:  MOVFF  7F3,84A
0418E:  MOVFF  7F2,849
04192:  MOVFF  7F1,848
04196:  CALL   0FCC
0419A:  MOVFF  7F8,FEA
0419E:  MOVFF  7F7,FE9
041A2:  MOVFF  03,F9
041A6:  MOVFF  02,F8
041AA:  MOVFF  01,F7
041AE:  MOVFF  00,F6
....................     x_uno=(x_uno/1023)*5;     
041B2:  MOVFF  F9,843
041B6:  MOVFF  F8,842
041BA:  MOVFF  F7,841
041BE:  MOVFF  F6,840
041C2:  MOVLB  8
041C4:  CLRF   x47
041C6:  MOVLW  C0
041C8:  MOVWF  x46
041CA:  MOVLW  7F
041CC:  MOVWF  x45
041CE:  MOVLW  88
041D0:  MOVWF  x44
041D2:  MOVLB  0
041D4:  CALL   0E6E
041D8:  MOVFF  00,7F5
041DC:  MOVFF  01,7F6
041E0:  MOVFF  02,7F7
041E4:  MOVFF  03,7F8
041E8:  MOVFF  03,843
041EC:  MOVFF  02,842
041F0:  MOVFF  01,841
041F4:  MOVFF  00,840
041F8:  MOVLB  8
041FA:  CLRF   x47
041FC:  CLRF   x46
041FE:  MOVLW  20
04200:  MOVWF  x45
04202:  MOVLW  81
04204:  MOVWF  x44
04206:  MOVLB  0
04208:  CALL   2376
0420C:  MOVFF  03,F9
04210:  MOVFF  02,F8
04214:  MOVFF  01,F7
04218:  MOVFF  00,F6
....................     Flujo[canal].Velocidad=(pow(x_uno,4)*p1)+(pow(x_uno,3)*p2)+(pow(x_uno,2)*p3)+(x_uno*p4)+p5;     
0421C:  MOVLB  7
0421E:  CLRF   xFE
04220:  MOVFF  7F0,7FD
04224:  MOVLW  01
04226:  MOVLB  8
04228:  MOVWF  x00
0422A:  MOVLW  59
0422C:  MOVLB  7
0422E:  MOVWF  xFF
04230:  MOVLB  0
04232:  RCALL  3FA6
04234:  MOVFF  01,7F5
04238:  MOVLW  0B
0423A:  MOVLB  7
0423C:  ADDWF  01,W
0423E:  MOVWF  01
04240:  MOVLW  00
04242:  ADDWFC 02,W
04244:  MOVWF  03
04246:  MOVF   01,W
04248:  ADDLW  32
0424A:  MOVWF  01
0424C:  MOVLW  01
0424E:  ADDWFC 03,F
04250:  MOVFF  01,7F5
04254:  MOVFF  03,7F6
04258:  MOVFF  F9,817
0425C:  MOVFF  F8,816
04260:  MOVFF  F7,815
04264:  MOVFF  F6,814
04268:  MOVLB  8
0426A:  CLRF   x1B
0426C:  CLRF   x1A
0426E:  CLRF   x19
04270:  MOVLW  81
04272:  MOVWF  x18
04274:  MOVLB  0
04276:  CALL   32E6
0427A:  MOVFF  00,7F7
0427E:  MOVFF  01,7F8
04282:  MOVFF  02,7F9
04286:  MOVFF  03,7FA
0428A:  MOVFF  03,843
0428E:  MOVFF  02,842
04292:  MOVFF  01,841
04296:  MOVFF  00,840
0429A:  MOVFF  DE,847
0429E:  MOVFF  DD,846
042A2:  MOVFF  DC,845
042A6:  MOVFF  DB,844
042AA:  CALL   2376
042AE:  MOVFF  00,7F7
042B2:  MOVFF  01,7F8
042B6:  MOVFF  02,7F9
042BA:  MOVFF  03,7FA
042BE:  MOVFF  F9,817
042C2:  MOVFF  F8,816
042C6:  MOVFF  F7,815
042CA:  MOVFF  F6,814
042CE:  MOVLB  8
042D0:  CLRF   x1B
042D2:  CLRF   x1A
042D4:  MOVLW  40
042D6:  MOVWF  x19
042D8:  MOVLW  80
042DA:  MOVWF  x18
042DC:  MOVLB  0
042DE:  CALL   32E6
042E2:  MOVFF  00,7FB
042E6:  MOVFF  01,7FC
042EA:  MOVFF  02,7FD
042EE:  MOVFF  03,7FE
042F2:  MOVFF  03,843
042F6:  MOVFF  02,842
042FA:  MOVFF  01,841
042FE:  MOVFF  00,840
04302:  MOVFF  E2,847
04306:  MOVFF  E1,846
0430A:  MOVFF  E0,845
0430E:  MOVFF  DF,844
04312:  CALL   2376
04316:  MOVFF  FEA,7FC
0431A:  MOVFF  FE9,7FB
0431E:  BCF    FD8.1
04320:  MOVFF  7FA,847
04324:  MOVFF  7F9,846
04328:  MOVFF  7F8,845
0432C:  MOVFF  7F7,844
04330:  MOVFF  03,84B
04334:  MOVFF  02,84A
04338:  MOVFF  01,849
0433C:  MOVFF  00,848
04340:  CALL   0FCC
04344:  MOVFF  7FC,FEA
04348:  MOVFF  7FB,FE9
0434C:  MOVFF  00,7F7
04350:  MOVFF  01,7F8
04354:  MOVFF  02,7F9
04358:  MOVFF  03,7FA
0435C:  MOVFF  F9,817
04360:  MOVFF  F8,816
04364:  MOVFF  F7,815
04368:  MOVFF  F6,814
0436C:  MOVLB  8
0436E:  CLRF   x1B
04370:  CLRF   x1A
04372:  CLRF   x19
04374:  MOVLW  80
04376:  MOVWF  x18
04378:  MOVLB  0
0437A:  CALL   32E6
0437E:  MOVFF  00,7FD
04382:  MOVFF  01,7FE
04386:  MOVFF  02,7FF
0438A:  MOVFF  03,800
0438E:  MOVFF  03,843
04392:  MOVFF  02,842
04396:  MOVFF  01,841
0439A:  MOVFF  00,840
0439E:  MOVFF  E6,847
043A2:  MOVFF  E5,846
043A6:  MOVFF  E4,845
043AA:  MOVFF  E3,844
043AE:  CALL   2376
043B2:  MOVFF  FEA,7FE
043B6:  MOVFF  FE9,7FD
043BA:  BCF    FD8.1
043BC:  MOVFF  7FA,847
043C0:  MOVFF  7F9,846
043C4:  MOVFF  7F8,845
043C8:  MOVFF  7F7,844
043CC:  MOVFF  03,84B
043D0:  MOVFF  02,84A
043D4:  MOVFF  01,849
043D8:  MOVFF  00,848
043DC:  CALL   0FCC
043E0:  MOVFF  7FE,FEA
043E4:  MOVFF  7FD,FE9
043E8:  MOVFF  00,7F7
043EC:  MOVFF  01,7F8
043F0:  MOVFF  02,7F9
043F4:  MOVFF  03,7FA
043F8:  MOVFF  F9,843
043FC:  MOVFF  F8,842
04400:  MOVFF  F7,841
04404:  MOVFF  F6,840
04408:  MOVFF  EA,847
0440C:  MOVFF  E9,846
04410:  MOVFF  E8,845
04414:  MOVFF  E7,844
04418:  CALL   2376
0441C:  MOVFF  FEA,800
04420:  MOVFF  FE9,7FF
04424:  BCF    FD8.1
04426:  MOVFF  7FA,847
0442A:  MOVFF  7F9,846
0442E:  MOVFF  7F8,845
04432:  MOVFF  7F7,844
04436:  MOVFF  03,84B
0443A:  MOVFF  02,84A
0443E:  MOVFF  01,849
04442:  MOVFF  00,848
04446:  CALL   0FCC
0444A:  MOVFF  800,FEA
0444E:  MOVFF  7FF,FE9
04452:  MOVFF  00,7F7
04456:  MOVFF  01,7F8
0445A:  MOVFF  02,7F9
0445E:  MOVFF  03,7FA
04462:  MOVFF  FEA,802
04466:  MOVFF  FE9,801
0446A:  BCF    FD8.1
0446C:  MOVFF  03,847
04470:  MOVFF  02,846
04474:  MOVFF  01,845
04478:  MOVFF  00,844
0447C:  MOVFF  EE,84B
04480:  MOVFF  ED,84A
04484:  MOVFF  EC,849
04488:  MOVFF  EB,848
0448C:  CALL   0FCC
04490:  MOVFF  802,FEA
04494:  MOVFF  801,FE9
04498:  MOVFF  7F6,FEA
0449C:  MOVFF  7F5,FE9
044A0:  MOVFF  00,FEF
044A4:  MOVFF  01,FEC
044A8:  MOVFF  02,FEC
044AC:  MOVFF  03,FEC
....................      
....................     if(Flujo[canal].Velocidad<0.0) 
044B0:  MOVLB  7
044B2:  CLRF   xFE
044B4:  MOVFF  7F0,7FD
044B8:  MOVLW  01
044BA:  MOVLB  8
044BC:  MOVWF  x00
044BE:  MOVLW  59
044C0:  MOVLB  7
044C2:  MOVWF  xFF
044C4:  MOVLB  0
044C6:  RCALL  3FA6
044C8:  MOVFF  01,7F5
044CC:  MOVLW  0B
044CE:  MOVLB  7
044D0:  ADDWF  01,W
044D2:  MOVWF  01
044D4:  MOVLW  00
044D6:  ADDWFC 02,W
044D8:  MOVWF  03
044DA:  MOVF   01,W
044DC:  ADDLW  32
044DE:  MOVWF  FE9
044E0:  MOVLW  01
044E2:  ADDWFC 03,W
044E4:  MOVWF  FEA
044E6:  MOVFF  FEF,7F5
044EA:  MOVFF  FEC,7F6
044EE:  MOVFF  FEC,7F7
044F2:  MOVFF  FEC,7F8
044F6:  MOVFF  7F8,843
044FA:  MOVFF  7F7,842
044FE:  MOVFF  7F6,841
04502:  MOVFF  7F5,840
04506:  MOVLB  8
04508:  CLRF   x47
0450A:  CLRF   x46
0450C:  CLRF   x45
0450E:  CLRF   x44
04510:  MOVLB  0
04512:  CALL   18DC
04516:  BNC   4556
....................       Flujo[canal].Velocidad=0.0; 
04518:  MOVLB  7
0451A:  CLRF   xFE
0451C:  MOVFF  7F0,7FD
04520:  MOVLW  01
04522:  MOVLB  8
04524:  MOVWF  x00
04526:  MOVLW  59
04528:  MOVLB  7
0452A:  MOVWF  xFF
0452C:  MOVLB  0
0452E:  RCALL  3FA6
04530:  MOVFF  01,7F5
04534:  MOVLW  0B
04536:  MOVLB  7
04538:  ADDWF  01,W
0453A:  MOVWF  01
0453C:  MOVLW  00
0453E:  ADDWFC 02,W
04540:  MOVWF  03
04542:  MOVF   01,W
04544:  ADDLW  32
04546:  MOVWF  FE9
04548:  MOVLW  01
0454A:  ADDWFC 03,W
0454C:  MOVWF  FEA
0454E:  CLRF   FEF
04550:  CLRF   FEC
04552:  CLRF   FEC
04554:  CLRF   FEC
....................       
....................      if(Flujo[canal].l>media-1) 
04556:  MOVLB  7
04558:  CLRF   xFE
0455A:  MOVFF  7F0,7FD
0455E:  MOVLW  01
04560:  MOVLB  8
04562:  MOVWF  x00
04564:  MOVLW  59
04566:  MOVLB  7
04568:  MOVWF  xFF
0456A:  MOVLB  0
0456C:  RCALL  3FA6
0456E:  MOVFF  02,7F6
04572:  MOVFF  01,7F5
04576:  MOVLW  0F
04578:  MOVLB  7
0457A:  ADDWF  01,W
0457C:  MOVWF  01
0457E:  MOVLW  00
04580:  ADDWFC 02,W
04582:  MOVWF  03
04584:  MOVF   01,W
04586:  ADDLW  32
04588:  MOVWF  FE9
0458A:  MOVLW  01
0458C:  ADDWFC 03,W
0458E:  MOVWF  FEA
04590:  MOVFF  FEF,7F5
04594:  MOVLW  01
04596:  SUBWF  xEF,W
04598:  SUBWF  xF5,W
0459A:  BZ    45D4
0459C:  BNC   45D4
....................        {Flujo[canal].l=0;} 
0459E:  CLRF   xFE
045A0:  MOVFF  7F0,7FD
045A4:  MOVLW  01
045A6:  MOVLB  8
045A8:  MOVWF  x00
045AA:  MOVLW  59
045AC:  MOVLB  7
045AE:  MOVWF  xFF
045B0:  MOVLB  0
045B2:  RCALL  3FA6
045B4:  MOVFF  01,7F5
045B8:  MOVLW  0F
045BA:  MOVLB  7
045BC:  ADDWF  01,W
045BE:  MOVWF  01
045C0:  MOVLW  00
045C2:  ADDWFC 02,W
045C4:  MOVWF  03
045C6:  MOVF   01,W
045C8:  ADDLW  32
045CA:  MOVWF  FE9
045CC:  MOVLW  01
045CE:  ADDWFC 03,W
045D0:  MOVWF  FEA
045D2:  CLRF   FEF
....................       
....................      Flujo[canal].promedio[Flujo[canal].l]=Flujo[canal].Velocidad; 
045D4:  CLRF   xFE
045D6:  MOVFF  7F0,7FD
045DA:  MOVLW  01
045DC:  MOVLB  8
045DE:  MOVWF  x00
045E0:  MOVLW  59
045E2:  MOVLB  7
045E4:  MOVWF  xFF
045E6:  MOVLB  0
045E8:  RCALL  3FA6
045EA:  MOVFF  02,7F6
045EE:  MOVFF  01,7F5
045F2:  MOVLW  19
045F4:  MOVLB  7
045F6:  ADDWF  xF5,F
045F8:  MOVLW  00
045FA:  ADDWFC xF6,F
045FC:  CLRF   xFE
045FE:  MOVFF  7F0,7FD
04602:  MOVLW  01
04604:  MOVLB  8
04606:  MOVWF  x00
04608:  MOVLW  59
0460A:  MOVLB  7
0460C:  MOVWF  xFF
0460E:  MOVLB  0
04610:  RCALL  3FA6
04612:  MOVFF  02,7F8
04616:  MOVFF  01,7F7
0461A:  MOVLW  0F
0461C:  MOVLB  7
0461E:  ADDWF  01,W
04620:  MOVWF  01
04622:  MOVLW  00
04624:  ADDWFC 02,W
04626:  MOVWF  03
04628:  MOVF   01,W
0462A:  ADDLW  32
0462C:  MOVWF  FE9
0462E:  MOVLW  01
04630:  ADDWFC 03,W
04632:  MOVWF  FEA
04634:  CLRF   xFE
04636:  MOVFF  FEF,7FD
0463A:  MOVLB  8
0463C:  CLRF   x00
0463E:  MOVLW  04
04640:  MOVLB  7
04642:  MOVWF  xFF
04644:  MOVLB  0
04646:  RCALL  3FA6
04648:  MOVFF  02,03
0464C:  MOVF   01,W
0464E:  MOVLB  7
04650:  ADDWF  xF5,W
04652:  MOVWF  01
04654:  MOVF   xF6,W
04656:  ADDWFC 03,F
04658:  MOVF   01,W
0465A:  ADDLW  32
0465C:  MOVWF  01
0465E:  MOVLW  01
04660:  ADDWFC 03,F
04662:  MOVFF  01,7F5
04666:  MOVFF  03,7F6
0466A:  CLRF   xFE
0466C:  MOVFF  7F0,7FD
04670:  MOVLW  01
04672:  MOVLB  8
04674:  MOVWF  x00
04676:  MOVLW  59
04678:  MOVLB  7
0467A:  MOVWF  xFF
0467C:  MOVLB  0
0467E:  RCALL  3FA6
04680:  MOVFF  02,7F8
04684:  MOVFF  01,7F7
04688:  MOVLW  0B
0468A:  MOVLB  7
0468C:  ADDWF  01,W
0468E:  MOVWF  01
04690:  MOVLW  00
04692:  ADDWFC 02,W
04694:  MOVWF  03
04696:  MOVF   01,W
04698:  ADDLW  32
0469A:  MOVWF  FE9
0469C:  MOVLW  01
0469E:  ADDWFC 03,W
046A0:  MOVWF  FEA
046A2:  MOVFF  FEF,00
046A6:  MOVFF  FEC,01
046AA:  MOVFF  FEC,02
046AE:  MOVFF  FEC,03
046B2:  MOVFF  7F6,FEA
046B6:  MOVFF  7F5,FE9
046BA:  MOVFF  00,FEF
046BE:  MOVFF  01,FEC
046C2:  MOVFF  02,FEC
046C6:  MOVFF  03,FEC
....................      Flujo[canal].l++; 
046CA:  CLRF   xFE
046CC:  MOVFF  7F0,7FD
046D0:  MOVLW  01
046D2:  MOVLB  8
046D4:  MOVWF  x00
046D6:  MOVLW  59
046D8:  MOVLB  7
046DA:  MOVWF  xFF
046DC:  MOVLB  0
046DE:  RCALL  3FA6
046E0:  MOVFF  01,7F5
046E4:  MOVLW  0F
046E6:  MOVLB  7
046E8:  ADDWF  01,W
046EA:  MOVWF  01
046EC:  MOVLW  00
046EE:  ADDWFC 02,W
046F0:  MOVWF  03
046F2:  MOVF   01,W
046F4:  ADDLW  32
046F6:  MOVWF  FE9
046F8:  MOVLW  01
046FA:  ADDWFC 03,W
046FC:  MOVWF  FEA
046FE:  INCF   FEF,F
....................      Flujo[canal].Flujo=0; 
04700:  CLRF   xFE
04702:  MOVFF  7F0,7FD
04706:  MOVLW  01
04708:  MOVLB  8
0470A:  MOVWF  x00
0470C:  MOVLW  59
0470E:  MOVLB  7
04710:  MOVWF  xFF
04712:  MOVLB  0
04714:  RCALL  3FA6
04716:  MOVFF  01,7F5
0471A:  MOVLW  11
0471C:  MOVLB  7
0471E:  ADDWF  01,W
04720:  MOVWF  01
04722:  MOVLW  00
04724:  ADDWFC 02,W
04726:  MOVWF  03
04728:  MOVF   01,W
0472A:  ADDLW  32
0472C:  MOVWF  FE9
0472E:  MOVLW  01
04730:  ADDWFC 03,W
04732:  MOVWF  FEA
04734:  CLRF   FEF
04736:  CLRF   FEC
04738:  CLRF   FEC
0473A:  CLRF   FEC
....................       
....................      for(q=0;q<=(media-1);q++){ 
0473C:  CLRF   3F
0473E:  MOVLW  01
04740:  SUBWF  xEF,W
04742:  SUBWF  3F,W
04744:  BZ    474A
04746:  BTFSC  FD8.0
04748:  BRA    485E
....................         Flujo[canal].Flujo+=Flujo[canal].promedio[q]; 
0474A:  CLRF   xFE
0474C:  MOVFF  7F0,7FD
04750:  MOVLW  01
04752:  MOVLB  8
04754:  MOVWF  x00
04756:  MOVLW  59
04758:  MOVLB  7
0475A:  MOVWF  xFF
0475C:  MOVLB  0
0475E:  RCALL  3FA6
04760:  MOVFF  01,7F5
04764:  MOVLW  11
04766:  MOVLB  7
04768:  ADDWF  01,W
0476A:  MOVWF  01
0476C:  MOVLW  00
0476E:  ADDWFC 02,W
04770:  MOVWF  03
04772:  MOVF   01,W
04774:  ADDLW  32
04776:  MOVWF  01
04778:  MOVLW  01
0477A:  ADDWFC 03,F
0477C:  MOVFF  01,7F5
04780:  MOVFF  03,7F6
04784:  MOVFF  03,FEA
04788:  MOVFF  01,FE9
0478C:  MOVFF  FEF,7F7
04790:  MOVFF  FEC,7F8
04794:  MOVFF  FEC,7F9
04798:  MOVFF  FEC,7FA
0479C:  CLRF   xFE
0479E:  MOVFF  7F0,7FD
047A2:  MOVLW  01
047A4:  MOVLB  8
047A6:  MOVWF  x00
047A8:  MOVLW  59
047AA:  MOVLB  7
047AC:  MOVWF  xFF
047AE:  MOVLB  0
047B0:  CALL   3FA6
047B4:  MOVFF  02,7FC
047B8:  MOVFF  01,7FB
047BC:  MOVLW  19
047BE:  MOVLB  7
047C0:  ADDWF  xFB,F
047C2:  MOVLW  00
047C4:  ADDWFC xFC,F
047C6:  CLRF   xFE
047C8:  MOVFF  3F,7FD
047CC:  MOVLB  8
047CE:  CLRF   x00
047D0:  MOVLW  04
047D2:  MOVLB  7
047D4:  MOVWF  xFF
047D6:  MOVLB  0
047D8:  CALL   3FA6
047DC:  MOVFF  02,03
047E0:  MOVF   01,W
047E2:  MOVLB  7
047E4:  ADDWF  xFB,W
047E6:  MOVWF  01
047E8:  MOVF   xFC,W
047EA:  ADDWFC 03,F
047EC:  MOVF   01,W
047EE:  ADDLW  32
047F0:  MOVWF  FE9
047F2:  MOVLW  01
047F4:  ADDWFC 03,W
047F6:  MOVWF  FEA
047F8:  MOVFF  FEF,00
047FC:  MOVFF  FEC,01
04800:  MOVFF  FEC,02
04804:  MOVFF  FEC,03
04808:  MOVFF  FEA,7FC
0480C:  MOVFF  FE9,7FB
04810:  BCF    FD8.1
04812:  MOVFF  7FA,847
04816:  MOVFF  7F9,846
0481A:  MOVFF  7F8,845
0481E:  MOVFF  7F7,844
04822:  MOVFF  03,84B
04826:  MOVFF  02,84A
0482A:  MOVFF  01,849
0482E:  MOVFF  00,848
04832:  MOVLB  0
04834:  CALL   0FCC
04838:  MOVFF  7FC,FEA
0483C:  MOVFF  7FB,FE9
04840:  MOVFF  7F6,FEA
04844:  MOVFF  7F5,FE9
04848:  MOVFF  00,FEF
0484C:  MOVFF  01,FEC
04850:  MOVFF  02,FEC
04854:  MOVFF  03,FEC
....................      }  
04858:  INCF   3F,F
0485A:  MOVLB  7
0485C:  BRA    473E
....................      Flujo[canal].Flujo=(Flujo[canal].Flujo/media)*Flujo[canal].Ajuste;  
0485E:  CLRF   xFE
04860:  MOVFF  7F0,7FD
04864:  MOVLW  01
04866:  MOVLB  8
04868:  MOVWF  x00
0486A:  MOVLW  59
0486C:  MOVLB  7
0486E:  MOVWF  xFF
04870:  MOVLB  0
04872:  CALL   3FA6
04876:  MOVFF  01,7F5
0487A:  MOVLW  11
0487C:  MOVLB  7
0487E:  ADDWF  01,W
04880:  MOVWF  01
04882:  MOVLW  00
04884:  ADDWFC 02,W
04886:  MOVWF  03
04888:  MOVF   01,W
0488A:  ADDLW  32
0488C:  MOVWF  01
0488E:  MOVLW  01
04890:  ADDWFC 03,F
04892:  MOVFF  01,7F5
04896:  MOVFF  03,7F6
0489A:  CLRF   xFE
0489C:  MOVFF  7F0,7FD
048A0:  MOVLW  01
048A2:  MOVLB  8
048A4:  MOVWF  x00
048A6:  MOVLW  59
048A8:  MOVLB  7
048AA:  MOVWF  xFF
048AC:  MOVLB  0
048AE:  CALL   3FA6
048B2:  MOVFF  01,7F7
048B6:  MOVLW  11
048B8:  MOVLB  7
048BA:  ADDWF  01,W
048BC:  MOVWF  01
048BE:  MOVLW  00
048C0:  ADDWFC 02,W
048C2:  MOVWF  03
048C4:  MOVF   01,W
048C6:  ADDLW  32
048C8:  MOVWF  FE9
048CA:  MOVLW  01
048CC:  ADDWFC 03,W
048CE:  MOVWF  FEA
048D0:  MOVFF  FEF,7F7
048D4:  MOVFF  FEC,7F8
048D8:  MOVFF  FEC,7F9
048DC:  MOVFF  FEC,7FA
048E0:  MOVLB  8
048E2:  CLRF   x45
048E4:  MOVFF  7EF,844
048E8:  MOVLB  0
048EA:  CALL   0E38
048EE:  MOVFF  7FA,843
048F2:  MOVFF  7F9,842
048F6:  MOVFF  7F8,841
048FA:  MOVFF  7F7,840
048FE:  MOVFF  03,847
04902:  MOVFF  02,846
04906:  MOVFF  01,845
0490A:  MOVFF  00,844
0490E:  CALL   0E6E
04912:  MOVFF  00,7F7
04916:  MOVFF  01,7F8
0491A:  MOVFF  02,7F9
0491E:  MOVFF  03,7FA
04922:  MOVLB  7
04924:  CLRF   xFE
04926:  MOVFF  7F0,7FD
0492A:  MOVLW  01
0492C:  MOVLB  8
0492E:  MOVWF  x00
04930:  MOVLW  59
04932:  MOVLB  7
04934:  MOVWF  xFF
04936:  MOVLB  0
04938:  CALL   3FA6
0493C:  MOVFF  02,7FC
04940:  MOVFF  01,7FB
04944:  MOVLW  15
04946:  MOVLB  7
04948:  ADDWF  01,W
0494A:  MOVWF  01
0494C:  MOVLW  00
0494E:  ADDWFC 02,W
04950:  MOVWF  03
04952:  MOVF   01,W
04954:  ADDLW  32
04956:  MOVWF  FE9
04958:  MOVLW  01
0495A:  ADDWFC 03,W
0495C:  MOVWF  FEA
0495E:  MOVFF  FEF,00
04962:  MOVFF  FEC,01
04966:  MOVFF  FEC,02
0496A:  MOVFF  FEC,03
0496E:  MOVFF  7FA,843
04972:  MOVFF  7F9,842
04976:  MOVFF  7F8,841
0497A:  MOVFF  7F7,840
0497E:  MOVFF  03,847
04982:  MOVFF  02,846
04986:  MOVFF  01,845
0498A:  MOVFF  00,844
0498E:  MOVLB  0
04990:  CALL   2376
04994:  MOVFF  7F6,FEA
04998:  MOVFF  7F5,FE9
0499C:  MOVFF  00,FEF
049A0:  MOVFF  01,FEC
049A4:  MOVFF  02,FEC
049A8:  MOVFF  03,FEC
....................       
....................      Flujo[canal].Flujo=Flujo[canal].Flujo/(densidad*0.0052810296*3600);//0.0052810296=Area con tubo de 8.2cm 
049AC:  MOVLB  7
049AE:  CLRF   xFE
049B0:  MOVFF  7F0,7FD
049B4:  MOVLW  01
049B6:  MOVLB  8
049B8:  MOVWF  x00
049BA:  MOVLW  59
049BC:  MOVLB  7
049BE:  MOVWF  xFF
049C0:  MOVLB  0
049C2:  CALL   3FA6
049C6:  MOVFF  01,7F5
049CA:  MOVLW  11
049CC:  MOVLB  7
049CE:  ADDWF  01,W
049D0:  MOVWF  01
049D2:  MOVLW  00
049D4:  ADDWFC 02,W
049D6:  MOVWF  03
049D8:  MOVF   01,W
049DA:  ADDLW  32
049DC:  MOVWF  01
049DE:  MOVLW  01
049E0:  ADDWFC 03,F
049E2:  MOVFF  01,7F5
049E6:  MOVFF  03,7F6
049EA:  CLRF   xFE
049EC:  MOVFF  7F0,7FD
049F0:  MOVLW  01
049F2:  MOVLB  8
049F4:  MOVWF  x00
049F6:  MOVLW  59
049F8:  MOVLB  7
049FA:  MOVWF  xFF
049FC:  MOVLB  0
049FE:  CALL   3FA6
04A02:  MOVFF  01,7F7
04A06:  MOVLW  11
04A08:  MOVLB  7
04A0A:  ADDWF  01,W
04A0C:  MOVWF  01
04A0E:  MOVLW  00
04A10:  ADDWFC 02,W
04A12:  MOVWF  03
04A14:  MOVF   01,W
04A16:  ADDLW  32
04A18:  MOVWF  FE9
04A1A:  MOVLW  01
04A1C:  ADDWFC 03,W
04A1E:  MOVWF  FEA
04A20:  MOVFF  FEF,7F7
04A24:  MOVFF  FEC,7F8
04A28:  MOVFF  FEC,7F9
04A2C:  MOVFF  FEC,7FA
04A30:  MOVFF  FD,843
04A34:  MOVFF  FC,842
04A38:  MOVFF  FB,841
04A3C:  MOVFF  FA,840
04A40:  MOVLW  7D
04A42:  MOVLB  8
04A44:  MOVWF  x47
04A46:  MOVLW  0C
04A48:  MOVWF  x46
04A4A:  MOVLW  2D
04A4C:  MOVWF  x45
04A4E:  MOVLW  77
04A50:  MOVWF  x44
04A52:  MOVLB  0
04A54:  CALL   2376
04A58:  MOVFF  00,7FB
04A5C:  MOVFF  01,7FC
04A60:  MOVFF  02,7FD
04A64:  MOVFF  03,7FE
04A68:  MOVFF  03,843
04A6C:  MOVFF  02,842
04A70:  MOVFF  01,841
04A74:  MOVFF  00,840
04A78:  MOVLB  8
04A7A:  CLRF   x47
04A7C:  CLRF   x46
04A7E:  MOVLW  61
04A80:  MOVWF  x45
04A82:  MOVLW  8A
04A84:  MOVWF  x44
04A86:  MOVLB  0
04A88:  CALL   2376
04A8C:  MOVFF  7FA,843
04A90:  MOVFF  7F9,842
04A94:  MOVFF  7F8,841
04A98:  MOVFF  7F7,840
04A9C:  MOVFF  03,847
04AA0:  MOVFF  02,846
04AA4:  MOVFF  01,845
04AA8:  MOVFF  00,844
04AAC:  CALL   0E6E
04AB0:  MOVFF  7F6,FEA
04AB4:  MOVFF  7F5,FE9
04AB8:  MOVFF  00,FEF
04ABC:  MOVFF  01,FEC
04AC0:  MOVFF  02,FEC
04AC4:  MOVFF  03,FEC
....................      return Flujo[canal].Flujo; 
04AC8:  MOVLB  7
04ACA:  CLRF   xFE
04ACC:  MOVFF  7F0,7FD
04AD0:  MOVLW  01
04AD2:  MOVLB  8
04AD4:  MOVWF  x00
04AD6:  MOVLW  59
04AD8:  MOVLB  7
04ADA:  MOVWF  xFF
04ADC:  MOVLB  0
04ADE:  CALL   3FA6
04AE2:  MOVFF  02,7F6
04AE6:  MOVFF  01,7F5
04AEA:  MOVLW  11
04AEC:  MOVLB  7
04AEE:  ADDWF  01,W
04AF0:  MOVWF  01
04AF2:  MOVLW  00
04AF4:  ADDWFC 02,W
04AF6:  MOVWF  03
04AF8:  MOVF   01,W
04AFA:  ADDLW  32
04AFC:  MOVWF  FE9
04AFE:  MOVLW  01
04B00:  ADDWFC 03,W
04B02:  MOVWF  FEA
04B04:  MOVFF  FEF,00
04B08:  MOVFF  FEC,01
04B0C:  MOVFF  FEC,02
04B10:  MOVFF  FEC,03
.................... } 
04B14:  MOVLB  0
04B16:  RETLW  00
....................  
.................... void calculaDensidad(){ 
....................    Temp=20; 
*
035F2:  MOVLB  1
035F4:  CLRF   x01
035F6:  CLRF   x00
035F8:  MOVLW  20
035FA:  MOVLB  0
035FC:  MOVWF  xFF
035FE:  MOVLW  83
03600:  MOVWF  xFE
....................    TempK=Temp+273.15; 
03602:  BCF    FD8.1
03604:  MOVFF  101,847
03608:  MOVFF  100,846
0360C:  MOVFF  FF,845
03610:  MOVFF  FE,844
03614:  MOVLW  33
03616:  MOVLB  8
03618:  MOVWF  x4B
0361A:  MOVLW  93
0361C:  MOVWF  x4A
0361E:  MOVLW  08
03620:  MOVWF  x49
03622:  MOVLW  87
03624:  MOVWF  x48
03626:  MOVLB  0
03628:  CALL   0FCC
0362C:  MOVFF  03,105
03630:  MOVFF  02,104
03634:  MOVFF  01,103
03638:  MOVFF  00,102
....................    Pa=Pr*1000; 
0363C:  MOVFF  11D,843
03640:  MOVFF  11C,842
03644:  MOVFF  11B,841
03648:  MOVFF  11A,840
0364C:  MOVLB  8
0364E:  CLRF   x47
03650:  CLRF   x46
03652:  MOVLW  7A
03654:  MOVWF  x45
03656:  MOVLW  88
03658:  MOVWF  x44
0365A:  MOVLB  0
0365C:  CALL   2376
03660:  MOVFF  03,109
03664:  MOVFF  02,108
03668:  MOVFF  01,107
0366C:  MOVFF  00,106
....................     
....................    Psv=exp((0.000012378847*pow(TempK,2))+(-0.019121316*TempK)+33.93711047+(-6343.1645/TempK)); 
03670:  MOVFF  105,817
03674:  MOVFF  104,816
03678:  MOVFF  103,815
0367C:  MOVFF  102,814
03680:  MOVLB  8
03682:  CLRF   x1B
03684:  CLRF   x1A
03686:  CLRF   x19
03688:  MOVLW  80
0368A:  MOVWF  x18
0368C:  MOVLB  0
0368E:  RCALL  32E6
03690:  MOVLW  BE
03692:  MOVLB  8
03694:  MOVWF  x43
03696:  MOVLW  AE
03698:  MOVWF  x42
0369A:  MOVLW  4F
0369C:  MOVWF  x41
0369E:  MOVLW  6E
036A0:  MOVWF  x40
036A2:  MOVFF  03,847
036A6:  MOVFF  02,846
036AA:  MOVFF  01,845
036AE:  MOVFF  00,844
036B2:  MOVLB  0
036B4:  CALL   2376
036B8:  MOVFF  00,800
036BC:  MOVFF  01,801
036C0:  MOVFF  02,802
036C4:  MOVFF  03,803
036C8:  MOVLW  4E
036CA:  MOVLB  8
036CC:  MOVWF  x43
036CE:  MOVLW  A4
036D0:  MOVWF  x42
036D2:  MOVLW  9C
036D4:  MOVWF  x41
036D6:  MOVLW  79
036D8:  MOVWF  x40
036DA:  MOVFF  105,847
036DE:  MOVFF  104,846
036E2:  MOVFF  103,845
036E6:  MOVFF  102,844
036EA:  MOVLB  0
036EC:  CALL   2376
036F0:  MOVFF  FEA,805
036F4:  MOVFF  FE9,804
036F8:  BCF    FD8.1
036FA:  MOVFF  803,847
036FE:  MOVFF  802,846
03702:  MOVFF  801,845
03706:  MOVFF  800,844
0370A:  MOVFF  03,84B
0370E:  MOVFF  02,84A
03712:  MOVFF  01,849
03716:  MOVFF  00,848
0371A:  CALL   0FCC
0371E:  MOVFF  805,FEA
03722:  MOVFF  804,FE9
03726:  MOVFF  00,800
0372A:  MOVFF  01,801
0372E:  MOVFF  02,802
03732:  MOVFF  03,803
03736:  MOVFF  FEA,807
0373A:  MOVFF  FE9,806
0373E:  BCF    FD8.1
03740:  MOVFF  03,847
03744:  MOVFF  02,846
03748:  MOVFF  01,845
0374C:  MOVFF  00,844
03750:  MOVLW  9A
03752:  MOVLB  8
03754:  MOVWF  x4B
03756:  MOVLW  BF
03758:  MOVWF  x4A
0375A:  MOVLW  07
0375C:  MOVWF  x49
0375E:  MOVLW  84
03760:  MOVWF  x48
03762:  MOVLB  0
03764:  CALL   0FCC
03768:  MOVFF  807,FEA
0376C:  MOVFF  806,FE9
03770:  MOVFF  00,800
03774:  MOVFF  01,801
03778:  MOVFF  02,802
0377C:  MOVFF  03,803
03780:  MOVLW  51
03782:  MOVLB  8
03784:  MOVWF  x43
03786:  MOVLW  39
03788:  MOVWF  x42
0378A:  MOVLW  C6
0378C:  MOVWF  x41
0378E:  MOVLW  8B
03790:  MOVWF  x40
03792:  MOVFF  105,847
03796:  MOVFF  104,846
0379A:  MOVFF  103,845
0379E:  MOVFF  102,844
037A2:  MOVLB  0
037A4:  CALL   0E6E
037A8:  MOVFF  FEA,809
037AC:  MOVFF  FE9,808
037B0:  BCF    FD8.1
037B2:  MOVFF  803,847
037B6:  MOVFF  802,846
037BA:  MOVFF  801,845
037BE:  MOVFF  800,844
037C2:  MOVFF  03,84B
037C6:  MOVFF  02,84A
037CA:  MOVFF  01,849
037CE:  MOVFF  00,848
037D2:  CALL   0FCC
037D6:  MOVFF  809,FEA
037DA:  MOVFF  808,FE9
037DE:  MOVFF  00,800
037E2:  MOVFF  01,801
037E6:  MOVFF  02,802
037EA:  MOVFF  03,803
037EE:  MOVFF  03,823
037F2:  MOVFF  02,822
037F6:  MOVFF  01,821
037FA:  MOVFF  00,820
037FE:  CALL   2EDC
03802:  MOVFF  03,10D
03806:  MOVFF  02,10C
0380A:  MOVFF  01,10B
0380E:  MOVFF  00,10A
....................    f=1.00062+(0.0000000314*Pa)+(0.00000056*Temp); 
03812:  MOVLW  AA
03814:  MOVLB  8
03816:  MOVWF  x43
03818:  MOVLW  DC
0381A:  MOVWF  x42
0381C:  MOVLW  06
0381E:  MOVWF  x41
03820:  MOVLW  66
03822:  MOVWF  x40
03824:  MOVFF  109,847
03828:  MOVFF  108,846
0382C:  MOVFF  107,845
03830:  MOVFF  106,844
03834:  MOVLB  0
03836:  CALL   2376
0383A:  BCF    FD8.1
0383C:  MOVLW  51
0383E:  MOVLB  8
03840:  MOVWF  x47
03842:  MOVLW  14
03844:  MOVWF  x46
03846:  CLRF   x45
03848:  MOVLW  7F
0384A:  MOVWF  x44
0384C:  MOVFF  03,84B
03850:  MOVFF  02,84A
03854:  MOVFF  01,849
03858:  MOVFF  00,848
0385C:  MOVLB  0
0385E:  CALL   0FCC
03862:  MOVFF  00,800
03866:  MOVFF  01,801
0386A:  MOVFF  02,802
0386E:  MOVFF  03,803
03872:  MOVLW  E8
03874:  MOVLB  8
03876:  MOVWF  x43
03878:  MOVLW  52
0387A:  MOVWF  x42
0387C:  MOVLW  16
0387E:  MOVWF  x41
03880:  MOVLW  6A
03882:  MOVWF  x40
03884:  MOVFF  101,847
03888:  MOVFF  100,846
0388C:  MOVFF  FF,845
03890:  MOVFF  FE,844
03894:  MOVLB  0
03896:  CALL   2376
0389A:  BCF    FD8.1
0389C:  MOVFF  803,847
038A0:  MOVFF  802,846
038A4:  MOVFF  801,845
038A8:  MOVFF  800,844
038AC:  MOVFF  03,84B
038B0:  MOVFF  02,84A
038B4:  MOVFF  01,849
038B8:  MOVFF  00,848
038BC:  CALL   0FCC
038C0:  MOVFF  03,111
038C4:  MOVFF  02,110
038C8:  MOVFF  01,10F
038CC:  MOVFF  00,10E
....................    Xv=(HR/100)*f*(Psv/Pa); 
038D0:  MOVFF  125,843
038D4:  MOVFF  124,842
038D8:  MOVFF  123,841
038DC:  MOVFF  122,840
038E0:  MOVLB  8
038E2:  CLRF   x47
038E4:  CLRF   x46
038E6:  MOVLW  48
038E8:  MOVWF  x45
038EA:  MOVLW  85
038EC:  MOVWF  x44
038EE:  MOVLB  0
038F0:  CALL   0E6E
038F4:  MOVFF  00,800
038F8:  MOVFF  01,801
038FC:  MOVFF  02,802
03900:  MOVFF  03,803
03904:  MOVFF  03,843
03908:  MOVFF  02,842
0390C:  MOVFF  01,841
03910:  MOVFF  00,840
03914:  MOVFF  111,847
03918:  MOVFF  110,846
0391C:  MOVFF  10F,845
03920:  MOVFF  10E,844
03924:  CALL   2376
03928:  MOVFF  00,800
0392C:  MOVFF  01,801
03930:  MOVFF  02,802
03934:  MOVFF  03,803
03938:  MOVFF  10D,843
0393C:  MOVFF  10C,842
03940:  MOVFF  10B,841
03944:  MOVFF  10A,840
03948:  MOVFF  109,847
0394C:  MOVFF  108,846
03950:  MOVFF  107,845
03954:  MOVFF  106,844
03958:  CALL   0E6E
0395C:  MOVFF  803,843
03960:  MOVFF  802,842
03964:  MOVFF  801,841
03968:  MOVFF  800,840
0396C:  MOVFF  03,847
03970:  MOVFF  02,846
03974:  MOVFF  01,845
03978:  MOVFF  00,844
0397C:  CALL   2376
03980:  MOVFF  03,115
03984:  MOVFF  02,114
03988:  MOVFF  01,113
0398C:  MOVFF  00,112
....................    Z1=1-((Pa/TempK)*(0.00000158123+(-0.000000029331*Temp)+(0.00000000011043*pow(Temp,2))+((0.000005707+(-0.00000002051*Temp))*Xv)+((0.0001989+(-0.000002376*Temp)))*pow(Xv,2)))+((pow(Pa,2)/pow(TempK,2))*(0.0000000000183+(-0.00000000765*pow(Xv,2)))); 
03990:  MOVFF  109,843
03994:  MOVFF  108,842
03998:  MOVFF  107,841
0399C:  MOVFF  106,840
039A0:  MOVFF  105,847
039A4:  MOVFF  104,846
039A8:  MOVFF  103,845
039AC:  MOVFF  102,844
039B0:  CALL   0E6E
039B4:  MOVFF  00,800
039B8:  MOVFF  01,801
039BC:  MOVFF  02,802
039C0:  MOVFF  03,803
039C4:  MOVLW  8D
039C6:  MOVLB  8
039C8:  MOVWF  x43
039CA:  MOVLW  F3
039CC:  MOVWF  x42
039CE:  MOVLW  FB
039D0:  MOVWF  x41
039D2:  MOVLW  65
039D4:  MOVWF  x40
039D6:  MOVFF  101,847
039DA:  MOVFF  100,846
039DE:  MOVFF  FF,845
039E2:  MOVFF  FE,844
039E6:  MOVLB  0
039E8:  CALL   2376
039EC:  BCF    FD8.1
039EE:  MOVLW  A6
039F0:  MOVLB  8
039F2:  MOVWF  x47
039F4:  MOVLW  3A
039F6:  MOVWF  x46
039F8:  MOVLW  54
039FA:  MOVWF  x45
039FC:  MOVLW  6B
039FE:  MOVWF  x44
03A00:  MOVFF  03,84B
03A04:  MOVFF  02,84A
03A08:  MOVFF  01,849
03A0C:  MOVFF  00,848
03A10:  MOVLB  0
03A12:  CALL   0FCC
03A16:  MOVFF  00,804
03A1A:  MOVFF  01,805
03A1E:  MOVFF  02,806
03A22:  MOVFF  03,807
03A26:  MOVFF  101,817
03A2A:  MOVFF  100,816
03A2E:  MOVFF  FF,815
03A32:  MOVFF  FE,814
03A36:  MOVLB  8
03A38:  CLRF   x1B
03A3A:  CLRF   x1A
03A3C:  CLRF   x19
03A3E:  MOVLW  80
03A40:  MOVWF  x18
03A42:  MOVLB  0
03A44:  RCALL  32E6
03A46:  MOVLW  90
03A48:  MOVLB  8
03A4A:  MOVWF  x43
03A4C:  MOVLW  D6
03A4E:  MOVWF  x42
03A50:  MOVLW  72
03A52:  MOVWF  x41
03A54:  MOVLW  5D
03A56:  MOVWF  x40
03A58:  MOVFF  03,847
03A5C:  MOVFF  02,846
03A60:  MOVFF  01,845
03A64:  MOVFF  00,844
03A68:  MOVLB  0
03A6A:  CALL   2376
03A6E:  MOVFF  FEA,809
03A72:  MOVFF  FE9,808
03A76:  BCF    FD8.1
03A78:  MOVFF  807,847
03A7C:  MOVFF  806,846
03A80:  MOVFF  805,845
03A84:  MOVFF  804,844
03A88:  MOVFF  03,84B
03A8C:  MOVFF  02,84A
03A90:  MOVFF  01,849
03A94:  MOVFF  00,848
03A98:  CALL   0FCC
03A9C:  MOVFF  809,FEA
03AA0:  MOVFF  808,FE9
03AA4:  MOVFF  00,804
03AA8:  MOVFF  01,805
03AAC:  MOVFF  02,806
03AB0:  MOVFF  03,807
03AB4:  MOVLW  F8
03AB6:  MOVLB  8
03AB8:  MOVWF  x43
03ABA:  MOVLW  2D
03ABC:  MOVWF  x42
03ABE:  MOVLW  B0
03AC0:  MOVWF  x41
03AC2:  MOVLW  65
03AC4:  MOVWF  x40
03AC6:  MOVFF  101,847
03ACA:  MOVFF  100,846
03ACE:  MOVFF  FF,845
03AD2:  MOVFF  FE,844
03AD6:  MOVLB  0
03AD8:  CALL   2376
03ADC:  MOVFF  FEA,80B
03AE0:  MOVFF  FE9,80A
03AE4:  BCF    FD8.1
03AE6:  MOVLW  C2
03AE8:  MOVLB  8
03AEA:  MOVWF  x47
03AEC:  MOVLW  7E
03AEE:  MOVWF  x46
03AF0:  MOVLW  3F
03AF2:  MOVWF  x45
03AF4:  MOVLW  6D
03AF6:  MOVWF  x44
03AF8:  MOVFF  03,84B
03AFC:  MOVFF  02,84A
03B00:  MOVFF  01,849
03B04:  MOVFF  00,848
03B08:  MOVLB  0
03B0A:  CALL   0FCC
03B0E:  MOVFF  80B,FEA
03B12:  MOVFF  80A,FE9
03B16:  MOVFF  00,80C
03B1A:  MOVFF  01,80D
03B1E:  MOVFF  02,80E
03B22:  MOVFF  03,80F
03B26:  MOVFF  03,843
03B2A:  MOVFF  02,842
03B2E:  MOVFF  01,841
03B32:  MOVFF  00,840
03B36:  MOVFF  115,847
03B3A:  MOVFF  114,846
03B3E:  MOVFF  113,845
03B42:  MOVFF  112,844
03B46:  CALL   2376
03B4A:  MOVFF  FEA,80D
03B4E:  MOVFF  FE9,80C
03B52:  BCF    FD8.1
03B54:  MOVFF  807,847
03B58:  MOVFF  806,846
03B5C:  MOVFF  805,845
03B60:  MOVFF  804,844
03B64:  MOVFF  03,84B
03B68:  MOVFF  02,84A
03B6C:  MOVFF  01,849
03B70:  MOVFF  00,848
03B74:  CALL   0FCC
03B78:  MOVFF  80D,FEA
03B7C:  MOVFF  80C,FE9
03B80:  MOVFF  00,804
03B84:  MOVFF  01,805
03B88:  MOVFF  02,806
03B8C:  MOVFF  03,807
03B90:  MOVLW  5F
03B92:  MOVLB  8
03B94:  MOVWF  x43
03B96:  MOVLW  73
03B98:  MOVWF  x42
03B9A:  MOVLW  9F
03B9C:  MOVWF  x41
03B9E:  MOVLW  6C
03BA0:  MOVWF  x40
03BA2:  MOVFF  101,847
03BA6:  MOVFF  100,846
03BAA:  MOVFF  FF,845
03BAE:  MOVFF  FE,844
03BB2:  MOVLB  0
03BB4:  CALL   2376
03BB8:  MOVFF  FEA,80F
03BBC:  MOVFF  FE9,80E
03BC0:  BCF    FD8.1
03BC2:  MOVLW  D0
03BC4:  MOVLB  8
03BC6:  MOVWF  x47
03BC8:  MOVLW  8F
03BCA:  MOVWF  x46
03BCC:  MOVLW  50
03BCE:  MOVWF  x45
03BD0:  MOVLW  72
03BD2:  MOVWF  x44
03BD4:  MOVFF  03,84B
03BD8:  MOVFF  02,84A
03BDC:  MOVFF  01,849
03BE0:  MOVFF  00,848
03BE4:  MOVLB  0
03BE6:  CALL   0FCC
03BEA:  MOVFF  80F,FEA
03BEE:  MOVFF  80E,FE9
03BF2:  MOVFF  00,810
03BF6:  MOVFF  01,811
03BFA:  MOVFF  02,812
03BFE:  MOVFF  03,813
03C02:  MOVFF  115,817
03C06:  MOVFF  114,816
03C0A:  MOVFF  113,815
03C0E:  MOVFF  112,814
03C12:  MOVLB  8
03C14:  CLRF   x1B
03C16:  CLRF   x1A
03C18:  CLRF   x19
03C1A:  MOVLW  80
03C1C:  MOVWF  x18
03C1E:  MOVLB  0
03C20:  CALL   32E6
03C24:  MOVFF  813,843
03C28:  MOVFF  812,842
03C2C:  MOVFF  811,841
03C30:  MOVFF  810,840
03C34:  MOVFF  03,847
03C38:  MOVFF  02,846
03C3C:  MOVFF  01,845
03C40:  MOVFF  00,844
03C44:  CALL   2376
03C48:  MOVFF  FEA,811
03C4C:  MOVFF  FE9,810
03C50:  BCF    FD8.1
03C52:  MOVFF  807,847
03C56:  MOVFF  806,846
03C5A:  MOVFF  805,845
03C5E:  MOVFF  804,844
03C62:  MOVFF  03,84B
03C66:  MOVFF  02,84A
03C6A:  MOVFF  01,849
03C6E:  MOVFF  00,848
03C72:  CALL   0FCC
03C76:  MOVFF  811,FEA
03C7A:  MOVFF  810,FE9
03C7E:  MOVFF  803,843
03C82:  MOVFF  802,842
03C86:  MOVFF  801,841
03C8A:  MOVFF  800,840
03C8E:  MOVFF  03,847
03C92:  MOVFF  02,846
03C96:  MOVFF  01,845
03C9A:  MOVFF  00,844
03C9E:  CALL   2376
03CA2:  MOVFF  FEA,801
03CA6:  MOVFF  FE9,800
03CAA:  BSF    FD8.1
03CAC:  MOVLB  8
03CAE:  CLRF   x47
03CB0:  CLRF   x46
03CB2:  CLRF   x45
03CB4:  MOVLW  7F
03CB6:  MOVWF  x44
03CB8:  MOVFF  03,84B
03CBC:  MOVFF  02,84A
03CC0:  MOVFF  01,849
03CC4:  MOVFF  00,848
03CC8:  MOVLB  0
03CCA:  CALL   0FCC
03CCE:  MOVFF  801,FEA
03CD2:  MOVFF  800,FE9
03CD6:  MOVFF  00,802
03CDA:  MOVFF  01,803
03CDE:  MOVFF  02,804
03CE2:  MOVFF  03,805
03CE6:  MOVFF  109,817
03CEA:  MOVFF  108,816
03CEE:  MOVFF  107,815
03CF2:  MOVFF  106,814
03CF6:  MOVLB  8
03CF8:  CLRF   x1B
03CFA:  CLRF   x1A
03CFC:  CLRF   x19
03CFE:  MOVLW  80
03D00:  MOVWF  x18
03D02:  MOVLB  0
03D04:  CALL   32E6
03D08:  MOVFF  00,806
03D0C:  MOVFF  01,807
03D10:  MOVFF  02,808
03D14:  MOVFF  03,809
03D18:  MOVFF  105,817
03D1C:  MOVFF  104,816
03D20:  MOVFF  103,815
03D24:  MOVFF  102,814
03D28:  MOVLB  8
03D2A:  CLRF   x1B
03D2C:  CLRF   x1A
03D2E:  CLRF   x19
03D30:  MOVLW  80
03D32:  MOVWF  x18
03D34:  MOVLB  0
03D36:  CALL   32E6
03D3A:  MOVFF  809,843
03D3E:  MOVFF  808,842
03D42:  MOVFF  807,841
03D46:  MOVFF  806,840
03D4A:  MOVFF  03,847
03D4E:  MOVFF  02,846
03D52:  MOVFF  01,845
03D56:  MOVFF  00,844
03D5A:  CALL   0E6E
03D5E:  MOVFF  00,806
03D62:  MOVFF  01,807
03D66:  MOVFF  02,808
03D6A:  MOVFF  03,809
03D6E:  MOVFF  115,817
03D72:  MOVFF  114,816
03D76:  MOVFF  113,815
03D7A:  MOVFF  112,814
03D7E:  MOVLB  8
03D80:  CLRF   x1B
03D82:  CLRF   x1A
03D84:  CLRF   x19
03D86:  MOVLW  80
03D88:  MOVWF  x18
03D8A:  MOVLB  0
03D8C:  CALL   32E6
03D90:  MOVLW  0E
03D92:  MOVLB  8
03D94:  MOVWF  x43
03D96:  MOVLW  6D
03D98:  MOVWF  x42
03D9A:  MOVLW  83
03D9C:  MOVWF  x41
03D9E:  MOVLW  64
03DA0:  MOVWF  x40
03DA2:  MOVFF  03,847
03DA6:  MOVFF  02,846
03DAA:  MOVFF  01,845
03DAE:  MOVFF  00,844
03DB2:  MOVLB  0
03DB4:  CALL   2376
03DB8:  MOVFF  FEA,813
03DBC:  MOVFF  FE9,812
03DC0:  BCF    FD8.1
03DC2:  MOVLW  F0
03DC4:  MOVLB  8
03DC6:  MOVWF  x47
03DC8:  MOVLW  F7
03DCA:  MOVWF  x46
03DCC:  MOVLW  20
03DCE:  MOVWF  x45
03DD0:  MOVLW  5B
03DD2:  MOVWF  x44
03DD4:  MOVFF  03,84B
03DD8:  MOVFF  02,84A
03DDC:  MOVFF  01,849
03DE0:  MOVFF  00,848
03DE4:  MOVLB  0
03DE6:  CALL   0FCC
03DEA:  MOVFF  813,FEA
03DEE:  MOVFF  812,FE9
03DF2:  MOVFF  809,843
03DF6:  MOVFF  808,842
03DFA:  MOVFF  807,841
03DFE:  MOVFF  806,840
03E02:  MOVFF  03,847
03E06:  MOVFF  02,846
03E0A:  MOVFF  01,845
03E0E:  MOVFF  00,844
03E12:  CALL   2376
03E16:  MOVFF  FEA,807
03E1A:  MOVFF  FE9,806
03E1E:  BCF    FD8.1
03E20:  MOVFF  805,847
03E24:  MOVFF  804,846
03E28:  MOVFF  803,845
03E2C:  MOVFF  802,844
03E30:  MOVFF  03,84B
03E34:  MOVFF  02,84A
03E38:  MOVFF  01,849
03E3C:  MOVFF  00,848
03E40:  CALL   0FCC
03E44:  MOVFF  807,FEA
03E48:  MOVFF  806,FE9
03E4C:  MOVFF  03,119
03E50:  MOVFF  02,118
03E54:  MOVFF  01,117
03E58:  MOVFF  00,116
....................    densidad=((Pa*0.028963512440)/(Z1*TempK*8.314472))*(1-(Xv*(1-(0.018015/0.028963512440)))); 
03E5C:  MOVFF  109,843
03E60:  MOVFF  108,842
03E64:  MOVFF  107,841
03E68:  MOVFF  106,840
03E6C:  MOVLW  E3
03E6E:  MOVLB  8
03E70:  MOVWF  x47
03E72:  MOVLW  44
03E74:  MOVWF  x46
03E76:  MOVLW  6D
03E78:  MOVWF  x45
03E7A:  MOVLW  79
03E7C:  MOVWF  x44
03E7E:  MOVLB  0
03E80:  CALL   2376
03E84:  MOVFF  00,800
03E88:  MOVFF  01,801
03E8C:  MOVFF  02,802
03E90:  MOVFF  03,803
03E94:  MOVFF  119,843
03E98:  MOVFF  118,842
03E9C:  MOVFF  117,841
03EA0:  MOVFF  116,840
03EA4:  MOVFF  105,847
03EA8:  MOVFF  104,846
03EAC:  MOVFF  103,845
03EB0:  MOVFF  102,844
03EB4:  CALL   2376
03EB8:  MOVFF  00,804
03EBC:  MOVFF  01,805
03EC0:  MOVFF  02,806
03EC4:  MOVFF  03,807
03EC8:  MOVFF  03,843
03ECC:  MOVFF  02,842
03ED0:  MOVFF  01,841
03ED4:  MOVFF  00,840
03ED8:  MOVLW  14
03EDA:  MOVLB  8
03EDC:  MOVWF  x47
03EDE:  MOVLW  08
03EE0:  MOVWF  x46
03EE2:  MOVLW  05
03EE4:  MOVWF  x45
03EE6:  MOVLW  82
03EE8:  MOVWF  x44
03EEA:  MOVLB  0
03EEC:  CALL   2376
03EF0:  MOVFF  803,843
03EF4:  MOVFF  802,842
03EF8:  MOVFF  801,841
03EFC:  MOVFF  800,840
03F00:  MOVFF  03,847
03F04:  MOVFF  02,846
03F08:  MOVFF  01,845
03F0C:  MOVFF  00,844
03F10:  CALL   0E6E
03F14:  MOVFF  00,800
03F18:  MOVFF  01,801
03F1C:  MOVFF  02,802
03F20:  MOVFF  03,803
03F24:  MOVFF  115,843
03F28:  MOVFF  114,842
03F2C:  MOVFF  113,841
03F30:  MOVFF  112,840
03F34:  MOVLW  98
03F36:  MOVLB  8
03F38:  MOVWF  x47
03F3A:  MOVLW  8A
03F3C:  MOVWF  x46
03F3E:  MOVLW  41
03F40:  MOVWF  x45
03F42:  MOVLW  7D
03F44:  MOVWF  x44
03F46:  MOVLB  0
03F48:  CALL   2376
03F4C:  BSF    FD8.1
03F4E:  MOVLB  8
03F50:  CLRF   x47
03F52:  CLRF   x46
03F54:  CLRF   x45
03F56:  MOVLW  7F
03F58:  MOVWF  x44
03F5A:  MOVFF  03,84B
03F5E:  MOVFF  02,84A
03F62:  MOVFF  01,849
03F66:  MOVFF  00,848
03F6A:  MOVLB  0
03F6C:  CALL   0FCC
03F70:  MOVFF  803,843
03F74:  MOVFF  802,842
03F78:  MOVFF  801,841
03F7C:  MOVFF  800,840
03F80:  MOVFF  03,847
03F84:  MOVFF  02,846
03F88:  MOVFF  01,845
03F8C:  MOVFF  00,844
03F90:  CALL   2376
03F94:  MOVFF  03,FD
03F98:  MOVFF  02,FC
03F9C:  MOVFF  01,FB
03FA0:  MOVFF  00,FA
.................... } 
03FA4:  RETLW  00
....................  
....................  
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
00248:  BSF    xCA.1
....................     
....................    if(VelMotor==19){ 
0024A:  MOVF   xEF,W
0024C:  SUBLW  13
0024E:  BNZ   0260
....................       set_timer0(237);       
00250:  CLRF   FD7
00252:  MOVLW  ED
00254:  MOVWF  FD6
....................       Motor_off;  
00256:  BCF    F8B.2
00258:  BCF    F94.2
....................       Motor2_off;  
0025A:  BCF    F8B.1
0025C:  BCF    F94.1
....................    }else if(VelMotor==18){ 
0025E:  BRA    03E8
00260:  MOVF   xEF,W
00262:  SUBLW  12
00264:  BNZ   0276
....................       set_timer0(234);       
00266:  CLRF   FD7
00268:  MOVLW  EA
0026A:  MOVWF  FD6
....................       Motor_off;  
0026C:  BCF    F8B.2
0026E:  BCF    F94.2
....................       Motor2_off;  
00270:  BCF    F8B.1
00272:  BCF    F94.1
....................    }else if(VelMotor==17){ 
00274:  BRA    03E8
00276:  MOVF   xEF,W
00278:  SUBLW  11
0027A:  BNZ   028C
....................       set_timer0(231);       
0027C:  CLRF   FD7
0027E:  MOVLW  E7
00280:  MOVWF  FD6
....................       Motor_off;  
00282:  BCF    F8B.2
00284:  BCF    F94.2
....................       Motor2_off;  
00286:  BCF    F8B.1
00288:  BCF    F94.1
....................    }else if(VelMotor==16){ 
0028A:  BRA    03E8
0028C:  MOVF   xEF,W
0028E:  SUBLW  10
00290:  BNZ   02A2
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
00292:  CLRF   FD7
00294:  MOVLW  E4
00296:  MOVWF  FD6
....................       Motor_off;  
00298:  BCF    F8B.2
0029A:  BCF    F94.2
....................       Motor2_off;  
0029C:  BCF    F8B.1
0029E:  BCF    F94.1
....................    }else if(VelMotor==15){ 
002A0:  BRA    03E8
002A2:  MOVF   xEF,W
002A4:  SUBLW  0F
002A6:  BNZ   02B8
....................       set_timer0(225);       
002A8:  CLRF   FD7
002AA:  MOVLW  E1
002AC:  MOVWF  FD6
....................       Motor_off;  
002AE:  BCF    F8B.2
002B0:  BCF    F94.2
....................       Motor2_off;  
002B2:  BCF    F8B.1
002B4:  BCF    F94.1
....................    }else if(VelMotor==14){ 
002B6:  BRA    03E8
002B8:  MOVF   xEF,W
002BA:  SUBLW  0E
002BC:  BNZ   02CE
....................       set_timer0(222);       
002BE:  CLRF   FD7
002C0:  MOVLW  DE
002C2:  MOVWF  FD6
....................       Motor_off;  
002C4:  BCF    F8B.2
002C6:  BCF    F94.2
....................       Motor2_off;  
002C8:  BCF    F8B.1
002CA:  BCF    F94.1
....................    }else if(VelMotor==13){ 
002CC:  BRA    03E8
002CE:  MOVF   xEF,W
002D0:  SUBLW  0D
002D2:  BNZ   02E4
....................       set_timer0(219);       
002D4:  CLRF   FD7
002D6:  MOVLW  DB
002D8:  MOVWF  FD6
....................       Motor_off;  
002DA:  BCF    F8B.2
002DC:  BCF    F94.2
....................       Motor2_off;  
002DE:  BCF    F8B.1
002E0:  BCF    F94.1
....................    }else if(VelMotor==12){ 
002E2:  BRA    03E8
002E4:  MOVF   xEF,W
002E6:  SUBLW  0C
002E8:  BNZ   02FA
....................       set_timer0(216);       
002EA:  CLRF   FD7
002EC:  MOVLW  D8
002EE:  MOVWF  FD6
....................       Motor_off;  
002F0:  BCF    F8B.2
002F2:  BCF    F94.2
....................       Motor2_off;  
002F4:  BCF    F8B.1
002F6:  BCF    F94.1
....................    }else if(VelMotor==11){ 
002F8:  BRA    03E8
002FA:  MOVF   xEF,W
002FC:  SUBLW  0B
002FE:  BNZ   0310
....................       set_timer0(213);       
00300:  CLRF   FD7
00302:  MOVLW  D5
00304:  MOVWF  FD6
....................       Motor_off;  
00306:  BCF    F8B.2
00308:  BCF    F94.2
....................       Motor2_off;  
0030A:  BCF    F8B.1
0030C:  BCF    F94.1
....................    }else if(VelMotor==10){ 
0030E:  BRA    03E8
00310:  MOVF   xEF,W
00312:  SUBLW  0A
00314:  BNZ   0326
....................       set_timer0(210);       
00316:  CLRF   FD7
00318:  MOVLW  D2
0031A:  MOVWF  FD6
....................       Motor_off;  
0031C:  BCF    F8B.2
0031E:  BCF    F94.2
....................       Motor2_off;  
00320:  BCF    F8B.1
00322:  BCF    F94.1
....................    }else if(VelMotor==9){ 
00324:  BRA    03E8
00326:  MOVF   xEF,W
00328:  SUBLW  09
0032A:  BNZ   033C
....................       set_timer0(207);       
0032C:  CLRF   FD7
0032E:  MOVLW  CF
00330:  MOVWF  FD6
....................       Motor_off;  
00332:  BCF    F8B.2
00334:  BCF    F94.2
....................       Motor2_off;  
00336:  BCF    F8B.1
00338:  BCF    F94.1
....................    }else if(VelMotor==8){ 
0033A:  BRA    03E8
0033C:  MOVF   xEF,W
0033E:  SUBLW  08
00340:  BNZ   0352
....................       set_timer0(204);       
00342:  CLRF   FD7
00344:  MOVLW  CC
00346:  MOVWF  FD6
....................       Motor_off;  
00348:  BCF    F8B.2
0034A:  BCF    F94.2
....................       Motor2_off;  
0034C:  BCF    F8B.1
0034E:  BCF    F94.1
....................    }else if(VelMotor==7){ 
00350:  BRA    03E8
00352:  MOVF   xEF,W
00354:  SUBLW  07
00356:  BNZ   0368
....................       set_timer0(201);       
00358:  CLRF   FD7
0035A:  MOVLW  C9
0035C:  MOVWF  FD6
....................       Motor_off;  
0035E:  BCF    F8B.2
00360:  BCF    F94.2
....................       Motor2_off;  
00362:  BCF    F8B.1
00364:  BCF    F94.1
....................    }else if(VelMotor==6){ 
00366:  BRA    03E8
00368:  MOVF   xEF,W
0036A:  SUBLW  06
0036C:  BNZ   037E
....................       set_timer0(198);       
0036E:  CLRF   FD7
00370:  MOVLW  C6
00372:  MOVWF  FD6
....................       Motor_off;  
00374:  BCF    F8B.2
00376:  BCF    F94.2
....................       Motor2_off;  
00378:  BCF    F8B.1
0037A:  BCF    F94.1
....................    }else if(VelMotor==5){ 
0037C:  BRA    03E8
0037E:  MOVF   xEF,W
00380:  SUBLW  05
00382:  BNZ   0394
....................       set_timer0(195);       
00384:  CLRF   FD7
00386:  MOVLW  C3
00388:  MOVWF  FD6
....................       Motor_off;  
0038A:  BCF    F8B.2
0038C:  BCF    F94.2
....................       Motor2_off;  
0038E:  BCF    F8B.1
00390:  BCF    F94.1
....................    }else if(VelMotor==4){ 
00392:  BRA    03E8
00394:  MOVF   xEF,W
00396:  SUBLW  04
00398:  BNZ   03AA
....................       set_timer0(192);       
0039A:  CLRF   FD7
0039C:  MOVLW  C0
0039E:  MOVWF  FD6
....................       Motor_off;  
003A0:  BCF    F8B.2
003A2:  BCF    F94.2
....................       Motor2_off;  
003A4:  BCF    F8B.1
003A6:  BCF    F94.1
....................    }else if(VelMotor==3){ 
003A8:  BRA    03E8
003AA:  MOVF   xEF,W
003AC:  SUBLW  03
003AE:  BNZ   03C0
....................       set_timer0(189); 
003B0:  CLRF   FD7
003B2:  MOVLW  BD
003B4:  MOVWF  FD6
....................       Motor_off;  
003B6:  BCF    F8B.2
003B8:  BCF    F94.2
....................       Motor2_off;  
003BA:  BCF    F8B.1
003BC:  BCF    F94.1
....................    }else if(VelMotor==2){ 
003BE:  BRA    03E8
003C0:  MOVF   xEF,W
003C2:  SUBLW  02
003C4:  BNZ   03D6
....................       set_timer0(186); 
003C6:  CLRF   FD7
003C8:  MOVLW  BA
003CA:  MOVWF  FD6
....................       Motor_off;  
003CC:  BCF    F8B.2
003CE:  BCF    F94.2
....................       Motor2_off;  
003D0:  BCF    F8B.1
003D2:  BCF    F94.1
....................    }else if(VelMotor==1){ 
003D4:  BRA    03E8
003D6:  DECFSZ xEF,W
003D8:  BRA    03E8
....................       set_timer0(183); 
003DA:  CLRF   FD7
003DC:  MOVLW  B7
003DE:  MOVWF  FD6
....................       Motor_off;  
003E0:  BCF    F8B.2
003E2:  BCF    F94.2
....................       Motor2_off;  
003E4:  BCF    F8B.1
003E6:  BCF    F94.1
....................    } 
....................    pulsos++;    
003E8:  INCF   xCB,F
003EA:  BTFSC  FD8.2
003EC:  INCF   xCC,F
.................... } 
....................  
003EE:  BCF    FF2.1
003F0:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<20){ 
003F4:  MOVF   xEF,F
003F6:  BZ    0420
003F8:  MOVF   xEF,W
003FA:  SUBLW  13
003FC:  BNC   0420
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
003FE:  BTFSS  xCA.1
00400:  BRA    0414
....................       Motor_on; 
00402:  BSF    F8B.2
00404:  BCF    F94.2
....................       Motor2_on;  
00406:  BSF    F8B.1
00408:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
0040A:  CLRF   FD7
0040C:  MOVLW  FD
0040E:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
00410:  BCF    xCA.1
....................    } else {            //The triac has been triggered, cut the pulse 
00412:  BRA    0420
....................       Motor_off; 
00414:  BCF    F8B.2
00416:  BCF    F94.2
....................       Motor2_off;  
00418:  BCF    F8B.1
0041A:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
0041C:  CLRF   FD7
0041E:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
00420:  BCF    FF2.2
00422:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(40536);//5ms 
00426:  MOVLW  9E
00428:  MOVWF  FCF
0042A:  MOVLW  58
0042C:  MOVWF  FCE
....................    tiempos++; 
0042E:  INCF   5A,F
00430:  BTFSC  FD8.2
00432:  INCF   5B,F
....................    if(UP) 
00434:  BSF    F92.5
00436:  BTFSC  F80.5
00438:  BRA    0442
....................          tup++; 
0043A:  INCF   xCD,F
0043C:  BTFSC  FD8.2
0043E:  INCF   xCE,F
....................       else 
00440:  BRA    0446
....................          tup=0; 
00442:  CLRF   xCE
00444:  CLRF   xCD
....................           
....................       if(DOWN) 
00446:  BSF    F96.0
00448:  BTFSC  F84.0
0044A:  BRA    0454
....................          tdown++; 
0044C:  INCF   xCF,F
0044E:  BTFSC  FD8.2
00450:  INCF   xD0,F
....................       else 
00452:  BRA    0458
....................          tdown=0; 
00454:  CLRF   xD0
00456:  CLRF   xCF
....................           
....................       if(RIGHT) 
00458:  BSF    F96.1
0045A:  BTFSC  F84.1
0045C:  BRA    0466
....................          tright++; 
0045E:  INCF   xD1,F
00460:  BTFSC  FD8.2
00462:  INCF   xD2,F
....................       else 
00464:  BRA    046A
....................          tright=0; 
00466:  CLRF   xD2
00468:  CLRF   xD1
....................        
....................       if(IZQU) 
0046A:  BSF    F96.2
0046C:  BTFSC  F84.2
0046E:  BRA    0478
....................          tleft++; 
00470:  INCF   xD3,F
00472:  BTFSC  FD8.2
00474:  INCF   xD4,F
....................       else 
00476:  BRA    047C
....................          tleft=0; 
00478:  CLRF   xD4
0047A:  CLRF   xD3
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
0047C:  MOVF   5B,F
0047E:  BNZ   0486
00480:  MOVF   5A,W
00482:  SUBLW  C7
00484:  BC    04F2
....................       output_toggle(PIN_A3); 
00486:  BCF    F92.3
00488:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
0048A:  CLRF   5B
0048C:  CLRF   5A
0048E:  INCF   42,F
00490:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
00492:  DECFSZ 54,W
00494:  BRA    04AA
....................          if(estadobuzzer==0){ 
00496:  BTFSC  2A.3
00498:  BRA    04A0
....................             Buzzer_off; 
0049A:  BCF    F8B.0
0049C:  BCF    F94.0
....................          }else{ 
0049E:  BRA    04A8
....................             if(estadoalarma==1) 
004A0:  BTFSS  2A.4
004A2:  BRA    04A8
....................                Buzzer_on; 
004A4:  BSF    F8B.0
004A6:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
004A8:  BTG    2A.3
....................       } 
....................       if(estadomv==1){ 
004AA:  BTFSS  29.2
004AC:  BRA    04C4
....................          segundosTrabajo++; 
004AE:  INCF   xD5,F
004B0:  BTFSC  FD8.2
004B2:  INCF   xD6,F
....................          if(tEncendido<60){ 
004B4:  MOVF   61,F
004B6:  BNZ   04C4
004B8:  MOVF   60,W
004BA:  SUBLW  3B
004BC:  BNC   04C4
....................             tEncendido++; 
004BE:  INCF   60,F
004C0:  BTFSC  FD8.2
004C2:  INCF   61,F
....................          } 
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
004C4:  BTFSS  29.0
004C6:  BRA    04F2
....................          segundos++; 
004C8:  INCF   34,F
....................          if(tiempo_cumplido==0){ 
004CA:  BTFSC  29.7
004CC:  BRA    04F2
....................             if(tempo_segundos>0){ 
004CE:  MOVF   3B,F
004D0:  BZ    04D6
....................                tempo_segundos--; 
004D2:  DECF   3B,F
....................             }else{ 
004D4:  BRA    04F2
....................                if(tempo_minutos>0){ 
004D6:  MOVF   3A,F
004D8:  BZ    04E2
....................                   tempo_minutos--; 
004DA:  DECF   3A,F
....................                   tempo_segundos=59; 
004DC:  MOVLW  3B
004DE:  MOVWF  3B
....................                }else{ 
004E0:  BRA    04F2
....................                   tiempo_cumplido=1; 
004E2:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
004E4:  BCF    29.0
004E6:  BSF    F8A.4
004E8:  BCF    F93.4
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
004EA:  MOVFF  3C,3A
004EE:  MOVFF  3D,3B
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
004F2:  BCF    F9E.0
004F4:  GOTO   0064
.................... void main () 
.................... { 
*
054EA:  CLRF   FF8
054EC:  BSF    FF1.2
054EE:  BCF    F9F.0
054F0:  BSF    FD0.7
054F2:  BSF    07.7
054F4:  CLRF   FEA
054F6:  CLRF   FE9
054F8:  BCF    29.0
054FA:  BCF    29.1
054FC:  BCF    29.2
054FE:  BCF    29.3
05500:  BCF    29.4
05502:  BCF    29.5
05504:  BCF    29.6
05506:  BCF    29.7
05508:  BCF    2A.0
0550A:  BCF    2A.1
0550C:  BCF    2A.2
0550E:  BCF    2A.3
05510:  BCF    2A.4
05512:  BCF    2A.5
05514:  BCF    2A.6
05516:  CLRF   2B
05518:  MOVLW  07
0551A:  MOVWF  2C
0551C:  MOVLW  02
0551E:  MOVWF  2D
05520:  MOVLW  0B
05522:  MOVWF  2E
05524:  MOVLW  02
05526:  MOVWF  2F
05528:  MOVLW  03
0552A:  MOVWF  30
0552C:  MOVLW  02
0552E:  MOVWF  31
05530:  MOVWF  32
05532:  MOVLW  04
05534:  MOVWF  33
05536:  CLRF   34
05538:  CLRF   35
0553A:  CLRF   36
0553C:  CLRF   37
0553E:  CLRF   38
05540:  CLRF   39
05542:  CLRF   3A
05544:  CLRF   3B
05546:  CLRF   3C
05548:  CLRF   3D
0554A:  CLRF   3E
0554C:  CLRF   3F
0554E:  CLRF   40
05550:  MOVLW  01
05552:  MOVWF  41
05554:  CLRF   42
05556:  CLRF   43
05558:  CLRF   44
0555A:  CLRF   45
0555C:  MOVLW  0A
0555E:  MOVWF  46
05560:  CLRF   47
05562:  CLRF   48
05564:  CLRF   54
05566:  CLRF   55
05568:  CLRF   56
0556A:  CLRF   57
0556C:  MOVLW  04
0556E:  MOVWF  58
05570:  MOVLW  28
05572:  MOVWF  59
05574:  CLRF   5D
05576:  CLRF   5C
05578:  CLRF   5F
0557A:  CLRF   5E
0557C:  CLRF   61
0557E:  CLRF   60
05580:  CLRF   xB5
05582:  CLRF   xB4
05584:  CLRF   xB3
05586:  CLRF   xB2
05588:  CLRF   xB9
0558A:  CLRF   xB8
0558C:  CLRF   xB7
0558E:  CLRF   xB6
05590:  CLRF   xBD
05592:  CLRF   xBC
05594:  CLRF   xBB
05596:  CLRF   xBA
05598:  CLRF   xC1
0559A:  CLRF   xC0
0559C:  CLRF   xBF
0559E:  CLRF   xBE
055A0:  CLRF   xC5
055A2:  CLRF   xC4
055A4:  CLRF   xC3
055A6:  CLRF   xC2
055A8:  CLRF   xC9
055AA:  CLRF   xC8
055AC:  CLRF   xC7
055AE:  MOVLW  80
055B0:  MOVWF  xC6
055B2:  BSF    2A.7
055B4:  BCF    xCA.0
055B6:  CLRF   xCC
055B8:  CLRF   xCB
055BA:  CLRF   xCE
055BC:  CLRF   xCD
055BE:  CLRF   xD0
055C0:  CLRF   xCF
055C2:  CLRF   xD2
055C4:  CLRF   xD1
055C6:  CLRF   xD4
055C8:  CLRF   xD3
055CA:  CLRF   xD6
055CC:  CLRF   xD5
055CE:  CLRF   xD8
055D0:  CLRF   xD7
055D2:  CLRF   xDA
055D4:  CLRF   xD9
055D6:  BCF    xCA.1
055D8:  MOVLW  AE
055DA:  MOVWF  xDE
055DC:  MOVLW  47
055DE:  MOVWF  xDD
055E0:  CLRF   xDC
055E2:  MOVLW  82
055E4:  MOVWF  xDB
055E6:  MOVLW  AE
055E8:  MOVWF  xE2
055EA:  MOVLW  47
055EC:  MOVWF  xE1
055EE:  MOVLW  D1
055F0:  MOVWF  xE0
055F2:  MOVLW  84
055F4:  MOVWF  xDF
055F6:  MOVLW  48
055F8:  MOVWF  xE6
055FA:  MOVLW  21
055FC:  MOVWF  xE5
055FE:  MOVLW  07
05600:  MOVWF  xE4
05602:  MOVLW  86
05604:  MOVWF  xE3
05606:  MOVLW  E9
05608:  MOVWF  xEA
0560A:  MOVLW  26
0560C:  MOVWF  xE9
0560E:  MOVLW  82
05610:  MOVWF  xE8
05612:  MOVLW  85
05614:  MOVWF  xE7
05616:  MOVLW  BE
05618:  MOVWF  xEE
0561A:  MOVLW  9F
0561C:  MOVWF  xED
0561E:  MOVLW  C1
05620:  MOVWF  xEC
05622:  MOVLW  83
05624:  MOVWF  xEB
05626:  CLRF   xEF
05628:  CLRF   xF0
0562A:  CLRF   xF1
0562C:  CLRF   xF5
0562E:  CLRF   xF4
05630:  MOVLW  47
05632:  MOVWF  xF3
05634:  MOVLW  86
05636:  MOVWF  xF2
05638:  CLRF   xF9
0563A:  CLRF   xF8
0563C:  CLRF   xF7
0563E:  CLRF   xF6
05640:  MOVLW  9A
05642:  MOVWF  xFD
05644:  MOVLW  99
05646:  MOVWF  xFC
05648:  MOVLW  19
0564A:  MOVWF  xFB
0564C:  MOVLW  7F
0564E:  MOVWF  xFA
05650:  MOVLB  1
05652:  CLRF   x01
05654:  CLRF   x00
05656:  MOVLB  0
05658:  CLRF   xFF
0565A:  CLRF   xFE
0565C:  MOVLB  1
0565E:  CLRF   x05
05660:  CLRF   x04
05662:  CLRF   x03
05664:  CLRF   x02
05666:  CLRF   x09
05668:  CLRF   x08
0566A:  CLRF   x07
0566C:  CLRF   x06
0566E:  CLRF   x0D
05670:  CLRF   x0C
05672:  CLRF   x0B
05674:  CLRF   x0A
05676:  CLRF   x11
05678:  CLRF   x10
0567A:  CLRF   x0F
0567C:  CLRF   x0E
0567E:  CLRF   x15
05680:  CLRF   x14
05682:  CLRF   x13
05684:  CLRF   x12
05686:  CLRF   x19
05688:  CLRF   x18
0568A:  CLRF   x17
0568C:  CLRF   x16
0568E:  CLRF   x1D
05690:  CLRF   x1C
05692:  CLRF   x1B
05694:  CLRF   x1A
05696:  CLRF   x21
05698:  CLRF   x20
0569A:  CLRF   x1F
0569C:  CLRF   x1E
0569E:  CLRF   x25
056A0:  CLRF   x24
056A2:  CLRF   x23
056A4:  CLRF   x22
056A6:  CLRF   x29
056A8:  CLRF   x28
056AA:  CLRF   x27
056AC:  CLRF   x26
056AE:  MOVF   FC1,W
056B0:  ANDLW  C0
056B2:  IORLW  0F
056B4:  MOVWF  FC1
056B6:  MOVLW  07
056B8:  MOVWF  FB4
056BA:  MOVLW  3E
056BC:  MOVWF  49
056BE:  MOVLW  20
056C0:  MOVWF  4A
056C2:  MOVLW  5E
056C4:  MOVWF  4B
056C6:  CLRF   4C
056C8:  CLRF   4D
056CA:  CLRF   4E
056CC:  CLRF   4F
056CE:  CLRF   50
056D0:  CLRF   51
056D2:  CLRF   52
056D4:  CLRF   53
....................    Motor_off; 
056D6:  BCF    F8B.2
056D8:  BCF    F94.2
....................    Motor2_off; 
056DA:  BCF    F8B.1
056DC:  BCF    F94.1
....................    ConfigInterrupciones(); 
056DE:  MOVLB  0
056E0:  GOTO   0DF0
....................    //MensajeBienvenida(); 
....................    LeeEEPROM();  
056E4:  GOTO   1244
....................    LimitaValores(); 
056E8:  GOTO   1956
....................    if(motor!=1){ 
056EC:  DECFSZ 44,W
056EE:  BRA    56F2
056F0:  BRA    56F8
....................       MensajeBienvenida();  
056F2:  GOTO   22F2
....................    }else{ 
056F6:  BRA    570A
....................       if(luz==1) 
056F8:  DECFSZ 45,W
056FA:  BRA    56FE
....................          estadofl=1; 
056FC:  BSF    29.1
....................       if(luz==0) 
056FE:  MOVF   45,F
05700:  BNZ   5704
....................          estadofl=0; 
05702:  BCF    29.1
....................       estadomv=1; 
05704:  BSF    29.2
....................       Menu=50; 
05706:  MOVLW  32
05708:  MOVWF  2B
....................    } 
....................    Motor_off; 
0570A:  BCF    F8B.2
0570C:  BCF    F94.2
....................    Motor2_off; 
0570E:  BCF    F8B.1
05710:  BCF    F94.1
....................    calculaDensidad(); 
05712:  CALL   35F2
....................    for(i=0;i<Media;i++){ 
05716:  CLRF   40
05718:  MOVF   59,W
0571A:  SUBWF  40,W
0571C:  BC    575E
....................       DownFlow=LeerFlujo(Media,1); 
0571E:  MOVFF  59,7EF
05722:  MOVLW  01
05724:  MOVLB  7
05726:  MOVWF  xF0
05728:  MOVLB  0
0572A:  CALL   4026
0572E:  MOVFF  03,C5
05732:  MOVFF  02,C4
05736:  MOVFF  01,C3
0573A:  MOVFF  00,C2
....................       CaidaPresion=Leer_Sensor_Presion(8); 
0573E:  MOVLW  08
05740:  MOVLB  7
05742:  MOVWF  xEF
05744:  MOVLB  0
05746:  CALL   4B18
0574A:  MOVFF  03,C1
0574E:  MOVFF  02,C0
05752:  MOVFF  01,BF
05756:  MOVFF  00,BE
....................    } 
0575A:  INCF   40,F
0575C:  BRA    5718
....................     
....................    if(UP && DOWN && RIGHT){ 
0575E:  BSF    F92.5
05760:  BTFSC  F80.5
05762:  GOTO   6308
05766:  BSF    F96.0
05768:  BTFSC  F84.0
0576A:  GOTO   6308
0576E:  BSF    F96.1
05770:  BTFSC  F84.1
05772:  GOTO   6308
....................       printf(lcd_putc,"\f"); 
05776:  MOVLW  0C
05778:  MOVLB  8
0577A:  MOVWF  x00
0577C:  MOVLB  0
0577E:  CALL   2254
....................       lcd_gotoxy(1,1); 
05782:  MOVLW  01
05784:  MOVLB  8
05786:  MOVWF  x01
05788:  MOVWF  x02
0578A:  MOVLB  0
0578C:  CALL   21DA
....................       printf(lcd_putc,"Cargando....."); 
05790:  MOVLW  F8
05792:  MOVWF  FF6
05794:  MOVLW  04
05796:  MOVWF  FF7
05798:  CALL   22D2
....................       delay_ms(2000); 
0579C:  MOVLW  08
0579E:  MOVLB  7
057A0:  MOVWF  xEF
057A2:  MOVLW  FA
057A4:  MOVLB  8
057A6:  MOVWF  x06
057A8:  MOVLB  0
057AA:  CALL   0CCE
057AE:  MOVLB  7
057B0:  DECFSZ xEF,F
057B2:  BRA    57A2
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
057B4:  MOVLW  01
057B6:  MOVLB  8
057B8:  MOVWF  x01
057BA:  MOVWF  x02
057BC:  MOVLB  0
057BE:  CALL   21DA
....................          printf(lcd_putc,"Ajuste de Parametros"); 
057C2:  MOVLW  06
057C4:  MOVWF  FF6
057C6:  MOVLW  05
057C8:  MOVWF  FF7
057CA:  CALL   22D2
....................           
....................          if(RIGHT){ 
057CE:  BSF    F96.1
057D0:  BTFSC  F84.1
057D2:  BRA    5800
....................             delay_ms(500); 
057D4:  MOVLW  02
057D6:  MOVLB  7
057D8:  MOVWF  xEF
057DA:  MOVLW  FA
057DC:  MOVLB  8
057DE:  MOVWF  x06
057E0:  MOVLB  0
057E2:  CALL   0CCE
057E6:  MOVLB  7
057E8:  DECFSZ xEF,F
057EA:  BRA    57DA
....................             if(RIGHT){ 
057EC:  BSF    F96.1
057EE:  BTFSC  F84.1
057F0:  BRA    5802
....................                OpcionMenu++; 
057F2:  INCF   48,F
....................                printf(lcd_putc,"\f"); 
057F4:  MOVLW  0C
057F6:  MOVLB  8
057F8:  MOVWF  x00
057FA:  MOVLB  0
057FC:  CALL   2254
05800:  MOVLB  7
....................             } 
....................          } 
....................           
....................          if(IZQU){ 
05802:  BSF    F96.2
05804:  BTFSC  F84.2
05806:  BRA    5834
....................             delay_ms(500); 
05808:  MOVLW  02
0580A:  MOVWF  xEF
0580C:  MOVLW  FA
0580E:  MOVLB  8
05810:  MOVWF  x06
05812:  MOVLB  0
05814:  CALL   0CCE
05818:  MOVLB  7
0581A:  DECFSZ xEF,F
0581C:  BRA    580C
....................             if(IZQU){ 
0581E:  BSF    F96.2
05820:  BTFSC  F84.2
05822:  BRA    5834
....................                OpcionMenu--; 
05824:  DECF   48,F
....................                printf(lcd_putc,"\f"); 
05826:  MOVLW  0C
05828:  MOVLB  8
0582A:  MOVWF  x00
0582C:  MOVLB  0
0582E:  CALL   2254
05832:  MOVLB  7
....................             } 
....................          } 
....................           
....................          if(OpcionMenu<0) 
05834:  BTFSC  48.7
05836:  BRA    583A
05838:  BRA    583E
....................             OpcionMenu=5; 
0583A:  MOVLW  05
0583C:  MOVWF  48
....................          if(OpcionMenu>5) 
0583E:  BTFSC  48.7
05840:  BRA    584A
05842:  MOVF   48,W
05844:  SUBLW  05
05846:  BC    584A
....................             OpcionMenu=0;    
05848:  CLRF   48
....................          
....................          if(IZQU && RIGHT)//Si oprime boton de Toma. 
0584A:  BSF    F96.2
0584C:  BTFSC  F84.2
0584E:  BRA    5B4A
05850:  BSF    F96.1
05852:  BTFSC  F84.1
05854:  BRA    5B4A
....................          {                   
....................             write_eeprom(24,velocidadInicial);//Guardar valor de Setpoint en eeprom 
05856:  CLRF   FAA
05858:  MOVLW  18
0585A:  MOVWF  FA9
0585C:  MOVFF  46,FA8
05860:  BCF    FA6.6
05862:  BCF    FA6.7
05864:  BSF    FA6.2
05866:  MOVF   FF2,W
05868:  MOVWF  00
0586A:  BCF    FF2.6
0586C:  BCF    FF2.7
0586E:  MOVLB  F
05870:  MOVLW  55
05872:  MOVWF  FA7
05874:  MOVLW  AA
05876:  MOVWF  FA7
05878:  BSF    FA6.1
0587A:  BTFSC  FA6.1
0587C:  BRA    587A
0587E:  BCF    FA6.2
05880:  MOVF   00,W
05882:  IORWF  FF2,F
....................             delay_ms(20); 
05884:  MOVLW  14
05886:  MOVLB  8
05888:  MOVWF  x06
0588A:  MOVLB  0
0588C:  CALL   0CCE
....................              
....................             Temporal=Flujo[1].Ajuste; 
05890:  MOVFF  2A3,121
05894:  MOVFF  2A2,120
05898:  MOVFF  2A1,11F
0589C:  MOVFF  2A0,11E
....................             Entero=(int)Flujo[1].Ajuste; 
058A0:  MOVFF  2A3,843
058A4:  MOVFF  2A2,842
058A8:  MOVFF  2A1,841
058AC:  MOVFF  2A0,840
058B0:  CALL   246C
058B4:  MOVFF  01,F0
....................             Temporal=Temporal-Entero; 
058B8:  MOVLB  8
058BA:  CLRF   x45
058BC:  MOVFF  F0,844
058C0:  MOVLB  0
058C2:  CALL   0E38
058C6:  BSF    FD8.1
058C8:  MOVFF  121,847
058CC:  MOVFF  120,846
058D0:  MOVFF  11F,845
058D4:  MOVFF  11E,844
058D8:  MOVFF  03,84B
058DC:  MOVFF  02,84A
058E0:  MOVFF  01,849
058E4:  MOVFF  00,848
058E8:  CALL   0FCC
058EC:  MOVFF  03,121
058F0:  MOVFF  02,120
058F4:  MOVFF  01,11F
058F8:  MOVFF  00,11E
....................             Temporal2=Temporal*100.0; 
058FC:  MOVFF  121,843
05900:  MOVFF  120,842
05904:  MOVFF  11F,841
05908:  MOVFF  11E,840
0590C:  MOVLB  8
0590E:  CLRF   x47
05910:  CLRF   x46
05912:  MOVLW  48
05914:  MOVWF  x45
05916:  MOVLW  85
05918:  MOVWF  x44
0591A:  MOVLB  0
0591C:  CALL   2376
05920:  MOVFF  03,129
05924:  MOVFF  02,128
05928:  MOVFF  01,127
0592C:  MOVFF  00,126
....................             Decimal1=(int8)Temporal2; 
05930:  MOVFF  129,843
05934:  MOVFF  128,842
05938:  MOVFF  127,841
0593C:  MOVFF  126,840
05940:  CALL   246C
05944:  MOVFF  01,F1
....................             write_eeprom(25,Entero); 
05948:  CLRF   FAA
0594A:  MOVLW  19
0594C:  MOVWF  FA9
0594E:  MOVFF  F0,FA8
05952:  BCF    FA6.6
05954:  BCF    FA6.7
05956:  BSF    FA6.2
05958:  MOVF   FF2,W
0595A:  MOVWF  00
0595C:  BCF    FF2.6
0595E:  BCF    FF2.7
05960:  MOVLB  F
05962:  MOVLW  55
05964:  MOVWF  FA7
05966:  MOVLW  AA
05968:  MOVWF  FA7
0596A:  BSF    FA6.1
0596C:  BTFSC  FA6.1
0596E:  BRA    596C
05970:  BCF    FA6.2
05972:  MOVF   00,W
05974:  IORWF  FF2,F
....................             delay_ms(20); 
05976:  MOVLW  14
05978:  MOVLB  8
0597A:  MOVWF  x06
0597C:  MOVLB  0
0597E:  CALL   0CCE
....................             write_eeprom(26,Decimal1); 
05982:  CLRF   FAA
05984:  MOVLW  1A
05986:  MOVWF  FA9
05988:  MOVFF  F1,FA8
0598C:  BCF    FA6.6
0598E:  BCF    FA6.7
05990:  BSF    FA6.2
05992:  MOVF   FF2,W
05994:  MOVWF  00
05996:  BCF    FF2.6
05998:  BCF    FF2.7
0599A:  MOVLB  F
0599C:  MOVLW  55
0599E:  MOVWF  FA7
059A0:  MOVLW  AA
059A2:  MOVWF  FA7
059A4:  BSF    FA6.1
059A6:  BTFSC  FA6.1
059A8:  BRA    59A6
059AA:  BCF    FA6.2
059AC:  MOVF   00,W
059AE:  IORWF  FF2,F
....................             delay_ms(20); 
059B0:  MOVLW  14
059B2:  MOVLB  8
059B4:  MOVWF  x06
059B6:  MOVLB  0
059B8:  CALL   0CCE
....................              
....................             write_eeprom(29,(int8)Pr); 
059BC:  MOVFF  11D,843
059C0:  MOVFF  11C,842
059C4:  MOVFF  11B,841
059C8:  MOVFF  11A,840
059CC:  CALL   246C
059D0:  MOVFF  01,7EF
059D4:  CLRF   FAA
059D6:  MOVLW  1D
059D8:  MOVWF  FA9
059DA:  MOVFF  7EF,FA8
059DE:  BCF    FA6.6
059E0:  BCF    FA6.7
059E2:  BSF    FA6.2
059E4:  MOVF   FF2,W
059E6:  MOVWF  00
059E8:  BCF    FF2.6
059EA:  BCF    FF2.7
059EC:  MOVLB  F
059EE:  MOVLW  55
059F0:  MOVWF  FA7
059F2:  MOVLW  AA
059F4:  MOVWF  FA7
059F6:  BSF    FA6.1
059F8:  BTFSC  FA6.1
059FA:  BRA    59F8
059FC:  BCF    FA6.2
059FE:  MOVF   00,W
05A00:  IORWF  FF2,F
....................             delay_ms(20); 
05A02:  MOVLW  14
05A04:  MOVLB  8
05A06:  MOVWF  x06
05A08:  MOVLB  0
05A0A:  CALL   0CCE
....................             write_eeprom(30,(int8)HR); 
05A0E:  MOVFF  125,843
05A12:  MOVFF  124,842
05A16:  MOVFF  123,841
05A1A:  MOVFF  122,840
05A1E:  CALL   246C
05A22:  MOVFF  01,7EF
05A26:  CLRF   FAA
05A28:  MOVLW  1E
05A2A:  MOVWF  FA9
05A2C:  MOVFF  7EF,FA8
05A30:  BCF    FA6.6
05A32:  BCF    FA6.7
05A34:  BSF    FA6.2
05A36:  MOVF   FF2,W
05A38:  MOVWF  00
05A3A:  BCF    FF2.6
05A3C:  BCF    FF2.7
05A3E:  MOVLB  F
05A40:  MOVLW  55
05A42:  MOVWF  FA7
05A44:  MOVLW  AA
05A46:  MOVWF  FA7
05A48:  BSF    FA6.1
05A4A:  BTFSC  FA6.1
05A4C:  BRA    5A4A
05A4E:  BCF    FA6.2
05A50:  MOVF   00,W
05A52:  IORWF  FF2,F
....................             delay_ms(20); 
05A54:  MOVLW  14
05A56:  MOVLB  8
05A58:  MOVWF  x06
05A5A:  MOVLB  0
05A5C:  CALL   0CCE
....................             write_eeprom(31,Media); 
05A60:  CLRF   FAA
05A62:  MOVLW  1F
05A64:  MOVWF  FA9
05A66:  MOVFF  59,FA8
05A6A:  BCF    FA6.6
05A6C:  BCF    FA6.7
05A6E:  BSF    FA6.2
05A70:  MOVF   FF2,W
05A72:  MOVWF  00
05A74:  BCF    FF2.6
05A76:  BCF    FF2.7
05A78:  MOVLB  F
05A7A:  MOVLW  55
05A7C:  MOVWF  FA7
05A7E:  MOVLW  AA
05A80:  MOVWF  FA7
05A82:  BSF    FA6.1
05A84:  BTFSC  FA6.1
05A86:  BRA    5A84
05A88:  BCF    FA6.2
05A8A:  MOVF   00,W
05A8C:  IORWF  FF2,F
....................             delay_ms(20); 
05A8E:  MOVLW  14
05A90:  MOVLB  8
05A92:  MOVWF  x06
05A94:  MOVLB  0
05A96:  CALL   0CCE
....................             Buzzer_on;delay_ms(500);Buzzer_off; 
05A9A:  BSF    F8B.0
05A9C:  BCF    F94.0
05A9E:  MOVLW  02
05AA0:  MOVLB  7
05AA2:  MOVWF  xEF
05AA4:  MOVLW  FA
05AA6:  MOVLB  8
05AA8:  MOVWF  x06
05AAA:  MOVLB  0
05AAC:  CALL   0CCE
05AB0:  MOVLB  7
05AB2:  DECFSZ xEF,F
05AB4:  BRA    5AA4
05AB6:  BCF    F8B.0
05AB8:  BCF    F94.0
....................             lcd_gotoxy(1,1); 
05ABA:  MOVLW  01
05ABC:  MOVLB  8
05ABE:  MOVWF  x01
05AC0:  MOVWF  x02
05AC2:  MOVLB  0
05AC4:  CALL   21DA
....................             printf(lcd_putc,"                    "); 
05AC8:  MOVLW  1C
05ACA:  MOVWF  FF6
05ACC:  MOVLW  05
05ACE:  MOVWF  FF7
05AD0:  CALL   22D2
....................             lcd_gotoxy(1,2); 
05AD4:  MOVLW  01
05AD6:  MOVLB  8
05AD8:  MOVWF  x01
05ADA:  MOVLW  02
05ADC:  MOVWF  x02
05ADE:  MOVLB  0
05AE0:  CALL   21DA
....................             printf(lcd_putc,"    Almacenando      "); 
05AE4:  MOVLW  32
05AE6:  MOVWF  FF6
05AE8:  MOVLW  05
05AEA:  MOVWF  FF7
05AEC:  CALL   22D2
....................             lcd_gotoxy(1,3); 
05AF0:  MOVLW  01
05AF2:  MOVLB  8
05AF4:  MOVWF  x01
05AF6:  MOVLW  03
05AF8:  MOVWF  x02
05AFA:  MOVLB  0
05AFC:  CALL   21DA
....................             printf(lcd_putc,"     Parametros     "); 
05B00:  MOVLW  48
05B02:  MOVWF  FF6
05B04:  MOVLW  05
05B06:  MOVWF  FF7
05B08:  CALL   22D2
....................             lcd_gotoxy(1,4); 
05B0C:  MOVLW  01
05B0E:  MOVLB  8
05B10:  MOVWF  x01
05B12:  MOVLW  04
05B14:  MOVWF  x02
05B16:  MOVLB  0
05B18:  CALL   21DA
....................             printf(lcd_putc,"                    ");  
05B1C:  MOVLW  5E
05B1E:  MOVWF  FF6
05B20:  MOVLW  05
05B22:  MOVWF  FF7
05B24:  CALL   22D2
....................             Buzzer_on;delay_ms(500);Buzzer_off; 
05B28:  BSF    F8B.0
05B2A:  BCF    F94.0
05B2C:  MOVLW  02
05B2E:  MOVLB  7
05B30:  MOVWF  xEF
05B32:  MOVLW  FA
05B34:  MOVLB  8
05B36:  MOVWF  x06
05B38:  MOVLB  0
05B3A:  CALL   0CCE
05B3E:  MOVLB  7
05B40:  DECFSZ xEF,F
05B42:  BRA    5B32
05B44:  BCF    F8B.0
05B46:  BCF    F94.0
....................             reset_cpu(); 
05B48:  RESET
....................          } 
....................           
....................          if(OpcionMenu==0){ 
05B4A:  MOVF   48,F
05B4C:  BNZ   5BF4
....................             if(velocidadInicial>15) 
05B4E:  MOVF   46,W
05B50:  SUBLW  0F
05B52:  BC    5B58
....................                velocidadInicial=15; 
05B54:  MOVLW  0F
05B56:  MOVWF  46
....................             if(velocidadInicial<1) 
05B58:  MOVF   46,F
05B5A:  BNZ   5B60
....................                velocidadInicial=1; 
05B5C:  MOVLW  01
05B5E:  MOVWF  46
....................            
....................             lcd_gotoxy(1,2); 
05B60:  MOVLW  01
05B62:  MOVLB  8
05B64:  MOVWF  x01
05B66:  MOVLW  02
05B68:  MOVWF  x02
05B6A:  MOVLB  0
05B6C:  CALL   21DA
....................             printf(lcd_putc,"Inicial   Ventilador"); 
05B70:  MOVLW  74
05B72:  MOVWF  FF6
05B74:  MOVLW  05
05B76:  MOVWF  FF7
05B78:  CALL   22D2
....................             lcd_gotoxy(1,3); 
05B7C:  MOVLW  01
05B7E:  MOVLB  8
05B80:  MOVWF  x01
05B82:  MOVLW  03
05B84:  MOVWF  x02
05B86:  MOVLB  0
05B88:  CALL   21DA
....................             printf(lcd_putc,"     Vel: %02u       ",velocidadInicial);   
05B8C:  MOVLW  8A
05B8E:  MOVWF  FF6
05B90:  MOVLW  05
05B92:  MOVWF  FF7
05B94:  MOVLW  0A
05B96:  MOVLB  7
05B98:  MOVWF  xF3
05B9A:  MOVLB  0
05B9C:  CALL   4D24
05BA0:  MOVFF  46,7EF
05BA4:  MOVLW  01
05BA6:  MOVLB  7
05BA8:  MOVWF  xF0
05BAA:  MOVLB  0
05BAC:  CALL   4D7A
05BB0:  MOVLW  98
05BB2:  MOVWF  FF6
05BB4:  MOVLW  05
05BB6:  MOVWF  FF7
05BB8:  MOVLW  07
05BBA:  MOVLB  7
05BBC:  MOVWF  xF3
05BBE:  MOVLB  0
05BC0:  CALL   4D24
....................           
....................             if(UP){   
05BC4:  BSF    F92.5
05BC6:  BTFSC  F80.5
05BC8:  BRA    5BD8
....................                delay_ms(200);velocidadInicial++; 
05BCA:  MOVLW  C8
05BCC:  MOVLB  8
05BCE:  MOVWF  x06
05BD0:  MOVLB  0
05BD2:  CALL   0CCE
05BD6:  INCF   46,F
....................             } 
....................                    
....................             if(DOWN && Vel1>0){//Si oprime hacia abajo   
05BD8:  BSF    F96.0
05BDA:  BTFSC  F84.0
05BDC:  BRA    5BF0
05BDE:  MOVF   58,F
05BE0:  BZ    5BF0
....................                delay_ms(200);velocidadInicial--; 
05BE2:  MOVLW  C8
05BE4:  MOVLB  8
05BE6:  MOVWF  x06
05BE8:  MOVLB  0
05BEA:  CALL   0CCE
05BEE:  DECF   46,F
....................             } 
....................          }else if(OpcionMenu==1){ 
05BF0:  BRA    6300
05BF2:  MOVLB  7
05BF4:  DECFSZ 48,W
05BF6:  BRA    5D62
....................             if(Pr>120) 
05BF8:  MOVLB  8
05BFA:  CLRF   x43
05BFC:  CLRF   x42
05BFE:  MOVLW  70
05C00:  MOVWF  x41
05C02:  MOVLW  85
05C04:  MOVWF  x40
05C06:  MOVFF  11D,847
05C0A:  MOVFF  11C,846
05C0E:  MOVFF  11B,845
05C12:  MOVFF  11A,844
05C16:  MOVLB  0
05C18:  CALL   18DC
05C1C:  BNC   5C2C
....................                Pr=60; 
05C1E:  MOVLB  1
05C20:  CLRF   x1D
05C22:  CLRF   x1C
05C24:  MOVLW  70
05C26:  MOVWF  x1B
05C28:  MOVLW  84
05C2A:  MOVWF  x1A
....................             if(Pr<60) 
05C2C:  MOVFF  11D,843
05C30:  MOVFF  11C,842
05C34:  MOVFF  11B,841
05C38:  MOVFF  11A,840
05C3C:  MOVLB  8
05C3E:  CLRF   x47
05C40:  CLRF   x46
05C42:  MOVLW  70
05C44:  MOVWF  x45
05C46:  MOVLW  84
05C48:  MOVWF  x44
05C4A:  MOVLB  0
05C4C:  CALL   18DC
05C50:  BNC   5C60
....................                Pr=120; 
05C52:  MOVLB  1
05C54:  CLRF   x1D
05C56:  CLRF   x1C
05C58:  MOVLW  70
05C5A:  MOVWF  x1B
05C5C:  MOVLW  85
05C5E:  MOVWF  x1A
....................            
....................             lcd_gotoxy(1,2); 
05C60:  MOVLW  01
05C62:  MOVLB  8
05C64:  MOVWF  x01
05C66:  MOVLW  02
05C68:  MOVWF  x02
05C6A:  MOVLB  0
05C6C:  CALL   21DA
....................             printf(lcd_putc,"Presion Atmosferica "); 
05C70:  MOVLW  A0
05C72:  MOVWF  FF6
05C74:  MOVLW  05
05C76:  MOVWF  FF7
05C78:  CALL   22D2
....................             lcd_gotoxy(1,3); 
05C7C:  MOVLW  01
05C7E:  MOVLB  8
05C80:  MOVWF  x01
05C82:  MOVLW  03
05C84:  MOVWF  x02
05C86:  MOVLB  0
05C88:  CALL   21DA
....................             printf(lcd_putc,"     Pr: %2.0f       ",Pr); 
05C8C:  MOVLW  B6
05C8E:  MOVWF  FF6
05C90:  MOVLW  05
05C92:  MOVWF  FF7
05C94:  MOVLW  09
05C96:  MOVLB  7
05C98:  MOVWF  xF3
05C9A:  MOVLB  0
05C9C:  CALL   4D24
05CA0:  MOVLW  01
05CA2:  MOVWF  FE9
05CA4:  MOVFF  11D,7F6
05CA8:  MOVFF  11C,7F5
05CAC:  MOVFF  11B,7F4
05CB0:  MOVFF  11A,7F3
05CB4:  MOVLB  7
05CB6:  CLRF   xF7
05CB8:  MOVLB  0
05CBA:  CALL   4EC0
05CBE:  MOVLW  C4
05CC0:  MOVWF  FF6
05CC2:  MOVLW  05
05CC4:  MOVWF  FF7
05CC6:  MOVLW  07
05CC8:  MOVLB  7
05CCA:  MOVWF  xF3
05CCC:  MOVLB  0
05CCE:  CALL   4D24
....................           
....................             if(UP){   
05CD2:  BSF    F92.5
05CD4:  BTFSC  F80.5
05CD6:  BRA    5D18
....................                delay_ms(200);Pr+=1.0; 
05CD8:  MOVLW  C8
05CDA:  MOVLB  8
05CDC:  MOVWF  x06
05CDE:  MOVLB  0
05CE0:  CALL   0CCE
05CE4:  BCF    FD8.1
05CE6:  MOVFF  11D,847
05CEA:  MOVFF  11C,846
05CEE:  MOVFF  11B,845
05CF2:  MOVFF  11A,844
05CF6:  MOVLB  8
05CF8:  CLRF   x4B
05CFA:  CLRF   x4A
05CFC:  CLRF   x49
05CFE:  MOVLW  7F
05D00:  MOVWF  x48
05D02:  MOVLB  0
05D04:  CALL   0FCC
05D08:  MOVFF  03,11D
05D0C:  MOVFF  02,11C
05D10:  MOVFF  01,11B
05D14:  MOVFF  00,11A
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
05D18:  BSF    F96.0
05D1A:  BTFSC  F84.0
05D1C:  BRA    5D5E
....................                delay_ms(200);Pr-=1.0; 
05D1E:  MOVLW  C8
05D20:  MOVLB  8
05D22:  MOVWF  x06
05D24:  MOVLB  0
05D26:  CALL   0CCE
05D2A:  BSF    FD8.1
05D2C:  MOVFF  11D,847
05D30:  MOVFF  11C,846
05D34:  MOVFF  11B,845
05D38:  MOVFF  11A,844
05D3C:  MOVLB  8
05D3E:  CLRF   x4B
05D40:  CLRF   x4A
05D42:  CLRF   x49
05D44:  MOVLW  7F
05D46:  MOVWF  x48
05D48:  MOVLB  0
05D4A:  CALL   0FCC
05D4E:  MOVFF  03,11D
05D52:  MOVFF  02,11C
05D56:  MOVFF  01,11B
05D5A:  MOVFF  00,11A
....................             } 
....................          }else if(OpcionMenu==2){ 
05D5E:  BRA    6300
05D60:  MOVLB  7
05D62:  MOVF   48,W
05D64:  SUBLW  02
05D66:  BTFSS  FD8.2
05D68:  BRA    5EE8
....................             if(Flujo[1].Ajuste>10.0) 
05D6A:  MOVLB  8
05D6C:  CLRF   x43
05D6E:  CLRF   x42
05D70:  MOVLW  20
05D72:  MOVWF  x41
05D74:  MOVLW  82
05D76:  MOVWF  x40
05D78:  MOVFF  2A3,847
05D7C:  MOVFF  2A2,846
05D80:  MOVFF  2A1,845
05D84:  MOVFF  2A0,844
05D88:  MOVLB  0
05D8A:  CALL   18DC
05D8E:  BNC   5DA2
....................                Flujo[1].Ajuste=0.1; 
05D90:  MOVLW  CD
05D92:  MOVLB  2
05D94:  MOVWF  xA3
05D96:  MOVLW  CC
05D98:  MOVWF  xA2
05D9A:  MOVLW  4C
05D9C:  MOVWF  xA1
05D9E:  MOVLW  7B
05DA0:  MOVWF  xA0
....................             if(Flujo[1].Ajuste<0.1) 
05DA2:  MOVFF  2A3,843
05DA6:  MOVFF  2A2,842
05DAA:  MOVFF  2A1,841
05DAE:  MOVFF  2A0,840
05DB2:  MOVLW  CD
05DB4:  MOVLB  8
05DB6:  MOVWF  x47
05DB8:  MOVLW  CC
05DBA:  MOVWF  x46
05DBC:  MOVLW  4C
05DBE:  MOVWF  x45
05DC0:  MOVLW  7B
05DC2:  MOVWF  x44
05DC4:  MOVLB  0
05DC6:  CALL   18DC
05DCA:  BNC   5DDA
....................                Flujo[1].Ajuste=10.0; 
05DCC:  MOVLB  2
05DCE:  CLRF   xA3
05DD0:  CLRF   xA2
05DD2:  MOVLW  20
05DD4:  MOVWF  xA1
05DD6:  MOVLW  82
05DD8:  MOVWF  xA0
....................            
....................             lcd_gotoxy(1,2); 
05DDA:  MOVLW  01
05DDC:  MOVLB  8
05DDE:  MOVWF  x01
05DE0:  MOVLW  02
05DE2:  MOVWF  x02
05DE4:  MOVLB  0
05DE6:  CALL   21DA
....................             printf(lcd_putc,"Ajuste Sensor Flujo "); 
05DEA:  MOVLW  CC
05DEC:  MOVWF  FF6
05DEE:  MOVLW  05
05DF0:  MOVWF  FF7
05DF2:  CALL   22D2
....................             lcd_gotoxy(1,3); 
05DF6:  MOVLW  01
05DF8:  MOVLB  8
05DFA:  MOVWF  x01
05DFC:  MOVLW  03
05DFE:  MOVWF  x02
05E00:  MOVLB  0
05E02:  CALL   21DA
....................             printf(lcd_putc,"   Ajuste: %2.1f     ",Flujo[1].Ajuste); 
05E06:  MOVLW  E2
05E08:  MOVWF  FF6
05E0A:  MOVLW  05
05E0C:  MOVWF  FF7
05E0E:  MOVLW  0B
05E10:  MOVLB  7
05E12:  MOVWF  xF3
05E14:  MOVLB  0
05E16:  CALL   4D24
05E1A:  MOVLW  01
05E1C:  MOVWF  FE9
05E1E:  MOVFF  2A3,7F6
05E22:  MOVFF  2A2,7F5
05E26:  MOVFF  2A1,7F4
05E2A:  MOVFF  2A0,7F3
05E2E:  MOVLB  7
05E30:  MOVWF  xF7
05E32:  MOVLB  0
05E34:  CALL   4EC0
05E38:  MOVLW  F2
05E3A:  MOVWF  FF6
05E3C:  MOVLW  05
05E3E:  MOVWF  FF7
05E40:  MOVLW  05
05E42:  MOVLB  7
05E44:  MOVWF  xF3
05E46:  MOVLB  0
05E48:  CALL   4D24
....................           
....................             if(UP){   
05E4C:  BSF    F92.5
05E4E:  BTFSC  F80.5
05E50:  BRA    5E98
....................                delay_ms(200);Flujo[1].Ajuste+=0.1; 
05E52:  MOVLW  C8
05E54:  MOVLB  8
05E56:  MOVWF  x06
05E58:  MOVLB  0
05E5A:  CALL   0CCE
05E5E:  BCF    FD8.1
05E60:  MOVFF  2A3,847
05E64:  MOVFF  2A2,846
05E68:  MOVFF  2A1,845
05E6C:  MOVFF  2A0,844
05E70:  MOVLW  CD
05E72:  MOVLB  8
05E74:  MOVWF  x4B
05E76:  MOVLW  CC
05E78:  MOVWF  x4A
05E7A:  MOVLW  4C
05E7C:  MOVWF  x49
05E7E:  MOVLW  7B
05E80:  MOVWF  x48
05E82:  MOVLB  0
05E84:  CALL   0FCC
05E88:  MOVFF  03,2A3
05E8C:  MOVFF  02,2A2
05E90:  MOVFF  01,2A1
05E94:  MOVFF  00,2A0
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
05E98:  BSF    F96.0
05E9A:  BTFSC  F84.0
05E9C:  BRA    5EE4
....................                delay_ms(200);Flujo[1].Ajuste-=0.1; 
05E9E:  MOVLW  C8
05EA0:  MOVLB  8
05EA2:  MOVWF  x06
05EA4:  MOVLB  0
05EA6:  CALL   0CCE
05EAA:  BSF    FD8.1
05EAC:  MOVFF  2A3,847
05EB0:  MOVFF  2A2,846
05EB4:  MOVFF  2A1,845
05EB8:  MOVFF  2A0,844
05EBC:  MOVLW  CD
05EBE:  MOVLB  8
05EC0:  MOVWF  x4B
05EC2:  MOVLW  CC
05EC4:  MOVWF  x4A
05EC6:  MOVLW  4C
05EC8:  MOVWF  x49
05ECA:  MOVLW  7B
05ECC:  MOVWF  x48
05ECE:  MOVLB  0
05ED0:  CALL   0FCC
05ED4:  MOVFF  03,2A3
05ED8:  MOVFF  02,2A2
05EDC:  MOVFF  01,2A1
05EE0:  MOVFF  00,2A0
....................             } 
....................          }else if(OpcionMenu==3){           
05EE4:  BRA    6300
05EE6:  MOVLB  7
05EE8:  MOVF   48,W
05EEA:  SUBLW  03
05EEC:  BTFSS  FD8.2
05EEE:  BRA    606A
....................             lcd_gotoxy(1,2); 
05EF0:  MOVLW  01
05EF2:  MOVLB  8
05EF4:  MOVWF  x01
05EF6:  MOVLW  02
05EF8:  MOVWF  x02
05EFA:  MOVLB  0
05EFC:  CALL   21DA
....................             printf(lcd_putc,"Punto Cero Flujo     "); 
05F00:  MOVLW  F8
05F02:  MOVWF  FF6
05F04:  MOVLW  05
05F06:  MOVWF  FF7
05F08:  CALL   22D2
....................             lcd_gotoxy(1,3); 
05F0C:  MOVLW  01
05F0E:  MOVLB  8
05F10:  MOVWF  x01
05F12:  MOVLW  03
05F14:  MOVWF  x02
05F16:  MOVLB  0
05F18:  CALL   21DA
....................             printf(lcd_putc,"   Cero: %2.0f     ",Flujo[1].zero_actual);     
05F1C:  MOVLW  0E
05F1E:  MOVWF  FF6
05F20:  MOVLW  06
05F22:  MOVWF  FF7
05F24:  MOVLW  09
05F26:  MOVLB  7
05F28:  MOVWF  xF3
05F2A:  MOVLB  0
05F2C:  CALL   4D24
05F30:  MOVLW  01
05F32:  MOVWF  FE9
05F34:  MOVFF  28E,7F6
05F38:  MOVFF  28D,7F5
05F3C:  MOVFF  28C,7F4
05F40:  MOVFF  28B,7F3
05F44:  MOVLB  7
05F46:  CLRF   xF7
05F48:  MOVLB  0
05F4A:  CALL   4EC0
05F4E:  MOVLW  1C
05F50:  MOVWF  FF6
05F52:  MOVLW  06
05F54:  MOVWF  FF7
05F56:  MOVLW  05
05F58:  MOVLB  7
05F5A:  MOVWF  xF3
05F5C:  MOVLB  0
05F5E:  CALL   4D24
....................           
....................             if(UP){   
05F62:  BSF    F92.5
05F64:  BTFSC  F80.5
05F66:  BRA    6066
....................                Flujo[1].zero_actual=sensores(1); 
05F68:  MOVLW  01
05F6A:  MOVLB  7
05F6C:  MOVWF  xF7
05F6E:  MOVLB  0
05F70:  CALL   3FCC
05F74:  MOVFF  03,28E
05F78:  MOVFF  02,28D
05F7C:  MOVFF  01,28C
05F80:  MOVFF  00,28B
....................                Flujo[1].adc=sensores(1); 
05F84:  MOVLW  01
05F86:  MOVLB  7
05F88:  MOVWF  xF7
05F8A:  MOVLB  0
05F8C:  CALL   3FCC
05F90:  MOVFF  03,843
05F94:  MOVFF  02,842
05F98:  MOVFF  01,841
05F9C:  MOVFF  00,840
05FA0:  CALL   246C
05FA4:  MOVFF  02,294
05FA8:  MOVFF  01,293
....................        
....................                Temporal1=(int16)Flujo[1].zero_actual; 
05FAC:  MOVFF  28E,843
05FB0:  MOVFF  28D,842
05FB4:  MOVFF  28C,841
05FB8:  MOVFF  28B,840
05FBC:  CALL   246C
05FC0:  MOVFF  02,DA
05FC4:  MOVFF  01,D9
....................                write_eeprom(27,make8(Temporal1,0)); 
05FC8:  MOVFF  D9,7EF
05FCC:  CLRF   FAA
05FCE:  MOVLW  1B
05FD0:  MOVWF  FA9
05FD2:  MOVFF  7EF,FA8
05FD6:  BCF    FA6.6
05FD8:  BCF    FA6.7
05FDA:  BSF    FA6.2
05FDC:  MOVF   FF2,W
05FDE:  MOVWF  00
05FE0:  BCF    FF2.6
05FE2:  BCF    FF2.7
05FE4:  MOVLB  F
05FE6:  MOVLW  55
05FE8:  MOVWF  FA7
05FEA:  MOVLW  AA
05FEC:  MOVWF  FA7
05FEE:  BSF    FA6.1
05FF0:  BTFSC  FA6.1
05FF2:  BRA    5FF0
05FF4:  BCF    FA6.2
05FF6:  MOVF   00,W
05FF8:  IORWF  FF2,F
....................                delay_ms(20); 
05FFA:  MOVLW  14
05FFC:  MOVLB  8
05FFE:  MOVWF  x06
06000:  MOVLB  0
06002:  CALL   0CCE
....................                write_eeprom(28,make8(Temporal1,1));//Guardar valor de Setpoint en eeprom 
06006:  MOVFF  DA,7EF
0600A:  CLRF   FAA
0600C:  MOVLW  1C
0600E:  MOVWF  FA9
06010:  MOVFF  7EF,FA8
06014:  BCF    FA6.6
06016:  BCF    FA6.7
06018:  BSF    FA6.2
0601A:  MOVF   FF2,W
0601C:  MOVWF  00
0601E:  BCF    FF2.6
06020:  BCF    FF2.7
06022:  MOVLB  F
06024:  MOVLW  55
06026:  MOVWF  FA7
06028:  MOVLW  AA
0602A:  MOVWF  FA7
0602C:  BSF    FA6.1
0602E:  BTFSC  FA6.1
06030:  BRA    602E
06032:  BCF    FA6.2
06034:  MOVF   00,W
06036:  IORWF  FF2,F
....................                delay_ms(20); 
06038:  MOVLW  14
0603A:  MOVLB  8
0603C:  MOVWF  x06
0603E:  MOVLB  0
06040:  CALL   0CCE
....................                Buzzer_on;delay_ms(500);Buzzer_off; 
06044:  BSF    F8B.0
06046:  BCF    F94.0
06048:  MOVLW  02
0604A:  MOVLB  7
0604C:  MOVWF  xEF
0604E:  MOVLW  FA
06050:  MOVLB  8
06052:  MOVWF  x06
06054:  MOVLB  0
06056:  CALL   0CCE
0605A:  MOVLB  7
0605C:  DECFSZ xEF,F
0605E:  BRA    604E
06060:  BCF    F8B.0
06062:  BCF    F94.0
06064:  MOVLB  0
....................             } 
....................          }else if(OpcionMenu==4){ 
06066:  BRA    6300
06068:  MOVLB  7
0606A:  MOVF   48,W
0606C:  SUBLW  04
0606E:  BTFSS  FD8.2
06070:  BRA    61F4
....................             if(HR>100) 
06072:  MOVLB  8
06074:  CLRF   x43
06076:  CLRF   x42
06078:  MOVLW  48
0607A:  MOVWF  x41
0607C:  MOVLW  85
0607E:  MOVWF  x40
06080:  MOVFF  125,847
06084:  MOVFF  124,846
06088:  MOVFF  123,845
0608C:  MOVFF  122,844
06090:  MOVLB  0
06092:  CALL   18DC
06096:  BNC   60A6
....................                HR=40; 
06098:  MOVLB  1
0609A:  CLRF   x25
0609C:  CLRF   x24
0609E:  MOVLW  20
060A0:  MOVWF  x23
060A2:  MOVLW  84
060A4:  MOVWF  x22
....................             if(HR<40) 
060A6:  MOVFF  125,843
060AA:  MOVFF  124,842
060AE:  MOVFF  123,841
060B2:  MOVFF  122,840
060B6:  MOVLB  8
060B8:  CLRF   x47
060BA:  CLRF   x46
060BC:  MOVLW  20
060BE:  MOVWF  x45
060C0:  MOVLW  84
060C2:  MOVWF  x44
060C4:  MOVLB  0
060C6:  CALL   18DC
060CA:  BNC   60DA
....................                HR=100; 
060CC:  MOVLB  1
060CE:  CLRF   x25
060D0:  CLRF   x24
060D2:  MOVLW  48
060D4:  MOVWF  x23
060D6:  MOVLW  85
060D8:  MOVWF  x22
....................            
....................             lcd_gotoxy(1,2); 
060DA:  MOVLW  01
060DC:  MOVLB  8
060DE:  MOVWF  x01
060E0:  MOVLW  02
060E2:  MOVWF  x02
060E4:  MOVLB  0
060E6:  CALL   21DA
....................             printf(lcd_putc,"Humedad Relativa     "); 
060EA:  MOVLW  22
060EC:  MOVWF  FF6
060EE:  MOVLW  06
060F0:  MOVWF  FF7
060F2:  CALL   22D2
....................             lcd_gotoxy(1,3); 
060F6:  MOVLW  01
060F8:  MOVLB  8
060FA:  MOVWF  x01
060FC:  MOVLW  03
060FE:  MOVWF  x02
06100:  MOVLB  0
06102:  CALL   21DA
....................             printf(lcd_putc,"     HR: %2.0f %%    ",HR);   
06106:  MOVLW  38
06108:  MOVWF  FF6
0610A:  MOVLW  06
0610C:  MOVWF  FF7
0610E:  MOVLW  09
06110:  MOVLB  7
06112:  MOVWF  xF3
06114:  MOVLB  0
06116:  CALL   4D24
0611A:  MOVLW  01
0611C:  MOVWF  FE9
0611E:  MOVFF  125,7F6
06122:  MOVFF  124,7F5
06126:  MOVFF  123,7F4
0612A:  MOVFF  122,7F3
0612E:  MOVLB  7
06130:  CLRF   xF7
06132:  MOVLB  0
06134:  CALL   4EC0
06138:  MOVLW  20
0613A:  MOVLB  8
0613C:  MOVWF  x00
0613E:  MOVLB  0
06140:  CALL   2254
06144:  MOVLW  25
06146:  MOVLB  8
06148:  MOVWF  x00
0614A:  MOVLB  0
0614C:  CALL   2254
06150:  MOVLW  49
06152:  MOVWF  FF6
06154:  MOVLW  06
06156:  MOVWF  FF7
06158:  MOVLW  04
0615A:  MOVLB  7
0615C:  MOVWF  xF3
0615E:  MOVLB  0
06160:  CALL   4D24
....................           
....................             if(UP){   
06164:  BSF    F92.5
06166:  BTFSC  F80.5
06168:  BRA    61AA
....................                delay_ms(200);HR+=1.0; 
0616A:  MOVLW  C8
0616C:  MOVLB  8
0616E:  MOVWF  x06
06170:  MOVLB  0
06172:  CALL   0CCE
06176:  BCF    FD8.1
06178:  MOVFF  125,847
0617C:  MOVFF  124,846
06180:  MOVFF  123,845
06184:  MOVFF  122,844
06188:  MOVLB  8
0618A:  CLRF   x4B
0618C:  CLRF   x4A
0618E:  CLRF   x49
06190:  MOVLW  7F
06192:  MOVWF  x48
06194:  MOVLB  0
06196:  CALL   0FCC
0619A:  MOVFF  03,125
0619E:  MOVFF  02,124
061A2:  MOVFF  01,123
061A6:  MOVFF  00,122
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
061AA:  BSF    F96.0
061AC:  BTFSC  F84.0
061AE:  BRA    61F0
....................                delay_ms(200);HR-=1.0; 
061B0:  MOVLW  C8
061B2:  MOVLB  8
061B4:  MOVWF  x06
061B6:  MOVLB  0
061B8:  CALL   0CCE
061BC:  BSF    FD8.1
061BE:  MOVFF  125,847
061C2:  MOVFF  124,846
061C6:  MOVFF  123,845
061CA:  MOVFF  122,844
061CE:  MOVLB  8
061D0:  CLRF   x4B
061D2:  CLRF   x4A
061D4:  CLRF   x49
061D6:  MOVLW  7F
061D8:  MOVWF  x48
061DA:  MOVLB  0
061DC:  CALL   0FCC
061E0:  MOVFF  03,125
061E4:  MOVFF  02,124
061E8:  MOVFF  01,123
061EC:  MOVFF  00,122
....................             } 
....................          }else if(OpcionMenu==5){ 
061F0:  BRA    6300
061F2:  MOVLB  7
061F4:  MOVF   48,W
061F6:  SUBLW  05
061F8:  BTFSS  FD8.2
061FA:  BRA    6302
....................             if(Media>80) 
061FC:  MOVF   59,W
061FE:  SUBLW  50
06200:  BC    6206
....................                Media=10; 
06202:  MOVLW  0A
06204:  MOVWF  59
....................             if(Media<10) 
06206:  MOVF   59,W
06208:  SUBLW  09
0620A:  BNC   6210
....................                Media=80; 
0620C:  MOVLW  50
0620E:  MOVWF  59
....................            
....................             lcd_gotoxy(1,2); 
06210:  MOVLW  01
06212:  MOVLB  8
06214:  MOVWF  x01
06216:  MOVLW  02
06218:  MOVWF  x02
0621A:  MOVLB  0
0621C:  CALL   21DA
....................             printf(lcd_putc,"      Media Movil    "); 
06220:  MOVLW  4E
06222:  MOVWF  FF6
06224:  MOVLW  06
06226:  MOVWF  FF7
06228:  CALL   22D2
....................             lcd_gotoxy(1,3); 
0622C:  MOVLW  01
0622E:  MOVLB  8
06230:  MOVWF  x01
06232:  MOVLW  03
06234:  MOVWF  x02
06236:  MOVLB  0
06238:  CALL   21DA
....................             printf(lcd_putc,"    Media: %02u    ",Media);   
0623C:  MOVLW  64
0623E:  MOVWF  FF6
06240:  MOVLW  06
06242:  MOVWF  FF7
06244:  MOVLW  0B
06246:  MOVLB  7
06248:  MOVWF  xF3
0624A:  MOVLB  0
0624C:  CALL   4D24
06250:  MOVFF  59,7EF
06254:  MOVLW  01
06256:  MOVLB  7
06258:  MOVWF  xF0
0625A:  MOVLB  0
0625C:  CALL   4D7A
06260:  MOVLW  73
06262:  MOVWF  FF6
06264:  MOVLW  06
06266:  MOVWF  FF7
06268:  MOVLW  04
0626A:  MOVLB  7
0626C:  MOVWF  xF3
0626E:  MOVLB  0
06270:  CALL   4D24
....................           
....................             if(UP){   
06274:  BSF    F92.5
06276:  BTFSC  F80.5
06278:  BRA    62BA
....................                delay_ms(200);HR+=1.0; 
0627A:  MOVLW  C8
0627C:  MOVLB  8
0627E:  MOVWF  x06
06280:  MOVLB  0
06282:  CALL   0CCE
06286:  BCF    FD8.1
06288:  MOVFF  125,847
0628C:  MOVFF  124,846
06290:  MOVFF  123,845
06294:  MOVFF  122,844
06298:  MOVLB  8
0629A:  CLRF   x4B
0629C:  CLRF   x4A
0629E:  CLRF   x49
062A0:  MOVLW  7F
062A2:  MOVWF  x48
062A4:  MOVLB  0
062A6:  CALL   0FCC
062AA:  MOVFF  03,125
062AE:  MOVFF  02,124
062B2:  MOVFF  01,123
062B6:  MOVFF  00,122
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
062BA:  BSF    F96.0
062BC:  BTFSC  F84.0
062BE:  BRA    6300
....................                delay_ms(200);HR-=1.0; 
062C0:  MOVLW  C8
062C2:  MOVLB  8
062C4:  MOVWF  x06
062C6:  MOVLB  0
062C8:  CALL   0CCE
062CC:  BSF    FD8.1
062CE:  MOVFF  125,847
062D2:  MOVFF  124,846
062D6:  MOVFF  123,845
062DA:  MOVFF  122,844
062DE:  MOVLB  8
062E0:  CLRF   x4B
062E2:  CLRF   x4A
062E4:  CLRF   x49
062E6:  MOVLW  7F
062E8:  MOVWF  x48
062EA:  MOVLB  0
062EC:  CALL   0FCC
062F0:  MOVFF  03,125
062F4:  MOVFF  02,124
062F8:  MOVFF  01,123
062FC:  MOVFF  00,122
06300:  MOVLB  7
....................             } 
....................          } 
....................       } 
06302:  GOTO   57B4
06306:  MOVLB  0
....................    } 
....................     
....................    if(UP && RIGHT){ 
06308:  BSF    F92.5
0630A:  BTFSC  F80.5
0630C:  BRA    6534
0630E:  BSF    F96.1
06310:  BTFSC  F84.1
06312:  BRA    6534
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
06314:  MOVLW  01
06316:  MOVLB  8
06318:  MOVWF  x01
0631A:  MOVWF  x02
0631C:  MOVLB  0
0631E:  CALL   21DA
....................          printf(lcd_putc,"  Tiempo de Trabajo  "); 
06322:  MOVLW  78
06324:  MOVWF  FF6
06326:  MOVLW  06
06328:  MOVWF  FF7
0632A:  CALL   22D2
....................          lcd_gotoxy(1,2); 
0632E:  MOVLW  01
06330:  MOVLB  8
06332:  MOVWF  x01
06334:  MOVLW  02
06336:  MOVWF  x02
06338:  MOVLB  0
0633A:  CALL   21DA
....................          printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
0633E:  MOVLW  8E
06340:  MOVWF  FF6
06342:  MOVLW  06
06344:  MOVWF  FF7
06346:  MOVLW  0B
06348:  MOVLB  7
0634A:  MOVWF  xF3
0634C:  MOVLB  0
0634E:  CALL   4D24
06352:  MOVLW  08
06354:  MOVWF  FE9
06356:  MOVFF  5D,7F0
0635A:  MOVFF  5C,7EF
0635E:  CALL   507C
06362:  MOVLW  20
06364:  MOVLB  8
06366:  MOVWF  x00
06368:  MOVLB  0
0636A:  CALL   2254
0636E:  MOVLW  20
06370:  MOVLB  8
06372:  MOVWF  x00
06374:  MOVLB  0
06376:  CALL   2254
0637A:  MOVLW  20
0637C:  MOVLB  8
0637E:  MOVWF  x00
06380:  MOVLB  0
06382:  CALL   2254
....................          lcd_gotoxy(1,4); 
06386:  MOVLW  01
06388:  MOVLB  8
0638A:  MOVWF  x01
0638C:  MOVLW  04
0638E:  MOVWF  x02
06390:  MOVLB  0
06392:  CALL   21DA
....................          printf(lcd_putc," RESET= Oprima < "); 
06396:  MOVLW  A2
06398:  MOVWF  FF6
0639A:  MOVLW  06
0639C:  MOVWF  FF7
0639E:  CALL   22D2
....................           
....................          if(IZQU){ 
063A2:  BSF    F96.2
063A4:  BTFSC  F84.2
063A6:  BRA    6532
....................          delay_ms(100); 
063A8:  MOVLW  64
063AA:  MOVLB  8
063AC:  MOVWF  x06
063AE:  MOVLB  0
063B0:  CALL   0CCE
....................             if(IZQU){ 
063B4:  BSF    F96.2
063B6:  BTFSC  F84.2
063B8:  BRA    6532
....................                write_eeprom(20,0); 
063BA:  CLRF   FAA
063BC:  MOVLW  14
063BE:  MOVWF  FA9
063C0:  CLRF   FA8
063C2:  BCF    FA6.6
063C4:  BCF    FA6.7
063C6:  BSF    FA6.2
063C8:  MOVF   FF2,W
063CA:  MOVWF  00
063CC:  BCF    FF2.6
063CE:  BCF    FF2.7
063D0:  MOVLB  F
063D2:  MOVLW  55
063D4:  MOVWF  FA7
063D6:  MOVLW  AA
063D8:  MOVWF  FA7
063DA:  BSF    FA6.1
063DC:  BTFSC  FA6.1
063DE:  BRA    63DC
063E0:  BCF    FA6.2
063E2:  MOVF   00,W
063E4:  IORWF  FF2,F
....................                delay_ms(20); 
063E6:  MOVLW  14
063E8:  MOVLB  8
063EA:  MOVWF  x06
063EC:  MOVLB  0
063EE:  CALL   0CCE
....................                write_eeprom(21,0); 
063F2:  CLRF   FAA
063F4:  MOVLW  15
063F6:  MOVWF  FA9
063F8:  CLRF   FA8
063FA:  BCF    FA6.6
063FC:  BCF    FA6.7
063FE:  BSF    FA6.2
06400:  MOVF   FF2,W
06402:  MOVWF  00
06404:  BCF    FF2.6
06406:  BCF    FF2.7
06408:  MOVLB  F
0640A:  MOVLW  55
0640C:  MOVWF  FA7
0640E:  MOVLW  AA
06410:  MOVWF  FA7
06412:  BSF    FA6.1
06414:  BTFSC  FA6.1
06416:  BRA    6414
06418:  BCF    FA6.2
0641A:  MOVF   00,W
0641C:  IORWF  FF2,F
....................                delay_ms(20); 
0641E:  MOVLW  14
06420:  MOVLB  8
06422:  MOVWF  x06
06424:  MOVLB  0
06426:  CALL   0CCE
....................                write_eeprom(18,0); 
0642A:  CLRF   FAA
0642C:  MOVLW  12
0642E:  MOVWF  FA9
06430:  CLRF   FA8
06432:  BCF    FA6.6
06434:  BCF    FA6.7
06436:  BSF    FA6.2
06438:  MOVF   FF2,W
0643A:  MOVWF  00
0643C:  BCF    FF2.6
0643E:  BCF    FF2.7
06440:  MOVLB  F
06442:  MOVLW  55
06444:  MOVWF  FA7
06446:  MOVLW  AA
06448:  MOVWF  FA7
0644A:  BSF    FA6.1
0644C:  BTFSC  FA6.1
0644E:  BRA    644C
06450:  BCF    FA6.2
06452:  MOVF   00,W
06454:  IORWF  FF2,F
....................                delay_ms(20); 
06456:  MOVLW  14
06458:  MOVLB  8
0645A:  MOVWF  x06
0645C:  MOVLB  0
0645E:  CALL   0CCE
....................                write_eeprom(19,0); 
06462:  CLRF   FAA
06464:  MOVLW  13
06466:  MOVWF  FA9
06468:  CLRF   FA8
0646A:  BCF    FA6.6
0646C:  BCF    FA6.7
0646E:  BSF    FA6.2
06470:  MOVF   FF2,W
06472:  MOVWF  00
06474:  BCF    FF2.6
06476:  BCF    FF2.7
06478:  MOVLB  F
0647A:  MOVLW  55
0647C:  MOVWF  FA7
0647E:  MOVLW  AA
06480:  MOVWF  FA7
06482:  BSF    FA6.1
06484:  BTFSC  FA6.1
06486:  BRA    6484
06488:  BCF    FA6.2
0648A:  MOVF   00,W
0648C:  IORWF  FF2,F
....................                delay_ms(20); 
0648E:  MOVLW  14
06490:  MOVLB  8
06492:  MOVWF  x06
06494:  MOVLB  0
06496:  CALL   0CCE
....................                lcd_gotoxy(1,1); 
0649A:  MOVLW  01
0649C:  MOVLB  8
0649E:  MOVWF  x01
064A0:  MOVWF  x02
064A2:  MOVLB  0
064A4:  CALL   21DA
....................                printf(lcd_putc,"                    "); 
064A8:  MOVLW  B4
064AA:  MOVWF  FF6
064AC:  MOVLW  06
064AE:  MOVWF  FF7
064B0:  CALL   22D2
....................                lcd_gotoxy(1,2); 
064B4:  MOVLW  01
064B6:  MOVLB  8
064B8:  MOVWF  x01
064BA:  MOVLW  02
064BC:  MOVWF  x02
064BE:  MOVLB  0
064C0:  CALL   21DA
....................                printf(lcd_putc,"  Borrando  Tiempo  "); 
064C4:  MOVLW  CA
064C6:  MOVWF  FF6
064C8:  MOVLW  06
064CA:  MOVWF  FF7
064CC:  CALL   22D2
....................                lcd_gotoxy(1,3); 
064D0:  MOVLW  01
064D2:  MOVLB  8
064D4:  MOVWF  x01
064D6:  MOVLW  03
064D8:  MOVWF  x02
064DA:  MOVLB  0
064DC:  CALL   21DA
....................                printf(lcd_putc,"    de Trabajo      "); 
064E0:  MOVLW  E0
064E2:  MOVWF  FF6
064E4:  MOVLW  06
064E6:  MOVWF  FF7
064E8:  CALL   22D2
....................                lcd_gotoxy(1,4); 
064EC:  MOVLW  01
064EE:  MOVLB  8
064F0:  MOVWF  x01
064F2:  MOVLW  04
064F4:  MOVWF  x02
064F6:  MOVLB  0
064F8:  CALL   21DA
....................                printf(lcd_putc,"                    ");  
064FC:  MOVLW  F6
064FE:  MOVWF  FF6
06500:  MOVLW  06
06502:  MOVWF  FF7
06504:  CALL   22D2
....................                delay_ms(1000); 
06508:  MOVLW  04
0650A:  MOVLB  7
0650C:  MOVWF  xEF
0650E:  MOVLW  FA
06510:  MOVLB  8
06512:  MOVWF  x06
06514:  MOVLB  0
06516:  CALL   0CCE
0651A:  MOVLB  7
0651C:  DECFSZ xEF,F
0651E:  BRA    650E
....................                printf(lcd_putc,"\f"); 
06520:  MOVLW  0C
06522:  MOVLB  8
06524:  MOVWF  x00
06526:  MOVLB  0
06528:  CALL   2254
....................                lcd_init(); 
0652C:  CALL   0D70
....................                reset_cpu(); 
06530:  RESET
....................             } 
....................          } 
....................       } 
06532:  BRA    6314
....................    } 
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
06534:  GOTO   513A
....................    if(VelMotor==20){ 
06538:  MOVF   xEF,W
0653A:  SUBLW  14
0653C:  BNZ   654A
....................       Motor_on; 
0653E:  BSF    F8B.2
06540:  BCF    F94.2
....................       Motor2_on;  
06542:  BSF    F8B.1
06544:  BCF    F94.1
....................       set_timer0(0); 
06546:  CLRF   FD7
06548:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
0654A:  MOVF   xEF,F
0654C:  BNZ   655A
....................       Motor_off; 
0654E:  BCF    F8B.2
06550:  BCF    F94.2
....................       Motor2_off;  
06552:  BCF    F8B.1
06554:  BCF    F94.1
....................       set_timer0(0); 
06556:  CLRF   FD7
06558:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
0655A:  MOVF   2B,F
0655C:  BTFSS  FD8.2
0655E:  BRA    6A16
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
06560:  MOVLW  01
06562:  MOVLB  8
06564:  MOVWF  x01
06566:  MOVWF  x02
06568:  MOVLB  0
0656A:  CALL   21DA
....................          printf(lcd_putc,"     Ingrese        "); 
0656E:  MOVLW  0C
06570:  MOVWF  FF6
06572:  MOVLW  07
06574:  MOVWF  FF7
06576:  CALL   22D2
....................          lcd_gotoxy(1,2); 
0657A:  MOVLW  01
0657C:  MOVLB  8
0657E:  MOVWF  x01
06580:  MOVLW  02
06582:  MOVWF  x02
06584:  MOVLB  0
06586:  CALL   21DA
....................          printf(lcd_putc,"    Contraseña      "); 
0658A:  MOVLW  22
0658C:  MOVWF  FF6
0658E:  MOVLW  07
06590:  MOVWF  FF7
06592:  CALL   22D2
....................          lcd_gotoxy(1,3); 
06596:  MOVLW  01
06598:  MOVLB  8
0659A:  MOVWF  x01
0659C:  MOVLW  03
0659E:  MOVWF  x02
065A0:  MOVLB  0
065A2:  CALL   21DA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
065A6:  MOVLW  38
065A8:  MOVWF  FF6
065AA:  MOVLW  07
065AC:  MOVWF  FF7
065AE:  MOVLW  0A
065B0:  MOVLB  7
065B2:  MOVWF  xF3
065B4:  MOVLB  0
065B6:  CALL   4D24
065BA:  MOVFF  4C,7EF
065BE:  MOVLW  1F
065C0:  MOVLB  7
065C2:  MOVWF  xF0
065C4:  MOVLB  0
065C6:  CALL   5302
065CA:  MOVFF  4D,7EF
065CE:  MOVLW  1F
065D0:  MOVLB  7
065D2:  MOVWF  xF0
065D4:  MOVLB  0
065D6:  CALL   5302
065DA:  MOVFF  4E,7EF
065DE:  MOVLW  1F
065E0:  MOVLB  7
065E2:  MOVWF  xF0
065E4:  MOVLB  0
065E6:  CALL   5302
065EA:  MOVFF  4F,7EF
065EE:  MOVLW  1F
065F0:  MOVLB  7
065F2:  MOVWF  xF0
065F4:  MOVLB  0
065F6:  CALL   5302
065FA:  MOVLW  20
065FC:  MOVLB  8
065FE:  MOVWF  x00
06600:  MOVLB  0
06602:  CALL   2254
06606:  MOVLW  20
06608:  MOVLB  8
0660A:  MOVWF  x00
0660C:  MOVLB  0
0660E:  CALL   2254
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
06612:  MOVFF  2E,801
06616:  MOVLW  04
06618:  MOVLB  8
0661A:  MOVWF  x02
0661C:  MOVLB  0
0661E:  CALL   21DA
....................          lcd_putc(t[2]); 
06622:  MOVFF  4B,800
06626:  CALL   2254
....................           
....................          if(unidad>11&&unidad<14){ 
0662A:  MOVF   2E,W
0662C:  SUBLW  0B
0662E:  BC    6656
06630:  MOVF   2E,W
06632:  SUBLW  0D
06634:  BNC   6656
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
06636:  MOVLW  01
06638:  SUBWF  2E,W
0663A:  MOVLB  7
0663C:  MOVWF  xEF
0663E:  MOVFF  FE8,801
06642:  MOVLW  04
06644:  MOVLB  8
06646:  MOVWF  x02
06648:  MOVLB  0
0664A:  CALL   21DA
....................             lcd_putc(t[1]); 
0664E:  MOVFF  4A,800
06652:  CALL   2254
....................          } 
....................           
....................          Cambio=OFF; 
06656:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
06658:  BSF    F92.5
0665A:  BTFSC  F80.5
0665C:  BRA    6698
....................          delay_ms(20); 
0665E:  MOVLW  14
06660:  MOVLB  8
06662:  MOVWF  x06
06664:  MOVLB  0
06666:  CALL   0CCE
....................          if(UP){ 
0666A:  BSF    F92.5
0666C:  BTFSC  F80.5
0666E:  BRA    6696
....................             if(Flanco == 0) { 
06670:  BTFSC  29.3
06672:  BRA    6696
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
06674:  MOVLW  0B
06676:  SUBWF  2E,W
06678:  CLRF   03
0667A:  ADDLW  4C
0667C:  MOVWF  FE9
0667E:  MOVLW  00
06680:  ADDWFC 03,W
06682:  MOVWF  FEA
06684:  INCF   FEF,F
06686:  BSF    29.3
06688:  MOVLW  1E
0668A:  MOVLB  8
0668C:  MOVWF  x06
0668E:  MOVLB  0
06690:  CALL   0CCE
06694:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06696:  BRA    669A
....................          Flanco = 0; 
06698:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
0669A:  BSF    F96.0
0669C:  BTFSC  F84.0
0669E:  BRA    66DA
....................          delay_ms(20); 
066A0:  MOVLW  14
066A2:  MOVLB  8
066A4:  MOVWF  x06
066A6:  MOVLB  0
066A8:  CALL   0CCE
....................          if(DOWN){ 
066AC:  BSF    F96.0
066AE:  BTFSC  F84.0
066B0:  BRA    66D8
....................             if(Flanco2 == 0) { 
066B2:  BTFSC  29.5
066B4:  BRA    66D8
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
066B6:  MOVLW  0B
066B8:  SUBWF  2E,W
066BA:  CLRF   03
066BC:  ADDLW  4C
066BE:  MOVWF  FE9
066C0:  MOVLW  00
066C2:  ADDWFC 03,W
066C4:  MOVWF  FEA
066C6:  DECF   FEF,F
066C8:  BSF    29.5
066CA:  MOVLW  1E
066CC:  MOVLB  8
066CE:  MOVWF  x06
066D0:  MOVLB  0
066D2:  CALL   0CCE
066D6:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
066D8:  BRA    66DC
....................          Flanco2 = 0; 
066DA:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
066DC:  BSF    F96.1
066DE:  BTFSC  F84.1
066E0:  BRA    6718
....................          delay_ms(20); 
066E2:  MOVLW  14
066E4:  MOVLB  8
066E6:  MOVWF  x06
066E8:  MOVLB  0
066EA:  CALL   0CCE
....................          if(RIGHT){ 
066EE:  BSF    F96.1
066F0:  BTFSC  F84.1
066F2:  BRA    6716
....................             if(Flanco1 == 0) { 
066F4:  BTFSC  29.4
066F6:  BRA    6716
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
066F8:  BSF    29.4
066FA:  INCF   2E,F
066FC:  MOVLW  1E
066FE:  MOVLB  8
06700:  MOVWF  x06
06702:  MOVLB  0
06704:  CALL   0CCE
06708:  MOVLW  0C
0670A:  MOVLB  8
0670C:  MOVWF  x00
0670E:  MOVLB  0
06710:  CALL   2254
06714:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06716:  BRA    671A
....................          Flanco1 = 0; 
06718:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
0671A:  BSF    F96.2
0671C:  BTFSC  F84.2
0671E:  BRA    6756
....................          delay_ms(150); 
06720:  MOVLW  96
06722:  MOVLB  8
06724:  MOVWF  x06
06726:  MOVLB  0
06728:  CALL   0CCE
....................          if(IZQU){ 
0672C:  BSF    F96.2
0672E:  BTFSC  F84.2
06730:  BRA    6754
....................             if(Flanco3 == 0){ 
06732:  BTFSC  29.6
06734:  BRA    6754
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
06736:  BSF    29.6
06738:  DECF   2E,F
0673A:  MOVLW  1E
0673C:  MOVLB  8
0673E:  MOVWF  x06
06740:  MOVLB  0
06742:  CALL   0CCE
06746:  MOVLW  0C
06748:  MOVLB  8
0674A:  MOVWF  x00
0674C:  MOVLB  0
0674E:  CALL   2254
06752:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06754:  BRA    6758
....................         Flanco3 = 0; 
06756:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
06758:  MOVLW  0B
0675A:  SUBWF  2E,W
0675C:  CLRF   03
0675E:  ADDLW  4C
06760:  MOVWF  FE9
06762:  MOVLW  00
06764:  ADDWFC 03,W
06766:  MOVWF  FEA
06768:  BTFSC  FEF.7
0676A:  BRA    676E
0676C:  BRA    6782
....................          clave[unidad-11]=9; 
0676E:  MOVLW  0B
06770:  SUBWF  2E,W
06772:  CLRF   03
06774:  ADDLW  4C
06776:  MOVWF  FE9
06778:  MOVLW  00
0677A:  ADDWFC 03,W
0677C:  MOVWF  FEA
0677E:  MOVLW  09
06780:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
06782:  MOVLW  0B
06784:  SUBWF  2E,W
06786:  CLRF   03
06788:  ADDLW  4C
0678A:  MOVWF  FE9
0678C:  MOVLW  00
0678E:  ADDWFC 03,W
06790:  MOVWF  FEA
06792:  BTFSC  FEF.7
06794:  BRA    67AE
06796:  MOVF   FEF,W
06798:  SUBLW  09
0679A:  BC    67AE
....................          clave[unidad-11]=0; 
0679C:  MOVLW  0B
0679E:  SUBWF  2E,W
067A0:  CLRF   03
067A2:  ADDLW  4C
067A4:  MOVWF  FE9
067A6:  MOVLW  00
067A8:  ADDWFC 03,W
067AA:  MOVWF  FEA
067AC:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
067AE:  MOVF   2E,W
067B0:  SUBLW  0A
067B2:  BNC   67B8
....................          unidad=11; 
067B4:  MOVLW  0B
067B6:  MOVWF  2E
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
067B8:  MOVF   2E,W
067BA:  SUBLW  0E
067BC:  BTFSC  FD8.0
067BE:  BRA    6A16
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
067C0:  MOVF   4C,W
067C2:  SUBLW  03
067C4:  BTFSS  FD8.2
067C6:  BRA    68BC
067C8:  MOVF   4D,W
067CA:  SUBLW  08
067CC:  BTFSS  FD8.2
067CE:  BRA    68BC
067D0:  MOVF   4E,W
067D2:  SUBLW  09
067D4:  BNZ   68BC
067D6:  MOVF   4F,W
067D8:  SUBLW  02
067DA:  BNZ   68BC
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
067DC:  CLRF   FAA
067DE:  CLRF   FA9
067E0:  CLRF   FA8
067E2:  BCF    FA6.6
067E4:  BCF    FA6.7
067E6:  BSF    FA6.2
067E8:  MOVF   FF2,W
067EA:  MOVWF  00
067EC:  BCF    FF2.6
067EE:  BCF    FF2.7
067F0:  MOVLB  F
067F2:  MOVLW  55
067F4:  MOVWF  FA7
067F6:  MOVLW  AA
067F8:  MOVWF  FA7
067FA:  BSF    FA6.1
067FC:  BTFSC  FA6.1
067FE:  BRA    67FC
06800:  BCF    FA6.2
06802:  MOVF   00,W
06804:  IORWF  FF2,F
06806:  MOVLW  14
06808:  MOVLB  8
0680A:  MOVWF  x06
0680C:  MOVLB  0
0680E:  CALL   0CCE
06812:  CLRF   FAA
06814:  MOVLW  01
06816:  MOVWF  FA9
06818:  CLRF   FA8
0681A:  BCF    FA6.6
0681C:  BCF    FA6.7
0681E:  BSF    FA6.2
06820:  MOVF   FF2,W
06822:  MOVWF  00
06824:  BCF    FF2.6
06826:  BCF    FF2.7
06828:  MOVLB  F
0682A:  MOVLW  55
0682C:  MOVWF  FA7
0682E:  MOVLW  AA
06830:  MOVWF  FA7
06832:  BSF    FA6.1
06834:  BTFSC  FA6.1
06836:  BRA    6834
06838:  BCF    FA6.2
0683A:  MOVF   00,W
0683C:  IORWF  FF2,F
0683E:  MOVLW  14
06840:  MOVLB  8
06842:  MOVWF  x06
06844:  MOVLB  0
06846:  CALL   0CCE
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
0684A:  CLRF   FAA
0684C:  MOVLW  02
0684E:  MOVWF  FA9
06850:  CLRF   FA8
06852:  BCF    FA6.6
06854:  BCF    FA6.7
06856:  BSF    FA6.2
06858:  MOVF   FF2,W
0685A:  MOVWF  00
0685C:  BCF    FF2.6
0685E:  BCF    FF2.7
06860:  MOVLB  F
06862:  MOVLW  55
06864:  MOVWF  FA7
06866:  MOVLW  AA
06868:  MOVWF  FA7
0686A:  BSF    FA6.1
0686C:  BTFSC  FA6.1
0686E:  BRA    686C
06870:  BCF    FA6.2
06872:  MOVF   00,W
06874:  IORWF  FF2,F
06876:  MOVLW  14
06878:  MOVLB  8
0687A:  MOVWF  x06
0687C:  MOVLB  0
0687E:  CALL   0CCE
06882:  CLRF   FAA
06884:  MOVLW  03
06886:  MOVWF  FA9
06888:  CLRF   FA8
0688A:  BCF    FA6.6
0688C:  BCF    FA6.7
0688E:  BSF    FA6.2
06890:  MOVF   FF2,W
06892:  MOVWF  00
06894:  BCF    FF2.6
06896:  BCF    FF2.7
06898:  MOVLB  F
0689A:  MOVLW  55
0689C:  MOVWF  FA7
0689E:  MOVLW  AA
068A0:  MOVWF  FA7
068A2:  BSF    FA6.1
068A4:  BTFSC  FA6.1
068A6:  BRA    68A4
068A8:  BCF    FA6.2
068AA:  MOVF   00,W
068AC:  IORWF  FF2,F
068AE:  MOVLW  14
068B0:  MOVLB  8
068B2:  MOVWF  x06
068B4:  MOVLB  0
068B6:  CALL   0CCE
....................              reset_cpu(); 
068BA:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
068BC:  MOVF   50,W
068BE:  SUBWF  4C,W
068C0:  BNZ   6980
068C2:  MOVF   51,W
068C4:  SUBWF  4D,W
068C6:  BNZ   6980
068C8:  MOVF   52,W
068CA:  SUBWF  4E,W
068CC:  BNZ   6980
068CE:  MOVF   53,W
068D0:  SUBWF  4F,W
068D2:  BNZ   6980
....................             lcd_gotoxy(1,1); 
068D4:  MOVLW  01
068D6:  MOVLB  8
068D8:  MOVWF  x01
068DA:  MOVWF  x02
068DC:  MOVLB  0
068DE:  CALL   21DA
....................             printf(lcd_putc,"                   "); 
068E2:  MOVLW  4E
068E4:  MOVWF  FF6
068E6:  MOVLW  07
068E8:  MOVWF  FF7
068EA:  CALL   22D2
....................             lcd_gotoxy(1,2); 
068EE:  MOVLW  01
068F0:  MOVLB  8
068F2:  MOVWF  x01
068F4:  MOVLW  02
068F6:  MOVWF  x02
068F8:  MOVLB  0
068FA:  CALL   21DA
....................             printf(lcd_putc,"     Contraseña    "); 
068FE:  MOVLW  62
06900:  MOVWF  FF6
06902:  MOVLW  07
06904:  MOVWF  FF7
06906:  CALL   22D2
....................             lcd_gotoxy(1,3); 
0690A:  MOVLW  01
0690C:  MOVLB  8
0690E:  MOVWF  x01
06910:  MOVLW  03
06912:  MOVWF  x02
06914:  MOVLB  0
06916:  CALL   21DA
....................             printf(lcd_putc,"      Correcta     "); 
0691A:  MOVLW  76
0691C:  MOVWF  FF6
0691E:  MOVLW  07
06920:  MOVWF  FF7
06922:  CALL   22D2
....................             lcd_gotoxy(1,4); 
06926:  MOVLW  01
06928:  MOVLB  8
0692A:  MOVWF  x01
0692C:  MOVLW  04
0692E:  MOVWF  x02
06930:  MOVLB  0
06932:  CALL   21DA
....................             printf(lcd_putc,"                   "); 
06936:  MOVLW  8A
06938:  MOVWF  FF6
0693A:  MOVLW  07
0693C:  MOVWF  FF7
0693E:  CALL   22D2
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
06942:  MOVLW  04
06944:  MOVLB  7
06946:  MOVWF  xEF
06948:  MOVLW  FA
0694A:  MOVLB  8
0694C:  MOVWF  x06
0694E:  MOVLB  0
06950:  CALL   0CCE
06954:  MOVLB  7
06956:  DECFSZ xEF,F
06958:  BRA    6948
0695A:  MOVLW  32
0695C:  MOVWF  2B
0695E:  MOVLW  0B
06960:  MOVWF  2E
06962:  MOVLW  0C
06964:  MOVLB  8
06966:  MOVWF  x00
06968:  MOVLB  0
0696A:  CALL   2254
0696E:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON;calculaDensidad(); 
06970:  CLRF   4C
06972:  CLRF   4D
06974:  CLRF   4E
06976:  CLRF   4F
06978:  BSF    2A.7
0697A:  CALL   35F2
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
0697E:  BRA    6A16
....................             lcd_gotoxy(1,1); 
06980:  MOVLW  01
06982:  MOVLB  8
06984:  MOVWF  x01
06986:  MOVWF  x02
06988:  MOVLB  0
0698A:  CALL   21DA
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
0698E:  MOVLW  01
06990:  MOVLB  8
06992:  MOVWF  x01
06994:  MOVLW  02
06996:  MOVWF  x02
06998:  MOVLB  0
0699A:  CALL   21DA
....................             printf(lcd_putc,"     Contraseña    "); 
0699E:  MOVLW  9E
069A0:  MOVWF  FF6
069A2:  MOVLW  07
069A4:  MOVWF  FF7
069A6:  CALL   22D2
....................             lcd_gotoxy(1,3); 
069AA:  MOVLW  01
069AC:  MOVLB  8
069AE:  MOVWF  x01
069B0:  MOVLW  03
069B2:  MOVWF  x02
069B4:  MOVLB  0
069B6:  CALL   21DA
....................             printf(lcd_putc,"     Incorrecta    "); 
069BA:  MOVLW  B2
069BC:  MOVWF  FF6
069BE:  MOVLW  07
069C0:  MOVWF  FF7
069C2:  CALL   22D2
....................             lcd_gotoxy(1,4); 
069C6:  MOVLW  01
069C8:  MOVLB  8
069CA:  MOVWF  x01
069CC:  MOVLW  04
069CE:  MOVWF  x02
069D0:  MOVLB  0
069D2:  CALL   21DA
....................             printf(lcd_putc,"                   "); 
069D6:  MOVLW  C6
069D8:  MOVWF  FF6
069DA:  MOVLW  07
069DC:  MOVWF  FF7
069DE:  CALL   22D2
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
069E2:  MOVLW  04
069E4:  MOVLB  7
069E6:  MOVWF  xEF
069E8:  MOVLW  FA
069EA:  MOVLB  8
069EC:  MOVWF  x06
069EE:  MOVLB  0
069F0:  CALL   0CCE
069F4:  MOVLB  7
069F6:  DECFSZ xEF,F
069F8:  BRA    69E8
069FA:  MOVLW  0B
069FC:  MOVWF  2E
069FE:  MOVLW  0C
06A00:  MOVLB  8
06A02:  MOVWF  x00
06A04:  MOVLB  0
06A06:  CALL   2254
06A0A:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
06A0C:  CLRF   4C
06A0E:  CLRF   4D
06A10:  CLRF   4E
06A12:  CLRF   4F
06A14:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
06A16:  DECFSZ 2B,W
06A18:  BRA    6CAC
....................       EliminaRuido(); 
06A1A:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
06A1E:  MOVLW  01
06A20:  MOVLB  8
06A22:  MOVWF  x01
06A24:  MOVWF  x02
06A26:  MOVLB  0
06A28:  CALL   21DA
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
06A2C:  MOVLW  DA
06A2E:  MOVWF  FF6
06A30:  MOVLW  07
06A32:  MOVWF  FF7
06A34:  CALL   22D2
....................          mensajes(1+paso,2); 
06A38:  MOVLW  01
06A3A:  ADDWF  47,W
06A3C:  MOVLB  7
06A3E:  MOVWF  xEF
06A40:  MOVWF  xF0
06A42:  MOVLW  02
06A44:  MOVWF  xF1
06A46:  MOVLB  0
06A48:  CALL   53E8
....................          mensajes(2+paso,3); 
06A4C:  MOVLW  02
06A4E:  ADDWF  47,W
06A50:  MOVLB  7
06A52:  MOVWF  xEF
06A54:  MOVWF  xF0
06A56:  MOVLW  03
06A58:  MOVWF  xF1
06A5A:  MOVLB  0
06A5C:  CALL   53E8
....................          mensajes(3+paso,4); 
06A60:  MOVLW  03
06A62:  ADDWF  47,W
06A64:  MOVLB  7
06A66:  MOVWF  xEF
06A68:  MOVWF  xF0
06A6A:  MOVLW  04
06A6C:  MOVWF  xF1
06A6E:  MOVLB  0
06A70:  CALL   53E8
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
06A74:  MOVLW  01
06A76:  MOVLB  8
06A78:  MOVWF  x01
06A7A:  MOVFF  2F,802
06A7E:  MOVLB  0
06A80:  CALL   21DA
....................         lcd_putc(t[0]); 
06A84:  MOVFF  49,800
06A88:  CALL   2254
....................  
....................         if(Flecha==2) 
06A8C:  MOVF   2F,W
06A8E:  SUBLW  02
06A90:  BNZ   6AC2
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
06A92:  MOVLW  01
06A94:  MOVLB  8
06A96:  MOVWF  x01
06A98:  MOVLW  04
06A9A:  MOVWF  x02
06A9C:  MOVLB  0
06A9E:  CALL   21DA
....................             lcd_putc(t[1]); 
06AA2:  MOVFF  4A,800
06AA6:  CALL   2254
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
06AAA:  MOVLW  01
06AAC:  MOVLB  8
06AAE:  MOVWF  x01
06AB0:  MOVLW  03
06AB2:  MOVWF  x02
06AB4:  MOVLB  0
06AB6:  CALL   21DA
....................             lcd_putc(t[1]); 
06ABA:  MOVFF  4A,800
06ABE:  CALL   2254
....................           } 
....................          
....................         if(Flecha==4) 
06AC2:  MOVF   2F,W
06AC4:  SUBLW  04
06AC6:  BNZ   6AF8
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
06AC8:  MOVLW  01
06ACA:  MOVLB  8
06ACC:  MOVWF  x01
06ACE:  MOVLW  02
06AD0:  MOVWF  x02
06AD2:  MOVLB  0
06AD4:  CALL   21DA
....................             lcd_putc(t[1]); 
06AD8:  MOVFF  4A,800
06ADC:  CALL   2254
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
06AE0:  MOVLW  01
06AE2:  MOVLB  8
06AE4:  MOVWF  x01
06AE6:  MOVLW  03
06AE8:  MOVWF  x02
06AEA:  MOVLB  0
06AEC:  CALL   21DA
....................             lcd_putc(t[1]); 
06AF0:  MOVFF  4A,800
06AF4:  CALL   2254
....................           } 
....................          
....................         if(Flecha==3) 
06AF8:  MOVF   2F,W
06AFA:  SUBLW  03
06AFC:  BNZ   6B2E
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
06AFE:  MOVLW  01
06B00:  MOVLB  8
06B02:  MOVWF  x01
06B04:  MOVLW  04
06B06:  MOVWF  x02
06B08:  MOVLB  0
06B0A:  CALL   21DA
....................             lcd_putc(t[1]); 
06B0E:  MOVFF  4A,800
06B12:  CALL   2254
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
06B16:  MOVLW  01
06B18:  MOVLB  8
06B1A:  MOVWF  x01
06B1C:  MOVLW  02
06B1E:  MOVWF  x02
06B20:  MOVLB  0
06B22:  CALL   21DA
....................             lcd_putc(t[1]); 
06B26:  MOVFF  4A,800
06B2A:  CALL   2254
....................           } 
....................          Cambio=OFF; 
06B2E:  BCF    2A.7
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
06B30:  BSF    F92.5
06B32:  BTFSC  F80.5
06B34:  BRA    6B68
....................          delay_ms(20); 
06B36:  MOVLW  14
06B38:  MOVLB  8
06B3A:  MOVWF  x06
06B3C:  MOVLB  0
06B3E:  CALL   0CCE
....................          if(UP){ 
06B42:  BSF    F92.5
06B44:  BTFSC  F80.5
06B46:  BRA    6B66
....................             if(Flanco == 0){ 
06B48:  BTFSC  29.3
06B4A:  BRA    6B66
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
06B4C:  DECF   31,F
06B4E:  DECF   2F,F
06B50:  MOVLW  01
06B52:  ADDWF  2F,W
06B54:  MOVWF  30
06B56:  BSF    29.3
06B58:  MOVLW  1E
06B5A:  MOVLB  8
06B5C:  MOVWF  x06
06B5E:  MOVLB  0
06B60:  CALL   0CCE
06B64:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06B66:  BRA    6B6A
....................          Flanco = 0; 
06B68:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
06B6A:  BSF    F96.0
06B6C:  BTFSC  F84.0
06B6E:  BRA    6BA2
....................          delay_ms(20); 
06B70:  MOVLW  14
06B72:  MOVLB  8
06B74:  MOVWF  x06
06B76:  MOVLB  0
06B78:  CALL   0CCE
....................          if(DOWN){ 
06B7C:  BSF    F96.0
06B7E:  BTFSC  F84.0
06B80:  BRA    6BA0
....................             if(Flanco2 == 0){ 
06B82:  BTFSC  29.5
06B84:  BRA    6BA0
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
06B86:  INCF   31,F
06B88:  INCF   2F,F
06B8A:  MOVLW  01
06B8C:  SUBWF  2F,W
06B8E:  MOVWF  30
06B90:  BSF    29.5
06B92:  MOVLW  1E
06B94:  MOVLB  8
06B96:  MOVWF  x06
06B98:  MOVLB  0
06B9A:  CALL   0CCE
06B9E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06BA0:  BRA    6BA4
....................          Flanco2 = 0; 
06BA2:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
06BA4:  MOVF   31,W
06BA6:  SUBWF  33,W
06BA8:  BC    6BBA
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
06BAA:  INCF   47,F
06BAC:  MOVFF  31,33
06BB0:  MOVLW  02
06BB2:  SUBWF  33,W
06BB4:  MOVWF  32
06BB6:  MOVLW  04
06BB8:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
06BBA:  MOVF   32,W
06BBC:  SUBWF  31,W
06BBE:  BC    6BD0
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
06BC0:  DECF   47,F
06BC2:  MOVFF  31,32
06BC6:  MOVLW  02
06BC8:  ADDWF  32,W
06BCA:  MOVWF  33
06BCC:  MOVLW  02
06BCE:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
06BD0:  MOVF   31,W
06BD2:  SUBWF  2C,W
06BD4:  BC    6BE8
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
06BD6:  MOVFF  2D,31
06BDA:  MOVLW  02
06BDC:  MOVWF  2F
06BDE:  CLRF   47
06BE0:  MOVFF  31,32
06BE4:  ADDWF  32,W
06BE6:  MOVWF  33
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
06BE8:  MOVF   2D,W
06BEA:  SUBWF  31,W
06BEC:  BC    6C04
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
06BEE:  MOVFF  2C,31
06BF2:  MOVLW  04
06BF4:  MOVWF  2F
06BF6:  SUBWF  2C,W
06BF8:  MOVWF  47
06BFA:  MOVFF  31,33
06BFE:  MOVLW  02
06C00:  SUBWF  33,W
06C02:  MOVWF  32
....................       } 
....................          
....................       if(paso<0) 
06C04:  BTFSC  47.7
06C06:  BRA    6C0A
06C08:  BRA    6C0C
....................          paso=0; 
06C0A:  CLRF   47
....................           
....................       if(RIGHT){// Si oprime derecha 
06C0C:  BSF    F96.1
06C0E:  BTFSC  F84.1
06C10:  BRA    6C68
....................          delay_ms(20); 
06C12:  MOVLW  14
06C14:  MOVLB  8
06C16:  MOVWF  x06
06C18:  MOVLB  0
06C1A:  CALL   0CCE
....................          if(RIGHT){ 
06C1E:  BSF    F96.1
06C20:  BTFSC  F84.1
06C22:  BRA    6C64
....................             if(Flanco1 == 0){ 
06C24:  BTFSC  29.4
06C26:  BRA    6C64
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
06C28:  BSF    29.4
06C2A:  MOVFF  31,2B
06C2E:  MOVLW  03
06C30:  MOVWF  2F
06C32:  MOVLW  02
06C34:  MOVLB  7
06C36:  MOVWF  xEF
06C38:  MOVLW  96
06C3A:  MOVLB  8
06C3C:  MOVWF  x06
06C3E:  MOVLB  0
06C40:  CALL   0CCE
06C44:  MOVLB  7
06C46:  DECFSZ xEF,F
06C48:  BRA    6C38
06C4A:  MOVLW  0C
06C4C:  MOVLB  8
06C4E:  MOVWF  x00
06C50:  MOVLB  0
06C52:  CALL   2254
....................                if(Menu==6){ 
06C56:  MOVF   2B,W
06C58:  SUBLW  06
06C5A:  BNZ   6C64
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
06C5C:  CLRF   4C
06C5E:  CLRF   4D
06C60:  CLRF   4E
06C62:  CLRF   4F
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
06C64:  BSF    2A.7
....................       }else{ 
06C66:  BRA    6C6A
....................         Flanco1 = 0; 
06C68:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
06C6A:  BSF    F96.2
06C6C:  BTFSC  F84.2
06C6E:  BRA    6CAC
....................          delay_ms(20); 
06C70:  MOVLW  14
06C72:  MOVLB  8
06C74:  MOVWF  x06
06C76:  MOVLB  0
06C78:  CALL   0CCE
....................          if(IZQU){ 
06C7C:  BSF    F96.2
06C7E:  BTFSC  F84.2
06C80:  BRA    6CAC
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
06C82:  MOVLW  02
06C84:  MOVLB  7
06C86:  MOVWF  xEF
06C88:  MOVLW  FA
06C8A:  MOVLB  8
06C8C:  MOVWF  x06
06C8E:  MOVLB  0
06C90:  CALL   0CCE
06C94:  MOVLB  7
06C96:  DECFSZ xEF,F
06C98:  BRA    6C88
06C9A:  MOVLW  32
06C9C:  MOVWF  2B
06C9E:  MOVLW  0C
06CA0:  MOVLB  8
06CA2:  MOVWF  x00
06CA4:  MOVLB  0
06CA6:  CALL   2254
06CAA:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
06CAC:  MOVF   2B,W
06CAE:  SUBLW  02
06CB0:  BTFSS  FD8.2
06CB2:  BRA    6F98
....................    EliminaRuido(); 
06CB4:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
06CB8:  MOVLW  01
06CBA:  MOVLB  8
06CBC:  MOVWF  x01
06CBE:  MOVWF  x02
06CC0:  MOVLB  0
06CC2:  CALL   21DA
....................       printf(lcd_putc,"    Temporizador     "); 
06CC6:  MOVLW  F0
06CC8:  MOVWF  FF6
06CCA:  MOVLW  07
06CCC:  MOVWF  FF7
06CCE:  CALL   22D2
....................       lcd_gotoxy(1,2); 
06CD2:  MOVLW  01
06CD4:  MOVLB  8
06CD6:  MOVWF  x01
06CD8:  MOVLW  02
06CDA:  MOVWF  x02
06CDC:  MOVLB  0
06CDE:  CALL   21DA
....................       printf(lcd_putc,"       Luz UV        "); 
06CE2:  MOVLW  06
06CE4:  MOVWF  FF6
06CE6:  MOVLW  08
06CE8:  MOVWF  FF7
06CEA:  CALL   22D2
....................       lcd_gotoxy(6,3); 
06CEE:  MOVLW  06
06CF0:  MOVLB  8
06CF2:  MOVWF  x01
06CF4:  MOVLW  03
06CF6:  MOVWF  x02
06CF8:  MOVLB  0
06CFA:  CALL   21DA
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
06CFE:  MOVFF  3C,7EF
06D02:  MOVLW  03
06D04:  MOVLB  7
06D06:  MOVWF  xF0
06D08:  MOVLB  0
06D0A:  CALL   4D7A
06D0E:  MOVLW  3A
06D10:  MOVLB  8
06D12:  MOVWF  x00
06D14:  MOVLB  0
06D16:  CALL   2254
06D1A:  MOVFF  3D,7EF
06D1E:  MOVLW  01
06D20:  MOVLB  7
06D22:  MOVWF  xF0
06D24:  MOVLB  0
06D26:  CALL   4D7A
06D2A:  MOVLW  25
06D2C:  MOVWF  FF6
06D2E:  MOVLW  08
06D30:  MOVWF  FF7
06D32:  MOVLW  08
06D34:  MOVLB  7
06D36:  MOVWF  xF3
06D38:  MOVLB  0
06D3A:  CALL   4D24
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
06D3E:  MOVLW  06
06D40:  ADDWF  41,W
06D42:  MOVLB  7
06D44:  MOVWF  xEF
06D46:  MOVFF  FE8,801
06D4A:  MOVLW  04
06D4C:  MOVLB  8
06D4E:  MOVWF  x02
06D50:  MOVLB  0
06D52:  CALL   21DA
....................       lcd_putc(t[2]); 
06D56:  MOVFF  4B,800
06D5A:  CALL   2254
....................        
....................       Cambio=OFF; 
06D5E:  BCF    2A.7
.................... //   } 
....................     
....................    if(UP) 
06D60:  BSF    F92.5
06D62:  BTFSC  F80.5
06D64:  BRA    6DCA
....................    { 
....................       delay_ms(20); 
06D66:  MOVLW  14
06D68:  MOVLB  8
06D6A:  MOVWF  x06
06D6C:  MOVLB  0
06D6E:  CALL   0CCE
....................       if(UP){ 
06D72:  BSF    F92.5
06D74:  BTFSC  F80.5
06D76:  BRA    6DCA
....................          if(unidad2==1) 
06D78:  DECFSZ 41,W
06D7A:  BRA    6DA0
....................          { 
....................             if(tempo_minutos_pro<240) 
06D7C:  MOVF   3C,W
06D7E:  SUBLW  EF
06D80:  BNC   6DA0
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
06D82:  MOVLW  05
06D84:  ADDWF  3C,F
06D86:  MOVLW  02
06D88:  MOVLB  7
06D8A:  MOVWF  xEF
06D8C:  MOVLW  96
06D8E:  MOVLB  8
06D90:  MOVWF  x06
06D92:  MOVLB  0
06D94:  CALL   0CCE
06D98:  MOVLB  7
06D9A:  DECFSZ xEF,F
06D9C:  BRA    6D8C
06D9E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
06DA0:  MOVF   41,W
06DA2:  SUBLW  04
06DA4:  BNZ   6DC8
....................          { 
....................             if(tempo_segundos_pro<59) 
06DA6:  MOVF   3D,W
06DA8:  SUBLW  3A
06DAA:  BNC   6DC8
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
06DAC:  INCF   3D,F
06DAE:  MOVLW  02
06DB0:  MOVLB  7
06DB2:  MOVWF  xEF
06DB4:  MOVLW  96
06DB6:  MOVLB  8
06DB8:  MOVWF  x06
06DBA:  MOVLB  0
06DBC:  CALL   0CCE
06DC0:  MOVLB  7
06DC2:  DECFSZ xEF,F
06DC4:  BRA    6DB4
06DC6:  MOVLB  0
....................             } 
....................          }      
....................       Cambio=ON; 
06DC8:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(DOWN) 
06DCA:  BSF    F96.0
06DCC:  BTFSC  F84.0
06DCE:  BRA    6E30
....................    { 
....................       delay_ms(20); 
06DD0:  MOVLW  14
06DD2:  MOVLB  8
06DD4:  MOVWF  x06
06DD6:  MOVLB  0
06DD8:  CALL   0CCE
....................       if(DOWN){ 
06DDC:  BSF    F96.0
06DDE:  BTFSC  F84.0
06DE0:  BRA    6E30
....................          if(unidad2==1) 
06DE2:  DECFSZ 41,W
06DE4:  BRA    6E08
....................          { 
....................             if(tempo_minutos_pro>0) 
06DE6:  MOVF   3C,F
06DE8:  BZ    6E08
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
06DEA:  MOVLW  05
06DEC:  SUBWF  3C,F
06DEE:  MOVLW  02
06DF0:  MOVLB  7
06DF2:  MOVWF  xEF
06DF4:  MOVLW  96
06DF6:  MOVLB  8
06DF8:  MOVWF  x06
06DFA:  MOVLB  0
06DFC:  CALL   0CCE
06E00:  MOVLB  7
06E02:  DECFSZ xEF,F
06E04:  BRA    6DF4
06E06:  MOVLB  0
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
06E08:  MOVF   41,W
06E0A:  SUBLW  04
06E0C:  BNZ   6E2E
....................          { 
....................             if(tempo_segundos_pro>0) 
06E0E:  MOVF   3D,F
06E10:  BZ    6E2E
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
06E12:  DECF   3D,F
06E14:  MOVLW  02
06E16:  MOVLB  7
06E18:  MOVWF  xEF
06E1A:  MOVLW  96
06E1C:  MOVLB  8
06E1E:  MOVWF  x06
06E20:  MOVLB  0
06E22:  CALL   0CCE
06E26:  MOVLB  7
06E28:  DECFSZ xEF,F
06E2A:  BRA    6E1A
06E2C:  MOVLB  0
....................             }    
....................          } 
....................       Cambio=ON; 
06E2E:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
06E30:  BSF    F96.1
06E32:  BTFSC  F84.1
06E34:  BRA    6E82
....................    { 
....................       delay_ms(20); 
06E36:  MOVLW  14
06E38:  MOVLB  8
06E3A:  MOVWF  x06
06E3C:  MOVLB  0
06E3E:  CALL   0CCE
....................       if(RIGHT){ 
06E42:  BSF    F96.1
06E44:  BTFSC  F84.1
06E46:  BRA    6E82
....................          if(unidad2==1) 
06E48:  DECFSZ 41,W
06E4A:  BRA    6E52
....................          { 
....................             unidad2=4; 
06E4C:  MOVLW  04
06E4E:  MOVWF  41
....................          } 
....................          else 
06E50:  BRA    6E5C
....................          { 
....................             if(unidad2==4) 
06E52:  MOVF   41,W
06E54:  SUBLW  04
06E56:  BNZ   6E5C
....................             { 
....................                unidad2=1; 
06E58:  MOVLW  01
06E5A:  MOVWF  41
....................             } 
....................          } 
....................       delay_ms(500); 
06E5C:  MOVLW  02
06E5E:  MOVLB  7
06E60:  MOVWF  xEF
06E62:  MOVLW  FA
06E64:  MOVLB  8
06E66:  MOVWF  x06
06E68:  MOVLB  0
06E6A:  CALL   0CCE
06E6E:  MOVLB  7
06E70:  DECFSZ xEF,F
06E72:  BRA    6E62
....................       printf(lcd_putc,"\f"); 
06E74:  MOVLW  0C
06E76:  MOVLB  8
06E78:  MOVWF  x00
06E7A:  MOVLB  0
06E7C:  CALL   2254
....................       Cambio=ON; 
06E80:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(IZQU) 
06E82:  BSF    F96.2
06E84:  BTFSC  F84.2
06E86:  BRA    6F98
....................    { 
....................       if(IZQU){ 
06E88:  BSF    F96.2
06E8A:  BTFSC  F84.2
06E8C:  BRA    6F98
....................          delay_ms(200); 
06E8E:  MOVLW  C8
06E90:  MOVLB  8
06E92:  MOVWF  x06
06E94:  MOVLB  0
06E96:  CALL   0CCE
....................          printf(lcd_putc,"\f"); 
06E9A:  MOVLW  0C
06E9C:  MOVLB  8
06E9E:  MOVWF  x00
06EA0:  MOVLB  0
06EA2:  CALL   2254
....................          lcd_gotoxy(1,2); 
06EA6:  MOVLW  01
06EA8:  MOVLB  8
06EAA:  MOVWF  x01
06EAC:  MOVLW  02
06EAE:  MOVWF  x02
06EB0:  MOVLB  0
06EB2:  CALL   21DA
....................          printf(lcd_putc,"Tiempo Almacenado"); 
06EB6:  MOVLW  2E
06EB8:  MOVWF  FF6
06EBA:  MOVLW  08
06EBC:  MOVWF  FF7
06EBE:  CALL   22D2
....................          lcd_gotoxy(1,3); 
06EC2:  MOVLW  01
06EC4:  MOVLB  8
06EC6:  MOVWF  x01
06EC8:  MOVLW  03
06ECA:  MOVWF  x02
06ECC:  MOVLB  0
06ECE:  CALL   21DA
....................          printf(lcd_putc,"  Correctamente  "); 
06ED2:  MOVLW  40
06ED4:  MOVWF  FF6
06ED6:  MOVLW  08
06ED8:  MOVWF  FF7
06EDA:  CALL   22D2
....................          write_eeprom(5,tempo_minutos_pro); 
06EDE:  CLRF   FAA
06EE0:  MOVLW  05
06EE2:  MOVWF  FA9
06EE4:  MOVFF  3C,FA8
06EE8:  BCF    FA6.6
06EEA:  BCF    FA6.7
06EEC:  BSF    FA6.2
06EEE:  MOVF   FF2,W
06EF0:  MOVWF  00
06EF2:  BCF    FF2.6
06EF4:  BCF    FF2.7
06EF6:  MOVLB  F
06EF8:  MOVLW  55
06EFA:  MOVWF  FA7
06EFC:  MOVLW  AA
06EFE:  MOVWF  FA7
06F00:  BSF    FA6.1
06F02:  BTFSC  FA6.1
06F04:  BRA    6F02
06F06:  BCF    FA6.2
06F08:  MOVF   00,W
06F0A:  IORWF  FF2,F
....................          delay_ms(20); 
06F0C:  MOVLW  14
06F0E:  MOVLB  8
06F10:  MOVWF  x06
06F12:  MOVLB  0
06F14:  CALL   0CCE
....................          write_eeprom(6,tempo_segundos_pro); 
06F18:  CLRF   FAA
06F1A:  MOVLW  06
06F1C:  MOVWF  FA9
06F1E:  MOVFF  3D,FA8
06F22:  BCF    FA6.6
06F24:  BCF    FA6.7
06F26:  BSF    FA6.2
06F28:  MOVF   FF2,W
06F2A:  MOVWF  00
06F2C:  BCF    FF2.6
06F2E:  BCF    FF2.7
06F30:  MOVLB  F
06F32:  MOVLW  55
06F34:  MOVWF  FA7
06F36:  MOVLW  AA
06F38:  MOVWF  FA7
06F3A:  BSF    FA6.1
06F3C:  BTFSC  FA6.1
06F3E:  BRA    6F3C
06F40:  BCF    FA6.2
06F42:  MOVF   00,W
06F44:  IORWF  FF2,F
....................          delay_ms(20); 
06F46:  MOVLW  14
06F48:  MOVLB  8
06F4A:  MOVWF  x06
06F4C:  MOVLB  0
06F4E:  CALL   0CCE
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
06F52:  MOVFF  3C,3A
06F56:  MOVFF  3D,3B
....................          delay_ms(700); 
06F5A:  MOVLW  04
06F5C:  MOVLB  7
06F5E:  MOVWF  xEF
06F60:  MOVLW  AF
06F62:  MOVLB  8
06F64:  MOVWF  x06
06F66:  MOVLB  0
06F68:  CALL   0CCE
06F6C:  MOVLB  7
06F6E:  DECFSZ xEF,F
06F70:  BRA    6F60
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
06F72:  MOVLW  1E
06F74:  MOVLB  8
06F76:  MOVWF  x06
06F78:  MOVLB  0
06F7A:  CALL   0CCE
06F7E:  MOVLW  01
06F80:  MOVWF  2B
06F82:  CLRF   47
06F84:  MOVLW  02
06F86:  MOVWF  2F
06F88:  MOVWF  31
06F8A:  MOVLW  0C
06F8C:  MOVLB  8
06F8E:  MOVWF  x00
06F90:  MOVLB  0
06F92:  CALL   2254
....................          Cambio=ON; 
06F96:  BSF    2A.7
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
06F98:  MOVF   2B,W
06F9A:  SUBLW  03
06F9C:  BTFSS  FD8.2
06F9E:  BRA    7382
....................       EliminaRuido(); 
06FA0:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
06FA4:  MOVLW  01
06FA6:  MOVLB  8
06FA8:  MOVWF  x01
06FAA:  MOVWF  x02
06FAC:  MOVLB  0
06FAE:  CALL   21DA
....................          printf(lcd_putc,"     Ingrese        "); 
06FB2:  MOVLW  52
06FB4:  MOVWF  FF6
06FB6:  MOVLW  08
06FB8:  MOVWF  FF7
06FBA:  CALL   22D2
....................          lcd_gotoxy(1,2); 
06FBE:  MOVLW  01
06FC0:  MOVLB  8
06FC2:  MOVWF  x01
06FC4:  MOVLW  02
06FC6:  MOVWF  x02
06FC8:  MOVLB  0
06FCA:  CALL   21DA
....................          printf(lcd_putc,"    Contraseña      "); 
06FCE:  MOVLW  68
06FD0:  MOVWF  FF6
06FD2:  MOVLW  08
06FD4:  MOVWF  FF7
06FD6:  CALL   22D2
....................          lcd_gotoxy(1,3); 
06FDA:  MOVLW  01
06FDC:  MOVLB  8
06FDE:  MOVWF  x01
06FE0:  MOVLW  03
06FE2:  MOVWF  x02
06FE4:  MOVLB  0
06FE6:  CALL   21DA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
06FEA:  MOVLW  7E
06FEC:  MOVWF  FF6
06FEE:  MOVLW  08
06FF0:  MOVWF  FF7
06FF2:  MOVLW  0A
06FF4:  MOVLB  7
06FF6:  MOVWF  xF3
06FF8:  MOVLB  0
06FFA:  CALL   4D24
06FFE:  MOVFF  4C,7EF
07002:  MOVLW  1F
07004:  MOVLB  7
07006:  MOVWF  xF0
07008:  MOVLB  0
0700A:  CALL   5302
0700E:  MOVFF  4D,7EF
07012:  MOVLW  1F
07014:  MOVLB  7
07016:  MOVWF  xF0
07018:  MOVLB  0
0701A:  CALL   5302
0701E:  MOVFF  4E,7EF
07022:  MOVLW  1F
07024:  MOVLB  7
07026:  MOVWF  xF0
07028:  MOVLB  0
0702A:  CALL   5302
0702E:  MOVFF  4F,7EF
07032:  MOVLW  1F
07034:  MOVLB  7
07036:  MOVWF  xF0
07038:  MOVLB  0
0703A:  CALL   5302
0703E:  MOVLW  20
07040:  MOVLB  8
07042:  MOVWF  x00
07044:  MOVLB  0
07046:  CALL   2254
0704A:  MOVLW  20
0704C:  MOVLB  8
0704E:  MOVWF  x00
07050:  MOVLB  0
07052:  CALL   2254
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
07056:  MOVFF  2E,801
0705A:  MOVLW  04
0705C:  MOVLB  8
0705E:  MOVWF  x02
07060:  MOVLB  0
07062:  CALL   21DA
....................          lcd_putc(t[2]); 
07066:  MOVFF  4B,800
0706A:  CALL   2254
....................           
....................          if(unidad>11&&unidad<14){ 
0706E:  MOVF   2E,W
07070:  SUBLW  0B
07072:  BC    709A
07074:  MOVF   2E,W
07076:  SUBLW  0D
07078:  BNC   709A
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
0707A:  MOVLW  01
0707C:  SUBWF  2E,W
0707E:  MOVLB  7
07080:  MOVWF  xEF
07082:  MOVFF  FE8,801
07086:  MOVLW  04
07088:  MOVLB  8
0708A:  MOVWF  x02
0708C:  MOVLB  0
0708E:  CALL   21DA
....................             lcd_putc(t[1]); 
07092:  MOVFF  4A,800
07096:  CALL   2254
....................          } 
....................           
....................          Cambio=OFF; 
0709A:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
0709C:  BSF    F92.5
0709E:  BTFSC  F80.5
070A0:  BRA    70DC
....................          delay_ms(20); 
070A2:  MOVLW  14
070A4:  MOVLB  8
070A6:  MOVWF  x06
070A8:  MOVLB  0
070AA:  CALL   0CCE
....................          if(UP){ 
070AE:  BSF    F92.5
070B0:  BTFSC  F80.5
070B2:  BRA    70DA
....................             if(Flanco == 0) { 
070B4:  BTFSC  29.3
070B6:  BRA    70DA
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
070B8:  MOVLW  0B
070BA:  SUBWF  2E,W
070BC:  CLRF   03
070BE:  ADDLW  4C
070C0:  MOVWF  FE9
070C2:  MOVLW  00
070C4:  ADDWFC 03,W
070C6:  MOVWF  FEA
070C8:  INCF   FEF,F
070CA:  BSF    29.3
070CC:  MOVLW  1E
070CE:  MOVLB  8
070D0:  MOVWF  x06
070D2:  MOVLB  0
070D4:  CALL   0CCE
070D8:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
070DA:  BRA    70DE
....................          Flanco = 0; 
070DC:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
070DE:  BSF    F96.0
070E0:  BTFSC  F84.0
070E2:  BRA    711E
....................          delay_ms(20); 
070E4:  MOVLW  14
070E6:  MOVLB  8
070E8:  MOVWF  x06
070EA:  MOVLB  0
070EC:  CALL   0CCE
....................          if(DOWN){ 
070F0:  BSF    F96.0
070F2:  BTFSC  F84.0
070F4:  BRA    711C
....................             if(Flanco2 == 0) { 
070F6:  BTFSC  29.5
070F8:  BRA    711C
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
070FA:  MOVLW  0B
070FC:  SUBWF  2E,W
070FE:  CLRF   03
07100:  ADDLW  4C
07102:  MOVWF  FE9
07104:  MOVLW  00
07106:  ADDWFC 03,W
07108:  MOVWF  FEA
0710A:  DECF   FEF,F
0710C:  BSF    29.5
0710E:  MOVLW  1E
07110:  MOVLB  8
07112:  MOVWF  x06
07114:  MOVLB  0
07116:  CALL   0CCE
0711A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
0711C:  BRA    7120
....................          Flanco2 = 0; 
0711E:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
07120:  BSF    F96.1
07122:  BTFSC  F84.1
07124:  BRA    715C
....................          delay_ms(20); 
07126:  MOVLW  14
07128:  MOVLB  8
0712A:  MOVWF  x06
0712C:  MOVLB  0
0712E:  CALL   0CCE
....................          if(RIGHT){ 
07132:  BSF    F96.1
07134:  BTFSC  F84.1
07136:  BRA    715A
....................             if(Flanco1 == 0) { 
07138:  BTFSC  29.4
0713A:  BRA    715A
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
0713C:  BSF    29.4
0713E:  INCF   2E,F
07140:  MOVLW  1E
07142:  MOVLB  8
07144:  MOVWF  x06
07146:  MOVLB  0
07148:  CALL   0CCE
0714C:  MOVLW  0C
0714E:  MOVLB  8
07150:  MOVWF  x00
07152:  MOVLB  0
07154:  CALL   2254
07158:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
0715A:  BRA    715E
....................          Flanco1 = 0; 
0715C:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
0715E:  BSF    F96.2
07160:  BTFSC  F84.2
07162:  BRA    719A
....................          delay_ms(150); 
07164:  MOVLW  96
07166:  MOVLB  8
07168:  MOVWF  x06
0716A:  MOVLB  0
0716C:  CALL   0CCE
....................          if(IZQU){ 
07170:  BSF    F96.2
07172:  BTFSC  F84.2
07174:  BRA    7198
....................             if(Flanco3 == 0){ 
07176:  BTFSC  29.6
07178:  BRA    7198
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
0717A:  BSF    29.6
0717C:  DECF   2E,F
0717E:  MOVLW  1E
07180:  MOVLB  8
07182:  MOVWF  x06
07184:  MOVLB  0
07186:  CALL   0CCE
0718A:  MOVLW  0C
0718C:  MOVLB  8
0718E:  MOVWF  x00
07190:  MOVLB  0
07192:  CALL   2254
07196:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
07198:  BRA    719C
....................         Flanco3 = 0; 
0719A:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
0719C:  MOVLW  0B
0719E:  SUBWF  2E,W
071A0:  CLRF   03
071A2:  ADDLW  4C
071A4:  MOVWF  FE9
071A6:  MOVLW  00
071A8:  ADDWFC 03,W
071AA:  MOVWF  FEA
071AC:  BTFSC  FEF.7
071AE:  BRA    71B2
071B0:  BRA    71C6
....................          clave[unidad-11]=9; 
071B2:  MOVLW  0B
071B4:  SUBWF  2E,W
071B6:  CLRF   03
071B8:  ADDLW  4C
071BA:  MOVWF  FE9
071BC:  MOVLW  00
071BE:  ADDWFC 03,W
071C0:  MOVWF  FEA
071C2:  MOVLW  09
071C4:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
071C6:  MOVLW  0B
071C8:  SUBWF  2E,W
071CA:  CLRF   03
071CC:  ADDLW  4C
071CE:  MOVWF  FE9
071D0:  MOVLW  00
071D2:  ADDWFC 03,W
071D4:  MOVWF  FEA
071D6:  BTFSC  FEF.7
071D8:  BRA    71F2
071DA:  MOVF   FEF,W
071DC:  SUBLW  09
071DE:  BC    71F2
....................          clave[unidad-11]=0; 
071E0:  MOVLW  0B
071E2:  SUBWF  2E,W
071E4:  CLRF   03
071E6:  ADDLW  4C
071E8:  MOVWF  FE9
071EA:  MOVLW  00
071EC:  ADDWFC 03,W
071EE:  MOVWF  FEA
071F0:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
071F2:  MOVF   2E,W
071F4:  SUBLW  0A
071F6:  BNC   721C
....................          unidad=11; 
071F8:  MOVLW  0B
071FA:  MOVWF  2E
....................          Menu=1; 
071FC:  MOVLW  01
071FE:  MOVWF  2B
....................          paso=0; 
07200:  CLRF   47
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
07202:  CLRF   4C
07204:  CLRF   4D
07206:  CLRF   4E
07208:  CLRF   4F
0720A:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
0720C:  MOVLW  0B
0720E:  MOVWF  2E
07210:  MOVLW  0C
07212:  MOVLB  8
07214:  MOVWF  x00
07216:  MOVLB  0
07218:  CALL   2254
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
0721C:  MOVF   2E,W
0721E:  SUBLW  0E
07220:  BTFSC  FD8.0
07222:  BRA    7382
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
07224:  MOVF   50,W
07226:  SUBWF  4C,W
07228:  BNZ   72E2
0722A:  MOVF   51,W
0722C:  SUBWF  4D,W
0722E:  BNZ   72E2
07230:  MOVF   52,W
07232:  SUBWF  4E,W
07234:  BNZ   72E2
07236:  MOVF   53,W
07238:  SUBWF  4F,W
0723A:  BNZ   72E2
....................             lcd_gotoxy(1,1); 
0723C:  MOVLW  01
0723E:  MOVLB  8
07240:  MOVWF  x01
07242:  MOVWF  x02
07244:  MOVLB  0
07246:  CALL   21DA
....................             printf(lcd_putc,"                    "); 
0724A:  MOVLW  94
0724C:  MOVWF  FF6
0724E:  MOVLW  08
07250:  MOVWF  FF7
07252:  CALL   22D2
....................             lcd_gotoxy(1,2); 
07256:  MOVLW  01
07258:  MOVLB  8
0725A:  MOVWF  x01
0725C:  MOVLW  02
0725E:  MOVWF  x02
07260:  MOVLB  0
07262:  CALL   21DA
....................             printf(lcd_putc,"     Contraseña     "); 
07266:  MOVLW  AA
07268:  MOVWF  FF6
0726A:  MOVLW  08
0726C:  MOVWF  FF7
0726E:  CALL   22D2
....................             lcd_gotoxy(1,3); 
07272:  MOVLW  01
07274:  MOVLB  8
07276:  MOVWF  x01
07278:  MOVLW  03
0727A:  MOVWF  x02
0727C:  MOVLB  0
0727E:  CALL   21DA
....................             printf(lcd_putc,"      Correcta      "); 
07282:  MOVLW  C0
07284:  MOVWF  FF6
07286:  MOVLW  08
07288:  MOVWF  FF7
0728A:  CALL   22D2
....................             lcd_gotoxy(1,4); 
0728E:  MOVLW  01
07290:  MOVLB  8
07292:  MOVWF  x01
07294:  MOVLW  04
07296:  MOVWF  x02
07298:  MOVLB  0
0729A:  CALL   21DA
....................             printf(lcd_putc,"                    "); 
0729E:  MOVLW  D6
072A0:  MOVWF  FF6
072A2:  MOVLW  08
072A4:  MOVWF  FF7
072A6:  CALL   22D2
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
072AA:  MOVLW  02
072AC:  MOVLB  7
072AE:  MOVWF  xEF
072B0:  MOVLW  FA
072B2:  MOVLB  8
072B4:  MOVWF  x06
072B6:  MOVLB  0
072B8:  CALL   0CCE
072BC:  MOVLB  7
072BE:  DECFSZ xEF,F
072C0:  BRA    72B0
072C2:  MOVLW  3D
072C4:  MOVWF  2B
072C6:  MOVLW  0B
072C8:  MOVWF  2E
072CA:  MOVLW  0C
072CC:  MOVLB  8
072CE:  MOVWF  x00
072D0:  MOVLB  0
072D2:  CALL   2254
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
072D6:  CLRF   4C
072D8:  CLRF   4D
072DA:  CLRF   4E
072DC:  CLRF   4F
072DE:  BSF    2A.7
....................          }else{ 
072E0:  BRA    7382
....................             lcd_gotoxy(1,1); 
072E2:  MOVLW  01
072E4:  MOVLB  8
072E6:  MOVWF  x01
072E8:  MOVWF  x02
072EA:  MOVLB  0
072EC:  CALL   21DA
....................             printf(lcd_putc,"                    "); 
072F0:  MOVLW  EC
072F2:  MOVWF  FF6
072F4:  MOVLW  08
072F6:  MOVWF  FF7
072F8:  CALL   22D2
....................             lcd_gotoxy(1,2); 
072FC:  MOVLW  01
072FE:  MOVLB  8
07300:  MOVWF  x01
07302:  MOVLW  02
07304:  MOVWF  x02
07306:  MOVLB  0
07308:  CALL   21DA
....................             printf(lcd_putc,"     Contraseña     "); 
0730C:  MOVLW  02
0730E:  MOVWF  FF6
07310:  MOVLW  09
07312:  MOVWF  FF7
07314:  CALL   22D2
....................             lcd_gotoxy(1,3); 
07318:  MOVLW  01
0731A:  MOVLB  8
0731C:  MOVWF  x01
0731E:  MOVLW  03
07320:  MOVWF  x02
07322:  MOVLB  0
07324:  CALL   21DA
....................             printf(lcd_putc,"     Incorrecta     "); 
07328:  MOVLW  18
0732A:  MOVWF  FF6
0732C:  MOVLW  09
0732E:  MOVWF  FF7
07330:  CALL   22D2
....................             lcd_gotoxy(1,4); 
07334:  MOVLW  01
07336:  MOVLB  8
07338:  MOVWF  x01
0733A:  MOVLW  04
0733C:  MOVWF  x02
0733E:  MOVLB  0
07340:  CALL   21DA
....................             printf(lcd_putc,"                    "); 
07344:  MOVLW  2E
07346:  MOVWF  FF6
07348:  MOVLW  09
0734A:  MOVWF  FF7
0734C:  CALL   22D2
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
07350:  MOVLW  02
07352:  MOVLB  7
07354:  MOVWF  xEF
07356:  MOVLW  FA
07358:  MOVLB  8
0735A:  MOVWF  x06
0735C:  MOVLB  0
0735E:  CALL   0CCE
07362:  MOVLB  7
07364:  DECFSZ xEF,F
07366:  BRA    7356
07368:  MOVLW  0B
0736A:  MOVWF  2E
0736C:  MOVLW  0C
0736E:  MOVLB  8
07370:  MOVWF  x00
07372:  MOVLB  0
07374:  CALL   2254
07378:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
0737A:  CLRF   4C
0737C:  CLRF   4D
0737E:  CLRF   4E
07380:  CLRF   4F
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
07382:  MOVF   2B,W
07384:  SUBLW  3D
07386:  BTFSS  FD8.2
07388:  BRA    77A2
....................       EliminaRuido(); 
0738A:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
0738E:  MOVLW  01
07390:  MOVLB  8
07392:  MOVWF  x01
07394:  MOVWF  x02
07396:  MOVLB  0
07398:  CALL   21DA
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
0739C:  MOVLW  44
0739E:  MOVWF  FF6
073A0:  MOVLW  09
073A2:  MOVWF  FF7
073A4:  CALL   22D2
....................          lcd_gotoxy(1,2); 
073A8:  MOVLW  01
073AA:  MOVLB  8
073AC:  MOVWF  x01
073AE:  MOVLW  02
073B0:  MOVWF  x02
073B2:  MOVLB  0
073B4:  CALL   21DA
....................          printf(lcd_putc,"     Contraseña     "); 
073B8:  MOVLW  5A
073BA:  MOVWF  FF6
073BC:  MOVLW  09
073BE:  MOVWF  FF7
073C0:  CALL   22D2
....................          lcd_gotoxy(1,3); 
073C4:  MOVLW  01
073C6:  MOVLB  8
073C8:  MOVWF  x01
073CA:  MOVLW  03
073CC:  MOVWF  x02
073CE:  MOVLB  0
073D0:  CALL   21DA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
073D4:  MOVLW  70
073D6:  MOVWF  FF6
073D8:  MOVLW  09
073DA:  MOVWF  FF7
073DC:  MOVLW  0A
073DE:  MOVLB  7
073E0:  MOVWF  xF3
073E2:  MOVLB  0
073E4:  CALL   4D24
073E8:  MOVFF  4C,7EF
073EC:  MOVLW  1F
073EE:  MOVLB  7
073F0:  MOVWF  xF0
073F2:  MOVLB  0
073F4:  CALL   5302
073F8:  MOVFF  4D,7EF
073FC:  MOVLW  1F
073FE:  MOVLB  7
07400:  MOVWF  xF0
07402:  MOVLB  0
07404:  CALL   5302
07408:  MOVFF  4E,7EF
0740C:  MOVLW  1F
0740E:  MOVLB  7
07410:  MOVWF  xF0
07412:  MOVLB  0
07414:  CALL   5302
07418:  MOVFF  4F,7EF
0741C:  MOVLW  1F
0741E:  MOVLB  7
07420:  MOVWF  xF0
07422:  MOVLB  0
07424:  CALL   5302
07428:  MOVLW  20
0742A:  MOVLB  8
0742C:  MOVWF  x00
0742E:  MOVLB  0
07430:  CALL   2254
07434:  MOVLW  20
07436:  MOVLB  8
07438:  MOVWF  x00
0743A:  MOVLB  0
0743C:  CALL   2254
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
07440:  MOVFF  2E,801
07444:  MOVLW  04
07446:  MOVLB  8
07448:  MOVWF  x02
0744A:  MOVLB  0
0744C:  CALL   21DA
....................          lcd_putc(t[2]); 
07450:  MOVFF  4B,800
07454:  CALL   2254
....................           
....................          if(unidad>11&&unidad<14){ 
07458:  MOVF   2E,W
0745A:  SUBLW  0B
0745C:  BC    7484
0745E:  MOVF   2E,W
07460:  SUBLW  0D
07462:  BNC   7484
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
07464:  MOVLW  01
07466:  SUBWF  2E,W
07468:  MOVLB  7
0746A:  MOVWF  xEF
0746C:  MOVFF  FE8,801
07470:  MOVLW  04
07472:  MOVLB  8
07474:  MOVWF  x02
07476:  MOVLB  0
07478:  CALL   21DA
....................             lcd_putc(t[1]); 
0747C:  MOVFF  4A,800
07480:  CALL   2254
....................          } 
....................           
....................          Cambio=OFF; 
07484:  BCF    2A.7
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
07486:  BSF    F92.5
07488:  BTFSC  F80.5
0748A:  BRA    74C6
....................          delay_ms(20); 
0748C:  MOVLW  14
0748E:  MOVLB  8
07490:  MOVWF  x06
07492:  MOVLB  0
07494:  CALL   0CCE
....................          if(UP){ 
07498:  BSF    F92.5
0749A:  BTFSC  F80.5
0749C:  BRA    74C4
....................             if(Flanco == 0) { 
0749E:  BTFSC  29.3
074A0:  BRA    74C4
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
074A2:  MOVLW  0B
074A4:  SUBWF  2E,W
074A6:  CLRF   03
074A8:  ADDLW  4C
074AA:  MOVWF  FE9
074AC:  MOVLW  00
074AE:  ADDWFC 03,W
074B0:  MOVWF  FEA
074B2:  INCF   FEF,F
074B4:  BSF    29.3
074B6:  MOVLW  1E
074B8:  MOVLB  8
074BA:  MOVWF  x06
074BC:  MOVLB  0
074BE:  CALL   0CCE
074C2:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
074C4:  BRA    74C8
....................          Flanco = 0; 
074C6:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
074C8:  BSF    F96.0
074CA:  BTFSC  F84.0
074CC:  BRA    7508
....................          delay_ms(20); 
074CE:  MOVLW  14
074D0:  MOVLB  8
074D2:  MOVWF  x06
074D4:  MOVLB  0
074D6:  CALL   0CCE
....................          if(DOWN){ 
074DA:  BSF    F96.0
074DC:  BTFSC  F84.0
074DE:  BRA    7506
....................             if(Flanco2 == 0) { 
074E0:  BTFSC  29.5
074E2:  BRA    7506
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
074E4:  MOVLW  0B
074E6:  SUBWF  2E,W
074E8:  CLRF   03
074EA:  ADDLW  4C
074EC:  MOVWF  FE9
074EE:  MOVLW  00
074F0:  ADDWFC 03,W
074F2:  MOVWF  FEA
074F4:  DECF   FEF,F
074F6:  BSF    29.5
074F8:  MOVLW  1E
074FA:  MOVLB  8
074FC:  MOVWF  x06
074FE:  MOVLB  0
07500:  CALL   0CCE
07504:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
07506:  BRA    750A
....................          Flanco2 = 0; 
07508:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
0750A:  BSF    F96.1
0750C:  BTFSC  F84.1
0750E:  BRA    753A
....................          if(RIGHT){ 
07510:  BSF    F96.1
07512:  BTFSC  F84.1
07514:  BRA    7538
....................             if(Flanco1 == 0) { 
07516:  BTFSC  29.4
07518:  BRA    7538
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
0751A:  BSF    29.4
0751C:  INCF   2E,F
0751E:  MOVLW  1E
07520:  MOVLB  8
07522:  MOVWF  x06
07524:  MOVLB  0
07526:  CALL   0CCE
0752A:  MOVLW  0C
0752C:  MOVLB  8
0752E:  MOVWF  x00
07530:  MOVLB  0
07532:  CALL   2254
07536:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
07538:  BRA    753C
....................          Flanco1 = 0; 
0753A:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
0753C:  BSF    F96.2
0753E:  BTFSC  F84.2
07540:  BRA    7578
....................          delay_ms(150); 
07542:  MOVLW  96
07544:  MOVLB  8
07546:  MOVWF  x06
07548:  MOVLB  0
0754A:  CALL   0CCE
....................          if(IZQU){ 
0754E:  BSF    F96.2
07550:  BTFSC  F84.2
07552:  BRA    7576
....................             if(Flanco3 == 0){ 
07554:  BTFSC  29.6
07556:  BRA    7576
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
07558:  BSF    29.6
0755A:  DECF   2E,F
0755C:  MOVLW  1E
0755E:  MOVLB  8
07560:  MOVWF  x06
07562:  MOVLB  0
07564:  CALL   0CCE
07568:  MOVLW  0C
0756A:  MOVLB  8
0756C:  MOVWF  x00
0756E:  MOVLB  0
07570:  CALL   2254
07574:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
07576:  BRA    757A
....................         Flanco3 = 0; 
07578:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
0757A:  MOVLW  0B
0757C:  SUBWF  2E,W
0757E:  CLRF   03
07580:  ADDLW  4C
07582:  MOVWF  FE9
07584:  MOVLW  00
07586:  ADDWFC 03,W
07588:  MOVWF  FEA
0758A:  BTFSC  FEF.7
0758C:  BRA    7590
0758E:  BRA    75A4
....................          clave[unidad-11]=9; 
07590:  MOVLW  0B
07592:  SUBWF  2E,W
07594:  CLRF   03
07596:  ADDLW  4C
07598:  MOVWF  FE9
0759A:  MOVLW  00
0759C:  ADDWFC 03,W
0759E:  MOVWF  FEA
075A0:  MOVLW  09
075A2:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
075A4:  MOVLW  0B
075A6:  SUBWF  2E,W
075A8:  CLRF   03
075AA:  ADDLW  4C
075AC:  MOVWF  FE9
075AE:  MOVLW  00
075B0:  ADDWFC 03,W
075B2:  MOVWF  FEA
075B4:  BTFSC  FEF.7
075B6:  BRA    75D0
075B8:  MOVF   FEF,W
075BA:  SUBLW  09
075BC:  BC    75D0
....................          clave[unidad-11]=0; 
075BE:  MOVLW  0B
075C0:  SUBWF  2E,W
075C2:  CLRF   03
075C4:  ADDLW  4C
075C6:  MOVWF  FE9
075C8:  MOVLW  00
075CA:  ADDWFC 03,W
075CC:  MOVWF  FEA
075CE:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
075D0:  MOVF   2E,W
075D2:  SUBLW  0A
075D4:  BNC   75F8
....................          unidad=11; 
075D6:  MOVLW  0B
075D8:  MOVWF  2E
....................          Menu=1; 
075DA:  MOVLW  01
075DC:  MOVWF  2B
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
075DE:  CLRF   4C
075E0:  CLRF   4D
075E2:  CLRF   4E
075E4:  CLRF   4F
075E6:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
075E8:  MOVLW  0B
075EA:  MOVWF  2E
075EC:  MOVLW  0C
075EE:  MOVLB  8
075F0:  MOVWF  x00
075F2:  MOVLB  0
075F4:  CALL   2254
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
075F8:  MOVF   2E,W
075FA:  SUBLW  0E
075FC:  BTFSC  FD8.0
075FE:  BRA    77A2
....................          lcd_gotoxy(1,1); 
07600:  MOVLW  01
07602:  MOVLB  8
07604:  MOVWF  x01
07606:  MOVWF  x02
07608:  MOVLB  0
0760A:  CALL   21DA
....................          printf(lcd_putc,"                    "); 
0760E:  MOVLW  86
07610:  MOVWF  FF6
07612:  MOVLW  09
07614:  MOVWF  FF7
07616:  CALL   22D2
....................          lcd_gotoxy(1,2); 
0761A:  MOVLW  01
0761C:  MOVLB  8
0761E:  MOVWF  x01
07620:  MOVLW  02
07622:  MOVWF  x02
07624:  MOVLB  0
07626:  CALL   21DA
....................          printf(lcd_putc,"     Contraseña     "); 
0762A:  MOVLW  9C
0762C:  MOVWF  FF6
0762E:  MOVLW  09
07630:  MOVWF  FF7
07632:  CALL   22D2
....................          lcd_gotoxy(1,3); 
07636:  MOVLW  01
07638:  MOVLB  8
0763A:  MOVWF  x01
0763C:  MOVLW  03
0763E:  MOVWF  x02
07640:  MOVLB  0
07642:  CALL   21DA
....................          printf(lcd_putc,"     Almacenada     "); 
07646:  MOVLW  B2
07648:  MOVWF  FF6
0764A:  MOVLW  09
0764C:  MOVWF  FF7
0764E:  CALL   22D2
....................          lcd_gotoxy(1,4); 
07652:  MOVLW  01
07654:  MOVLB  8
07656:  MOVWF  x01
07658:  MOVLW  04
0765A:  MOVWF  x02
0765C:  MOVLB  0
0765E:  CALL   21DA
....................          printf(lcd_putc,"                    "); 
07662:  MOVLW  C8
07664:  MOVWF  FF6
07666:  MOVLW  09
07668:  MOVWF  FF7
0766A:  CALL   22D2
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
0766E:  CLRF   FAA
07670:  CLRF   FA9
07672:  MOVFF  4C,FA8
07676:  BCF    FA6.6
07678:  BCF    FA6.7
0767A:  BSF    FA6.2
0767C:  MOVF   FF2,W
0767E:  MOVWF  00
07680:  BCF    FF2.6
07682:  BCF    FF2.7
07684:  MOVLB  F
07686:  MOVLW  55
07688:  MOVWF  FA7
0768A:  MOVLW  AA
0768C:  MOVWF  FA7
0768E:  BSF    FA6.1
07690:  BTFSC  FA6.1
07692:  BRA    7690
07694:  BCF    FA6.2
07696:  MOVF   00,W
07698:  IORWF  FF2,F
0769A:  MOVLW  14
0769C:  MOVLB  8
0769E:  MOVWF  x06
076A0:  MOVLB  0
076A2:  CALL   0CCE
076A6:  CLRF   FAA
076A8:  MOVLW  01
076AA:  MOVWF  FA9
076AC:  MOVFF  4D,FA8
076B0:  BCF    FA6.6
076B2:  BCF    FA6.7
076B4:  BSF    FA6.2
076B6:  MOVF   FF2,W
076B8:  MOVWF  00
076BA:  BCF    FF2.6
076BC:  BCF    FF2.7
076BE:  MOVLB  F
076C0:  MOVLW  55
076C2:  MOVWF  FA7
076C4:  MOVLW  AA
076C6:  MOVWF  FA7
076C8:  BSF    FA6.1
076CA:  BTFSC  FA6.1
076CC:  BRA    76CA
076CE:  BCF    FA6.2
076D0:  MOVF   00,W
076D2:  IORWF  FF2,F
076D4:  MOVLW  14
076D6:  MOVLB  8
076D8:  MOVWF  x06
076DA:  MOVLB  0
076DC:  CALL   0CCE
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
076E0:  CLRF   FAA
076E2:  MOVLW  02
076E4:  MOVWF  FA9
076E6:  MOVFF  4E,FA8
076EA:  BCF    FA6.6
076EC:  BCF    FA6.7
076EE:  BSF    FA6.2
076F0:  MOVF   FF2,W
076F2:  MOVWF  00
076F4:  BCF    FF2.6
076F6:  BCF    FF2.7
076F8:  MOVLB  F
076FA:  MOVLW  55
076FC:  MOVWF  FA7
076FE:  MOVLW  AA
07700:  MOVWF  FA7
07702:  BSF    FA6.1
07704:  BTFSC  FA6.1
07706:  BRA    7704
07708:  BCF    FA6.2
0770A:  MOVF   00,W
0770C:  IORWF  FF2,F
0770E:  MOVLW  14
07710:  MOVLB  8
07712:  MOVWF  x06
07714:  MOVLB  0
07716:  CALL   0CCE
0771A:  CLRF   FAA
0771C:  MOVLW  03
0771E:  MOVWF  FA9
07720:  MOVFF  4F,FA8
07724:  BCF    FA6.6
07726:  BCF    FA6.7
07728:  BSF    FA6.2
0772A:  MOVF   FF2,W
0772C:  MOVWF  00
0772E:  BCF    FF2.6
07730:  BCF    FF2.7
07732:  MOVLB  F
07734:  MOVLW  55
07736:  MOVWF  FA7
07738:  MOVLW  AA
0773A:  MOVWF  FA7
0773C:  BSF    FA6.1
0773E:  BTFSC  FA6.1
07740:  BRA    773E
07742:  BCF    FA6.2
07744:  MOVF   00,W
07746:  IORWF  FF2,F
07748:  MOVLW  14
0774A:  MOVLB  8
0774C:  MOVWF  x06
0774E:  MOVLB  0
07750:  CALL   0CCE
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
07754:  MOVLW  02
07756:  MOVLB  7
07758:  MOVWF  xEF
0775A:  MOVLW  FA
0775C:  MOVLB  8
0775E:  MOVWF  x06
07760:  MOVLB  0
07762:  CALL   0CCE
07766:  MOVLB  7
07768:  DECFSZ xEF,F
0776A:  BRA    775A
0776C:  MOVLW  01
0776E:  MOVWF  2B
07770:  CLRF   47
07772:  MOVLW  02
07774:  MOVWF  2F
07776:  MOVWF  31
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
07778:  MOVFF  4C,50
0777C:  MOVFF  4D,51
07780:  MOVFF  4E,52
07784:  MOVFF  4F,53
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
07788:  CLRF   4C
0778A:  CLRF   4D
0778C:  CLRF   4E
0778E:  CLRF   4F
07790:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f");          
07792:  MOVLW  0B
07794:  MOVWF  2E
07796:  MOVLW  0C
07798:  MOVLB  8
0779A:  MOVWF  x00
0779C:  MOVLB  0
0779E:  CALL   2254
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
077A2:  MOVF   2B,W
077A4:  SUBLW  04
077A6:  BTFSS  FD8.2
077A8:  BRA    7A20
....................    EliminaRuido(); 
077AA:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
077AE:  MOVLW  01
077B0:  MOVLB  8
077B2:  MOVWF  x01
077B4:  MOVWF  x02
077B6:  MOVLB  0
077B8:  CALL   21DA
....................       printf(lcd_putc,"  Duracion Actual   "); 
077BC:  MOVLW  DE
077BE:  MOVWF  FF6
077C0:  MOVLW  09
077C2:  MOVWF  FF7
077C4:  CALL   22D2
....................       lcd_gotoxy(1,2); 
077C8:  MOVLW  01
077CA:  MOVLB  8
077CC:  MOVWF  x01
077CE:  MOVLW  02
077D0:  MOVWF  x02
077D2:  MOVLB  0
077D4:  CALL   21DA
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
077D8:  MOVLW  F4
077DA:  MOVWF  FF6
077DC:  MOVLW  09
077DE:  MOVWF  FF7
077E0:  MOVLW  0B
077E2:  MOVLB  7
077E4:  MOVWF  xF3
077E6:  MOVLB  0
077E8:  CALL   4D24
077EC:  MOVLW  08
077EE:  MOVWF  FE9
077F0:  MOVFF  5D,7F0
077F4:  MOVFF  5C,7EF
077F8:  CALL   507C
077FC:  MOVLW  20
077FE:  MOVLB  8
07800:  MOVWF  x00
07802:  MOVLB  0
07804:  CALL   2254
07808:  MOVLW  20
0780A:  MOVLB  8
0780C:  MOVWF  x00
0780E:  MOVLB  0
07810:  CALL   2254
07814:  MOVLW  20
07816:  MOVLB  8
07818:  MOVWF  x00
0781A:  MOVLB  0
0781C:  CALL   2254
....................       lcd_gotoxy(1,4); 
07820:  MOVLW  01
07822:  MOVLB  8
07824:  MOVWF  x01
07826:  MOVLW  04
07828:  MOVWF  x02
0782A:  MOVLB  0
0782C:  CALL   21DA
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
07830:  MOVLW  08
07832:  MOVWF  FF6
07834:  MOVLW  0A
07836:  MOVWF  FF7
07838:  CALL   22D2
....................        
....................       Cambio=OFF; 
0783C:  BCF    2A.7
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
0783E:  BSF    F92.5
07840:  BTFSC  F80.5
07842:  BRA    79CC
07844:  BSF    F96.1
07846:  BTFSC  F84.1
07848:  BRA    79CC
....................          delay_ms(20); 
0784A:  MOVLW  14
0784C:  MOVLB  8
0784E:  MOVWF  x06
07850:  MOVLB  0
07852:  CALL   0CCE
....................          if(UP && RIGHT){ 
07856:  BSF    F92.5
07858:  BTFSC  F80.5
0785A:  BRA    79CC
0785C:  BSF    F96.1
0785E:  BTFSC  F84.1
07860:  BRA    79CC
....................             delay_ms(200); 
07862:  MOVLW  C8
07864:  MOVLB  8
07866:  MOVWF  x06
07868:  MOVLB  0
0786A:  CALL   0CCE
....................             printf(lcd_putc,"\f"); 
0786E:  MOVLW  0C
07870:  MOVLB  8
07872:  MOVWF  x00
07874:  MOVLB  0
07876:  CALL   2254
....................             lcd_gotoxy(1,2); 
0787A:  MOVLW  01
0787C:  MOVLB  8
0787E:  MOVWF  x01
07880:  MOVLW  02
07882:  MOVWF  x02
07884:  MOVLB  0
07886:  CALL   21DA
....................             printf(lcd_putc," Reset de tiempo "); 
0788A:  MOVLW  1E
0788C:  MOVWF  FF6
0788E:  MOVLW  0A
07890:  MOVWF  FF7
07892:  CALL   22D2
....................             lcd_gotoxy(1,3); 
07896:  MOVLW  01
07898:  MOVLB  8
0789A:  MOVWF  x01
0789C:  MOVLW  03
0789E:  MOVWF  x02
078A0:  MOVLB  0
078A2:  CALL   21DA
....................             printf(lcd_putc,"     Exitoso     "); 
078A6:  MOVLW  30
078A8:  MOVWF  FF6
078AA:  MOVLW  0A
078AC:  MOVWF  FF7
078AE:  CALL   22D2
....................             write_eeprom(7,0); 
078B2:  CLRF   FAA
078B4:  MOVLW  07
078B6:  MOVWF  FA9
078B8:  CLRF   FA8
078BA:  BCF    FA6.6
078BC:  BCF    FA6.7
078BE:  BSF    FA6.2
078C0:  MOVF   FF2,W
078C2:  MOVWF  00
078C4:  BCF    FF2.6
078C6:  BCF    FF2.7
078C8:  MOVLB  F
078CA:  MOVLW  55
078CC:  MOVWF  FA7
078CE:  MOVLW  AA
078D0:  MOVWF  FA7
078D2:  BSF    FA6.1
078D4:  BTFSC  FA6.1
078D6:  BRA    78D4
078D8:  BCF    FA6.2
078DA:  MOVF   00,W
078DC:  IORWF  FF2,F
....................             delay_ms(20); 
078DE:  MOVLW  14
078E0:  MOVLB  8
078E2:  MOVWF  x06
078E4:  MOVLB  0
078E6:  CALL   0CCE
....................             write_eeprom(8,0); 
078EA:  CLRF   FAA
078EC:  MOVLW  08
078EE:  MOVWF  FA9
078F0:  CLRF   FA8
078F2:  BCF    FA6.6
078F4:  BCF    FA6.7
078F6:  BSF    FA6.2
078F8:  MOVF   FF2,W
078FA:  MOVWF  00
078FC:  BCF    FF2.6
078FE:  BCF    FF2.7
07900:  MOVLB  F
07902:  MOVLW  55
07904:  MOVWF  FA7
07906:  MOVLW  AA
07908:  MOVWF  FA7
0790A:  BSF    FA6.1
0790C:  BTFSC  FA6.1
0790E:  BRA    790C
07910:  BCF    FA6.2
07912:  MOVF   00,W
07914:  IORWF  FF2,F
....................             delay_ms(20); 
07916:  MOVLW  14
07918:  MOVLB  8
0791A:  MOVWF  x06
0791C:  MOVLB  0
0791E:  CALL   0CCE
....................             write_eeprom(9,0); 
07922:  CLRF   FAA
07924:  MOVLW  09
07926:  MOVWF  FA9
07928:  CLRF   FA8
0792A:  BCF    FA6.6
0792C:  BCF    FA6.7
0792E:  BSF    FA6.2
07930:  MOVF   FF2,W
07932:  MOVWF  00
07934:  BCF    FF2.6
07936:  BCF    FF2.7
07938:  MOVLB  F
0793A:  MOVLW  55
0793C:  MOVWF  FA7
0793E:  MOVLW  AA
07940:  MOVWF  FA7
07942:  BSF    FA6.1
07944:  BTFSC  FA6.1
07946:  BRA    7944
07948:  BCF    FA6.2
0794A:  MOVF   00,W
0794C:  IORWF  FF2,F
....................             delay_ms(20); 
0794E:  MOVLW  14
07950:  MOVLB  8
07952:  MOVWF  x06
07954:  MOVLB  0
07956:  CALL   0CCE
....................             write_eeprom(10,0); 
0795A:  CLRF   FAA
0795C:  MOVLW  0A
0795E:  MOVWF  FA9
07960:  CLRF   FA8
07962:  BCF    FA6.6
07964:  BCF    FA6.7
07966:  BSF    FA6.2
07968:  MOVF   FF2,W
0796A:  MOVWF  00
0796C:  BCF    FF2.6
0796E:  BCF    FF2.7
07970:  MOVLB  F
07972:  MOVLW  55
07974:  MOVWF  FA7
07976:  MOVLW  AA
07978:  MOVWF  FA7
0797A:  BSF    FA6.1
0797C:  BTFSC  FA6.1
0797E:  BRA    797C
07980:  BCF    FA6.2
07982:  MOVF   00,W
07984:  IORWF  FF2,F
....................             delay_ms(700); 
07986:  MOVLW  04
07988:  MOVLB  7
0798A:  MOVWF  xEF
0798C:  MOVLW  AF
0798E:  MOVLB  8
07990:  MOVWF  x06
07992:  MOVLB  0
07994:  CALL   0CCE
07998:  MOVLB  7
0799A:  DECFSZ xEF,F
0799C:  BRA    798C
....................             segundos=0;minutos=0;horas=0; 
0799E:  CLRF   34
079A0:  CLRF   35
079A2:  CLRF   5D
079A4:  CLRF   5C
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
079A6:  MOVLW  1E
079A8:  MOVLB  8
079AA:  MOVWF  x06
079AC:  MOVLB  0
079AE:  CALL   0CCE
079B2:  MOVLW  01
079B4:  MOVWF  2B
079B6:  CLRF   47
079B8:  MOVLW  02
079BA:  MOVWF  2F
079BC:  MOVWF  31
079BE:  MOVLW  0C
079C0:  MOVLB  8
079C2:  MOVWF  x00
079C4:  MOVLB  0
079C6:  CALL   2254
....................             Cambio=ON; 
079CA:  BSF    2A.7
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
079CC:  BSF    F96.2
079CE:  BTFSC  F84.2
079D0:  BRA    7A1E
....................          delay_ms(20); 
079D2:  MOVLW  14
079D4:  MOVLB  8
079D6:  MOVWF  x06
079D8:  MOVLB  0
079DA:  CALL   0CCE
....................          if(IZQU){ 
079DE:  BSF    F96.2
079E0:  BTFSC  F84.2
079E2:  BRA    7A1C
....................             if(Flanco3 == 0){ 
079E4:  BTFSC  29.6
079E6:  BRA    7A1C
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
079E8:  BSF    29.6
079EA:  MOVLW  02
079EC:  MOVLB  7
079EE:  MOVWF  xEF
079F0:  MOVLW  FA
079F2:  MOVLB  8
079F4:  MOVWF  x06
079F6:  MOVLB  0
079F8:  CALL   0CCE
079FC:  MOVLB  7
079FE:  DECFSZ xEF,F
07A00:  BRA    79F0
07A02:  MOVLW  01
07A04:  MOVWF  2B
07A06:  CLRF   47
07A08:  MOVLW  02
07A0A:  MOVWF  2F
07A0C:  MOVWF  31
07A0E:  MOVLW  0C
07A10:  MOVLB  8
07A12:  MOVWF  x00
07A14:  MOVLB  0
07A16:  CALL   2254
07A1A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
07A1C:  BRA    7A20
....................          Flanco3 = 0; 
07A1E:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
07A20:  MOVF   2B,W
07A22:  SUBLW  05
07A24:  BTFSS  FD8.2
07A26:  BRA    7CE0
....................       EliminaRuido(); 
07A28:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
07A2C:  MOVLW  01
07A2E:  MOVLB  8
07A30:  MOVWF  x01
07A32:  MOVWF  x02
07A34:  MOVLB  0
07A36:  CALL   21DA
....................          printf(lcd_putc,"  Zero Point Config "); 
07A3A:  MOVLW  42
07A3C:  MOVWF  FF6
07A3E:  MOVLW  0A
07A40:  MOVWF  FF7
07A42:  CALL   22D2
....................          lcd_gotoxy(1,2); 
07A46:  MOVLW  01
07A48:  MOVLB  8
07A4A:  MOVWF  x01
07A4C:  MOVLW  02
07A4E:  MOVWF  x02
07A50:  MOVLB  0
07A52:  CALL   21DA
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
07A56:  MOVLW  05
07A58:  MOVLB  7
07A5A:  MOVWF  xEF
07A5C:  MOVLB  0
07A5E:  CALL   4B18
07A62:  MOVFF  00,7EF
07A66:  MOVFF  01,7F0
07A6A:  MOVFF  02,7F1
07A6E:  MOVFF  03,7F2
07A72:  MOVFF  03,843
07A76:  MOVFF  02,842
07A7A:  MOVFF  01,841
07A7E:  MOVFF  00,840
07A82:  MOVLW  D7
07A84:  MOVLB  8
07A86:  MOVWF  x47
07A88:  MOVLW  A3
07A8A:  MOVWF  x46
07A8C:  CLRF   x45
07A8E:  MOVLW  81
07A90:  MOVWF  x44
07A92:  MOVLB  0
07A94:  CALL   2376
07A98:  MOVFF  00,7EF
07A9C:  MOVFF  01,7F0
07AA0:  MOVFF  02,7F1
07AA4:  MOVFF  03,7F2
07AA8:  MOVLW  58
07AAA:  MOVWF  FF6
07AAC:  MOVLW  0A
07AAE:  MOVWF  FF7
07AB0:  MOVLW  09
07AB2:  MOVLB  7
07AB4:  MOVWF  xF3
07AB6:  MOVLB  0
07AB8:  CALL   4D24
07ABC:  MOVLW  02
07ABE:  MOVWF  FE9
07AC0:  MOVFF  7F2,7F6
07AC4:  MOVFF  7F1,7F5
07AC8:  MOVFF  7F0,7F4
07ACC:  MOVFF  7EF,7F3
07AD0:  MOVLB  7
07AD2:  MOVWF  xF7
07AD4:  MOVLB  0
07AD6:  CALL   4EC0
07ADA:  MOVLW  66
07ADC:  MOVWF  FF6
07ADE:  MOVLW  0A
07AE0:  MOVWF  FF7
07AE2:  MOVLW  07
07AE4:  MOVLB  7
07AE6:  MOVWF  xF3
07AE8:  MOVLB  0
07AEA:  CALL   4D24
....................          lcd_gotoxy(1,3); 
07AEE:  MOVLW  01
07AF0:  MOVLB  8
07AF2:  MOVWF  x01
07AF4:  MOVLW  03
07AF6:  MOVWF  x02
07AF8:  MOVLB  0
07AFA:  CALL   21DA
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
07AFE:  MOVLB  7
07B00:  CLRF   xF7
07B02:  MOVLB  0
07B04:  CALL   3FCC
07B08:  MOVFF  00,7EF
07B0C:  MOVFF  01,7F0
07B10:  MOVFF  02,7F1
07B14:  MOVFF  03,7F2
07B18:  MOVLW  6E
07B1A:  MOVWF  FF6
07B1C:  MOVLW  0A
07B1E:  MOVWF  FF7
07B20:  MOVLW  08
07B22:  MOVLB  7
07B24:  MOVWF  xF3
07B26:  MOVLB  0
07B28:  CALL   4D24
07B2C:  MOVLW  01
07B2E:  MOVWF  FE9
07B30:  MOVFF  7F2,7F6
07B34:  MOVFF  7F1,7F5
07B38:  MOVFF  7F0,7F4
07B3C:  MOVFF  7EF,7F3
07B40:  MOVLB  7
07B42:  CLRF   xF7
07B44:  MOVLB  0
07B46:  CALL   4EC0
....................          lcd_gotoxy(1,4); 
07B4A:  MOVLW  01
07B4C:  MOVLB  8
07B4E:  MOVWF  x01
07B50:  MOVLW  04
07B52:  MOVWF  x02
07B54:  MOVLB  0
07B56:  CALL   21DA
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
07B5A:  MOVLW  7C
07B5C:  MOVWF  FF6
07B5E:  MOVLW  0A
07B60:  MOVWF  FF7
07B62:  MOVLW  07
07B64:  MOVLB  7
07B66:  MOVWF  xF3
07B68:  MOVLB  0
07B6A:  CALL   4D24
07B6E:  MOVLW  01
07B70:  MOVWF  FE9
07B72:  MOVFF  C9,7F6
07B76:  MOVFF  C8,7F5
07B7A:  MOVFF  C7,7F4
07B7E:  MOVFF  C6,7F3
07B82:  MOVLB  7
07B84:  CLRF   xF7
07B86:  MOVLB  0
07B88:  CALL   4EC0
....................           
....................          Cambio=OFF; 
07B8C:  BCF    2A.7
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
07B8E:  BSF    F96.1
07B90:  BTFSC  F84.1
07B92:  BRA    7C94
....................          delay_ms(20); 
07B94:  MOVLW  14
07B96:  MOVLB  8
07B98:  MOVWF  x06
07B9A:  MOVLB  0
07B9C:  CALL   0CCE
....................          if(RIGHT){ 
07BA0:  BSF    F96.1
07BA2:  BTFSC  F84.1
07BA4:  BRA    7C92
....................             if(Flanco1 == 0){ 
07BA6:  BTFSC  29.4
07BA8:  BRA    7C92
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
07BAA:  MOVLW  01
07BAC:  MOVWF  2B
07BAE:  CLRF   47
07BB0:  MOVLW  02
07BB2:  MOVWF  2F
07BB4:  MOVWF  31
07BB6:  MOVLW  0B
07BB8:  MOVWF  2E
07BBA:  MOVLW  02
07BBC:  MOVLB  7
07BBE:  MOVWF  xEF
07BC0:  MOVLW  FA
07BC2:  MOVLB  8
07BC4:  MOVWF  x06
07BC6:  MOVLB  0
07BC8:  CALL   0CCE
07BCC:  MOVLB  7
07BCE:  DECFSZ xEF,F
07BD0:  BRA    7BC0
07BD2:  MOVLW  0C
07BD4:  MOVLB  8
07BD6:  MOVWF  x00
07BD8:  MOVLB  0
07BDA:  CALL   2254
....................                G=sensores(0); 
07BDE:  MOVLB  7
07BE0:  CLRF   xF7
07BE2:  MOVLB  0
07BE4:  CALL   3FCC
07BE8:  MOVFF  03,C9
07BEC:  MOVFF  02,C8
07BF0:  MOVFF  01,C7
07BF4:  MOVFF  00,C6
....................                G16=(int16)G; 
07BF8:  MOVFF  C9,843
07BFC:  MOVFF  C8,842
07C00:  MOVFF  C7,841
07C04:  MOVFF  C6,840
07C08:  CALL   246C
07C0C:  MOVFF  02,5F
07C10:  MOVFF  01,5E
....................                G_l=G16; G_h=(G16>>8); 
07C14:  MOVFF  5E,38
07C18:  MOVFF  5F,39
....................                 
....................                write_eeprom(11,G_l); 
07C1C:  CLRF   FAA
07C1E:  MOVLW  0B
07C20:  MOVWF  FA9
07C22:  MOVFF  38,FA8
07C26:  BCF    FA6.6
07C28:  BCF    FA6.7
07C2A:  BSF    FA6.2
07C2C:  MOVF   FF2,W
07C2E:  MOVWF  00
07C30:  BCF    FF2.6
07C32:  BCF    FF2.7
07C34:  MOVLB  F
07C36:  MOVLW  55
07C38:  MOVWF  FA7
07C3A:  MOVLW  AA
07C3C:  MOVWF  FA7
07C3E:  BSF    FA6.1
07C40:  BTFSC  FA6.1
07C42:  BRA    7C40
07C44:  BCF    FA6.2
07C46:  MOVF   00,W
07C48:  IORWF  FF2,F
....................                delay_ms(20); 
07C4A:  MOVLW  14
07C4C:  MOVLB  8
07C4E:  MOVWF  x06
07C50:  MOVLB  0
07C52:  CALL   0CCE
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
07C56:  CLRF   FAA
07C58:  MOVLW  0C
07C5A:  MOVWF  FA9
07C5C:  MOVFF  39,FA8
07C60:  BCF    FA6.6
07C62:  BCF    FA6.7
07C64:  BSF    FA6.2
07C66:  MOVF   FF2,W
07C68:  MOVWF  00
07C6A:  BCF    FF2.6
07C6C:  BCF    FF2.7
07C6E:  MOVLB  F
07C70:  MOVLW  55
07C72:  MOVWF  FA7
07C74:  MOVLW  AA
07C76:  MOVWF  FA7
07C78:  BSF    FA6.1
07C7A:  BTFSC  FA6.1
07C7C:  BRA    7C7A
07C7E:  BCF    FA6.2
07C80:  MOVF   00,W
07C82:  IORWF  FF2,F
....................                delay_ms(20); 
07C84:  MOVLW  14
07C86:  MOVLB  8
07C88:  MOVWF  x06
07C8A:  MOVLB  0
07C8C:  CALL   0CCE
....................                Cambio=ON; 
07C90:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
07C92:  BRA    7C96
....................          Flanco1 = 0; 
07C94:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
07C96:  BSF    F96.2
07C98:  BTFSC  F84.2
07C9A:  BRA    7CDE
....................          delay_ms(20); 
07C9C:  MOVLW  14
07C9E:  MOVLB  8
07CA0:  MOVWF  x06
07CA2:  MOVLB  0
07CA4:  CALL   0CCE
....................          if(IZQU){ 
07CA8:  BSF    F96.2
07CAA:  BTFSC  F84.2
07CAC:  BRA    7CDC
....................             if(Flanco3 == 0){ 
07CAE:  BTFSC  29.6
07CB0:  BRA    7CDC
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
07CB2:  MOVLW  01
07CB4:  MOVWF  2B
07CB6:  CLRF   47
07CB8:  MOVLW  02
07CBA:  MOVWF  2F
07CBC:  MOVWF  31
07CBE:  MOVLW  0B
07CC0:  MOVWF  2E
07CC2:  MOVLW  1E
07CC4:  MOVLB  8
07CC6:  MOVWF  x06
07CC8:  MOVLB  0
07CCA:  CALL   0CCE
07CCE:  MOVLW  0C
07CD0:  MOVLB  8
07CD2:  MOVWF  x00
07CD4:  MOVLB  0
07CD6:  CALL   2254
....................                Cambio=ON; 
07CDA:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
07CDC:  BRA    7CE0
....................          Flanco3 = 0; 
07CDE:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
07CE0:  MOVF   2B,W
07CE2:  SUBLW  06
07CE4:  BTFSS  FD8.2
07CE6:  BRA    7E3E
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
07CE8:  BTG    2A.4
07CEA:  BSF    29.4
07CEC:  MOVLW  01
07CEE:  MOVWF  2B
07CF0:  CLRF   47
....................                        
....................             if(estadoalarma==1) 
07CF2:  BTFSS  2A.4
07CF4:  BRA    7D66
....................             {estadoalarma=1; 
07CF6:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
07CF8:  MOVLW  01
07CFA:  MOVLB  8
07CFC:  MOVWF  x01
07CFE:  MOVWF  x02
07D00:  MOVLB  0
07D02:  CALL   21DA
....................                printf(lcd_putc,"                    "); 
07D06:  MOVLW  8A
07D08:  MOVWF  FF6
07D0A:  MOVLW  0A
07D0C:  MOVWF  FF7
07D0E:  CALL   22D2
....................                lcd_gotoxy(1,2); 
07D12:  MOVLW  01
07D14:  MOVLB  8
07D16:  MOVWF  x01
07D18:  MOVLW  02
07D1A:  MOVWF  x02
07D1C:  MOVLB  0
07D1E:  CALL   21DA
....................                printf(lcd_putc,"        Activo      "); 
07D22:  MOVLW  A0
07D24:  MOVWF  FF6
07D26:  MOVLW  0A
07D28:  MOVWF  FF7
07D2A:  CALL   22D2
....................                lcd_gotoxy(1,3); 
07D2E:  MOVLW  01
07D30:  MOVLB  8
07D32:  MOVWF  x01
07D34:  MOVLW  03
07D36:  MOVWF  x02
07D38:  MOVLB  0
07D3A:  CALL   21DA
....................                printf(lcd_putc,"        Alarma      "); 
07D3E:  MOVLW  B6
07D40:  MOVWF  FF6
07D42:  MOVLW  0A
07D44:  MOVWF  FF7
07D46:  CALL   22D2
....................                lcd_gotoxy(1,4); 
07D4A:  MOVLW  01
07D4C:  MOVLB  8
07D4E:  MOVWF  x01
07D50:  MOVLW  04
07D52:  MOVWF  x02
07D54:  MOVLB  0
07D56:  CALL   21DA
....................                printf(lcd_putc,"                    ");} 
07D5A:  MOVLW  CC
07D5C:  MOVWF  FF6
07D5E:  MOVLW  0A
07D60:  MOVWF  FF7
07D62:  CALL   22D2
....................                 
....................             if(estadoalarma==0) 
07D66:  BTFSC  2A.4
07D68:  BRA    7DDA
....................             {estadoalarma=0; 
07D6A:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
07D6C:  MOVLW  01
07D6E:  MOVLB  8
07D70:  MOVWF  x01
07D72:  MOVWF  x02
07D74:  MOVLB  0
07D76:  CALL   21DA
....................                printf(lcd_putc,"                    "); 
07D7A:  MOVLW  E2
07D7C:  MOVWF  FF6
07D7E:  MOVLW  0A
07D80:  MOVWF  FF7
07D82:  CALL   22D2
....................                lcd_gotoxy(1,2); 
07D86:  MOVLW  01
07D88:  MOVLB  8
07D8A:  MOVWF  x01
07D8C:  MOVLW  02
07D8E:  MOVWF  x02
07D90:  MOVLB  0
07D92:  CALL   21DA
....................                printf(lcd_putc,"      Desactivo     "); 
07D96:  MOVLW  F8
07D98:  MOVWF  FF6
07D9A:  MOVLW  0A
07D9C:  MOVWF  FF7
07D9E:  CALL   22D2
....................                lcd_gotoxy(1,3); 
07DA2:  MOVLW  01
07DA4:  MOVLB  8
07DA6:  MOVWF  x01
07DA8:  MOVLW  03
07DAA:  MOVWF  x02
07DAC:  MOVLB  0
07DAE:  CALL   21DA
....................                printf(lcd_putc,"       Alarma       "); 
07DB2:  MOVLW  0E
07DB4:  MOVWF  FF6
07DB6:  MOVLW  0B
07DB8:  MOVWF  FF7
07DBA:  CALL   22D2
....................                lcd_gotoxy(1,4); 
07DBE:  MOVLW  01
07DC0:  MOVLB  8
07DC2:  MOVWF  x01
07DC4:  MOVLW  04
07DC6:  MOVWF  x02
07DC8:  MOVLB  0
07DCA:  CALL   21DA
....................                printf(lcd_putc,"                    ");} 
07DCE:  MOVLW  24
07DD0:  MOVWF  FF6
07DD2:  MOVLW  0B
07DD4:  MOVWF  FF7
07DD6:  CALL   22D2
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
07DDA:  MOVLW  00
07DDC:  BTFSC  2A.4
07DDE:  MOVLW  01
07DE0:  MOVLB  7
07DE2:  MOVWF  xEF
07DE4:  CLRF   FAA
07DE6:  MOVLW  04
07DE8:  MOVWF  FA9
07DEA:  MOVFF  7EF,FA8
07DEE:  BCF    FA6.6
07DF0:  BCF    FA6.7
07DF2:  BSF    FA6.2
07DF4:  MOVF   FF2,W
07DF6:  MOVWF  00
07DF8:  BCF    FF2.6
07DFA:  BCF    FF2.7
07DFC:  MOVLB  F
07DFE:  MOVLW  55
07E00:  MOVWF  FA7
07E02:  MOVLW  AA
07E04:  MOVWF  FA7
07E06:  BSF    FA6.1
07E08:  BTFSC  FA6.1
07E0A:  BRA    7E08
07E0C:  BCF    FA6.2
07E0E:  MOVF   00,W
07E10:  IORWF  FF2,F
07E12:  MOVLW  04
07E14:  MOVLB  7
07E16:  MOVWF  xEF
07E18:  MOVLW  FA
07E1A:  MOVLB  8
07E1C:  MOVWF  x06
07E1E:  MOVLB  0
07E20:  CALL   0CCE
07E24:  MOVLB  7
07E26:  DECFSZ xEF,F
07E28:  BRA    7E18
07E2A:  MOVLW  02
07E2C:  MOVWF  2F
07E2E:  MOVWF  31
07E30:  MOVLW  0C
07E32:  MOVLB  8
07E34:  MOVWF  x00
07E36:  MOVLB  0
07E38:  CALL   2254
....................             Cambio=ON; 
07E3C:  BSF    2A.7
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
07E3E:  MOVF   2B,W
07E40:  SUBLW  07
07E42:  BTFSS  FD8.2
07E44:  BRA    8028
....................       if(Vel1>20) 
07E46:  MOVF   58,W
07E48:  SUBLW  14
07E4A:  BC    7E50
....................          Vel1=20; 
07E4C:  MOVLW  14
07E4E:  MOVWF  58
....................       if(Vel1<1) 
07E50:  MOVF   58,F
07E52:  BNZ   7E58
....................          Vel1=1; 
07E54:  MOVLW  01
07E56:  MOVWF  58
....................        
....................       lcd_gotoxy(1,1); 
07E58:  MOVLW  01
07E5A:  MOVLB  8
07E5C:  MOVWF  x01
07E5E:  MOVWF  x02
07E60:  MOVLB  0
07E62:  CALL   21DA
....................       printf(lcd_putc,"Seleccione Velocidad"); 
07E66:  MOVLW  3A
07E68:  MOVWF  FF6
07E6A:  MOVLW  0B
07E6C:  MOVWF  FF7
07E6E:  CALL   22D2
....................       lcd_gotoxy(1,2); 
07E72:  MOVLW  01
07E74:  MOVLB  8
07E76:  MOVWF  x01
07E78:  MOVLW  02
07E7A:  MOVWF  x02
07E7C:  MOVLB  0
07E7E:  CALL   21DA
....................       printf(lcd_putc,"   del Ventilador   "); 
07E82:  MOVLW  50
07E84:  MOVWF  FF6
07E86:  MOVLW  0B
07E88:  MOVWF  FF7
07E8A:  CALL   22D2
....................       lcd_gotoxy(1,3); 
07E8E:  MOVLW  01
07E90:  MOVLB  8
07E92:  MOVWF  x01
07E94:  MOVLW  03
07E96:  MOVWF  x02
07E98:  MOVLB  0
07E9A:  CALL   21DA
....................       printf(lcd_putc,"     Vel: %02u       ",Vel1); 
07E9E:  MOVLW  66
07EA0:  MOVWF  FF6
07EA2:  MOVLW  0B
07EA4:  MOVWF  FF7
07EA6:  MOVLW  0A
07EA8:  MOVLB  7
07EAA:  MOVWF  xF3
07EAC:  MOVLB  0
07EAE:  CALL   4D24
07EB2:  MOVFF  58,7EF
07EB6:  MOVLW  01
07EB8:  MOVLB  7
07EBA:  MOVWF  xF0
07EBC:  MOVLB  0
07EBE:  CALL   4D7A
07EC2:  MOVLW  74
07EC4:  MOVWF  FF6
07EC6:  MOVLW  0B
07EC8:  MOVWF  FF7
07ECA:  MOVLW  07
07ECC:  MOVLB  7
07ECE:  MOVWF  xF3
07ED0:  MOVLB  0
07ED2:  CALL   4D24
....................       lcd_gotoxy(1,4); 
07ED6:  MOVLW  01
07ED8:  MOVLB  8
07EDA:  MOVWF  x01
07EDC:  MOVLW  04
07EDE:  MOVWF  x02
07EE0:  MOVLB  0
07EE2:  CALL   21DA
....................       printf(lcd_putc,"                    ");       
07EE6:  MOVLW  7C
07EE8:  MOVWF  FF6
07EEA:  MOVLW  0B
07EEC:  MOVWF  FF7
07EEE:  CALL   22D2
....................        
....................       if(UP && Vel1<20)//Si oprime hacia arriba 
07EF2:  BSF    F92.5
07EF4:  BTFSC  F80.5
07EF6:  BRA    7F0C
07EF8:  MOVF   58,W
07EFA:  SUBLW  13
07EFC:  BNC   7F0C
....................       {   
....................          delay_ms(200);Vel1++; 
07EFE:  MOVLW  C8
07F00:  MOVLB  8
07F02:  MOVWF  x06
07F04:  MOVLB  0
07F06:  CALL   0CCE
07F0A:  INCF   58,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
07F0C:  BSF    F96.0
07F0E:  BTFSC  F84.0
07F10:  BRA    7F24
07F12:  MOVF   58,F
07F14:  BZ    7F24
....................       {   
....................          delay_ms(200);Vel1--; 
07F16:  MOVLW  C8
07F18:  MOVLB  8
07F1A:  MOVWF  x06
07F1C:  MOVLB  0
07F1E:  CALL   0CCE
07F22:  DECF   58,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
07F24:  BSF    F96.1
07F26:  BTFSC  F84.1
07F28:  BRA    7F2E
....................       {            
....................          VelMotor=Vel1; 
07F2A:  MOVFF  58,EF
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
07F2E:  BSF    F96.2
07F30:  BTFSC  F84.2
07F32:  BRA    8028
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
07F34:  MOVLW  64
07F36:  MOVLB  8
07F38:  MOVWF  x06
07F3A:  MOVLB  0
07F3C:  CALL   0CCE
07F40:  MOVLW  02
07F42:  MOVWF  2F
07F44:  MOVWF  31
07F46:  MOVLW  0C
07F48:  MOVLB  8
07F4A:  MOVWF  x00
07F4C:  MOVLB  0
07F4E:  CALL   2254
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
07F52:  CLRF   FAA
07F54:  MOVLW  0D
07F56:  MOVWF  FA9
07F58:  MOVFF  58,FA8
07F5C:  BCF    FA6.6
07F5E:  BCF    FA6.7
07F60:  BSF    FA6.2
07F62:  MOVF   FF2,W
07F64:  MOVWF  00
07F66:  BCF    FF2.6
07F68:  BCF    FF2.7
07F6A:  MOVLB  F
07F6C:  MOVLW  55
07F6E:  MOVWF  FA7
07F70:  MOVLW  AA
07F72:  MOVWF  FA7
07F74:  BSF    FA6.1
07F76:  BTFSC  FA6.1
07F78:  BRA    7F76
07F7A:  BCF    FA6.2
07F7C:  MOVF   00,W
07F7E:  IORWF  FF2,F
....................          delay_ms(20); 
07F80:  MOVLW  14
07F82:  MOVLB  8
07F84:  MOVWF  x06
07F86:  MOVLB  0
07F88:  CALL   0CCE
....................          lcd_gotoxy(1,1); 
07F8C:  MOVLW  01
07F8E:  MOVLB  8
07F90:  MOVWF  x01
07F92:  MOVWF  x02
07F94:  MOVLB  0
07F96:  CALL   21DA
....................          printf(lcd_putc,"                    "); 
07F9A:  MOVLW  92
07F9C:  MOVWF  FF6
07F9E:  MOVLW  0B
07FA0:  MOVWF  FF7
07FA2:  CALL   22D2
....................          lcd_gotoxy(1,2); 
07FA6:  MOVLW  01
07FA8:  MOVLB  8
07FAA:  MOVWF  x01
07FAC:  MOVLW  02
07FAE:  MOVWF  x02
07FB0:  MOVLB  0
07FB2:  CALL   21DA
....................          printf(lcd_putc,"     Velocidad      "); 
07FB6:  MOVLW  A8
07FB8:  MOVWF  FF6
07FBA:  MOVLW  0B
07FBC:  MOVWF  FF7
07FBE:  CALL   22D2
....................          lcd_gotoxy(1,3); 
07FC2:  MOVLW  01
07FC4:  MOVLB  8
07FC6:  MOVWF  x01
07FC8:  MOVLW  03
07FCA:  MOVWF  x02
07FCC:  MOVLB  0
07FCE:  CALL   21DA
....................          printf(lcd_putc,"      Almacenada    "); 
07FD2:  MOVLW  BE
07FD4:  MOVWF  FF6
07FD6:  MOVLW  0B
07FD8:  MOVWF  FF7
07FDA:  CALL   22D2
....................          lcd_gotoxy(1,4); 
07FDE:  MOVLW  01
07FE0:  MOVLB  8
07FE2:  MOVWF  x01
07FE4:  MOVLW  04
07FE6:  MOVWF  x02
07FE8:  MOVLB  0
07FEA:  CALL   21DA
....................          printf(lcd_putc,"                    ");  
07FEE:  MOVLW  D4
07FF0:  MOVWF  FF6
07FF2:  MOVLW  0B
07FF4:  MOVWF  FF7
07FF6:  CALL   22D2
....................          delay_ms(1000); 
07FFA:  MOVLW  04
07FFC:  MOVLB  7
07FFE:  MOVWF  xEF
08000:  MOVLW  FA
08002:  MOVLB  8
08004:  MOVWF  x06
08006:  MOVLB  0
08008:  CALL   0CCE
0800C:  MOVLB  7
0800E:  DECFSZ xEF,F
08010:  BRA    8000
....................          printf(lcd_putc,"\f"); 
08012:  MOVLW  0C
08014:  MOVLB  8
08016:  MOVWF  x00
08018:  MOVLB  0
0801A:  CALL   2254
....................          lcd_init(); 
0801E:  CALL   0D70
....................          Menu=1; paso=0; 
08022:  MOVLW  01
08024:  MOVWF  2B
08026:  CLRF   47
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
08028:  MOVF   2B,W
0802A:  SUBLW  32
0802C:  BTFSS  FD8.2
0802E:  GOTO   890E
....................    if(Lectura==1){ 
08032:  BTFSS  2A.0
08034:  BRA    844A
....................       Lectura=0; 
08036:  BCF    2A.0
....................       DownFlow=LeerFlujo(Media,1); 
08038:  MOVFF  59,7EF
0803C:  MOVLW  01
0803E:  MOVLB  7
08040:  MOVWF  xF0
08042:  MOVLB  0
08044:  CALL   4026
08048:  MOVFF  03,C5
0804C:  MOVFF  02,C4
08050:  MOVFF  01,C3
08054:  MOVFF  00,C2
....................       CaidaPresion=Leer_Sensor_Presion(8); 
08058:  MOVLW  08
0805A:  MOVLB  7
0805C:  MOVWF  xEF
0805E:  MOVLB  0
08060:  CALL   4B18
08064:  MOVFF  03,C1
08068:  MOVFF  02,C0
0806C:  MOVFF  01,BF
08070:  MOVFF  00,BE
....................       CaidaPresion=CaidaPresion*4.02; 
08074:  MOVFF  C1,843
08078:  MOVFF  C0,842
0807C:  MOVFF  BF,841
08080:  MOVFF  BE,840
08084:  MOVLW  D7
08086:  MOVLB  8
08088:  MOVWF  x47
0808A:  MOVLW  A3
0808C:  MOVWF  x46
0808E:  CLRF   x45
08090:  MOVLW  81
08092:  MOVWF  x44
08094:  MOVLB  0
08096:  CALL   2376
0809A:  MOVFF  03,C1
0809E:  MOVFF  02,C0
080A2:  MOVFF  01,BF
080A6:  MOVFF  00,BE
....................       if(DownFlow<0.3 && estadomv==1 && tEncendido>30){ 
080AA:  MOVFF  C5,843
080AE:  MOVFF  C4,842
080B2:  MOVFF  C3,841
080B6:  MOVFF  C2,840
080BA:  MOVLW  9A
080BC:  MOVLB  8
080BE:  MOVWF  x47
080C0:  MOVLW  99
080C2:  MOVWF  x46
080C4:  MOVLW  19
080C6:  MOVWF  x45
080C8:  MOVLW  7D
080CA:  MOVWF  x44
080CC:  MOVLB  0
080CE:  CALL   18DC
080D2:  BNC   8104
080D4:  BTFSS  29.2
080D6:  BRA    8104
080D8:  MOVF   61,F
080DA:  BNZ   80E2
080DC:  MOVF   60,W
080DE:  SUBLW  1E
080E0:  BC    8104
....................          lcd_gotoxy(1,2); 
080E2:  MOVLW  01
080E4:  MOVLB  8
080E6:  MOVWF  x01
080E8:  MOVLW  02
080EA:  MOVWF  x02
080EC:  MOVLB  0
080EE:  CALL   21DA
....................          printf(lcd_putc,"!Verifique Flujo!  ");  
080F2:  MOVLW  EA
080F4:  MOVWF  FF6
080F6:  MOVLW  0B
080F8:  MOVWF  FF7
080FA:  CALL   22D2
....................          ActivaBuzzer=1; 
080FE:  MOVLW  01
08100:  MOVWF  54
....................       }else if(CaidaPresion>=1.0){ 
08102:  BRA    824A
08104:  MOVLB  8
08106:  CLRF   x43
08108:  CLRF   x42
0810A:  CLRF   x41
0810C:  MOVLW  7F
0810E:  MOVWF  x40
08110:  MOVFF  C1,847
08114:  MOVFF  C0,846
08118:  MOVFF  BF,845
0811C:  MOVFF  BE,844
08120:  MOVLB  0
08122:  CALL   18DC
08126:  BC    812A
08128:  BNZ   814C
....................          lcd_gotoxy(1,2); 
0812A:  MOVLW  01
0812C:  MOVLB  8
0812E:  MOVWF  x01
08130:  MOVLW  02
08132:  MOVWF  x02
08134:  MOVLB  0
08136:  CALL   21DA
....................          printf(lcd_putc,"!Verifique Filtro!");  
0813A:  MOVLW  FE
0813C:  MOVWF  FF6
0813E:  MOVLW  0B
08140:  MOVWF  FF7
08142:  CALL   22D2
....................          ActivaBuzzer=1; 
08146:  MOVLW  01
08148:  MOVWF  54
....................       }else{ 
0814A:  BRA    824A
....................          lcd_gotoxy(1,2); 
0814C:  MOVLW  01
0814E:  MOVLB  8
08150:  MOVWF  x01
08152:  MOVLW  02
08154:  MOVWF  x02
08156:  MOVLB  0
08158:  CALL   21DA
....................          printf(lcd_putc,"Filtro:"); 
0815C:  MOVLW  12
0815E:  MOVWF  FF6
08160:  MOVLW  0C
08162:  MOVWF  FF7
08164:  CALL   22D2
....................          for(i=0;i<floor(Saturacion);i++){ 
08168:  CLRF   40
0816A:  MOVFF  BD,82F
0816E:  MOVFF  BC,82E
08172:  MOVFF  BB,82D
08176:  MOVFF  BA,82C
0817A:  CALL   2830
0817E:  MOVFF  00,7EF
08182:  MOVFF  01,7F0
08186:  MOVFF  02,7F1
0818A:  MOVFF  03,7F2
0818E:  MOVLB  8
08190:  CLRF   x45
08192:  MOVFF  40,844
08196:  MOVLB  0
08198:  CALL   0E38
0819C:  MOVFF  03,843
081A0:  MOVFF  02,842
081A4:  MOVFF  01,841
081A8:  MOVFF  00,840
081AC:  MOVFF  7F2,847
081B0:  MOVFF  7F1,846
081B4:  MOVFF  7F0,845
081B8:  MOVFF  7EF,844
081BC:  CALL   18DC
081C0:  BNC   81EA
....................             lcd_gotoxy(i+8,2); 
081C2:  MOVLW  08
081C4:  ADDWF  40,W
081C6:  MOVLB  7
081C8:  MOVWF  xEF
081CA:  MOVFF  FE8,801
081CE:  MOVLW  02
081D0:  MOVLB  8
081D2:  MOVWF  x02
081D4:  MOVLB  0
081D6:  CALL   21DA
....................             printf(lcd_putc,"Ñ"); 
081DA:  MOVLW  D1
081DC:  MOVLB  8
081DE:  MOVWF  x00
081E0:  MOVLB  0
081E2:  CALL   2254
....................          } 
081E6:  INCF   40,F
081E8:  BRA    816A
....................           
....................          for(i=floor(Saturacion);i<11;i++){ 
081EA:  MOVFF  BD,82F
081EE:  MOVFF  BC,82E
081F2:  MOVFF  BB,82D
081F6:  MOVFF  BA,82C
081FA:  CALL   2830
081FE:  MOVFF  03,843
08202:  MOVFF  02,842
08206:  MOVFF  01,841
0820A:  MOVFF  00,840
0820E:  CALL   246C
08212:  MOVFF  01,40
08216:  MOVF   40,W
08218:  SUBLW  0A
0821A:  BNC   8244
....................             lcd_gotoxy(i+8,2); 
0821C:  MOVLW  08
0821E:  ADDWF  40,W
08220:  MOVLB  7
08222:  MOVWF  xEF
08224:  MOVFF  FE8,801
08228:  MOVLW  02
0822A:  MOVLB  8
0822C:  MOVWF  x02
0822E:  MOVLB  0
08230:  CALL   21DA
....................             printf(lcd_putc," "); 
08234:  MOVLW  20
08236:  MOVLB  8
08238:  MOVWF  x00
0823A:  MOVLB  0
0823C:  CALL   2254
....................          }    
08240:  INCF   40,F
08242:  BRA    8216
....................          Buzzer_off; 
08244:  BCF    F8B.0
08246:  BCF    F94.0
....................          ActivaBuzzer=0; 
08248:  CLRF   54
....................       } 
....................       lcd_gotoxy(1,1); 
0824A:  MOVLW  01
0824C:  MOVLB  8
0824E:  MOVWF  x01
08250:  MOVWF  x02
08252:  MOVLB  0
08254:  CALL   21DA
....................       printf(lcd_putc,"F:%2.2fm/s P:%3.2finWC",DownFlow,CaidaPresion);   
08258:  MOVLW  46
0825A:  MOVLB  8
0825C:  MOVWF  x00
0825E:  MOVLB  0
08260:  CALL   2254
08264:  MOVLW  3A
08266:  MOVLB  8
08268:  MOVWF  x00
0826A:  MOVLB  0
0826C:  CALL   2254
08270:  MOVLW  89
08272:  MOVWF  FE9
08274:  MOVFF  C5,7F6
08278:  MOVFF  C4,7F5
0827C:  MOVFF  C3,7F4
08280:  MOVFF  C2,7F3
08284:  MOVLW  02
08286:  MOVLB  7
08288:  MOVWF  xF7
0828A:  MOVLB  0
0828C:  CALL   4EC0
08290:  MOVLW  21
08292:  MOVWF  FF6
08294:  MOVLW  0C
08296:  MOVWF  FF7
08298:  MOVLW  06
0829A:  MOVLB  7
0829C:  MOVWF  xF3
0829E:  MOVLB  0
082A0:  CALL   4D24
082A4:  MOVLW  02
082A6:  MOVWF  FE9
082A8:  MOVFF  C1,7F6
082AC:  MOVFF  C0,7F5
082B0:  MOVFF  BF,7F4
082B4:  MOVFF  BE,7F3
082B8:  MOVLB  7
082BA:  MOVWF  xF7
082BC:  MOVLB  0
082BE:  CALL   4EC0
082C2:  MOVLW  2C
082C4:  MOVWF  FF6
082C6:  MOVLW  0C
082C8:  MOVWF  FF7
082CA:  MOVLW  04
082CC:  MOVLB  7
082CE:  MOVWF  xF3
082D0:  MOVLB  0
082D2:  CALL   4D24
....................       //Saturacion=11*(((float)Vel1-(float)velocidadInicial)/(20.0-(float)velocidadInicial)); 
....................       Saturacion=(CaidaPresion/1.0)*11; 
082D6:  MOVFF  C1,843
082DA:  MOVFF  C0,842
082DE:  MOVFF  BF,841
082E2:  MOVFF  BE,840
082E6:  MOVLB  8
082E8:  CLRF   x47
082EA:  CLRF   x46
082EC:  CLRF   x45
082EE:  MOVLW  7F
082F0:  MOVWF  x44
082F2:  MOVLB  0
082F4:  CALL   0E6E
082F8:  MOVFF  00,7EF
082FC:  MOVFF  01,7F0
08300:  MOVFF  02,7F1
08304:  MOVFF  03,7F2
08308:  MOVFF  03,843
0830C:  MOVFF  02,842
08310:  MOVFF  01,841
08314:  MOVFF  00,840
08318:  MOVLB  8
0831A:  CLRF   x47
0831C:  CLRF   x46
0831E:  MOVLW  30
08320:  MOVWF  x45
08322:  MOVLW  82
08324:  MOVWF  x44
08326:  MOVLB  0
08328:  CALL   2376
0832C:  MOVFF  03,BD
08330:  MOVFF  02,BC
08334:  MOVFF  01,BB
08338:  MOVFF  00,BA
....................        
....................       lcd_gotoxy(9,3); 
0833C:  MOVLW  09
0833E:  MOVLB  8
08340:  MOVWF  x01
08342:  MOVLW  03
08344:  MOVWF  x02
08346:  MOVLB  0
08348:  CALL   21DA
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
0834C:  MOVLW  32
0834E:  MOVWF  FF6
08350:  MOVLW  0C
08352:  MOVWF  FF7
08354:  MOVLW  06
08356:  MOVLB  7
08358:  MOVWF  xF3
0835A:  MOVLB  0
0835C:  CALL   4D24
08360:  MOVFF  3A,7EF
08364:  MOVLW  03
08366:  MOVLB  7
08368:  MOVWF  xF0
0836A:  MOVLB  0
0836C:  CALL   4D7A
08370:  MOVLW  3A
08372:  MOVLB  8
08374:  MOVWF  x00
08376:  MOVLB  0
08378:  CALL   2254
0837C:  MOVFF  3B,7EF
08380:  MOVLW  01
08382:  MOVLB  7
08384:  MOVWF  xF0
08386:  MOVLB  0
08388:  CALL   4D7A
....................       EliminaRuido(); 
0838C:  CALL   0004
....................        
....................       if(estadomv==1){ 
08390:  BTFSS  29.2
08392:  BRA    83B2
....................          lcd_gotoxy(1,4); 
08394:  MOVLW  01
08396:  MOVLB  8
08398:  MOVWF  x01
0839A:  MOVLW  04
0839C:  MOVWF  x02
0839E:  MOVLB  0
083A0:  CALL   21DA
....................          printf(lcd_putc,"Motor:ON ");       
083A4:  MOVLW  42
083A6:  MOVWF  FF6
083A8:  MOVLW  0C
083AA:  MOVWF  FF7
083AC:  CALL   22D2
....................       }else{ 
083B0:  BRA    83CE
....................          lcd_gotoxy(1,4); 
083B2:  MOVLW  01
083B4:  MOVLB  8
083B6:  MOVWF  x01
083B8:  MOVLW  04
083BA:  MOVWF  x02
083BC:  MOVLB  0
083BE:  CALL   21DA
....................          printf(lcd_putc,"Motor:OFF"); 
083C2:  MOVLW  4C
083C4:  MOVWF  FF6
083C6:  MOVLW  0C
083C8:  MOVWF  FF7
083CA:  CALL   22D2
....................       } 
....................        
....................       if(estadofl==1){ 
083CE:  BTFSS  29.1
083D0:  BRA    83F0
....................          lcd_gotoxy(1,3); 
083D2:  MOVLW  01
083D4:  MOVLB  8
083D6:  MOVWF  x01
083D8:  MOVLW  03
083DA:  MOVWF  x02
083DC:  MOVLB  0
083DE:  CALL   21DA
....................          printf(lcd_putc,"Luz:ON "); 
083E2:  MOVLW  56
083E4:  MOVWF  FF6
083E6:  MOVLW  0C
083E8:  MOVWF  FF7
083EA:  CALL   22D2
....................       }else{ 
083EE:  BRA    840C
....................          lcd_gotoxy(1,3); 
083F0:  MOVLW  01
083F2:  MOVLB  8
083F4:  MOVWF  x01
083F6:  MOVLW  03
083F8:  MOVWF  x02
083FA:  MOVLB  0
083FC:  CALL   21DA
....................          printf(lcd_putc,"Luz:OFF"); 
08400:  MOVLW  5E
08402:  MOVWF  FF6
08404:  MOVLW  0C
08406:  MOVWF  FF7
08408:  CALL   22D2
....................       }  
....................        
....................       if(estadouv==1){ 
0840C:  BTFSS  29.0
0840E:  BRA    842E
....................          lcd_gotoxy(13,4); 
08410:  MOVLW  0D
08412:  MOVLB  8
08414:  MOVWF  x01
08416:  MOVLW  04
08418:  MOVWF  x02
0841A:  MOVLB  0
0841C:  CALL   21DA
....................          printf(lcd_putc,"UV:ON "); 
08420:  MOVLW  66
08422:  MOVWF  FF6
08424:  MOVLW  0C
08426:  MOVWF  FF7
08428:  CALL   22D2
....................       }else{          
0842C:  BRA    844A
....................          lcd_gotoxy(13,4); 
0842E:  MOVLW  0D
08430:  MOVLB  8
08432:  MOVWF  x01
08434:  MOVLW  04
08436:  MOVWF  x02
08438:  MOVLB  0
0843A:  CALL   21DA
....................          printf(lcd_putc,"UV:OFF"); 
0843E:  MOVLW  6E
08440:  MOVWF  FF6
08442:  MOVLW  0C
08444:  MOVWF  FF7
08446:  CALL   22D2
....................       } 
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
0844A:  BTFSS  29.7
0844C:  BRA    8506
....................       if(estadoalarma==1){ 
0844E:  BTFSS  2A.4
08450:  BRA    84F8
....................          printf(lcd_putc,"\f"); 
08452:  MOVLW  0C
08454:  MOVLB  8
08456:  MOVWF  x00
08458:  MOVLB  0
0845A:  CALL   2254
....................          lcd_gotoxy(1,2); 
0845E:  MOVLW  01
08460:  MOVLB  8
08462:  MOVWF  x01
08464:  MOVLW  02
08466:  MOVWF  x02
08468:  MOVLB  0
0846A:  CALL   21DA
....................          printf(lcd_putc,"  Temporizador  de  "); 
0846E:  MOVLW  76
08470:  MOVWF  FF6
08472:  MOVLW  0C
08474:  MOVWF  FF7
08476:  CALL   22D2
....................          lcd_gotoxy(1,3); 
0847A:  MOVLW  01
0847C:  MOVLB  8
0847E:  MOVWF  x01
08480:  MOVLW  03
08482:  MOVWF  x02
08484:  MOVLB  0
08486:  CALL   21DA
....................          printf(lcd_putc," Luz UV  Finalizado "); 
0848A:  MOVLW  8C
0848C:  MOVWF  FF6
0848E:  MOVLW  0C
08490:  MOVWF  FF7
08492:  CALL   22D2
....................          lcd_gotoxy(1,4); 
08496:  MOVLW  01
08498:  MOVLB  8
0849A:  MOVWF  x01
0849C:  MOVLW  04
0849E:  MOVWF  x02
084A0:  MOVLB  0
084A2:  CALL   21DA
....................          printf(lcd_putc,"                    "); 
084A6:  MOVLW  A2
084A8:  MOVWF  FF6
084AA:  MOVLW  0C
084AC:  MOVWF  FF7
084AE:  CALL   22D2
....................          lcd_gotoxy(1,1); 
084B2:  MOVLW  01
084B4:  MOVLB  8
084B6:  MOVWF  x01
084B8:  MOVWF  x02
084BA:  MOVLB  0
084BC:  CALL   21DA
....................          printf(lcd_putc,"                    "); 
084C0:  MOVLW  B8
084C2:  MOVWF  FF6
084C4:  MOVLW  0C
084C6:  MOVWF  FF7
084C8:  CALL   22D2
....................          for(i=0;i<5;i++) 
084CC:  CLRF   40
084CE:  MOVF   40,W
084D0:  SUBLW  04
084D2:  BNC   84F8
....................          { 
....................             Buzzer_on; 
084D4:  BSF    F8B.0
084D6:  BCF    F94.0
....................             delay_ms(200); 
084D8:  MOVLW  C8
084DA:  MOVLB  8
084DC:  MOVWF  x06
084DE:  MOVLB  0
084E0:  CALL   0CCE
....................             Buzzer_off; 
084E4:  BCF    F8B.0
084E6:  BCF    F94.0
....................             delay_ms(200); 
084E8:  MOVLW  C8
084EA:  MOVLB  8
084EC:  MOVWF  x06
084EE:  MOVLB  0
084F0:  CALL   0CCE
....................          } 
084F4:  INCF   40,F
084F6:  BRA    84CE
....................       } 
....................       tiempo_cumplido=0; 
084F8:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
084FA:  MOVLW  0C
084FC:  MOVLB  8
084FE:  MOVWF  x00
08500:  MOVLB  0
08502:  CALL   2254
....................    }    
....................        
....................    if(estadofl==1){ 
08506:  BTFSS  29.1
08508:  BRA    852C
....................       Luz_Blanca_on; 
0850A:  BCF    F8A.3
0850C:  BCF    F93.3
....................       if(flagfl==0){ 
0850E:  BTFSC  2A.2
08510:  BRA    852A
....................          lcd_init();delay_ms(200);lcd_init(); 
08512:  CALL   0D70
08516:  MOVLW  C8
08518:  MOVLB  8
0851A:  MOVWF  x06
0851C:  MOVLB  0
0851E:  CALL   0CCE
08522:  CALL   0D70
....................          flagfl=1;Cambio=ON; 
08526:  BSF    2A.2
08528:  BSF    2A.7
....................       } 
....................    }else{ 
0852A:  BRA    854C
....................       Luz_Blanca_off; 
0852C:  BSF    F8A.3
0852E:  BCF    F93.3
....................       if(flagfl==1){ 
08530:  BTFSS  2A.2
08532:  BRA    854C
....................          lcd_init();delay_ms(200);lcd_init(); 
08534:  CALL   0D70
08538:  MOVLW  C8
0853A:  MOVLB  8
0853C:  MOVWF  x06
0853E:  MOVLB  0
08540:  CALL   0CCE
08544:  CALL   0D70
....................          flagfl=0;Cambio=ON; 
08548:  BCF    2A.2
0854A:  BSF    2A.7
....................       } 
....................    } 
....................       Cambio=OFF; 
0854C:  BCF    2A.7
....................     
....................    if(estadomv==1){  
0854E:  BTFSS  29.2
08550:  BRA    8584
....................       if(flagmv==0){ 
08552:  BTFSC  xCA.0
08554:  BRA    857E
....................          VelMotor=6; 
08556:  MOVLW  06
08558:  MOVWF  xEF
....................          lcd_init();delay_ms(200);lcd_init(); 
0855A:  CALL   0D70
0855E:  MOVLW  C8
08560:  MOVLB  8
08562:  MOVWF  x06
08564:  MOVLB  0
08566:  CALL   0CCE
0856A:  CALL   0D70
....................          flagmv=1;Cambio=ON;delay_ms(200); 
0856E:  BSF    xCA.0
08570:  BSF    2A.7
08572:  MOVLW  C8
08574:  MOVLB  8
08576:  MOVWF  x06
08578:  MOVLB  0
0857A:  CALL   0CCE
....................       } 
....................       VelMotor=Vel1; 
0857E:  MOVFF  58,EF
....................    }else{ 
08582:  BRA    85A6
....................       tEncendido=0; 
08584:  CLRF   61
08586:  CLRF   60
....................       VelMotor=0; 
08588:  CLRF   xEF
....................       if(flagmv==1){ 
0858A:  BTFSS  xCA.0
0858C:  BRA    85A6
....................          lcd_init();delay_ms(200);lcd_init(); 
0858E:  CALL   0D70
08592:  MOVLW  C8
08594:  MOVLB  8
08596:  MOVWF  x06
08598:  MOVLB  0
0859A:  CALL   0CCE
0859E:  CALL   0D70
....................          flagmv=0;Cambio=ON; 
085A2:  BCF    xCA.0
085A4:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
085A6:  BTFSS  29.1
085A8:  BRA    85CC
....................    { 
....................       Luz_Blanca_on; 
085AA:  BCF    F8A.3
085AC:  BCF    F93.3
....................       if(flagfl==0) 
085AE:  BTFSC  2A.2
085B0:  BRA    85CA
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
085B2:  CALL   0D70
085B6:  MOVLW  C8
085B8:  MOVLB  8
085BA:  MOVWF  x06
085BC:  MOVLB  0
085BE:  CALL   0CCE
085C2:  CALL   0D70
....................          flagfl=1;Cambio=ON; 
085C6:  BSF    2A.2
085C8:  BSF    2A.7
....................       } 
....................    } 
....................    else 
085CA:  BRA    85EC
....................    { 
....................       Luz_Blanca_off; 
085CC:  BSF    F8A.3
085CE:  BCF    F93.3
....................       if(flagfl==1) 
085D0:  BTFSS  2A.2
085D2:  BRA    85EC
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
085D4:  CALL   0D70
085D8:  MOVLW  C8
085DA:  MOVLB  8
085DC:  MOVWF  x06
085DE:  MOVLB  0
085E0:  CALL   0CCE
085E4:  CALL   0D70
....................          flagfl=0;Cambio=ON; 
085E8:  BCF    2A.2
085EA:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
085EC:  BTFSS  29.0
085EE:  BRA    86AA
....................       Luz_UV_on; 
085F0:  BCF    F8A.4
085F2:  BCF    F93.4
....................       tiempo_cumplido=0;       
085F4:  BCF    29.7
....................       estadomv=0; 
085F6:  BCF    29.2
....................       VelMotor=0; 
085F8:  CLRF   xEF
....................       estadofl=0; 
085FA:  BCF    29.1
....................       Luz_Blanca_off; 
085FC:  BSF    F8A.3
085FE:  BCF    F93.3
....................       if(flaguv==0){ 
08600:  BTFSC  2A.1
08602:  BRA    86A8
....................          lcd_init();delay_ms(200);lcd_init(); 
08604:  CALL   0D70
08608:  MOVLW  C8
0860A:  MOVLB  8
0860C:  MOVWF  x06
0860E:  MOVLB  0
08610:  CALL   0CCE
08614:  CALL   0D70
....................          flaguv=1;guardaruv=1;Cambio=ON; 
08618:  BSF    2A.1
0861A:  MOVLW  01
0861C:  MOVWF  43
0861E:  BSF    2A.7
....................          write_eeprom(22,estadomv);delay_ms(20); 
08620:  MOVLW  00
08622:  BTFSC  29.2
08624:  MOVLW  01
08626:  MOVLB  7
08628:  MOVWF  xEF
0862A:  CLRF   FAA
0862C:  MOVLW  16
0862E:  MOVWF  FA9
08630:  MOVFF  7EF,FA8
08634:  BCF    FA6.6
08636:  BCF    FA6.7
08638:  BSF    FA6.2
0863A:  MOVF   FF2,W
0863C:  MOVWF  00
0863E:  BCF    FF2.6
08640:  BCF    FF2.7
08642:  MOVLB  F
08644:  MOVLW  55
08646:  MOVWF  FA7
08648:  MOVLW  AA
0864A:  MOVWF  FA7
0864C:  BSF    FA6.1
0864E:  BTFSC  FA6.1
08650:  BRA    864E
08652:  BCF    FA6.2
08654:  MOVF   00,W
08656:  IORWF  FF2,F
08658:  MOVLW  14
0865A:  MOVLB  8
0865C:  MOVWF  x06
0865E:  MOVLB  0
08660:  CALL   0CCE
....................          write_eeprom(23,estadofl);delay_ms(20); 
08664:  MOVLW  00
08666:  BTFSC  29.1
08668:  MOVLW  01
0866A:  MOVLB  7
0866C:  MOVWF  xEF
0866E:  CLRF   FAA
08670:  MOVLW  17
08672:  MOVWF  FA9
08674:  MOVFF  7EF,FA8
08678:  BCF    FA6.6
0867A:  BCF    FA6.7
0867C:  BSF    FA6.2
0867E:  MOVF   FF2,W
08680:  MOVWF  00
08682:  BCF    FF2.6
08684:  BCF    FF2.7
08686:  MOVLB  F
08688:  MOVLW  55
0868A:  MOVWF  FA7
0868C:  MOVLW  AA
0868E:  MOVWF  FA7
08690:  BSF    FA6.1
08692:  BTFSC  FA6.1
08694:  BRA    8692
08696:  BCF    FA6.2
08698:  MOVF   00,W
0869A:  IORWF  FF2,F
0869C:  MOVLW  14
0869E:  MOVLB  8
086A0:  MOVWF  x06
086A2:  MOVLB  0
086A4:  CALL   0CCE
....................       } 
....................    }else{ 
086A8:  BRA    86D0
....................       estadouv=0; 
086AA:  BCF    29.0
....................       Luz_UV_off; 
086AC:  BSF    F8A.4
086AE:  BCF    F93.4
....................       if(flaguv==1){ 
086B0:  BTFSS  2A.1
086B2:  BRA    86D0
....................          lcd_init();delay_ms(200);lcd_init(); 
086B4:  CALL   0D70
086B8:  MOVLW  C8
086BA:  MOVLB  8
086BC:  MOVWF  x06
086BE:  MOVLB  0
086C0:  CALL   0CCE
086C4:  CALL   0D70
....................          flaguv=0;guardaruv=1;Cambio=ON; 
086C8:  BCF    2A.1
086CA:  MOVLW  01
086CC:  MOVWF  43
086CE:  BSF    2A.7
....................       } 
....................    } 
....................        
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
086D0:  MOVF   xD0,F
086D2:  BNZ   86DA
086D4:  MOVF   xCF,W
086D6:  SUBLW  3B
086D8:  BC    8738
....................       if(!Flanco){ 
086DA:  BTFSC  29.3
086DC:  BRA    8736
....................          estadofl=!estadofl;Flanco = 1;write_eeprom(23,estadofl);delay_ms(300);Cambio=ON; 
086DE:  BTG    29.1
086E0:  BSF    29.3
086E2:  MOVLW  00
086E4:  BTFSC  29.1
086E6:  MOVLW  01
086E8:  MOVLB  7
086EA:  MOVWF  xEF
086EC:  CLRF   FAA
086EE:  MOVLW  17
086F0:  MOVWF  FA9
086F2:  MOVFF  7EF,FA8
086F6:  BCF    FA6.6
086F8:  BCF    FA6.7
086FA:  BSF    FA6.2
086FC:  MOVF   FF2,W
086FE:  MOVWF  00
08700:  BCF    FF2.6
08702:  BCF    FF2.7
08704:  MOVLB  F
08706:  MOVLW  55
08708:  MOVWF  FA7
0870A:  MOVLW  AA
0870C:  MOVWF  FA7
0870E:  BSF    FA6.1
08710:  BTFSC  FA6.1
08712:  BRA    8710
08714:  BCF    FA6.2
08716:  MOVF   00,W
08718:  IORWF  FF2,F
0871A:  MOVLW  02
0871C:  MOVLB  7
0871E:  MOVWF  xEF
08720:  MOVLW  96
08722:  MOVLB  8
08724:  MOVWF  x06
08726:  MOVLB  0
08728:  CALL   0CCE
0872C:  MOVLB  7
0872E:  DECFSZ xEF,F
08730:  BRA    8720
08732:  BSF    2A.7
08734:  MOVLB  0
....................       } 
....................    }else{ 
08736:  BRA    873A
....................       Flanco=0; 
08738:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
0873A:  MOVF   xD2,F
0873C:  BNZ   8744
0873E:  MOVF   xD1,W
08740:  SUBLW  3B
08742:  BC    87A2
....................       if(!Flanco2){ 
08744:  BTFSC  29.5
08746:  BRA    87A0
....................          estadomv=!estadomv;Flanco2 = 1;write_eeprom(22,estadomv);delay_ms(300);Cambio=ON; 
08748:  BTG    29.2
0874A:  BSF    29.5
0874C:  MOVLW  00
0874E:  BTFSC  29.2
08750:  MOVLW  01
08752:  MOVLB  7
08754:  MOVWF  xEF
08756:  CLRF   FAA
08758:  MOVLW  16
0875A:  MOVWF  FA9
0875C:  MOVFF  7EF,FA8
08760:  BCF    FA6.6
08762:  BCF    FA6.7
08764:  BSF    FA6.2
08766:  MOVF   FF2,W
08768:  MOVWF  00
0876A:  BCF    FF2.6
0876C:  BCF    FF2.7
0876E:  MOVLB  F
08770:  MOVLW  55
08772:  MOVWF  FA7
08774:  MOVLW  AA
08776:  MOVWF  FA7
08778:  BSF    FA6.1
0877A:  BTFSC  FA6.1
0877C:  BRA    877A
0877E:  BCF    FA6.2
08780:  MOVF   00,W
08782:  IORWF  FF2,F
08784:  MOVLW  02
08786:  MOVLB  7
08788:  MOVWF  xEF
0878A:  MOVLW  96
0878C:  MOVLB  8
0878E:  MOVWF  x06
08790:  MOVLB  0
08792:  CALL   0CCE
08796:  MOVLB  7
08798:  DECFSZ xEF,F
0879A:  BRA    878A
0879C:  BSF    2A.7
0879E:  MOVLB  0
....................       } 
....................    }else{ 
087A0:  BRA    87A4
....................       Flanco2=0; 
087A2:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
087A4:  MOVF   xD4,F
087A6:  BNZ   87AE
087A8:  MOVF   xD3,W
087AA:  SUBLW  3B
087AC:  BC    87C6
....................       if(!Flanco3){ 
087AE:  BTFSC  29.6
087B0:  BRA    87C4
....................          delay_ms(150);  
087B2:  MOVLW  96
087B4:  MOVLB  8
087B6:  MOVWF  x06
087B8:  MOVLB  0
087BA:  CALL   0CCE
....................          //estadouv=!estadouv; 
....................          estadouv=0; 
087BE:  BCF    29.0
....................          Cambio=ON; 
087C0:  BSF    2A.7
....................          Flanco3=1; 
087C2:  BSF    29.6
....................       } 
....................    }else{ 
087C4:  BRA    87C8
....................       Flanco3=0; 
087C6:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
087C8:  MOVF   xCE,F
087CA:  BNZ   87D2
087CC:  MOVF   xCD,W
087CE:  SUBLW  3B
087D0:  BC    881A
....................       if(!Flanco1){ 
087D2:  BTFSC  29.4
087D4:  BRA    8818
....................          delay_ms(200); 
087D6:  MOVLW  C8
087D8:  MOVLB  8
087DA:  MOVWF  x06
087DC:  MOVLB  0
087DE:  CALL   0CCE
....................          printf(lcd_putc,"\f"); 
087E2:  MOVLW  0C
087E4:  MOVLB  8
087E6:  MOVWF  x00
087E8:  MOVLB  0
087EA:  CALL   2254
....................          delay_ms(300); 
087EE:  MOVLW  02
087F0:  MOVLB  7
087F2:  MOVWF  xEF
087F4:  MOVLW  96
087F6:  MOVLB  8
087F8:  MOVWF  x06
087FA:  MOVLB  0
087FC:  CALL   0CCE
08800:  MOVLB  7
08802:  DECFSZ xEF,F
08804:  BRA    87F4
....................          Menu=1;  
08806:  MOVLW  01
08808:  MOVWF  2B
....................          paso=0; 
0880A:  CLRF   47
....................          Flecha=2; 
0880C:  MOVLW  02
0880E:  MOVWF  2F
....................          Flecha2=2; 
08810:  MOVWF  31
....................          Cambio=ON; 
08812:  BSF    2A.7
....................          Flanco1=1; 
08814:  BSF    29.4
08816:  MOVLB  0
....................       } 
....................    }else{ 
08818:  BRA    881C
....................       Flanco1=0; 
0881A:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
0881C:  DECFSZ 43,W
0881E:  BRA    88F6
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
08820:  CLRF   FAA
08822:  MOVLW  07
08824:  MOVWF  FA9
08826:  MOVFF  34,FA8
0882A:  BCF    FA6.6
0882C:  BCF    FA6.7
0882E:  BSF    FA6.2
08830:  MOVF   FF2,W
08832:  MOVWF  00
08834:  BCF    FF2.6
08836:  BCF    FF2.7
08838:  MOVLB  F
0883A:  MOVLW  55
0883C:  MOVWF  FA7
0883E:  MOVLW  AA
08840:  MOVWF  FA7
08842:  BSF    FA6.1
08844:  BTFSC  FA6.1
08846:  BRA    8844
08848:  BCF    FA6.2
0884A:  MOVF   00,W
0884C:  IORWF  FF2,F
0884E:  CLRF   FAA
08850:  MOVLW  08
08852:  MOVWF  FA9
08854:  MOVFF  35,FA8
08858:  BCF    FA6.6
0885A:  BCF    FA6.7
0885C:  BSF    FA6.2
0885E:  MOVF   FF2,W
08860:  MOVWF  00
08862:  BCF    FF2.6
08864:  BCF    FF2.7
08866:  MOVLW  55
08868:  MOVWF  FA7
0886A:  MOVLW  AA
0886C:  MOVWF  FA7
0886E:  BSF    FA6.1
08870:  BTFSC  FA6.1
08872:  BRA    8870
08874:  BCF    FA6.2
08876:  MOVF   00,W
08878:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
0887A:  MOVFF  5C,36
....................       horasH=make8(horas,1); 
0887E:  MOVFF  5D,37
....................       write_eeprom(9,horasL); 
08882:  CLRF   FAA
08884:  MOVLW  09
08886:  MOVWF  FA9
08888:  MOVFF  36,FA8
0888C:  BCF    FA6.6
0888E:  BCF    FA6.7
08890:  BSF    FA6.2
08892:  MOVFF  FF2,00
08896:  BCF    FF2.6
08898:  BCF    FF2.7
0889A:  MOVLW  55
0889C:  MOVWF  FA7
0889E:  MOVLW  AA
088A0:  MOVWF  FA7
088A2:  BSF    FA6.1
088A4:  BTFSC  FA6.1
088A6:  BRA    88A4
088A8:  BCF    FA6.2
088AA:  MOVF   00,W
088AC:  IORWF  FF2,F
....................       delay_ms(20); 
088AE:  MOVLW  14
088B0:  MOVLB  8
088B2:  MOVWF  x06
088B4:  MOVLB  0
088B6:  CALL   0CCE
....................       write_eeprom(10,horasH); 
088BA:  CLRF   FAA
088BC:  MOVLW  0A
088BE:  MOVWF  FA9
088C0:  MOVFF  37,FA8
088C4:  BCF    FA6.6
088C6:  BCF    FA6.7
088C8:  BSF    FA6.2
088CA:  MOVF   FF2,W
088CC:  MOVWF  00
088CE:  BCF    FF2.6
088D0:  BCF    FF2.7
088D2:  MOVLB  F
088D4:  MOVLW  55
088D6:  MOVWF  FA7
088D8:  MOVLW  AA
088DA:  MOVWF  FA7
088DC:  BSF    FA6.1
088DE:  BTFSC  FA6.1
088E0:  BRA    88DE
088E2:  BCF    FA6.2
088E4:  MOVF   00,W
088E6:  IORWF  FF2,F
....................       delay_ms(20); 
088E8:  MOVLW  14
088EA:  MOVLB  8
088EC:  MOVWF  x06
088EE:  MOVLB  0
088F0:  CALL   0CCE
....................       guardaruv=0; 
088F4:  CLRF   43
....................    } 
....................     
....................    if(segundos>=60) 
088F6:  MOVF   34,W
088F8:  SUBLW  3B
088FA:  BC    8900
....................    { 
....................       segundos=0;minutos++; 
088FC:  CLRF   34
088FE:  INCF   35,F
....................    } 
....................    if(minutos==60) 
08900:  MOVF   35,W
08902:  SUBLW  3C
08904:  BNZ   890E
....................    { 
....................       minutos=0;horas++; 
08906:  CLRF   35
08908:  INCF   5C,F
0890A:  BTFSC  FD8.2
0890C:  INCF   5D,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
0890E:  MOVF   42,W
08910:  SUBLW  3B
08912:  BC    8934
....................    { 
....................       printf(lcd_putc,"\f"); 
08914:  MOVLW  0C
08916:  MOVLB  8
08918:  MOVWF  x00
0891A:  MOVLB  0
0891C:  CALL   2254
....................       lcd_init(); 
08920:  CALL   0D70
....................       delay_ms(200); 
08924:  MOVLW  C8
08926:  MOVLB  8
08928:  MOVWF  x06
0892A:  MOVLB  0
0892C:  CALL   0CCE
....................       tiemporeset=0; 
08930:  CLRF   42
....................       Cambio=ON; 
08932:  BSF    2A.7
....................    }    
....................    } 
08934:  GOTO   6534
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
08938:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1A1F   BROWNOUT NOWDT BORV21 NOPUT WDT8192
   Word  3: 0100   CCP2C1 NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
