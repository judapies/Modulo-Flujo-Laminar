CCS PCH C Compiler, Version 4.104, 5967               20-nov.-20 10:11

               Filename: D:\Laboratorio\Modulo Flujo Laminar\2020\JPCFLVMD48IX Abaco #004588416 OP2020334\Firmware 2.1.1 - Con Presion-MPXV5004GV\CabinaCFLH.lst

               ROM used: 34200 bytes (52%)
                         Largest free fragment is 31334
               RAM used: 834 (21%) at main() level
                         915 (23%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
00000:  GOTO   5354
*
00008:  GOTO   00A6
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  00,0E
0004C:  MOVFF  01,0F
00050:  MOVFF  02,10
00054:  MOVFF  03,11
00058:  BTFSS  F9D.0
0005A:  GOTO   0064
0005E:  BTFSC  F9E.0
00060:  GOTO   0426
00064:  MOVFF  0E,00
00068:  MOVFF  0F,01
0006C:  MOVFF  10,02
00070:  MOVFF  11,03
00074:  MOVFF  0C,FE9
00078:  MOVFF  07,FEA
0007C:  BSF    07.7
0007E:  MOVFF  08,FE1
00082:  MOVFF  09,FE2
00086:  MOVFF  0A,FD9
0008A:  MOVFF  0B,FDA
0008E:  MOVFF  12,FF3
00092:  MOVFF  13,FF4
00096:  MOVFF  14,FFA
0009A:  MOVF   04,W
0009C:  MOVFF  06,FE0
000A0:  MOVFF  05,FD8
000A4:  RETFIE 0
000A6:  MOVWF  16
000A8:  MOVFF  FD8,17
000AC:  MOVFF  FE0,18
000B0:  MOVLB  0
000B2:  MOVFF  FE9,1E
000B6:  MOVFF  FEA,19
000BA:  MOVFF  FE1,1A
000BE:  MOVFF  FE2,1B
000C2:  MOVFF  FD9,1C
000C6:  MOVFF  FDA,1D
000CA:  MOVFF  FF3,24
000CE:  MOVFF  FF4,25
000D2:  MOVFF  FFA,26
000D6:  MOVFF  00,20
000DA:  MOVFF  01,21
000DE:  MOVFF  02,22
000E2:  MOVFF  03,23
000E6:  BTFSS  FF2.5
000E8:  GOTO   00F2
000EC:  BTFSC  FF2.2
000EE:  GOTO   03F4
000F2:  BTFSS  FF2.4
000F4:  GOTO   00FE
000F8:  BTFSC  FF2.1
000FA:  GOTO   0248
000FE:  MOVFF  20,00
00102:  MOVFF  21,01
00106:  MOVFF  22,02
0010A:  MOVFF  23,03
0010E:  MOVFF  1E,FE9
00112:  MOVFF  19,FEA
00116:  BSF    19.7
00118:  MOVFF  1A,FE1
0011C:  MOVFF  1B,FE2
00120:  MOVFF  1C,FD9
00124:  MOVFF  1D,FDA
00128:  MOVFF  24,FF3
0012C:  MOVFF  25,FF4
00130:  MOVFF  26,FFA
00134:  MOVF   16,W
00136:  MOVFF  18,FE0
0013A:  MOVFF  17,FD8
0013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4620.h> 
.................... //////// Standard Header file for the PIC18F4620 device //////////////// 
.................... #device PIC18F4620 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... //#use delay(clock=20000000) 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
00C96:  MOVLW  03
00C98:  MOVWF  FEA
00C9A:  MOVLW  55
00C9C:  MOVWF  FE9
00C9E:  MOVF   FEF,W
00CA0:  BZ    0CBC
00CA2:  MOVLW  06
00CA4:  MOVWF  01
00CA6:  CLRF   00
00CA8:  DECFSZ 00,F
00CAA:  BRA    0CA8
00CAC:  DECFSZ 01,F
00CAE:  BRA    0CA6
00CB0:  MOVLW  7B
00CB2:  MOVWF  00
00CB4:  DECFSZ 00,F
00CB6:  BRA    0CB4
00CB8:  DECFSZ FEF,F
00CBA:  BRA    0CA2
00CBC:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
023C2:  MOVLB  3
023C4:  BCF    x7D.0
....................    y = x; 
023C6:  MOVFF  371,376
023CA:  MOVFF  370,375
023CE:  MOVFF  36F,374
023D2:  MOVFF  36E,373
....................  
....................    if (x < 0) 
023D6:  MOVFF  371,381
023DA:  MOVFF  370,380
023DE:  MOVFF  36F,37F
023E2:  MOVFF  36E,37E
023E6:  CLRF   x85
023E8:  CLRF   x84
023EA:  CLRF   x83
023EC:  CLRF   x82
023EE:  MOVLB  0
023F0:  CALL   183A
023F4:  BNC   2400
....................    { 
....................       s = 1; 
023F6:  MOVLB  3
023F8:  BSF    x7D.0
....................       y = -y; 
023FA:  MOVF   x74,W
023FC:  XORLW  80
023FE:  MOVWF  x74
....................    } 
....................  
....................    if (y <= 32768.0) 
02400:  MOVFF  376,381
02404:  MOVFF  375,380
02408:  MOVFF  374,37F
0240C:  MOVFF  373,37E
02410:  MOVLB  3
02412:  CLRF   x85
02414:  CLRF   x84
02416:  CLRF   x83
02418:  MOVLW  8E
0241A:  MOVWF  x82
0241C:  MOVLB  0
0241E:  CALL   183A
02422:  BC    2426
02424:  BNZ   2456
....................   res = (float32)(unsigned int16)y; 
02426:  MOVFF  376,381
0242A:  MOVFF  375,380
0242E:  MOVFF  374,37F
02432:  MOVFF  373,37E
02436:  RCALL  2386
02438:  MOVFF  02,383
0243C:  MOVFF  01,382
02440:  CALL   0DFA
02444:  MOVFF  03,37A
02448:  MOVFF  02,379
0244C:  MOVFF  01,378
02450:  MOVFF  00,377
....................  
....................  else if (y < 10000000.0) 
02454:  BRA    25F4
02456:  MOVFF  376,381
0245A:  MOVFF  375,380
0245E:  MOVFF  374,37F
02462:  MOVFF  373,37E
02466:  MOVLW  80
02468:  MOVLB  3
0246A:  MOVWF  x85
0246C:  MOVLW  96
0246E:  MOVWF  x84
02470:  MOVLW  18
02472:  MOVWF  x83
02474:  MOVLW  96
02476:  MOVWF  x82
02478:  MOVLB  0
0247A:  CALL   183A
0247E:  BTFSS  FD8.0
02480:  BRA    25E4
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
02482:  MOVFF  376,381
02486:  MOVFF  375,380
0248A:  MOVFF  374,37F
0248E:  MOVFF  373,37E
02492:  MOVLB  3
02494:  CLRF   x85
02496:  CLRF   x84
02498:  CLRF   x83
0249A:  MOVLW  8E
0249C:  MOVWF  x82
0249E:  MOVLB  0
024A0:  CALL   0E30
024A4:  MOVFF  03,381
024A8:  MOVFF  02,380
024AC:  MOVFF  01,37F
024B0:  MOVFF  00,37E
024B4:  RCALL  2386
024B6:  MOVFF  02,37C
024BA:  MOVFF  01,37B
....................       y = 32768.0*(y/32768.0 - (float32)l); 
024BE:  MOVFF  376,381
024C2:  MOVFF  375,380
024C6:  MOVFF  374,37F
024CA:  MOVFF  373,37E
024CE:  MOVLB  3
024D0:  CLRF   x85
024D2:  CLRF   x84
024D4:  CLRF   x83
024D6:  MOVLW  8E
024D8:  MOVWF  x82
024DA:  MOVLB  0
024DC:  CALL   0E30
024E0:  MOVFF  00,37E
024E4:  MOVFF  01,37F
024E8:  MOVFF  02,380
024EC:  MOVFF  03,381
024F0:  MOVFF  37C,383
024F4:  MOVFF  37B,382
024F8:  CALL   0DFA
024FC:  BSF    FD8.1
024FE:  MOVFF  381,385
02502:  MOVFF  380,384
02506:  MOVFF  37F,383
0250A:  MOVFF  37E,382
0250E:  MOVFF  03,389
02512:  MOVFF  02,388
02516:  MOVFF  01,387
0251A:  MOVFF  00,386
0251E:  CALL   0F8E
02522:  MOVLB  3
02524:  CLRF   x81
02526:  CLRF   x80
02528:  CLRF   x7F
0252A:  MOVLW  8E
0252C:  MOVWF  x7E
0252E:  MOVFF  03,385
02532:  MOVFF  02,384
02536:  MOVFF  01,383
0253A:  MOVFF  00,382
0253E:  MOVLB  0
02540:  RCALL  2290
02542:  MOVFF  03,376
02546:  MOVFF  02,375
0254A:  MOVFF  01,374
0254E:  MOVFF  00,373
....................   res = 32768.0*(float32)l; 
02552:  MOVFF  37C,383
02556:  MOVFF  37B,382
0255A:  CALL   0DFA
0255E:  MOVLB  3
02560:  CLRF   x81
02562:  CLRF   x80
02564:  CLRF   x7F
02566:  MOVLW  8E
02568:  MOVWF  x7E
0256A:  MOVFF  03,385
0256E:  MOVFF  02,384
02572:  MOVFF  01,383
02576:  MOVFF  00,382
0257A:  MOVLB  0
0257C:  RCALL  2290
0257E:  MOVFF  03,37A
02582:  MOVFF  02,379
02586:  MOVFF  01,378
0258A:  MOVFF  00,377
....................   res += (float32)(unsigned int16)y; 
0258E:  MOVFF  376,381
02592:  MOVFF  375,380
02596:  MOVFF  374,37F
0259A:  MOVFF  373,37E
0259E:  RCALL  2386
025A0:  MOVFF  02,383
025A4:  MOVFF  01,382
025A8:  CALL   0DFA
025AC:  BCF    FD8.1
025AE:  MOVFF  37A,385
025B2:  MOVFF  379,384
025B6:  MOVFF  378,383
025BA:  MOVFF  377,382
025BE:  MOVFF  03,389
025C2:  MOVFF  02,388
025C6:  MOVFF  01,387
025CA:  MOVFF  00,386
025CE:  CALL   0F8E
025D2:  MOVFF  03,37A
025D6:  MOVFF  02,379
025DA:  MOVFF  01,378
025DE:  MOVFF  00,377
....................  } 
....................  
....................  else 
025E2:  BRA    25F4
....................   res = y; 
025E4:  MOVFF  376,37A
025E8:  MOVFF  375,379
025EC:  MOVFF  374,378
025F0:  MOVFF  373,377
....................  
....................  y = y - (float32)(unsigned int16)y; 
025F4:  MOVFF  376,381
025F8:  MOVFF  375,380
025FC:  MOVFF  374,37F
02600:  MOVFF  373,37E
02604:  RCALL  2386
02606:  MOVFF  02,383
0260A:  MOVFF  01,382
0260E:  CALL   0DFA
02612:  BSF    FD8.1
02614:  MOVFF  376,385
02618:  MOVFF  375,384
0261C:  MOVFF  374,383
02620:  MOVFF  373,382
02624:  MOVFF  03,389
02628:  MOVFF  02,388
0262C:  MOVFF  01,387
02630:  MOVFF  00,386
02634:  CALL   0F8E
02638:  MOVFF  03,376
0263C:  MOVFF  02,375
02640:  MOVFF  01,374
02644:  MOVFF  00,373
....................  
....................  if (s) 
02648:  MOVLB  3
0264A:  BTFSS  x7D.0
0264C:  BRA    2654
....................   res = -res; 
0264E:  MOVF   x78,W
02650:  XORLW  80
02652:  MOVWF  x78
....................  
....................  if (y != 0) 
02654:  MOVFF  376,381
02658:  MOVFF  375,380
0265C:  MOVFF  374,37F
02660:  MOVFF  373,37E
02664:  CLRF   x85
02666:  CLRF   x84
02668:  CLRF   x83
0266A:  CLRF   x82
0266C:  MOVLB  0
0266E:  CALL   183A
02672:  BZ    26EC
....................  { 
....................   if (s == 1 && n == 0) 
02674:  MOVLB  3
02676:  BTFSS  x7D.0
02678:  BRA    26B2
0267A:  MOVF   x72,F
0267C:  BNZ   26B2
....................    res -= 1.0; 
0267E:  BSF    FD8.1
02680:  MOVFF  37A,385
02684:  MOVFF  379,384
02688:  MOVFF  378,383
0268C:  MOVFF  377,382
02690:  CLRF   x89
02692:  CLRF   x88
02694:  CLRF   x87
02696:  MOVLW  7F
02698:  MOVWF  x86
0269A:  MOVLB  0
0269C:  CALL   0F8E
026A0:  MOVFF  03,37A
026A4:  MOVFF  02,379
026A8:  MOVFF  01,378
026AC:  MOVFF  00,377
026B0:  MOVLB  3
....................  
....................   if (s == 0 && n == 1) 
026B2:  BTFSC  x7D.0
026B4:  BRA    26EE
026B6:  DECFSZ x72,W
026B8:  BRA    26EE
....................    res += 1.0; 
026BA:  BCF    FD8.1
026BC:  MOVFF  37A,385
026C0:  MOVFF  379,384
026C4:  MOVFF  378,383
026C8:  MOVFF  377,382
026CC:  CLRF   x89
026CE:  CLRF   x88
026D0:  CLRF   x87
026D2:  MOVLW  7F
026D4:  MOVWF  x86
026D6:  MOVLB  0
026D8:  CALL   0F8E
026DC:  MOVFF  03,37A
026E0:  MOVFF  02,379
026E4:  MOVFF  01,378
026E8:  MOVFF  00,377
026EC:  MOVLB  3
....................  } 
....................  if (x == 0) 
026EE:  MOVFF  371,381
026F2:  MOVFF  370,380
026F6:  MOVFF  36F,37F
026FA:  MOVFF  36E,37E
026FE:  CLRF   x85
02700:  CLRF   x84
02702:  CLRF   x83
02704:  CLRF   x82
02706:  MOVLB  0
02708:  CALL   183A
0270C:  BNZ   271A
....................     res = 0; 
0270E:  MOVLB  3
02710:  CLRF   x7A
02712:  CLRF   x79
02714:  CLRF   x78
02716:  CLRF   x77
02718:  MOVLB  0
....................  
....................  return (res); 
0271A:  MOVFF  377,00
0271E:  MOVFF  378,01
02722:  MOVFF  379,02
02726:  MOVFF  37A,03
.................... } 
0272A:  RETLW  00
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
*
0274A:  MOVFF  36D,371
0274E:  MOVFF  36C,370
02752:  MOVFF  36B,36F
02756:  MOVFF  36A,36E
0275A:  MOVLB  3
0275C:  CLRF   x72
0275E:  MOVLB  0
02760:  RCALL  23C2
.................... } 
02762:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
0272C:  MOVFF  36D,371
02730:  MOVFF  36C,370
02734:  MOVFF  36B,36F
02738:  MOVFF  36A,36E
0273C:  MOVLW  01
0273E:  MOVLB  3
02740:  MOVWF  x72
02742:  MOVLB  0
02744:  RCALL  23C2
.................... } 
02746:  GOTO   2824 (RETURN)
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
*
02764:  MOVFF  361,381
02768:  MOVFF  360,380
0276C:  MOVFF  35F,37F
02770:  MOVFF  35E,37E
02774:  MOVLB  3
02776:  CLRF   x85
02778:  CLRF   x84
0277A:  CLRF   x83
0277C:  CLRF   x82
0277E:  MOVLB  0
02780:  CALL   183A
02784:  BTFSC  FD8.2
02786:  BRA    28C8
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
02788:  MOVFF  35D,381
0278C:  MOVFF  35C,380
02790:  MOVFF  35B,37F
02794:  MOVFF  35A,37E
02798:  MOVFF  361,385
0279C:  MOVFF  360,384
027A0:  MOVFF  35F,383
027A4:  MOVFF  35E,382
027A8:  CALL   0E30
027AC:  MOVFF  00,366
027B0:  MOVFF  01,367
027B4:  MOVFF  02,368
027B8:  MOVFF  03,369
027BC:  MOVFF  03,381
027C0:  MOVFF  02,380
027C4:  MOVFF  01,37F
027C8:  MOVFF  00,37E
027CC:  MOVLB  3
027CE:  CLRF   x85
027D0:  CLRF   x84
027D2:  CLRF   x83
027D4:  CLRF   x82
027D6:  MOVLB  0
027D8:  CALL   183A
027DC:  BNC   2826
027DE:  MOVFF  35D,381
027E2:  MOVFF  35C,380
027E6:  MOVFF  35B,37F
027EA:  MOVFF  35A,37E
027EE:  MOVFF  361,385
027F2:  MOVFF  360,384
027F6:  MOVFF  35F,383
027FA:  MOVFF  35E,382
027FE:  CALL   0E30
02802:  MOVFF  00,366
02806:  MOVFF  01,367
0280A:  MOVFF  02,368
0280E:  MOVFF  03,369
02812:  MOVFF  03,36D
02816:  MOVFF  02,36C
0281A:  MOVFF  01,36B
0281E:  MOVFF  00,36A
02822:  BRA    272C
02824:  BRA    286C
02826:  MOVFF  35D,381
0282A:  MOVFF  35C,380
0282E:  MOVFF  35B,37F
02832:  MOVFF  35A,37E
02836:  MOVFF  361,385
0283A:  MOVFF  360,384
0283E:  MOVFF  35F,383
02842:  MOVFF  35E,382
02846:  CALL   0E30
0284A:  MOVFF  00,366
0284E:  MOVFF  01,367
02852:  MOVFF  02,368
02856:  MOVFF  03,369
0285A:  MOVFF  03,36D
0285E:  MOVFF  02,36C
02862:  MOVFF  01,36B
02866:  MOVFF  00,36A
0286A:  RCALL  274A
0286C:  MOVFF  03,365
02870:  MOVFF  02,364
02874:  MOVFF  01,363
02878:  MOVFF  00,362
....................       return(x-(i*y)); 
0287C:  MOVFF  365,381
02880:  MOVFF  364,380
02884:  MOVFF  363,37F
02888:  MOVFF  362,37E
0288C:  MOVFF  361,385
02890:  MOVFF  360,384
02894:  MOVFF  35F,383
02898:  MOVFF  35E,382
0289C:  RCALL  2290
0289E:  BSF    FD8.1
028A0:  MOVFF  35D,385
028A4:  MOVFF  35C,384
028A8:  MOVFF  35B,383
028AC:  MOVFF  35A,382
028B0:  MOVFF  03,389
028B4:  MOVFF  02,388
028B8:  MOVFF  01,387
028BC:  MOVFF  00,386
028C0:  CALL   0F8E
028C4:  BRA    28C8
....................    } 
....................    else 
028C6:  BRA    28C8
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
028C8:  RETLW  00
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
*
02DF6:  MOVFF  361,381
02DFA:  MOVFF  360,380
02DFE:  MOVFF  35F,37F
02E02:  MOVFF  35E,37E
02E06:  MOVLW  18
02E08:  MOVLB  3
02E0A:  MOVWF  x85
02E0C:  MOVLW  72
02E0E:  MOVWF  x84
02E10:  MOVLW  31
02E12:  MOVWF  x83
02E14:  MOVLW  7E
02E16:  MOVWF  x82
02E18:  MOVLB  0
02E1A:  CALL   0E30
02E1E:  MOVFF  03,381
02E22:  MOVFF  02,380
02E26:  MOVFF  01,37F
02E2A:  MOVFF  00,37E
02E2E:  CALL   2386
02E32:  MOVFF  01,36E
....................    s = 0; 
02E36:  MOVLB  3
02E38:  BCF    x6F.0
....................    y = x; 
02E3A:  MOVFF  361,365
02E3E:  MOVFF  360,364
02E42:  MOVFF  35F,363
02E46:  MOVFF  35E,362
....................  
....................    if (x < 0) 
02E4A:  MOVFF  361,381
02E4E:  MOVFF  360,380
02E52:  MOVFF  35F,37F
02E56:  MOVFF  35E,37E
02E5A:  CLRF   x85
02E5C:  CLRF   x84
02E5E:  CLRF   x83
02E60:  CLRF   x82
02E62:  MOVLB  0
02E64:  CALL   183A
02E68:  BNC   2E76
....................    { 
....................       s = 1; 
02E6A:  MOVLB  3
02E6C:  BSF    x6F.0
....................       n = -n; 
02E6E:  NEGF   x6E
....................       y = -y; 
02E70:  MOVF   x63,W
02E72:  XORLW  80
02E74:  MOVWF  x63
....................    } 
....................  
....................    res = 0.0; 
02E76:  MOVLB  3
02E78:  CLRF   x69
02E7A:  CLRF   x68
02E7C:  CLRF   x67
02E7E:  CLRF   x66
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
02E80:  MOVLW  03
02E82:  MOVWF  x71
02E84:  MOVLW  66
02E86:  MOVWF  FE9
02E88:  MOVFF  371,FEA
02E8C:  MOVLW  7F
02E8E:  ADDWF  x6E,W
02E90:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
02E92:  MOVFF  365,381
02E96:  MOVFF  364,380
02E9A:  MOVFF  363,37F
02E9E:  MOVFF  362,37E
02EA2:  MOVLW  18
02EA4:  MOVWF  x85
02EA6:  MOVLW  72
02EA8:  MOVWF  x84
02EAA:  MOVLW  31
02EAC:  MOVWF  x83
02EAE:  MOVLW  7E
02EB0:  MOVWF  x82
02EB2:  MOVLB  0
02EB4:  CALL   0E30
02EB8:  MOVFF  00,370
02EBC:  MOVFF  01,371
02EC0:  MOVFF  02,372
02EC4:  MOVFF  03,373
02EC8:  MOVLB  3
02ECA:  CLRF   x75
02ECC:  MOVFF  36E,374
02ED0:  BTFSC  x74.7
02ED2:  DECF   x75,F
02ED4:  MOVLB  0
02ED6:  RCALL  28CA
02ED8:  BSF    FD8.1
02EDA:  MOVFF  373,385
02EDE:  MOVFF  372,384
02EE2:  MOVFF  371,383
02EE6:  MOVFF  370,382
02EEA:  MOVFF  03,389
02EEE:  MOVFF  02,388
02EF2:  MOVFF  01,387
02EF6:  MOVFF  00,386
02EFA:  CALL   0F8E
02EFE:  MOVFF  03,365
02F02:  MOVFF  02,364
02F06:  MOVFF  01,363
02F0A:  MOVFF  00,362
....................  
....................    r = pe[0]*y + pe[1]; 
02F0E:  MOVLW  7C
02F10:  MOVLB  3
02F12:  MOVWF  x81
02F14:  MOVLW  88
02F16:  MOVWF  x80
02F18:  MOVLW  59
02F1A:  MOVWF  x7F
02F1C:  MOVLW  72
02F1E:  MOVWF  x7E
02F20:  MOVFF  365,385
02F24:  MOVFF  364,384
02F28:  MOVFF  363,383
02F2C:  MOVFF  362,382
02F30:  MOVLB  0
02F32:  CALL   2290
02F36:  MOVFF  00,370
02F3A:  MOVFF  01,371
02F3E:  MOVFF  02,372
02F42:  MOVFF  03,373
02F46:  BCF    FD8.1
02F48:  MOVFF  03,385
02F4C:  MOVFF  02,384
02F50:  MOVFF  01,383
02F54:  MOVFF  00,382
02F58:  MOVLW  E0
02F5A:  MOVLB  3
02F5C:  MOVWF  x89
02F5E:  MOVLW  97
02F60:  MOVWF  x88
02F62:  MOVLW  26
02F64:  MOVWF  x87
02F66:  MOVLW  75
02F68:  MOVWF  x86
02F6A:  MOVLB  0
02F6C:  CALL   0F8E
02F70:  MOVFF  03,36D
02F74:  MOVFF  02,36C
02F78:  MOVFF  01,36B
02F7C:  MOVFF  00,36A
....................    r = r*y + pe[2]; 
02F80:  MOVFF  36D,381
02F84:  MOVFF  36C,380
02F88:  MOVFF  36B,37F
02F8C:  MOVFF  36A,37E
02F90:  MOVFF  365,385
02F94:  MOVFF  364,384
02F98:  MOVFF  363,383
02F9C:  MOVFF  362,382
02FA0:  CALL   2290
02FA4:  MOVFF  00,370
02FA8:  MOVFF  01,371
02FAC:  MOVFF  02,372
02FB0:  MOVFF  03,373
02FB4:  BCF    FD8.1
02FB6:  MOVFF  03,385
02FBA:  MOVFF  02,384
02FBE:  MOVFF  01,383
02FC2:  MOVFF  00,382
02FC6:  MOVLW  C4
02FC8:  MOVLB  3
02FCA:  MOVWF  x89
02FCC:  MOVLW  1D
02FCE:  MOVWF  x88
02FD0:  MOVLW  1E
02FD2:  MOVWF  x87
02FD4:  MOVLW  78
02FD6:  MOVWF  x86
02FD8:  MOVLB  0
02FDA:  CALL   0F8E
02FDE:  MOVFF  03,36D
02FE2:  MOVFF  02,36C
02FE6:  MOVFF  01,36B
02FEA:  MOVFF  00,36A
....................    r = r*y + pe[3]; 
02FEE:  MOVFF  36D,381
02FF2:  MOVFF  36C,380
02FF6:  MOVFF  36B,37F
02FFA:  MOVFF  36A,37E
02FFE:  MOVFF  365,385
03002:  MOVFF  364,384
03006:  MOVFF  363,383
0300A:  MOVFF  362,382
0300E:  CALL   2290
03012:  MOVFF  00,370
03016:  MOVFF  01,371
0301A:  MOVFF  02,372
0301E:  MOVFF  03,373
03022:  BCF    FD8.1
03024:  MOVFF  03,385
03028:  MOVFF  02,384
0302C:  MOVFF  01,383
03030:  MOVFF  00,382
03034:  MOVLW  5E
03036:  MOVLB  3
03038:  MOVWF  x89
0303A:  MOVLW  50
0303C:  MOVWF  x88
0303E:  MOVLW  63
03040:  MOVWF  x87
03042:  MOVLW  7A
03044:  MOVWF  x86
03046:  MOVLB  0
03048:  CALL   0F8E
0304C:  MOVFF  03,36D
03050:  MOVFF  02,36C
03054:  MOVFF  01,36B
03058:  MOVFF  00,36A
....................    r = r*y + pe[4]; 
0305C:  MOVFF  36D,381
03060:  MOVFF  36C,380
03064:  MOVFF  36B,37F
03068:  MOVFF  36A,37E
0306C:  MOVFF  365,385
03070:  MOVFF  364,384
03074:  MOVFF  363,383
03078:  MOVFF  362,382
0307C:  CALL   2290
03080:  MOVFF  00,370
03084:  MOVFF  01,371
03088:  MOVFF  02,372
0308C:  MOVFF  03,373
03090:  BCF    FD8.1
03092:  MOVFF  03,385
03096:  MOVFF  02,384
0309A:  MOVFF  01,383
0309E:  MOVFF  00,382
030A2:  MOVLW  1A
030A4:  MOVLB  3
030A6:  MOVWF  x89
030A8:  MOVLW  FE
030AA:  MOVWF  x88
030AC:  MOVLW  75
030AE:  MOVWF  x87
030B0:  MOVLW  7C
030B2:  MOVWF  x86
030B4:  MOVLB  0
030B6:  CALL   0F8E
030BA:  MOVFF  03,36D
030BE:  MOVFF  02,36C
030C2:  MOVFF  01,36B
030C6:  MOVFF  00,36A
....................    r = r*y + pe[5]; 
030CA:  MOVFF  36D,381
030CE:  MOVFF  36C,380
030D2:  MOVFF  36B,37F
030D6:  MOVFF  36A,37E
030DA:  MOVFF  365,385
030DE:  MOVFF  364,384
030E2:  MOVFF  363,383
030E6:  MOVFF  362,382
030EA:  CALL   2290
030EE:  MOVFF  00,370
030F2:  MOVFF  01,371
030F6:  MOVFF  02,372
030FA:  MOVFF  03,373
030FE:  BCF    FD8.1
03100:  MOVFF  03,385
03104:  MOVFF  02,384
03108:  MOVFF  01,383
0310C:  MOVFF  00,382
03110:  MOVLW  18
03112:  MOVLB  3
03114:  MOVWF  x89
03116:  MOVLW  72
03118:  MOVWF  x88
0311A:  MOVLW  31
0311C:  MOVWF  x87
0311E:  MOVLW  7E
03120:  MOVWF  x86
03122:  MOVLB  0
03124:  CALL   0F8E
03128:  MOVFF  03,36D
0312C:  MOVFF  02,36C
03130:  MOVFF  01,36B
03134:  MOVFF  00,36A
....................  
....................    res = res*(1.0 + y*r); 
03138:  MOVFF  365,381
0313C:  MOVFF  364,380
03140:  MOVFF  363,37F
03144:  MOVFF  362,37E
03148:  MOVFF  36D,385
0314C:  MOVFF  36C,384
03150:  MOVFF  36B,383
03154:  MOVFF  36A,382
03158:  CALL   2290
0315C:  BCF    FD8.1
0315E:  MOVLB  3
03160:  CLRF   x85
03162:  CLRF   x84
03164:  CLRF   x83
03166:  MOVLW  7F
03168:  MOVWF  x82
0316A:  MOVFF  03,389
0316E:  MOVFF  02,388
03172:  MOVFF  01,387
03176:  MOVFF  00,386
0317A:  MOVLB  0
0317C:  CALL   0F8E
03180:  MOVFF  369,381
03184:  MOVFF  368,380
03188:  MOVFF  367,37F
0318C:  MOVFF  366,37E
03190:  MOVFF  03,385
03194:  MOVFF  02,384
03198:  MOVFF  01,383
0319C:  MOVFF  00,382
031A0:  CALL   2290
031A4:  MOVFF  03,369
031A8:  MOVFF  02,368
031AC:  MOVFF  01,367
031B0:  MOVFF  00,366
....................  
....................    if (s) 
031B4:  MOVLB  3
031B6:  BTFSS  x6F.0
031B8:  BRA    31EC
....................       res = 1.0/res; 
031BA:  CLRF   x81
031BC:  CLRF   x80
031BE:  CLRF   x7F
031C0:  MOVLW  7F
031C2:  MOVWF  x7E
031C4:  MOVFF  369,385
031C8:  MOVFF  368,384
031CC:  MOVFF  367,383
031D0:  MOVFF  366,382
031D4:  MOVLB  0
031D6:  CALL   0E30
031DA:  MOVFF  03,369
031DE:  MOVFF  02,368
031E2:  MOVFF  01,367
031E6:  MOVFF  00,366
031EA:  MOVLB  3
....................    return(res); 
031EC:  MOVFF  366,00
031F0:  MOVFF  367,01
031F4:  MOVFF  368,02
031F8:  MOVFF  369,03
.................... } 
031FC:  MOVLB  0
031FE:  RETLW  00
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
0291A:  MOVFF  361,365
0291E:  MOVFF  360,364
02922:  MOVFF  35F,363
02926:  MOVFF  35E,362
....................  
....................    if (y != 1.0) 
0292A:  MOVFF  365,381
0292E:  MOVFF  364,380
02932:  MOVFF  363,37F
02936:  MOVFF  362,37E
0293A:  MOVLB  3
0293C:  CLRF   x85
0293E:  CLRF   x84
02940:  CLRF   x83
02942:  MOVLW  7F
02944:  MOVWF  x82
02946:  MOVLB  0
02948:  CALL   183A
0294C:  BTFSC  FD8.2
0294E:  BRA    2DD8
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
02950:  MOVLW  03
02952:  MOVLB  3
02954:  MOVWF  x74
02956:  MOVLW  62
02958:  MOVWF  FE9
0295A:  MOVFF  374,FEA
0295E:  MOVLW  7E
02960:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
02962:  BSF    FD8.1
02964:  MOVFF  365,385
02968:  MOVFF  364,384
0296C:  MOVFF  363,383
02970:  MOVFF  362,382
02974:  CLRF   x89
02976:  CLRF   x88
02978:  CLRF   x87
0297A:  MOVLW  7F
0297C:  MOVWF  x86
0297E:  MOVLB  0
02980:  CALL   0F8E
02984:  MOVFF  00,373
02988:  MOVFF  01,374
0298C:  MOVFF  02,375
02990:  MOVFF  03,376
02994:  BCF    FD8.1
02996:  MOVFF  365,385
0299A:  MOVFF  364,384
0299E:  MOVFF  363,383
029A2:  MOVFF  362,382
029A6:  MOVLB  3
029A8:  CLRF   x89
029AA:  CLRF   x88
029AC:  CLRF   x87
029AE:  MOVLW  7F
029B0:  MOVWF  x86
029B2:  MOVLB  0
029B4:  CALL   0F8E
029B8:  MOVFF  376,381
029BC:  MOVFF  375,380
029C0:  MOVFF  374,37F
029C4:  MOVFF  373,37E
029C8:  MOVFF  03,385
029CC:  MOVFF  02,384
029D0:  MOVFF  01,383
029D4:  MOVFF  00,382
029D8:  CALL   0E30
029DC:  MOVFF  03,365
029E0:  MOVFF  02,364
029E4:  MOVFF  01,363
029E8:  MOVFF  00,362
....................  
....................       y2=y*y; 
029EC:  MOVFF  365,381
029F0:  MOVFF  364,380
029F4:  MOVFF  363,37F
029F8:  MOVFF  362,37E
029FC:  MOVFF  365,385
02A00:  MOVFF  364,384
02A04:  MOVFF  363,383
02A08:  MOVFF  362,382
02A0C:  RCALL  2290
02A0E:  MOVFF  03,371
02A12:  MOVFF  02,370
02A16:  MOVFF  01,36F
02A1A:  MOVFF  00,36E
....................  
....................       res = pl[0]*y2 + pl[1]; 
02A1E:  MOVLW  BC
02A20:  MOVLB  3
02A22:  MOVWF  x81
02A24:  MOVLW  24
02A26:  MOVWF  x80
02A28:  MOVLW  67
02A2A:  MOVWF  x7F
02A2C:  MOVLW  7D
02A2E:  MOVWF  x7E
02A30:  MOVFF  371,385
02A34:  MOVFF  370,384
02A38:  MOVFF  36F,383
02A3C:  MOVFF  36E,382
02A40:  MOVLB  0
02A42:  RCALL  2290
02A44:  MOVFF  00,373
02A48:  MOVFF  01,374
02A4C:  MOVFF  02,375
02A50:  MOVFF  03,376
02A54:  BCF    FD8.1
02A56:  MOVFF  03,385
02A5A:  MOVFF  02,384
02A5E:  MOVFF  01,383
02A62:  MOVFF  00,382
02A66:  MOVLW  E3
02A68:  MOVLB  3
02A6A:  MOVWF  x89
02A6C:  MOVLW  E4
02A6E:  MOVWF  x88
02A70:  MOVLW  90
02A72:  MOVWF  x87
02A74:  MOVLW  82
02A76:  MOVWF  x86
02A78:  MOVLB  0
02A7A:  CALL   0F8E
02A7E:  MOVFF  03,369
02A82:  MOVFF  02,368
02A86:  MOVFF  01,367
02A8A:  MOVFF  00,366
....................       res = res*y2 + pl[2]; 
02A8E:  MOVFF  369,381
02A92:  MOVFF  368,380
02A96:  MOVFF  367,37F
02A9A:  MOVFF  366,37E
02A9E:  MOVFF  371,385
02AA2:  MOVFF  370,384
02AA6:  MOVFF  36F,383
02AAA:  MOVFF  36E,382
02AAE:  CALL   2290
02AB2:  MOVFF  00,373
02AB6:  MOVFF  01,374
02ABA:  MOVFF  02,375
02ABE:  MOVFF  03,376
02AC2:  BCF    FD8.1
02AC4:  MOVFF  03,385
02AC8:  MOVFF  02,384
02ACC:  MOVFF  01,383
02AD0:  MOVFF  00,382
02AD4:  MOVLW  1C
02AD6:  MOVLB  3
02AD8:  MOVWF  x89
02ADA:  MOVLW  87
02ADC:  MOVWF  x88
02ADE:  MOVLW  57
02AE0:  MOVWF  x87
02AE2:  MOVLW  83
02AE4:  MOVWF  x86
02AE6:  MOVLB  0
02AE8:  CALL   0F8E
02AEC:  MOVFF  03,369
02AF0:  MOVFF  02,368
02AF4:  MOVFF  01,367
02AF8:  MOVFF  00,366
....................       res = res*y2 + pl[3]; 
02AFC:  MOVFF  369,381
02B00:  MOVFF  368,380
02B04:  MOVFF  367,37F
02B08:  MOVFF  366,37E
02B0C:  MOVFF  371,385
02B10:  MOVFF  370,384
02B14:  MOVFF  36F,383
02B18:  MOVFF  36E,382
02B1C:  CALL   2290
02B20:  MOVFF  00,373
02B24:  MOVFF  01,374
02B28:  MOVFF  02,375
02B2C:  MOVFF  03,376
02B30:  BCF    FD8.1
02B32:  MOVFF  03,385
02B36:  MOVFF  02,384
02B3A:  MOVFF  01,383
02B3E:  MOVFF  00,382
02B42:  MOVLW  AB
02B44:  MOVLB  3
02B46:  MOVWF  x89
02B48:  MOVLW  E1
02B4A:  MOVWF  x88
02B4C:  MOVLW  9E
02B4E:  MOVWF  x87
02B50:  MOVLW  83
02B52:  MOVWF  x86
02B54:  MOVLB  0
02B56:  CALL   0F8E
02B5A:  MOVFF  03,369
02B5E:  MOVFF  02,368
02B62:  MOVFF  01,367
02B66:  MOVFF  00,366
....................  
....................       r = ql[0]*y2 + ql[1]; 
02B6A:  MOVLB  3
02B6C:  CLRF   x81
02B6E:  CLRF   x80
02B70:  CLRF   x7F
02B72:  MOVLW  7F
02B74:  MOVWF  x7E
02B76:  MOVFF  371,385
02B7A:  MOVFF  370,384
02B7E:  MOVFF  36F,383
02B82:  MOVFF  36E,382
02B86:  MOVLB  0
02B88:  CALL   2290
02B8C:  MOVFF  00,373
02B90:  MOVFF  01,374
02B94:  MOVFF  02,375
02B98:  MOVFF  03,376
02B9C:  BCF    FD8.1
02B9E:  MOVFF  03,385
02BA2:  MOVFF  02,384
02BA6:  MOVFF  01,383
02BAA:  MOVFF  00,382
02BAE:  MOVLW  B4
02BB0:  MOVLB  3
02BB2:  MOVWF  x89
02BB4:  MOVLW  2A
02BB6:  MOVWF  x88
02BB8:  MOVLW  82
02BBA:  MOVWF  x87
02BBC:  MOVWF  x86
02BBE:  MOVLB  0
02BC0:  CALL   0F8E
02BC4:  MOVFF  03,36D
02BC8:  MOVFF  02,36C
02BCC:  MOVFF  01,36B
02BD0:  MOVFF  00,36A
....................       r = r*y2 + ql[2]; 
02BD4:  MOVFF  36D,381
02BD8:  MOVFF  36C,380
02BDC:  MOVFF  36B,37F
02BE0:  MOVFF  36A,37E
02BE4:  MOVFF  371,385
02BE8:  MOVFF  370,384
02BEC:  MOVFF  36F,383
02BF0:  MOVFF  36E,382
02BF4:  CALL   2290
02BF8:  MOVFF  00,373
02BFC:  MOVFF  01,374
02C00:  MOVFF  02,375
02C04:  MOVFF  03,376
02C08:  BCF    FD8.1
02C0A:  MOVFF  03,385
02C0E:  MOVFF  02,384
02C12:  MOVFF  01,383
02C16:  MOVFF  00,382
02C1A:  MOVLW  80
02C1C:  MOVLB  3
02C1E:  MOVWF  x89
02C20:  MOVLW  3E
02C22:  MOVWF  x88
02C24:  MOVLW  06
02C26:  MOVWF  x87
02C28:  MOVLW  83
02C2A:  MOVWF  x86
02C2C:  MOVLB  0
02C2E:  CALL   0F8E
02C32:  MOVFF  03,36D
02C36:  MOVFF  02,36C
02C3A:  MOVFF  01,36B
02C3E:  MOVFF  00,36A
....................       r = r*y2 + ql[3]; 
02C42:  MOVFF  36D,381
02C46:  MOVFF  36C,380
02C4A:  MOVFF  36B,37F
02C4E:  MOVFF  36A,37E
02C52:  MOVFF  371,385
02C56:  MOVFF  370,384
02C5A:  MOVFF  36F,383
02C5E:  MOVFF  36E,382
02C62:  CALL   2290
02C66:  MOVFF  00,373
02C6A:  MOVFF  01,374
02C6E:  MOVFF  02,375
02C72:  MOVFF  03,376
02C76:  BCF    FD8.1
02C78:  MOVFF  03,385
02C7C:  MOVFF  02,384
02C80:  MOVFF  01,383
02C84:  MOVFF  00,382
02C88:  MOVLW  AB
02C8A:  MOVLB  3
02C8C:  MOVWF  x89
02C8E:  MOVLW  E1
02C90:  MOVWF  x88
02C92:  MOVLW  9E
02C94:  MOVWF  x87
02C96:  MOVLW  82
02C98:  MOVWF  x86
02C9A:  MOVLB  0
02C9C:  CALL   0F8E
02CA0:  MOVFF  03,36D
02CA4:  MOVFF  02,36C
02CA8:  MOVFF  01,36B
02CAC:  MOVFF  00,36A
....................  
....................       res = y*res/r; 
02CB0:  MOVFF  365,381
02CB4:  MOVFF  364,380
02CB8:  MOVFF  363,37F
02CBC:  MOVFF  362,37E
02CC0:  MOVFF  369,385
02CC4:  MOVFF  368,384
02CC8:  MOVFF  367,383
02CCC:  MOVFF  366,382
02CD0:  CALL   2290
02CD4:  MOVFF  00,373
02CD8:  MOVFF  01,374
02CDC:  MOVFF  02,375
02CE0:  MOVFF  03,376
02CE4:  MOVFF  03,381
02CE8:  MOVFF  02,380
02CEC:  MOVFF  01,37F
02CF0:  MOVFF  00,37E
02CF4:  MOVFF  36D,385
02CF8:  MOVFF  36C,384
02CFC:  MOVFF  36B,383
02D00:  MOVFF  36A,382
02D04:  CALL   0E30
02D08:  MOVFF  03,369
02D0C:  MOVFF  02,368
02D10:  MOVFF  01,367
02D14:  MOVFF  00,366
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
02D18:  MOVLW  03
02D1A:  MOVLB  3
02D1C:  MOVWF  x74
02D1E:  MOVLW  5E
02D20:  MOVWF  FE9
02D22:  MOVFF  374,FEA
02D26:  MOVLW  7E
02D28:  SUBWF  FEF,W
02D2A:  MOVWF  x72
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
02D2C:  BTFSC  x72.7
02D2E:  BRA    2D32
02D30:  BRA    2D5A
....................          r = -(float32)-n; 
02D32:  MOVLW  00
02D34:  BSF    FD8.0
02D36:  SUBFWB x72,W
02D38:  CLRF   x75
02D3A:  MOVWF  x74
02D3C:  BTFSC  x74.7
02D3E:  DECF   x75,F
02D40:  MOVLB  0
02D42:  RCALL  28CA
02D44:  MOVFF  00,36A
02D48:  MOVF   01,W
02D4A:  XORLW  80
02D4C:  MOVLB  3
02D4E:  MOVWF  x6B
02D50:  MOVFF  02,36C
02D54:  MOVFF  03,36D
....................       else 
02D58:  BRA    2D7A
....................          r = (float32)n; 
02D5A:  CLRF   x75
02D5C:  MOVFF  372,374
02D60:  BTFSC  x74.7
02D62:  DECF   x75,F
02D64:  MOVLB  0
02D66:  RCALL  28CA
02D68:  MOVFF  03,36D
02D6C:  MOVFF  02,36C
02D70:  MOVFF  01,36B
02D74:  MOVFF  00,36A
02D78:  MOVLB  3
....................  
....................       res += r*LN2; 
02D7A:  MOVFF  36D,381
02D7E:  MOVFF  36C,380
02D82:  MOVFF  36B,37F
02D86:  MOVFF  36A,37E
02D8A:  MOVLW  18
02D8C:  MOVWF  x85
02D8E:  MOVLW  72
02D90:  MOVWF  x84
02D92:  MOVLW  31
02D94:  MOVWF  x83
02D96:  MOVLW  7E
02D98:  MOVWF  x82
02D9A:  MOVLB  0
02D9C:  CALL   2290
02DA0:  BCF    FD8.1
02DA2:  MOVFF  369,385
02DA6:  MOVFF  368,384
02DAA:  MOVFF  367,383
02DAE:  MOVFF  366,382
02DB2:  MOVFF  03,389
02DB6:  MOVFF  02,388
02DBA:  MOVFF  01,387
02DBE:  MOVFF  00,386
02DC2:  CALL   0F8E
02DC6:  MOVFF  03,369
02DCA:  MOVFF  02,368
02DCE:  MOVFF  01,367
02DD2:  MOVFF  00,366
....................    } 
....................  
....................    else 
02DD6:  BRA    2DE4
....................       res = 0.0; 
02DD8:  MOVLB  3
02DDA:  CLRF   x69
02DDC:  CLRF   x68
02DDE:  CLRF   x67
02DE0:  CLRF   x66
02DE2:  MOVLB  0
....................  
....................    return(res); 
02DE4:  MOVFF  366,00
02DE8:  MOVFF  367,01
02DEC:  MOVFF  368,02
02DF0:  MOVFF  369,03
.................... } 
02DF4:  RETLW  00
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
*
03200:  MOVFF  355,381
03204:  MOVFF  354,380
03208:  MOVFF  353,37F
0320C:  MOVFF  352,37E
03210:  MOVLB  3
03212:  CLRF   x85
03214:  CLRF   x84
03216:  CLRF   x83
03218:  CLRF   x82
0321A:  MOVLB  0
0321C:  CALL   183A
03220:  BTFSS  FD8.0
03222:  BRA    33D6
03224:  MOVFF  359,35D
03228:  MOVFF  358,35C
0322C:  MOVFF  357,35B
03230:  MOVFF  356,35A
03234:  MOVLB  3
03236:  CLRF   x61
03238:  CLRF   x60
0323A:  CLRF   x5F
0323C:  MOVLW  7F
0323E:  MOVWF  x5E
03240:  MOVLB  0
03242:  CALL   2764
03246:  MOVFF  00,35A
0324A:  MOVFF  01,35B
0324E:  MOVFF  02,35C
03252:  MOVFF  03,35D
03256:  MOVFF  03,381
0325A:  MOVFF  02,380
0325E:  MOVFF  01,37F
03262:  MOVFF  00,37E
03266:  MOVLB  3
03268:  CLRF   x85
0326A:  CLRF   x84
0326C:  CLRF   x83
0326E:  CLRF   x82
03270:  MOVLB  0
03272:  CALL   183A
03276:  BTFSS  FD8.2
03278:  BRA    33D6
....................       if(fmod(y, 2) == 0) { 
0327A:  MOVFF  359,35D
0327E:  MOVFF  358,35C
03282:  MOVFF  357,35B
03286:  MOVFF  356,35A
0328A:  MOVLB  3
0328C:  CLRF   x61
0328E:  CLRF   x60
03290:  CLRF   x5F
03292:  MOVLW  80
03294:  MOVWF  x5E
03296:  MOVLB  0
03298:  CALL   2764
0329C:  MOVFF  00,35A
032A0:  MOVFF  01,35B
032A4:  MOVFF  02,35C
032A8:  MOVFF  03,35D
032AC:  MOVFF  03,381
032B0:  MOVFF  02,380
032B4:  MOVFF  01,37F
032B8:  MOVFF  00,37E
032BC:  MOVLB  3
032BE:  CLRF   x85
032C0:  CLRF   x84
032C2:  CLRF   x83
032C4:  CLRF   x82
032C6:  MOVLB  0
032C8:  CALL   183A
032CC:  BNZ   3350
....................          return (exp(log(-x) * y)); 
032CE:  MOVFF  352,35A
032D2:  MOVLB  3
032D4:  MOVF   x53,W
032D6:  XORLW  80
032D8:  MOVWF  x5B
032DA:  MOVFF  354,35C
032DE:  MOVFF  355,35D
032E2:  MOVFF  355,361
032E6:  MOVFF  354,360
032EA:  MOVWF  x5F
032EC:  MOVFF  352,35E
032F0:  MOVLB  0
032F2:  CALL   291A
032F6:  MOVFF  00,35A
032FA:  MOVFF  01,35B
032FE:  MOVFF  02,35C
03302:  MOVFF  03,35D
03306:  MOVFF  03,381
0330A:  MOVFF  02,380
0330E:  MOVFF  01,37F
03312:  MOVFF  00,37E
03316:  MOVFF  359,385
0331A:  MOVFF  358,384
0331E:  MOVFF  357,383
03322:  MOVFF  356,382
03326:  CALL   2290
0332A:  MOVFF  00,35A
0332E:  MOVFF  01,35B
03332:  MOVFF  02,35C
03336:  MOVFF  03,35D
0333A:  MOVFF  03,361
0333E:  MOVFF  02,360
03342:  MOVFF  01,35F
03346:  MOVFF  00,35E
0334A:  RCALL  2DF6
0334C:  BRA    350A
....................       } else { 
0334E:  BRA    33D4
....................          return (-exp(log(-x) * y)); 
03350:  MOVFF  352,35A
03354:  MOVLB  3
03356:  MOVF   x53,W
03358:  XORLW  80
0335A:  MOVWF  x5B
0335C:  MOVFF  354,35C
03360:  MOVFF  355,35D
03364:  MOVFF  355,361
03368:  MOVFF  354,360
0336C:  MOVWF  x5F
0336E:  MOVFF  352,35E
03372:  MOVLB  0
03374:  CALL   291A
03378:  MOVFF  00,35A
0337C:  MOVFF  01,35B
03380:  MOVFF  02,35C
03384:  MOVFF  03,35D
03388:  MOVFF  03,381
0338C:  MOVFF  02,380
03390:  MOVFF  01,37F
03394:  MOVFF  00,37E
03398:  MOVFF  359,385
0339C:  MOVFF  358,384
033A0:  MOVFF  357,383
033A4:  MOVFF  356,382
033A8:  CALL   2290
033AC:  MOVFF  00,35A
033B0:  MOVFF  01,35B
033B4:  MOVFF  02,35C
033B8:  MOVFF  03,35D
033BC:  MOVFF  03,361
033C0:  MOVFF  02,360
033C4:  MOVFF  01,35F
033C8:  MOVFF  00,35E
033CC:  RCALL  2DF6
033CE:  MOVLW  80
033D0:  XORWF  01,F
033D2:  BRA    350A
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
033D4:  BRA    350A
033D6:  MOVFF  355,381
033DA:  MOVFF  354,380
033DE:  MOVFF  353,37F
033E2:  MOVFF  352,37E
033E6:  MOVLB  3
033E8:  CLRF   x85
033EA:  CLRF   x84
033EC:  CLRF   x83
033EE:  CLRF   x82
033F0:  MOVLB  0
033F2:  CALL   183A
033F6:  BNC   3458
033F8:  MOVFF  359,35D
033FC:  MOVFF  358,35C
03400:  MOVFF  357,35B
03404:  MOVFF  356,35A
03408:  MOVLB  3
0340A:  CLRF   x61
0340C:  CLRF   x60
0340E:  CLRF   x5F
03410:  MOVLW  7F
03412:  MOVWF  x5E
03414:  MOVLB  0
03416:  CALL   2764
0341A:  MOVFF  00,35A
0341E:  MOVFF  01,35B
03422:  MOVFF  02,35C
03426:  MOVFF  03,35D
0342A:  MOVFF  03,381
0342E:  MOVFF  02,380
03432:  MOVFF  01,37F
03436:  MOVFF  00,37E
0343A:  MOVLB  3
0343C:  CLRF   x85
0343E:  CLRF   x84
03440:  CLRF   x83
03442:  CLRF   x82
03444:  MOVLB  0
03446:  CALL   183A
0344A:  BZ    3458
....................       return 0; 
0344C:  CLRF   00
0344E:  CLRF   01
03450:  CLRF   02
03452:  CLRF   03
03454:  BRA    350A
....................    } else { 
03456:  BRA    350A
....................       if(x != 0 || 0 >= y) { 
03458:  MOVFF  355,381
0345C:  MOVFF  354,380
03460:  MOVFF  353,37F
03464:  MOVFF  352,37E
03468:  MOVLB  3
0346A:  CLRF   x85
0346C:  CLRF   x84
0346E:  CLRF   x83
03470:  CLRF   x82
03472:  MOVLB  0
03474:  CALL   183A
03478:  BNZ   349E
0347A:  MOVFF  359,381
0347E:  MOVFF  358,380
03482:  MOVFF  357,37F
03486:  MOVFF  356,37E
0348A:  MOVLB  3
0348C:  CLRF   x85
0348E:  CLRF   x84
03490:  CLRF   x83
03492:  CLRF   x82
03494:  MOVLB  0
03496:  CALL   183A
0349A:  BC    349E
0349C:  BNZ   350A
....................          return (exp(log(x) * y)); 
0349E:  MOVFF  355,361
034A2:  MOVFF  354,360
034A6:  MOVFF  353,35F
034AA:  MOVFF  352,35E
034AE:  CALL   291A
034B2:  MOVFF  00,35A
034B6:  MOVFF  01,35B
034BA:  MOVFF  02,35C
034BE:  MOVFF  03,35D
034C2:  MOVFF  03,381
034C6:  MOVFF  02,380
034CA:  MOVFF  01,37F
034CE:  MOVFF  00,37E
034D2:  MOVFF  359,385
034D6:  MOVFF  358,384
034DA:  MOVFF  357,383
034DE:  MOVFF  356,382
034E2:  CALL   2290
034E6:  MOVFF  00,35A
034EA:  MOVFF  01,35B
034EE:  MOVFF  02,35C
034F2:  MOVFF  03,35D
034F6:  MOVFF  03,361
034FA:  MOVFF  02,360
034FE:  MOVFF  01,35F
03502:  MOVFF  00,35E
03506:  RCALL  2DF6
03508:  BRA    350A
....................       } 
....................    } 
.................... } 
0350A:  RETLW  00
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00CBE:  MOVLB  3
00CC0:  SWAPF  x56,W
00CC2:  ANDLW  F0
00CC4:  MOVWF  00
00CC6:  MOVLW  0F
00CC8:  ANDWF  F83,W
00CCA:  IORWF  00,W
00CCC:  MOVWF  F83
....................       delay_cycles(30);//30 
00CCE:  MOVLW  09
00CD0:  MOVWF  00
00CD2:  DECFSZ 00,F
00CD4:  BRA    0CD2
00CD6:  BRA    0CD8
....................       lcd.enable = 1; 
00CD8:  BSF    F83.3
....................       delay_us(55);//55 
00CDA:  MOVLW  5B
00CDC:  MOVWF  00
00CDE:  DECFSZ 00,F
00CE0:  BRA    0CDE
00CE2:  NOP   
....................       lcd.enable = 0; 
00CE4:  BCF    F83.3
.................... } 
00CE6:  MOVLB  0
00CE8:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
00CEA:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
00CEC:  MOVLW  01
00CEE:  MOVLB  3
00CF0:  MOVWF  x55
00CF2:  MOVLB  0
00CF4:  RCALL  0C96
....................       lcd.rs = address; 
00CF6:  MOVLB  3
00CF8:  BTFSS  x53.0
00CFA:  BCF    F83.1
00CFC:  BTFSC  x53.0
00CFE:  BSF    F83.1
....................       delay_cycles(30);//30 
00D00:  MOVLW  09
00D02:  MOVWF  00
00D04:  DECFSZ 00,F
00D06:  BRA    0D04
00D08:  BRA    0D0A
....................       lcd.rw = 0; 
00D0A:  BCF    F83.2
....................       delay_cycles(30);//30 
00D0C:  MOVLW  09
00D0E:  MOVWF  00
00D10:  DECFSZ 00,F
00D12:  BRA    0D10
00D14:  BRA    0D16
....................       lcd.enable = 0; 
00D16:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
00D18:  SWAPF  x54,W
00D1A:  MOVWF  x55
00D1C:  MOVLW  0F
00D1E:  ANDWF  x55,F
00D20:  MOVFF  355,356
00D24:  MOVLB  0
00D26:  RCALL  0CBE
....................       lcd_send_nibble(n & 0xf); 
00D28:  MOVLB  3
00D2A:  MOVF   x54,W
00D2C:  ANDLW  0F
00D2E:  MOVWF  x55
00D30:  MOVWF  x56
00D32:  MOVLB  0
00D34:  RCALL  0CBE
.................... } 
00D36:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
00D38:  MOVLW  00
00D3A:  MOVWF  F95
....................     lcd.rs = 0; 
00D3C:  BCF    F83.1
....................     lcd.rw = 0; 
00D3E:  BCF    F83.2
....................     lcd.enable = 0; 
00D40:  BCF    F83.3
....................     delay_ms(15); 
00D42:  MOVLW  0F
00D44:  MOVLB  3
00D46:  MOVWF  x55
00D48:  MOVLB  0
00D4A:  RCALL  0C96
....................     for(i=1;i<=3;++i) { 
00D4C:  MOVLW  01
00D4E:  MOVLB  3
00D50:  MOVWF  x3E
00D52:  MOVF   x3E,W
00D54:  SUBLW  03
00D56:  BNC   0D70
....................        lcd_send_nibble(3); 
00D58:  MOVLW  03
00D5A:  MOVWF  x56
00D5C:  MOVLB  0
00D5E:  RCALL  0CBE
....................        delay_ms(5); 
00D60:  MOVLW  05
00D62:  MOVLB  3
00D64:  MOVWF  x55
00D66:  MOVLB  0
00D68:  RCALL  0C96
....................     } 
00D6A:  MOVLB  3
00D6C:  INCF   x3E,F
00D6E:  BRA    0D52
....................     lcd_send_nibble(2); 
00D70:  MOVLW  02
00D72:  MOVWF  x56
00D74:  MOVLB  0
00D76:  RCALL  0CBE
....................     for(i=0;i<=3;++i) 
00D78:  MOVLB  3
00D7A:  CLRF   x3E
00D7C:  MOVF   x3E,W
00D7E:  SUBLW  03
00D80:  BNC   0DAE
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
00D82:  CLRF   03
00D84:  MOVF   x3E,W
00D86:  MOVFF  FF2,33F
00D8A:  BCF    FF2.6
00D8C:  BCF    FF2.7
00D8E:  MOVLB  0
00D90:  CALL   0140
00D94:  MOVLB  3
00D96:  BTFSC  x3F.6
00D98:  BSF    FF2.6
00D9A:  BTFSC  x3F.7
00D9C:  BSF    FF2.7
00D9E:  MOVWF  x3F
00DA0:  CLRF   x53
00DA2:  MOVWF  x54
00DA4:  MOVLB  0
00DA6:  RCALL  0CEA
00DA8:  MOVLB  3
00DAA:  INCF   x3E,F
00DAC:  BRA    0D7C
.................... } 
00DAE:  MOVLB  0
00DB0:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
020F8:  MOVLW  01
020FA:  MOVLB  3
020FC:  SUBWF  x51,W
020FE:  ADDLW  FC
02100:  BC    212C
02102:  ADDLW  04
02104:  MOVLB  0
02106:  GOTO   2140
....................      case 1 : address=0x80;break; 
0210A:  MOVLW  80
0210C:  MOVLB  3
0210E:  MOVWF  x52
02110:  BRA    212C
....................      case 2 : address=0xc0;break; 
02112:  MOVLW  C0
02114:  MOVLB  3
02116:  MOVWF  x52
02118:  BRA    212C
....................      case 3 : address=0x94;break; 
0211A:  MOVLW  94
0211C:  MOVLB  3
0211E:  MOVWF  x52
02120:  BRA    212C
....................      case 4 : address=0xd4;break; 
02122:  MOVLW  D4
02124:  MOVLB  3
02126:  MOVWF  x52
02128:  BRA    212C
0212A:  MOVLB  3
....................    } 
....................    address+=x-1; 
0212C:  MOVLW  01
0212E:  SUBWF  x50,W
02130:  ADDWF  x52,F
....................    lcd_send_byte(0,address); 
02132:  CLRF   x53
02134:  MOVFF  352,354
02138:  MOVLB  0
0213A:  CALL   0CEA
.................... } 
0213E:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
02172:  MOVLB  3
02174:  MOVF   x4F,W
02176:  SUBLW  F1
02178:  BNZ   217E
....................    { 
....................       c=238; 
0217A:  MOVLW  EE
0217C:  MOVWF  x4F
....................    } 
....................    if(c=='Ñ') 
0217E:  MOVF   x4F,W
02180:  SUBLW  D1
02182:  BNZ   2188
....................    { 
....................       c=255; 
02184:  MOVLW  FF
02186:  MOVWF  x4F
....................    } 
....................     
....................    switch (c) { 
02188:  MOVF   x4F,W
0218A:  XORLW  0C
0218C:  MOVLB  0
0218E:  BZ    219A
02190:  XORLW  06
02192:  BZ    21BA
02194:  XORLW  02
02196:  BZ    21CC
02198:  BRA    21DC
....................      case '\f'   : lcd_send_byte(0,1); 
0219A:  MOVLB  3
0219C:  CLRF   x53
0219E:  MOVLW  01
021A0:  MOVWF  x54
021A2:  MOVLB  0
021A4:  CALL   0CEA
....................                    lcdline=1; 
021A8:  MOVLW  01
021AA:  MOVWF  28
....................                    delay_ms(2); 
021AC:  MOVLW  02
021AE:  MOVLB  3
021B0:  MOVWF  x55
021B2:  MOVLB  0
021B4:  CALL   0C96
....................                                            break; 
021B8:  BRA    21EE
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
021BA:  INCF   28,F
021BC:  MOVLW  01
021BE:  MOVLB  3
021C0:  MOVWF  x50
021C2:  MOVFF  28,351
021C6:  MOVLB  0
021C8:  RCALL  20F8
021CA:  BRA    21EE
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
021CC:  MOVLB  3
021CE:  CLRF   x53
021D0:  MOVLW  10
021D2:  MOVWF  x54
021D4:  MOVLB  0
021D6:  CALL   0CEA
021DA:  BRA    21EE
....................      default     : lcd_send_byte(1,c);     break; 
021DC:  MOVLW  01
021DE:  MOVLB  3
021E0:  MOVWF  x53
021E2:  MOVFF  34F,354
021E6:  MOVLB  0
021E8:  CALL   0CEA
021EC:  BRA    21EE
....................    } 
.................... } 
021EE:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B4,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B3,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B3,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0,velocidadInicial=10; 
.................... signed int8   paso=0,OpcionMenu=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0,tEncendido=0; 
.................... float PromPresion[20]; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0,DownFlow=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,tup=0,tdown=0,tright=0,tleft=0,segundosTrabajo=0,horasTrabajo=0,Temporal1=0; 
.................... short Cruce=OFF; 
.................... float p1=8.0175,p2=-52.32,p3=135.13,p4=-65.076,p5=-24.203; 
....................  
.................... int8 VelMotor=0,Entero=0,Decimal1=0; 
.................... float zero_fabrica=199.0,x_uno=0.0,densidad=1.2,Temp=0.0,TempK=0.0,Pa=0.0,Psv=0.0,f=0.0,Xv=0.0,Z1=0.0,Pr=0.0,Temporal=0.0,HR=0,Temporal2=0.0; 
....................  
.................... int1 BITS[32]; 
.................... Int1 NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... typedef struct{ 
....................    float zero_actual; 
....................    float Diferencia; 
....................    int16 adc; 
....................    int8 negativo ; 
....................    float Velocidad; 
....................    int8 l; 
....................    int8 h; 
....................    float Flujo;    
....................    float Ajuste; 
....................    float promedio[20];    
.................... }SensorFlujo; 
....................  
.................... SensorFlujo Flujo[5]; 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
05260:  MOVLB  3
05262:  DECFSZ x3F,W
05264:  BRA    5282
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
05266:  MOVLW  02
05268:  MOVWF  x50
0526A:  MOVFF  340,351
0526E:  MOVLB  0
05270:  CALL   20F8
05274:  MOVLW  64
05276:  MOVWF  FF6
05278:  MOVLW  01
0527A:  MOVWF  FF7
0527C:  CALL   21F0
05280:  MOVLB  3
....................    if(x==2) 
05282:  MOVF   x3F,W
05284:  SUBLW  02
05286:  BNZ   52A4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
05288:  MOVLW  02
0528A:  MOVWF  x50
0528C:  MOVFF  340,351
05290:  MOVLB  0
05292:  CALL   20F8
05296:  MOVLW  78
05298:  MOVWF  FF6
0529A:  MOVLW  01
0529C:  MOVWF  FF7
0529E:  CALL   21F0
052A2:  MOVLB  3
....................    if(x==3) 
052A4:  MOVF   x3F,W
052A6:  SUBLW  03
052A8:  BNZ   52C6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
052AA:  MOVLW  02
052AC:  MOVWF  x50
052AE:  MOVFF  340,351
052B2:  MOVLB  0
052B4:  CALL   20F8
052B8:  MOVLW  8C
052BA:  MOVWF  FF6
052BC:  MOVLW  01
052BE:  MOVWF  FF7
052C0:  CALL   21F0
052C4:  MOVLB  3
....................    if(x==4) 
052C6:  MOVF   x3F,W
052C8:  SUBLW  04
052CA:  BNZ   52E8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero Presion ");} 
052CC:  MOVLW  02
052CE:  MOVWF  x50
052D0:  MOVFF  340,351
052D4:  MOVLB  0
052D6:  CALL   20F8
052DA:  MOVLW  A0
052DC:  MOVWF  FF6
052DE:  MOVLW  01
052E0:  MOVWF  FF7
052E2:  CALL   21F0
052E6:  MOVLB  3
....................     
....................    if(x==5) 
052E8:  MOVF   x3F,W
052EA:  SUBLW  05
052EC:  BNZ   532E
....................    {if(estadoalarma==0) 
052EE:  BTFSC  2A.4
052F0:  BRA    530E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
052F2:  MOVLW  02
052F4:  MOVWF  x50
052F6:  MOVFF  340,351
052FA:  MOVLB  0
052FC:  CALL   20F8
05300:  MOVLW  B4
05302:  MOVWF  FF6
05304:  MOVLW  01
05306:  MOVWF  FF7
05308:  CALL   21F0
0530C:  MOVLB  3
....................    if(estadoalarma==1) 
0530E:  BTFSS  2A.4
05310:  BRA    532E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
05312:  MOVLW  02
05314:  MOVWF  x50
05316:  MOVFF  340,351
0531A:  MOVLB  0
0531C:  CALL   20F8
05320:  MOVLW  C8
05322:  MOVWF  FF6
05324:  MOVLW  01
05326:  MOVWF  FF7
05328:  CALL   21F0
0532C:  MOVLB  3
....................    } 
....................     
....................    if(x==6) 
0532E:  MOVF   x3F,W
05330:  SUBLW  06
05332:  BNZ   5350
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
05334:  MOVLW  02
05336:  MOVWF  x50
05338:  MOVFF  340,351
0533C:  MOVLB  0
0533E:  CALL   20F8
05342:  MOVLW  DC
05344:  MOVWF  FF6
05346:  MOVLW  01
05348:  MOVWF  FF7
0534A:  CALL   21F0
0534E:  MOVLB  3
.................... } 
05350:  MOVLB  0
05352:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
03EE2:  MOVLB  3
03EE4:  RLCF   x46,W
03EE6:  MOVWF  00
03EE8:  RLCF   00,F
03EEA:  MOVLW  FC
03EEC:  ANDWF  00,F
03EEE:  MOVFF  00,01
03EF2:  MOVF   FC2,W
03EF4:  ANDLW  C3
03EF6:  IORWF  00,W
03EF8:  MOVWF  FC2
03EFA:  MOVLW  0A
03EFC:  MOVWF  x55
03EFE:  MOVLB  0
03F00:  CALL   0C96
03F04:  BSF    FC2.1
03F06:  BTFSC  FC2.1
03F08:  BRA    3F06
03F0A:  MOVFF  FC4,383
03F0E:  MOVFF  FC3,382
03F12:  MOVLB  0
03F14:  CALL   0DFA
03F18:  MOVFF  03,34A
03F1C:  MOVFF  02,349
03F20:  MOVFF  01,348
03F24:  MOVFF  00,347
03F28:  MOVFF  347,00
03F2C:  MOVFF  348,01
03F30:  MOVFF  349,02
03F34:  MOVFF  34A,03
.................... } 
03F38:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
0499A:  MOVLB  3
0499C:  CLRF   x42
0499E:  CLRF   x41
049A0:  CLRF   x40
049A2:  CLRF   x3F
....................    float promediopresion=0.0;    
....................     
....................    V1=sensores(0);  
049A4:  CLRF   x46
049A6:  MOVLB  0
049A8:  CALL   3EE2
049AC:  MOVFF  03,B4
049B0:  MOVFF  02,B3
049B4:  MOVFF  01,B2
049B8:  MOVFF  00,B1
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
049BC:  MOVFF  B4,381
049C0:  MOVFF  B3,380
049C4:  MOVFF  B2,37F
049C8:  MOVFF  B1,37E
049CC:  MOVFF  C8,385
049D0:  MOVFF  C7,384
049D4:  MOVFF  C6,383
049D8:  MOVFF  C5,382
049DC:  CALL   0E30
049E0:  MOVFF  00,343
049E4:  MOVFF  01,344
049E8:  MOVFF  02,345
049EC:  MOVFF  03,346
049F0:  BSF    FD8.1
049F2:  MOVFF  03,385
049F6:  MOVFF  02,384
049FA:  MOVFF  01,383
049FE:  MOVFF  00,382
04A02:  MOVLB  3
04A04:  CLRF   x89
04A06:  CLRF   x88
04A08:  CLRF   x87
04A0A:  MOVLW  7F
04A0C:  MOVWF  x86
04A0E:  MOVLB  0
04A10:  CALL   0F8E
04A14:  MOVFF  03,B8
04A18:  MOVFF  02,B7
04A1C:  MOVFF  01,B6
04A20:  MOVFF  00,B5
....................    //VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //G2=G; 
....................    //VG = (G2*5.0)/1023.0; 
....................    //Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
....................     
....................    if(Presion>0) 
04A24:  MOVLB  3
04A26:  CLRF   x81
04A28:  CLRF   x80
04A2A:  CLRF   x7F
04A2C:  CLRF   x7E
04A2E:  MOVFF  B8,385
04A32:  MOVFF  B7,384
04A36:  MOVFF  B6,383
04A3A:  MOVFF  B5,382
04A3E:  MOVLB  0
04A40:  CALL   183A
04A44:  BNC   4A4E
....................       Presion=0.0; 
04A46:  CLRF   xB8
04A48:  CLRF   xB7
04A4A:  CLRF   xB6
04A4C:  CLRF   xB5
....................    
....................    if(Presion<0.0){ 
04A4E:  MOVFF  B8,381
04A52:  MOVFF  B7,380
04A56:  MOVFF  B6,37F
04A5A:  MOVFF  B5,37E
04A5E:  MOVLB  3
04A60:  CLRF   x85
04A62:  CLRF   x84
04A64:  CLRF   x83
04A66:  CLRF   x82
04A68:  MOVLB  0
04A6A:  CALL   183A
04A6E:  BNC   4AA4
....................       Presion=Presion*-1; 
04A70:  MOVFF  B8,381
04A74:  MOVFF  B7,380
04A78:  MOVFF  B6,37F
04A7C:  MOVFF  B5,37E
04A80:  MOVLB  3
04A82:  CLRF   x85
04A84:  CLRF   x84
04A86:  MOVLW  80
04A88:  MOVWF  x83
04A8A:  MOVLW  7F
04A8C:  MOVWF  x82
04A8E:  MOVLB  0
04A90:  CALL   2290
04A94:  MOVFF  03,B8
04A98:  MOVFF  02,B7
04A9C:  MOVFF  01,B6
04AA0:  MOVFF  00,B5
....................    } 
....................  
....................    if(r>media-1) 
04AA4:  MOVLW  01
04AA6:  MOVLB  3
04AA8:  SUBWF  x3E,W
04AAA:  SUBWF  3E,W
04AAC:  BZ    4AB2
04AAE:  BNC   4AB2
....................    {r=0;} 
04AB0:  CLRF   3E
....................    PromPresion[r]=Presion;r++; 
04AB2:  MOVF   3E,W
04AB4:  MULLW  04
04AB6:  MOVF   FF3,W
04AB8:  CLRF   03
04ABA:  ADDLW  61
04ABC:  MOVWF  FE9
04ABE:  MOVLW  00
04AC0:  ADDWFC 03,W
04AC2:  MOVWF  FEA
04AC4:  MOVFF  B5,FEF
04AC8:  MOVFF  B6,FEC
04ACC:  MOVFF  B7,FEC
04AD0:  MOVFF  B8,FEC
04AD4:  INCF   3E,F
....................           
....................    for(q=0;q<=(media-1);q++) 
04AD6:  CLRF   3F
04AD8:  MOVLW  01
04ADA:  SUBWF  x3E,W
04ADC:  SUBWF  3F,W
04ADE:  BZ    4AE2
04AE0:  BC    4B52
....................    { 
....................       promediopresion+=PromPresion[q]; 
04AE2:  MOVF   3F,W
04AE4:  MULLW  04
04AE6:  MOVF   FF3,W
04AE8:  CLRF   03
04AEA:  ADDLW  61
04AEC:  MOVWF  FE9
04AEE:  MOVLW  00
04AF0:  ADDWFC 03,W
04AF2:  MOVWF  FEA
04AF4:  MOVFF  FEF,00
04AF8:  MOVFF  FEC,01
04AFC:  MOVFF  FEC,02
04B00:  MOVFF  FEC,03
04B04:  MOVFF  FEA,344
04B08:  MOVFF  FE9,343
04B0C:  BCF    FD8.1
04B0E:  MOVFF  342,385
04B12:  MOVFF  341,384
04B16:  MOVFF  340,383
04B1A:  MOVFF  33F,382
04B1E:  MOVFF  03,389
04B22:  MOVFF  02,388
04B26:  MOVFF  01,387
04B2A:  MOVFF  00,386
04B2E:  MOVLB  0
04B30:  CALL   0F8E
04B34:  MOVFF  344,FEA
04B38:  MOVFF  343,FE9
04B3C:  MOVFF  03,342
04B40:  MOVFF  02,341
04B44:  MOVFF  01,340
04B48:  MOVFF  00,33F
....................    }  
04B4C:  INCF   3F,F
04B4E:  MOVLB  3
04B50:  BRA    4AD8
....................    promediopresion=promediopresion/media;    
04B52:  CLRF   x83
04B54:  MOVFF  33E,382
04B58:  MOVLB  0
04B5A:  CALL   0DFA
04B5E:  MOVFF  342,381
04B62:  MOVFF  341,380
04B66:  MOVFF  340,37F
04B6A:  MOVFF  33F,37E
04B6E:  MOVFF  03,385
04B72:  MOVFF  02,384
04B76:  MOVFF  01,383
04B7A:  MOVFF  00,382
04B7E:  CALL   0E30
04B82:  MOVFF  03,342
04B86:  MOVFF  02,341
04B8A:  MOVFF  01,340
04B8E:  MOVFF  00,33F
....................     
....................    return promediopresion; 
04B92:  MOVFF  33F,00
04B96:  MOVFF  340,01
04B9A:  MOVFF  341,02
04B9E:  MOVFF  342,03
.................... } 
04BA2:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
00004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
00DB2:  MOVLW  C8
00DB4:  MOVLB  3
00DB6:  MOVWF  x55
00DB8:  MOVLB  0
00DBA:  RCALL  0C96
....................    lcd_init(); 
00DBC:  RCALL  0D38
....................    set_tris_a(0XFF); 
00DBE:  MOVLW  FF
00DC0:  MOVWF  F92
....................    set_tris_e(0XFF); 
00DC2:  BSF    F96.1
00DC4:  BSF    F96.1
00DC6:  BSF    F96.1
00DC8:  BSF    F96.1
....................    enable_interrupts(global); 
00DCA:  MOVLW  C0
00DCC:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
00DCE:  BSF    FF2.4
00DD0:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
00DD2:  MOVLW  C7
00DD4:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
00DD6:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
00DD8:  MOVLW  85
00DDA:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
00DDC:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
00DDE:  MOVF   FC1,W
00DE0:  ANDLW  C0
00DE2:  IORLW  0E
00DE4:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
00DE6:  MOVF   FC0,W
00DE8:  ANDLW  C0
00DEA:  IORLW  02
00DEC:  MOVWF  FC0
00DEE:  BSF    FC0.7
00DF0:  BSF    FC2.0
....................    enable_interrupts(global); 
00DF2:  MOVLW  C0
00DF4:  IORWF  FF2,F
.................... } 
00DF6:  GOTO   554A (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
02210:  MOVLW  01
02212:  MOVLB  3
02214:  MOVWF  x50
02216:  MOVWF  x51
02218:  MOVLB  0
0221A:  RCALL  20F8
....................    printf(lcd_putc,"       MODULO       "); 
0221C:  MOVLW  F0
0221E:  MOVWF  FF6
02220:  MOVLW  01
02222:  MOVWF  FF7
02224:  RCALL  21F0
....................    lcd_gotoxy(1,2); 
02226:  MOVLW  01
02228:  MOVLB  3
0222A:  MOVWF  x50
0222C:  MOVLW  02
0222E:  MOVWF  x51
02230:  MOVLB  0
02232:  RCALL  20F8
....................    printf(lcd_putc,"   FLUJO LAMINAR    "); 
02234:  MOVLW  06
02236:  MOVWF  FF6
02238:  MOVLW  02
0223A:  MOVWF  FF7
0223C:  RCALL  21F0
....................    lcd_gotoxy(1,3); 
0223E:  MOVLW  01
02240:  MOVLB  3
02242:  MOVWF  x50
02244:  MOVLW  03
02246:  MOVWF  x51
02248:  MOVLB  0
0224A:  RCALL  20F8
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0224C:  MOVLW  1C
0224E:  MOVWF  FF6
02250:  MOVLW  02
02252:  MOVWF  FF7
02254:  RCALL  21F0
....................    lcd_gotoxy(1,4); 
02256:  MOVLW  01
02258:  MOVLB  3
0225A:  MOVWF  x50
0225C:  MOVLW  04
0225E:  MOVWF  x51
02260:  MOVLB  0
02262:  RCALL  20F8
....................    printf(lcd_putc,"  REF:JPCFLVMD48IX  "); 
02264:  MOVLW  32
02266:  MOVWF  FF6
02268:  MOVLW  02
0226A:  MOVWF  FF7
0226C:  RCALL  21F0
....................    delay_ms(2000); 
0226E:  MOVLW  08
02270:  MOVLB  3
02272:  MOVWF  x3E
02274:  MOVLW  FA
02276:  MOVWF  x55
02278:  MOVLB  0
0227A:  CALL   0C96
0227E:  MOVLB  3
02280:  DECFSZ x3E,F
02282:  BRA    2274
....................    printf(lcd_putc,"\f"); 
02284:  MOVLW  0C
02286:  MOVWF  x4F
02288:  MOVLB  0
0228A:  RCALL  2172
.................... } 
0228C:  GOTO   555C (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
01206:  MOVFF  FF2,33E
0120A:  BCF    FF2.6
0120C:  BCF    FF2.7
0120E:  CLRF   FAA
01210:  CLRF   FA9
01212:  BCF    FA6.6
01214:  BCF    FA6.7
01216:  BSF    FA6.0
01218:  MOVF   FA8,W
0121A:  MOVLB  3
0121C:  BTFSC  x3E.6
0121E:  BSF    FF2.6
01220:  BTFSC  x3E.7
01222:  BSF    FF2.7
01224:  MOVWF  50
....................    delay_ms(20);  
01226:  MOVLW  14
01228:  MOVWF  x55
0122A:  MOVLB  0
0122C:  RCALL  0C96
....................    contrasena[1]=read_eeprom(1); 
0122E:  MOVFF  FF2,33E
01232:  BCF    FF2.6
01234:  BCF    FF2.7
01236:  CLRF   FAA
01238:  MOVLW  01
0123A:  MOVWF  FA9
0123C:  BCF    FA6.6
0123E:  BCF    FA6.7
01240:  BSF    FA6.0
01242:  MOVF   FA8,W
01244:  MOVLB  3
01246:  BTFSC  x3E.6
01248:  BSF    FF2.6
0124A:  BTFSC  x3E.7
0124C:  BSF    FF2.7
0124E:  MOVWF  51
....................    delay_ms(20); 
01250:  MOVLW  14
01252:  MOVWF  x55
01254:  MOVLB  0
01256:  RCALL  0C96
....................    contrasena[2]=read_eeprom(2); 
01258:  MOVFF  FF2,33E
0125C:  BCF    FF2.6
0125E:  BCF    FF2.7
01260:  CLRF   FAA
01262:  MOVLW  02
01264:  MOVWF  FA9
01266:  BCF    FA6.6
01268:  BCF    FA6.7
0126A:  BSF    FA6.0
0126C:  MOVF   FA8,W
0126E:  MOVLB  3
01270:  BTFSC  x3E.6
01272:  BSF    FF2.6
01274:  BTFSC  x3E.7
01276:  BSF    FF2.7
01278:  MOVWF  52
....................    delay_ms(20);  
0127A:  MOVLW  14
0127C:  MOVWF  x55
0127E:  MOVLB  0
01280:  RCALL  0C96
....................    contrasena[3]=read_eeprom(3); 
01282:  MOVFF  FF2,33E
01286:  BCF    FF2.6
01288:  BCF    FF2.7
0128A:  CLRF   FAA
0128C:  MOVLW  03
0128E:  MOVWF  FA9
01290:  BCF    FA6.6
01292:  BCF    FA6.7
01294:  BSF    FA6.0
01296:  MOVF   FA8,W
01298:  MOVLB  3
0129A:  BTFSC  x3E.6
0129C:  BSF    FF2.6
0129E:  BTFSC  x3E.7
012A0:  BSF    FF2.7
012A2:  MOVWF  53
....................    delay_ms(20); 
012A4:  MOVLW  14
012A6:  MOVWF  x55
012A8:  MOVLB  0
012AA:  RCALL  0C96
....................    estadoalarma=read_eeprom(4); 
012AC:  MOVFF  FF2,33E
012B0:  BCF    FF2.6
012B2:  BCF    FF2.7
012B4:  CLRF   FAA
012B6:  MOVLW  04
012B8:  MOVWF  FA9
012BA:  BCF    FA6.6
012BC:  BCF    FA6.7
012BE:  BSF    FA6.0
012C0:  MOVF   FA8,W
012C2:  MOVLB  3
012C4:  BTFSC  x3E.6
012C6:  BSF    FF2.6
012C8:  BTFSC  x3E.7
012CA:  BSF    FF2.7
012CC:  MOVWF  01
012CE:  BCF    2A.4
012D0:  BTFSC  01.0
012D2:  BSF    2A.4
....................    delay_ms(20); 
012D4:  MOVLW  14
012D6:  MOVWF  x55
012D8:  MOVLB  0
012DA:  RCALL  0C96
....................    tempo_minutos=read_eeprom(5); 
012DC:  MOVFF  FF2,33E
012E0:  BCF    FF2.6
012E2:  BCF    FF2.7
012E4:  CLRF   FAA
012E6:  MOVLW  05
012E8:  MOVWF  FA9
012EA:  BCF    FA6.6
012EC:  BCF    FA6.7
012EE:  BSF    FA6.0
012F0:  MOVF   FA8,W
012F2:  MOVLB  3
012F4:  BTFSC  x3E.6
012F6:  BSF    FF2.6
012F8:  BTFSC  x3E.7
012FA:  BSF    FF2.7
012FC:  MOVWF  3A
....................    delay_ms(20); 
012FE:  MOVLW  14
01300:  MOVWF  x55
01302:  MOVLB  0
01304:  RCALL  0C96
....................    tempo_segundos=read_eeprom(6); 
01306:  MOVFF  FF2,33E
0130A:  BCF    FF2.6
0130C:  BCF    FF2.7
0130E:  CLRF   FAA
01310:  MOVLW  06
01312:  MOVWF  FA9
01314:  BCF    FA6.6
01316:  BCF    FA6.7
01318:  BSF    FA6.0
0131A:  MOVF   FA8,W
0131C:  MOVLB  3
0131E:  BTFSC  x3E.6
01320:  BSF    FF2.6
01322:  BTFSC  x3E.7
01324:  BSF    FF2.7
01326:  MOVWF  3B
....................    delay_ms(20); 
01328:  MOVLW  14
0132A:  MOVWF  x55
0132C:  MOVLB  0
0132E:  RCALL  0C96
....................    segundos=read_eeprom(7); 
01330:  MOVFF  FF2,33E
01334:  BCF    FF2.6
01336:  BCF    FF2.7
01338:  CLRF   FAA
0133A:  MOVLW  07
0133C:  MOVWF  FA9
0133E:  BCF    FA6.6
01340:  BCF    FA6.7
01342:  BSF    FA6.0
01344:  MOVF   FA8,W
01346:  MOVLB  3
01348:  BTFSC  x3E.6
0134A:  BSF    FF2.6
0134C:  BTFSC  x3E.7
0134E:  BSF    FF2.7
01350:  MOVWF  34
....................    delay_ms(20); 
01352:  MOVLW  14
01354:  MOVWF  x55
01356:  MOVLB  0
01358:  RCALL  0C96
....................    minutos=read_eeprom(8); 
0135A:  MOVFF  FF2,33E
0135E:  BCF    FF2.6
01360:  BCF    FF2.7
01362:  CLRF   FAA
01364:  MOVLW  08
01366:  MOVWF  FA9
01368:  BCF    FA6.6
0136A:  BCF    FA6.7
0136C:  BSF    FA6.0
0136E:  MOVF   FA8,W
01370:  MOVLB  3
01372:  BTFSC  x3E.6
01374:  BSF    FF2.6
01376:  BTFSC  x3E.7
01378:  BSF    FF2.7
0137A:  MOVWF  35
....................    delay_ms(20); 
0137C:  MOVLW  14
0137E:  MOVWF  x55
01380:  MOVLB  0
01382:  RCALL  0C96
....................    horasL=read_eeprom(9); 
01384:  MOVFF  FF2,33E
01388:  BCF    FF2.6
0138A:  BCF    FF2.7
0138C:  CLRF   FAA
0138E:  MOVLW  09
01390:  MOVWF  FA9
01392:  BCF    FA6.6
01394:  BCF    FA6.7
01396:  BSF    FA6.0
01398:  MOVF   FA8,W
0139A:  MOVLB  3
0139C:  BTFSC  x3E.6
0139E:  BSF    FF2.6
013A0:  BTFSC  x3E.7
013A2:  BSF    FF2.7
013A4:  MOVWF  36
....................    delay_ms(20); 
013A6:  MOVLW  14
013A8:  MOVWF  x55
013AA:  MOVLB  0
013AC:  RCALL  0C96
....................    horasH=read_eeprom(10); 
013AE:  MOVFF  FF2,33E
013B2:  BCF    FF2.6
013B4:  BCF    FF2.7
013B6:  CLRF   FAA
013B8:  MOVLW  0A
013BA:  MOVWF  FA9
013BC:  BCF    FA6.6
013BE:  BCF    FA6.7
013C0:  BSF    FA6.0
013C2:  MOVF   FA8,W
013C4:  MOVLB  3
013C6:  BTFSC  x3E.6
013C8:  BSF    FF2.6
013CA:  BTFSC  x3E.7
013CC:  BSF    FF2.7
013CE:  MOVWF  37
....................    delay_ms(20); 
013D0:  MOVLW  14
013D2:  MOVWF  x55
013D4:  MOVLB  0
013D6:  RCALL  0C96
....................    G_l=read_eeprom(11); 
013D8:  MOVFF  FF2,33E
013DC:  BCF    FF2.6
013DE:  BCF    FF2.7
013E0:  CLRF   FAA
013E2:  MOVLW  0B
013E4:  MOVWF  FA9
013E6:  BCF    FA6.6
013E8:  BCF    FA6.7
013EA:  BSF    FA6.0
013EC:  MOVF   FA8,W
013EE:  MOVLB  3
013F0:  BTFSC  x3E.6
013F2:  BSF    FF2.6
013F4:  BTFSC  x3E.7
013F6:  BSF    FF2.7
013F8:  MOVWF  38
....................    delay_ms(20); 
013FA:  MOVLW  14
013FC:  MOVWF  x55
013FE:  MOVLB  0
01400:  RCALL  0C96
....................    G_h=read_eeprom(12); 
01402:  MOVFF  FF2,33E
01406:  BCF    FF2.6
01408:  BCF    FF2.7
0140A:  CLRF   FAA
0140C:  MOVLW  0C
0140E:  MOVWF  FA9
01410:  BCF    FA6.6
01412:  BCF    FA6.7
01414:  BSF    FA6.0
01416:  MOVF   FA8,W
01418:  MOVLB  3
0141A:  BTFSC  x3E.6
0141C:  BSF    FF2.6
0141E:  BTFSC  x3E.7
01420:  BSF    FF2.7
01422:  MOVWF  39
....................    delay_ms(20); 
01424:  MOVLW  14
01426:  MOVWF  x55
01428:  MOVLB  0
0142A:  RCALL  0C96
....................    Vel1=read_eeprom(13); 
0142C:  MOVFF  FF2,33E
01430:  BCF    FF2.6
01432:  BCF    FF2.7
01434:  CLRF   FAA
01436:  MOVLW  0D
01438:  MOVWF  FA9
0143A:  BCF    FA6.6
0143C:  BCF    FA6.7
0143E:  BSF    FA6.0
01440:  MOVF   FA8,W
01442:  MOVLB  3
01444:  BTFSC  x3E.6
01446:  BSF    FF2.6
01448:  BTFSC  x3E.7
0144A:  BSF    FF2.7
0144C:  MOVWF  58
....................    delay_ms(20); 
0144E:  MOVLW  14
01450:  MOVWF  x55
01452:  MOVLB  0
01454:  RCALL  0C96
....................    codigoSubir=read_eeprom(15); 
01456:  MOVFF  FF2,33E
0145A:  BCF    FF2.6
0145C:  BCF    FF2.7
0145E:  CLRF   FAA
01460:  MOVLW  0F
01462:  MOVWF  FA9
01464:  BCF    FA6.6
01466:  BCF    FA6.7
01468:  BSF    FA6.0
0146A:  MOVF   FA8,W
0146C:  MOVLB  3
0146E:  BTFSC  x3E.6
01470:  BSF    FF2.6
01472:  BTFSC  x3E.7
01474:  BSF    FF2.7
01476:  MOVWF  55
....................    delay_ms(20); 
01478:  MOVLW  14
0147A:  MOVWF  x55
0147C:  MOVLB  0
0147E:  RCALL  0C96
....................    codigoBajar=read_eeprom(16); 
01480:  MOVFF  FF2,33E
01484:  BCF    FF2.6
01486:  BCF    FF2.7
01488:  CLRF   FAA
0148A:  MOVLW  10
0148C:  MOVWF  FA9
0148E:  BCF    FA6.6
01490:  BCF    FA6.7
01492:  BSF    FA6.0
01494:  MOVF   FA8,W
01496:  MOVLB  3
01498:  BTFSC  x3E.6
0149A:  BSF    FF2.6
0149C:  BTFSC  x3E.7
0149E:  BSF    FF2.7
014A0:  MOVWF  56
....................    delay_ms(20); 
014A2:  MOVLW  14
014A4:  MOVWF  x55
014A6:  MOVLB  0
014A8:  CALL   0C96
....................    codigoDetener=read_eeprom(17); 
014AC:  MOVFF  FF2,33E
014B0:  BCF    FF2.6
014B2:  BCF    FF2.7
014B4:  CLRF   FAA
014B6:  MOVLW  11
014B8:  MOVWF  FA9
014BA:  BCF    FA6.6
014BC:  BCF    FA6.7
014BE:  BSF    FA6.0
014C0:  MOVF   FA8,W
014C2:  MOVLB  3
014C4:  BTFSC  x3E.6
014C6:  BSF    FF2.6
014C8:  BTFSC  x3E.7
014CA:  BSF    FF2.7
014CC:  MOVWF  57
....................    delay_ms(20); 
014CE:  MOVLW  14
014D0:  MOVWF  x55
014D2:  MOVLB  0
014D4:  CALL   0C96
....................    G16=make16(G_h,G_l); 
014D8:  MOVFF  39,5E
014DC:  MOVFF  38,5D
....................    G=G16; 
014E0:  MOVFF  5E,383
014E4:  MOVFF  5D,382
014E8:  RCALL  0DFA
014EA:  MOVFF  03,C8
014EE:  MOVFF  02,C7
014F2:  MOVFF  01,C6
014F6:  MOVFF  00,C5
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
014FA:  MOVFF  FF2,33E
014FE:  BCF    FF2.6
01500:  BCF    FF2.7
01502:  CLRF   FAA
01504:  MOVLW  13
01506:  MOVWF  FA9
01508:  BCF    FA6.6
0150A:  BCF    FA6.7
0150C:  BSF    FA6.0
0150E:  MOVF   FA8,W
01510:  MOVLB  3
01512:  BTFSC  x3E.6
01514:  BSF    FF2.6
01516:  BTFSC  x3E.7
01518:  BSF    FF2.7
0151A:  MOVWF  x3F
0151C:  MOVFF  FF2,340
01520:  BCF    FF2.6
01522:  BCF    FF2.7
01524:  CLRF   FAA
01526:  MOVLW  12
01528:  MOVWF  FA9
0152A:  BCF    FA6.6
0152C:  BCF    FA6.7
0152E:  BSF    FA6.0
01530:  MOVF   FA8,W
01532:  BTFSC  x40.6
01534:  BSF    FF2.6
01536:  BTFSC  x40.7
01538:  BSF    FF2.7
0153A:  MOVWF  x41
0153C:  MOVFF  33F,D7
01540:  MOVFF  341,D6
....................    delay_ms(20); 
01544:  MOVLW  14
01546:  MOVWF  x55
01548:  MOVLB  0
0154A:  CALL   0C96
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
0154E:  MOVFF  FF2,33E
01552:  BCF    FF2.6
01554:  BCF    FF2.7
01556:  CLRF   FAA
01558:  MOVLW  15
0155A:  MOVWF  FA9
0155C:  BCF    FA6.6
0155E:  BCF    FA6.7
01560:  BSF    FA6.0
01562:  MOVF   FA8,W
01564:  MOVLB  3
01566:  BTFSC  x3E.6
01568:  BSF    FF2.6
0156A:  BTFSC  x3E.7
0156C:  BSF    FF2.7
0156E:  MOVWF  x3F
01570:  MOVFF  FF2,340
01574:  BCF    FF2.6
01576:  BCF    FF2.7
01578:  CLRF   FAA
0157A:  MOVLW  14
0157C:  MOVWF  FA9
0157E:  BCF    FA6.6
01580:  BCF    FA6.7
01582:  BSF    FA6.0
01584:  MOVF   FA8,W
01586:  BTFSC  x40.6
01588:  BSF    FF2.6
0158A:  BTFSC  x40.7
0158C:  BSF    FF2.7
0158E:  MOVWF  x41
01590:  MOVFF  33F,D5
01594:  MOVFF  341,D4
....................    delay_ms(20); 
01598:  MOVLW  14
0159A:  MOVWF  x55
0159C:  MOVLB  0
0159E:  CALL   0C96
....................    motor=read_eeprom(22); 
015A2:  MOVFF  FF2,33E
015A6:  BCF    FF2.6
015A8:  BCF    FF2.7
015AA:  CLRF   FAA
015AC:  MOVLW  16
015AE:  MOVWF  FA9
015B0:  BCF    FA6.6
015B2:  BCF    FA6.7
015B4:  BSF    FA6.0
015B6:  MOVF   FA8,W
015B8:  MOVLB  3
015BA:  BTFSC  x3E.6
015BC:  BSF    FF2.6
015BE:  BTFSC  x3E.7
015C0:  BSF    FF2.7
015C2:  MOVWF  44
....................    delay_ms(20); 
015C4:  MOVLW  14
015C6:  MOVWF  x55
015C8:  MOVLB  0
015CA:  CALL   0C96
....................    luz=read_eeprom(23); 
015CE:  MOVFF  FF2,33E
015D2:  BCF    FF2.6
015D4:  BCF    FF2.7
015D6:  CLRF   FAA
015D8:  MOVLW  17
015DA:  MOVWF  FA9
015DC:  BCF    FA6.6
015DE:  BCF    FA6.7
015E0:  BSF    FA6.0
015E2:  MOVF   FA8,W
015E4:  MOVLB  3
015E6:  BTFSC  x3E.6
015E8:  BSF    FF2.6
015EA:  BTFSC  x3E.7
015EC:  BSF    FF2.7
015EE:  MOVWF  45
....................    delay_ms(20); 
015F0:  MOVLW  14
015F2:  MOVWF  x55
015F4:  MOVLB  0
015F6:  CALL   0C96
....................    velocidadInicial=read_eeprom(24); 
015FA:  MOVFF  FF2,33E
015FE:  BCF    FF2.6
01600:  BCF    FF2.7
01602:  CLRF   FAA
01604:  MOVLW  18
01606:  MOVWF  FA9
01608:  BCF    FA6.6
0160A:  BCF    FA6.7
0160C:  BSF    FA6.0
0160E:  MOVF   FA8,W
01610:  MOVLB  3
01612:  BTFSC  x3E.6
01614:  BSF    FF2.6
01616:  BTFSC  x3E.7
01618:  BSF    FF2.7
0161A:  MOVWF  46
....................    delay_ms(20); 
0161C:  MOVLW  14
0161E:  MOVWF  x55
01620:  MOVLB  0
01622:  CALL   0C96
....................    delay_ms(10); 
01626:  MOVLW  0A
01628:  MOVLB  3
0162A:  MOVWF  x55
0162C:  MOVLB  0
0162E:  CALL   0C96
....................    Entero=read_eeprom(25); 
01632:  MOVFF  FF2,33E
01636:  BCF    FF2.6
01638:  BCF    FF2.7
0163A:  CLRF   FAA
0163C:  MOVLW  19
0163E:  MOVWF  FA9
01640:  BCF    FA6.6
01642:  BCF    FA6.7
01644:  BSF    FA6.0
01646:  MOVF   FA8,W
01648:  MOVLB  3
0164A:  BTFSC  x3E.6
0164C:  BSF    FF2.6
0164E:  BTFSC  x3E.7
01650:  BSF    FF2.7
01652:  MOVLB  0
01654:  MOVWF  xEF
....................    delay_ms(10); 
01656:  MOVLW  0A
01658:  MOVLB  3
0165A:  MOVWF  x55
0165C:  MOVLB  0
0165E:  CALL   0C96
....................    Temporal=read_eeprom(26); 
01662:  MOVFF  FF2,33E
01666:  BCF    FF2.6
01668:  BCF    FF2.7
0166A:  CLRF   FAA
0166C:  MOVLW  1A
0166E:  MOVWF  FA9
01670:  BCF    FA6.6
01672:  BCF    FA6.7
01674:  BSF    FA6.0
01676:  MOVF   FA8,W
01678:  MOVLB  3
0167A:  BTFSC  x3E.6
0167C:  BSF    FF2.6
0167E:  BTFSC  x3E.7
01680:  BSF    FF2.7
01682:  CLRF   x83
01684:  MOVWF  x82
01686:  MOVLB  0
01688:  CALL   0DFA
0168C:  MOVFF  03,120
01690:  MOVFF  02,11F
01694:  MOVFF  01,11E
01698:  MOVFF  00,11D
....................    delay_ms(10); 
0169C:  MOVLW  0A
0169E:  MOVLB  3
016A0:  MOVWF  x55
016A2:  MOVLB  0
016A4:  CALL   0C96
....................    Temporal=Temporal/100.0; 
016A8:  MOVFF  120,381
016AC:  MOVFF  11F,380
016B0:  MOVFF  11E,37F
016B4:  MOVFF  11D,37E
016B8:  MOVLB  3
016BA:  CLRF   x85
016BC:  CLRF   x84
016BE:  MOVLW  48
016C0:  MOVWF  x83
016C2:  MOVLW  85
016C4:  MOVWF  x82
016C6:  MOVLB  0
016C8:  CALL   0E30
016CC:  MOVFF  03,120
016D0:  MOVFF  02,11F
016D4:  MOVFF  01,11E
016D8:  MOVFF  00,11D
....................    Flujo[1].Ajuste=Entero+Temporal; 
016DC:  MOVLB  3
016DE:  CLRF   x83
016E0:  MOVFF  EF,382
016E4:  MOVLB  0
016E6:  CALL   0DFA
016EA:  BCF    FD8.1
016EC:  MOVFF  03,385
016F0:  MOVFF  02,384
016F4:  MOVFF  01,383
016F8:  MOVFF  00,382
016FC:  MOVFF  120,389
01700:  MOVFF  11F,388
01704:  MOVFF  11E,387
01708:  MOVFF  11D,386
0170C:  RCALL  0F8E
0170E:  MOVFF  03,1B2
01712:  MOVFF  02,1B1
01716:  MOVFF  01,1B0
0171A:  MOVFF  00,1AF
....................    delay_ms(10); 
0171E:  MOVLW  0A
01720:  MOVLB  3
01722:  MOVWF  x55
01724:  MOVLB  0
01726:  CALL   0C96
....................    Flujo[1].zero_actual=make16(read_eeprom(28),read_eeprom(27)); 
0172A:  MOVFF  FF2,33E
0172E:  BCF    FF2.6
01730:  BCF    FF2.7
01732:  CLRF   FAA
01734:  MOVLW  1C
01736:  MOVWF  FA9
01738:  BCF    FA6.6
0173A:  BCF    FA6.7
0173C:  BSF    FA6.0
0173E:  MOVF   FA8,W
01740:  MOVLB  3
01742:  BTFSC  x3E.6
01744:  BSF    FF2.6
01746:  BTFSC  x3E.7
01748:  BSF    FF2.7
0174A:  MOVWF  x3F
0174C:  MOVFF  FF2,340
01750:  BCF    FF2.6
01752:  BCF    FF2.7
01754:  CLRF   FAA
01756:  MOVLW  1B
01758:  MOVWF  FA9
0175A:  BCF    FA6.6
0175C:  BCF    FA6.7
0175E:  BSF    FA6.0
01760:  MOVF   FA8,W
01762:  BTFSC  x40.6
01764:  BSF    FF2.6
01766:  BTFSC  x40.7
01768:  BSF    FF2.7
0176A:  MOVWF  x41
0176C:  MOVFF  33F,03
01770:  MOVF   x41,W
01772:  MOVWF  x82
01774:  MOVFF  03,383
01778:  MOVLB  0
0177A:  CALL   0DFA
0177E:  MOVFF  03,19D
01782:  MOVFF  02,19C
01786:  MOVFF  01,19B
0178A:  MOVFF  00,19A
....................    delay_ms(10); 
0178E:  MOVLW  0A
01790:  MOVLB  3
01792:  MOVWF  x55
01794:  MOVLB  0
01796:  CALL   0C96
....................     
....................    Pr=read_eeprom(29); 
0179A:  MOVFF  FF2,33E
0179E:  BCF    FF2.6
017A0:  BCF    FF2.7
017A2:  CLRF   FAA
017A4:  MOVLW  1D
017A6:  MOVWF  FA9
017A8:  BCF    FA6.6
017AA:  BCF    FA6.7
017AC:  BSF    FA6.0
017AE:  MOVF   FA8,W
017B0:  MOVLB  3
017B2:  BTFSC  x3E.6
017B4:  BSF    FF2.6
017B6:  BTFSC  x3E.7
017B8:  BSF    FF2.7
017BA:  CLRF   x83
017BC:  MOVWF  x82
017BE:  MOVLB  0
017C0:  CALL   0DFA
017C4:  MOVFF  03,11C
017C8:  MOVFF  02,11B
017CC:  MOVFF  01,11A
017D0:  MOVFF  00,119
....................    delay_ms(10); 
017D4:  MOVLW  0A
017D6:  MOVLB  3
017D8:  MOVWF  x55
017DA:  MOVLB  0
017DC:  CALL   0C96
....................    HR=read_eeprom(30); 
017E0:  MOVFF  FF2,33E
017E4:  BCF    FF2.6
017E6:  BCF    FF2.7
017E8:  CLRF   FAA
017EA:  MOVLW  1E
017EC:  MOVWF  FA9
017EE:  BCF    FA6.6
017F0:  BCF    FA6.7
017F2:  BSF    FA6.0
017F4:  MOVF   FA8,W
017F6:  MOVLB  3
017F8:  BTFSC  x3E.6
017FA:  BSF    FF2.6
017FC:  BTFSC  x3E.7
017FE:  BSF    FF2.7
01800:  CLRF   x83
01802:  MOVWF  x82
01804:  MOVLB  0
01806:  CALL   0DFA
0180A:  MOVFF  03,124
0180E:  MOVFF  02,123
01812:  MOVFF  01,122
01816:  MOVFF  00,121
....................    delay_ms(10); 
0181A:  MOVLW  0A
0181C:  MOVLB  3
0181E:  MOVWF  x55
01820:  MOVLB  0
01822:  CALL   0C96
....................     
....................    horas=make16(horasH,horasL); 
01826:  MOVFF  37,5C
0182A:  MOVFF  36,5B
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0182E:  MOVFF  3A,3C
01832:  MOVFF  3B,3D
.................... } 
01836:  GOTO   554E (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
018B4:  BTFSC  50.7
018B6:  BRA    18BE
018B8:  MOVF   50,W
018BA:  SUBLW  09
018BC:  BNC   18C4
018BE:  BTFSC  50.7
018C0:  BRA    18C4
018C2:  BRA    18FC
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
018C4:  CLRF   50
018C6:  CLRF   FAA
018C8:  CLRF   FA9
018CA:  CLRF   FA8
018CC:  BCF    FA6.6
018CE:  BCF    FA6.7
018D0:  BSF    FA6.2
018D2:  MOVF   FF2,W
018D4:  MOVWF  00
018D6:  BCF    FF2.6
018D8:  BCF    FF2.7
018DA:  MOVLB  F
018DC:  MOVLW  55
018DE:  MOVWF  FA7
018E0:  MOVLW  AA
018E2:  MOVWF  FA7
018E4:  BSF    FA6.1
018E6:  BTFSC  FA6.1
018E8:  BRA    18E6
018EA:  BCF    FA6.2
018EC:  MOVF   00,W
018EE:  IORWF  FF2,F
018F0:  MOVLW  14
018F2:  MOVLB  3
018F4:  MOVWF  x55
018F6:  MOVLB  0
018F8:  CALL   0C96
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
018FC:  BTFSC  51.7
018FE:  BRA    1906
01900:  MOVF   51,W
01902:  SUBLW  09
01904:  BNC   190C
01906:  BTFSC  51.7
01908:  BRA    190C
0190A:  BRA    1946
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0190C:  CLRF   51
0190E:  CLRF   FAA
01910:  MOVLW  01
01912:  MOVWF  FA9
01914:  CLRF   FA8
01916:  BCF    FA6.6
01918:  BCF    FA6.7
0191A:  BSF    FA6.2
0191C:  MOVF   FF2,W
0191E:  MOVWF  00
01920:  BCF    FF2.6
01922:  BCF    FF2.7
01924:  MOVLB  F
01926:  MOVLW  55
01928:  MOVWF  FA7
0192A:  MOVLW  AA
0192C:  MOVWF  FA7
0192E:  BSF    FA6.1
01930:  BTFSC  FA6.1
01932:  BRA    1930
01934:  BCF    FA6.2
01936:  MOVF   00,W
01938:  IORWF  FF2,F
0193A:  MOVLW  14
0193C:  MOVLB  3
0193E:  MOVWF  x55
01940:  MOVLB  0
01942:  CALL   0C96
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
01946:  BTFSC  52.7
01948:  BRA    1950
0194A:  MOVF   52,W
0194C:  SUBLW  09
0194E:  BNC   1956
01950:  BTFSC  52.7
01952:  BRA    1956
01954:  BRA    1990
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
01956:  CLRF   52
01958:  CLRF   FAA
0195A:  MOVLW  02
0195C:  MOVWF  FA9
0195E:  CLRF   FA8
01960:  BCF    FA6.6
01962:  BCF    FA6.7
01964:  BSF    FA6.2
01966:  MOVF   FF2,W
01968:  MOVWF  00
0196A:  BCF    FF2.6
0196C:  BCF    FF2.7
0196E:  MOVLB  F
01970:  MOVLW  55
01972:  MOVWF  FA7
01974:  MOVLW  AA
01976:  MOVWF  FA7
01978:  BSF    FA6.1
0197A:  BTFSC  FA6.1
0197C:  BRA    197A
0197E:  BCF    FA6.2
01980:  MOVF   00,W
01982:  IORWF  FF2,F
01984:  MOVLW  14
01986:  MOVLB  3
01988:  MOVWF  x55
0198A:  MOVLB  0
0198C:  CALL   0C96
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
01990:  BTFSC  53.7
01992:  BRA    199A
01994:  MOVF   53,W
01996:  SUBLW  09
01998:  BNC   19A0
0199A:  BTFSC  53.7
0199C:  BRA    19A0
0199E:  BRA    19DA
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
019A0:  CLRF   53
019A2:  CLRF   FAA
019A4:  MOVLW  03
019A6:  MOVWF  FA9
019A8:  CLRF   FA8
019AA:  BCF    FA6.6
019AC:  BCF    FA6.7
019AE:  BSF    FA6.2
019B0:  MOVF   FF2,W
019B2:  MOVWF  00
019B4:  BCF    FF2.6
019B6:  BCF    FF2.7
019B8:  MOVLB  F
019BA:  MOVLW  55
019BC:  MOVWF  FA7
019BE:  MOVLW  AA
019C0:  MOVWF  FA7
019C2:  BSF    FA6.1
019C4:  BTFSC  FA6.1
019C6:  BRA    19C4
019C8:  BCF    FA6.2
019CA:  MOVF   00,W
019CC:  IORWF  FF2,F
019CE:  MOVLW  14
019D0:  MOVLB  3
019D2:  MOVWF  x55
019D4:  MOVLB  0
019D6:  CALL   0C96
....................    } 
....................    if(estadoalarma>1){ 
019DA:  MOVLW  00
019DC:  BTFSC  2A.4
019DE:  MOVLW  01
019E0:  SUBLW  01
019E2:  BC    1A20
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
019E4:  BSF    2A.4
019E6:  CLRF   FAA
019E8:  MOVLW  04
019EA:  MOVWF  FA9
019EC:  MOVLW  01
019EE:  MOVWF  FA8
019F0:  BCF    FA6.6
019F2:  BCF    FA6.7
019F4:  BSF    FA6.2
019F6:  MOVF   FF2,W
019F8:  MOVWF  00
019FA:  BCF    FF2.6
019FC:  BCF    FF2.7
019FE:  MOVLB  F
01A00:  MOVLW  55
01A02:  MOVWF  FA7
01A04:  MOVLW  AA
01A06:  MOVWF  FA7
01A08:  BSF    FA6.1
01A0A:  BTFSC  FA6.1
01A0C:  BRA    1A0A
01A0E:  BCF    FA6.2
01A10:  MOVF   00,W
01A12:  IORWF  FF2,F
01A14:  MOVLW  14
01A16:  MOVLB  3
01A18:  MOVWF  x55
01A1A:  MOVLB  0
01A1C:  CALL   0C96
....................    } 
....................    if(tempo_minutos>200){ 
01A20:  MOVF   3A,W
01A22:  SUBLW  C8
01A24:  BC    1A64
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
01A26:  MOVLW  14
01A28:  MOVWF  3A
01A2A:  CLRF   FAA
01A2C:  MOVLW  05
01A2E:  MOVWF  FA9
01A30:  MOVLW  14
01A32:  MOVWF  FA8
01A34:  BCF    FA6.6
01A36:  BCF    FA6.7
01A38:  BSF    FA6.2
01A3A:  MOVF   FF2,W
01A3C:  MOVWF  00
01A3E:  BCF    FF2.6
01A40:  BCF    FF2.7
01A42:  MOVLB  F
01A44:  MOVLW  55
01A46:  MOVWF  FA7
01A48:  MOVLW  AA
01A4A:  MOVWF  FA7
01A4C:  BSF    FA6.1
01A4E:  BTFSC  FA6.1
01A50:  BRA    1A4E
01A52:  BCF    FA6.2
01A54:  MOVF   00,W
01A56:  IORWF  FF2,F
01A58:  MOVLW  14
01A5A:  MOVLB  3
01A5C:  MOVWF  x55
01A5E:  MOVLB  0
01A60:  CALL   0C96
....................    } 
....................    if(tempo_segundos>59){ 
01A64:  MOVF   3B,W
01A66:  SUBLW  3B
01A68:  BC    1AA4
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
01A6A:  CLRF   3B
01A6C:  CLRF   FAA
01A6E:  MOVLW  06
01A70:  MOVWF  FA9
01A72:  CLRF   FA8
01A74:  BCF    FA6.6
01A76:  BCF    FA6.7
01A78:  BSF    FA6.2
01A7A:  MOVF   FF2,W
01A7C:  MOVWF  00
01A7E:  BCF    FF2.6
01A80:  BCF    FF2.7
01A82:  MOVLB  F
01A84:  MOVLW  55
01A86:  MOVWF  FA7
01A88:  MOVLW  AA
01A8A:  MOVWF  FA7
01A8C:  BSF    FA6.1
01A8E:  BTFSC  FA6.1
01A90:  BRA    1A8E
01A92:  BCF    FA6.2
01A94:  MOVF   00,W
01A96:  IORWF  FF2,F
01A98:  MOVLW  14
01A9A:  MOVLB  3
01A9C:  MOVWF  x55
01A9E:  MOVLB  0
01AA0:  CALL   0C96
....................    } 
....................    if(segundos>60){ 
01AA4:  MOVF   34,W
01AA6:  SUBLW  3C
01AA8:  BC    1AE4
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
01AAA:  CLRF   34
01AAC:  CLRF   FAA
01AAE:  MOVLW  07
01AB0:  MOVWF  FA9
01AB2:  CLRF   FA8
01AB4:  BCF    FA6.6
01AB6:  BCF    FA6.7
01AB8:  BSF    FA6.2
01ABA:  MOVF   FF2,W
01ABC:  MOVWF  00
01ABE:  BCF    FF2.6
01AC0:  BCF    FF2.7
01AC2:  MOVLB  F
01AC4:  MOVLW  55
01AC6:  MOVWF  FA7
01AC8:  MOVLW  AA
01ACA:  MOVWF  FA7
01ACC:  BSF    FA6.1
01ACE:  BTFSC  FA6.1
01AD0:  BRA    1ACE
01AD2:  BCF    FA6.2
01AD4:  MOVF   00,W
01AD6:  IORWF  FF2,F
01AD8:  MOVLW  14
01ADA:  MOVLB  3
01ADC:  MOVWF  x55
01ADE:  MOVLB  0
01AE0:  CALL   0C96
....................    } 
....................    if(minutos>60){ 
01AE4:  MOVF   35,W
01AE6:  SUBLW  3C
01AE8:  BC    1B24
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
01AEA:  CLRF   35
01AEC:  CLRF   FAA
01AEE:  MOVLW  08
01AF0:  MOVWF  FA9
01AF2:  CLRF   FA8
01AF4:  BCF    FA6.6
01AF6:  BCF    FA6.7
01AF8:  BSF    FA6.2
01AFA:  MOVF   FF2,W
01AFC:  MOVWF  00
01AFE:  BCF    FF2.6
01B00:  BCF    FF2.7
01B02:  MOVLB  F
01B04:  MOVLW  55
01B06:  MOVWF  FA7
01B08:  MOVLW  AA
01B0A:  MOVWF  FA7
01B0C:  BSF    FA6.1
01B0E:  BTFSC  FA6.1
01B10:  BRA    1B0E
01B12:  BCF    FA6.2
01B14:  MOVF   00,W
01B16:  IORWF  FF2,F
01B18:  MOVLW  14
01B1A:  MOVLB  3
01B1C:  MOVWF  x55
01B1E:  MOVLB  0
01B20:  CALL   0C96
....................    } 
....................    if(horas>10000){ 
01B24:  MOVF   5C,W
01B26:  SUBLW  26
01B28:  BC    1BAA
01B2A:  XORLW  FF
01B2C:  BNZ   1B34
01B2E:  MOVF   5B,W
01B30:  SUBLW  10
01B32:  BC    1BAA
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
01B34:  CLRF   5C
01B36:  CLRF   5B
01B38:  CLRF   FAA
01B3A:  MOVLW  09
01B3C:  MOVWF  FA9
01B3E:  MOVLW  0A
01B40:  MOVWF  FA8
01B42:  BCF    FA6.6
01B44:  BCF    FA6.7
01B46:  BSF    FA6.2
01B48:  MOVF   FF2,W
01B4A:  MOVWF  00
01B4C:  BCF    FF2.6
01B4E:  BCF    FF2.7
01B50:  MOVLB  F
01B52:  MOVLW  55
01B54:  MOVWF  FA7
01B56:  MOVLW  AA
01B58:  MOVWF  FA7
01B5A:  BSF    FA6.1
01B5C:  BTFSC  FA6.1
01B5E:  BRA    1B5C
01B60:  BCF    FA6.2
01B62:  MOVF   00,W
01B64:  IORWF  FF2,F
01B66:  MOVLW  14
01B68:  MOVLB  3
01B6A:  MOVWF  x55
01B6C:  MOVLB  0
01B6E:  CALL   0C96
01B72:  CLRF   FAA
01B74:  MOVLW  0A
01B76:  MOVWF  FA9
01B78:  CLRF   FA8
01B7A:  BCF    FA6.6
01B7C:  BCF    FA6.7
01B7E:  BSF    FA6.2
01B80:  MOVF   FF2,W
01B82:  MOVWF  00
01B84:  BCF    FF2.6
01B86:  BCF    FF2.7
01B88:  MOVLB  F
01B8A:  MOVLW  55
01B8C:  MOVWF  FA7
01B8E:  MOVLW  AA
01B90:  MOVWF  FA7
01B92:  BSF    FA6.1
01B94:  BTFSC  FA6.1
01B96:  BRA    1B94
01B98:  BCF    FA6.2
01B9A:  MOVF   00,W
01B9C:  IORWF  FF2,F
01B9E:  MOVLW  14
01BA0:  MOVLB  3
01BA2:  MOVWF  x55
01BA4:  MOVLB  0
01BA6:  CALL   0C96
....................    } 
....................    if(G<150 || G>300){ 
01BAA:  MOVFF  C8,381
01BAE:  MOVFF  C7,380
01BB2:  MOVFF  C6,37F
01BB6:  MOVFF  C5,37E
01BBA:  MOVLB  3
01BBC:  CLRF   x85
01BBE:  CLRF   x84
01BC0:  MOVLW  16
01BC2:  MOVWF  x83
01BC4:  MOVLW  86
01BC6:  MOVWF  x82
01BC8:  MOVLB  0
01BCA:  RCALL  183A
01BCC:  BC    1BF2
01BCE:  MOVLB  3
01BD0:  CLRF   x81
01BD2:  CLRF   x80
01BD4:  MOVLW  16
01BD6:  MOVWF  x7F
01BD8:  MOVLW  87
01BDA:  MOVWF  x7E
01BDC:  MOVFF  C8,385
01BE0:  MOVFF  C7,384
01BE4:  MOVFF  C6,383
01BE8:  MOVFF  C5,382
01BEC:  MOVLB  0
01BEE:  RCALL  183A
01BF0:  BNC   1C70
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
01BF2:  CLRF   xC8
01BF4:  CLRF   xC7
01BF6:  MOVLW  5C
01BF8:  MOVWF  xC6
01BFA:  MOVLW  86
01BFC:  MOVWF  xC5
01BFE:  CLRF   FAA
01C00:  MOVLW  0B
01C02:  MOVWF  FA9
01C04:  MOVLW  DC
01C06:  MOVWF  FA8
01C08:  BCF    FA6.6
01C0A:  BCF    FA6.7
01C0C:  BSF    FA6.2
01C0E:  MOVF   FF2,W
01C10:  MOVWF  00
01C12:  BCF    FF2.6
01C14:  BCF    FF2.7
01C16:  MOVLB  F
01C18:  MOVLW  55
01C1A:  MOVWF  FA7
01C1C:  MOVLW  AA
01C1E:  MOVWF  FA7
01C20:  BSF    FA6.1
01C22:  BTFSC  FA6.1
01C24:  BRA    1C22
01C26:  BCF    FA6.2
01C28:  MOVF   00,W
01C2A:  IORWF  FF2,F
01C2C:  MOVLW  14
01C2E:  MOVLB  3
01C30:  MOVWF  x55
01C32:  MOVLB  0
01C34:  CALL   0C96
01C38:  CLRF   FAA
01C3A:  MOVLW  0C
01C3C:  MOVWF  FA9
01C3E:  CLRF   FA8
01C40:  BCF    FA6.6
01C42:  BCF    FA6.7
01C44:  BSF    FA6.2
01C46:  MOVF   FF2,W
01C48:  MOVWF  00
01C4A:  BCF    FF2.6
01C4C:  BCF    FF2.7
01C4E:  MOVLB  F
01C50:  MOVLW  55
01C52:  MOVWF  FA7
01C54:  MOVLW  AA
01C56:  MOVWF  FA7
01C58:  BSF    FA6.1
01C5A:  BTFSC  FA6.1
01C5C:  BRA    1C5A
01C5E:  BCF    FA6.2
01C60:  MOVF   00,W
01C62:  IORWF  FF2,F
01C64:  MOVLW  14
01C66:  MOVLB  3
01C68:  MOVWF  x55
01C6A:  MOVLB  0
01C6C:  CALL   0C96
....................    } 
....................    if(Vel1>20 || Vel1<1){ 
01C70:  MOVF   58,W
01C72:  SUBLW  14
01C74:  BNC   1C7A
01C76:  MOVF   58,F
01C78:  BNZ   1CB8
....................       Vel1=10;write_eeprom(13,10);delay_ms(20); 
01C7A:  MOVLW  0A
01C7C:  MOVWF  58
01C7E:  CLRF   FAA
01C80:  MOVLW  0D
01C82:  MOVWF  FA9
01C84:  MOVLW  0A
01C86:  MOVWF  FA8
01C88:  BCF    FA6.6
01C8A:  BCF    FA6.7
01C8C:  BSF    FA6.2
01C8E:  MOVF   FF2,W
01C90:  MOVWF  00
01C92:  BCF    FF2.6
01C94:  BCF    FF2.7
01C96:  MOVLB  F
01C98:  MOVLW  55
01C9A:  MOVWF  FA7
01C9C:  MOVLW  AA
01C9E:  MOVWF  FA7
01CA0:  BSF    FA6.1
01CA2:  BTFSC  FA6.1
01CA4:  BRA    1CA2
01CA6:  BCF    FA6.2
01CA8:  MOVF   00,W
01CAA:  IORWF  FF2,F
01CAC:  MOVLW  14
01CAE:  MOVLB  3
01CB0:  MOVWF  x55
01CB2:  MOVLB  0
01CB4:  CALL   0C96
....................    } 
....................    if(horasTrabajo>60000){ 
01CB8:  MOVF   xD7,W
01CBA:  SUBLW  E9
01CBC:  BC    1D3C
01CBE:  XORLW  FF
01CC0:  BNZ   1CC8
01CC2:  MOVF   xD6,W
01CC4:  SUBLW  60
01CC6:  BC    1D3C
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
01CC8:  CLRF   xD7
01CCA:  CLRF   xD6
01CCC:  CLRF   FAA
01CCE:  MOVLW  13
01CD0:  MOVWF  FA9
01CD2:  CLRF   FA8
01CD4:  BCF    FA6.6
01CD6:  BCF    FA6.7
01CD8:  BSF    FA6.2
01CDA:  MOVF   FF2,W
01CDC:  MOVWF  00
01CDE:  BCF    FF2.6
01CE0:  BCF    FF2.7
01CE2:  MOVLB  F
01CE4:  MOVLW  55
01CE6:  MOVWF  FA7
01CE8:  MOVLW  AA
01CEA:  MOVWF  FA7
01CEC:  BSF    FA6.1
01CEE:  BTFSC  FA6.1
01CF0:  BRA    1CEE
01CF2:  BCF    FA6.2
01CF4:  MOVF   00,W
01CF6:  IORWF  FF2,F
01CF8:  MOVLW  14
01CFA:  MOVLB  3
01CFC:  MOVWF  x55
01CFE:  MOVLB  0
01D00:  CALL   0C96
01D04:  CLRF   FAA
01D06:  MOVLW  12
01D08:  MOVWF  FA9
01D0A:  CLRF   FA8
01D0C:  BCF    FA6.6
01D0E:  BCF    FA6.7
01D10:  BSF    FA6.2
01D12:  MOVF   FF2,W
01D14:  MOVWF  00
01D16:  BCF    FF2.6
01D18:  BCF    FF2.7
01D1A:  MOVLB  F
01D1C:  MOVLW  55
01D1E:  MOVWF  FA7
01D20:  MOVLW  AA
01D22:  MOVWF  FA7
01D24:  BSF    FA6.1
01D26:  BTFSC  FA6.1
01D28:  BRA    1D26
01D2A:  BCF    FA6.2
01D2C:  MOVF   00,W
01D2E:  IORWF  FF2,F
01D30:  MOVLW  14
01D32:  MOVLB  3
01D34:  MOVWF  x55
01D36:  MOVLB  0
01D38:  CALL   0C96
....................    } 
....................    if(segundosTrabajo>3600){ 
01D3C:  MOVF   xD5,W
01D3E:  SUBLW  0D
01D40:  BC    1DC0
01D42:  XORLW  FF
01D44:  BNZ   1D4C
01D46:  MOVF   xD4,W
01D48:  SUBLW  10
01D4A:  BC    1DC0
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
01D4C:  CLRF   xD5
01D4E:  CLRF   xD4
01D50:  CLRF   FAA
01D52:  MOVLW  14
01D54:  MOVWF  FA9
01D56:  CLRF   FA8
01D58:  BCF    FA6.6
01D5A:  BCF    FA6.7
01D5C:  BSF    FA6.2
01D5E:  MOVF   FF2,W
01D60:  MOVWF  00
01D62:  BCF    FF2.6
01D64:  BCF    FF2.7
01D66:  MOVLB  F
01D68:  MOVLW  55
01D6A:  MOVWF  FA7
01D6C:  MOVLW  AA
01D6E:  MOVWF  FA7
01D70:  BSF    FA6.1
01D72:  BTFSC  FA6.1
01D74:  BRA    1D72
01D76:  BCF    FA6.2
01D78:  MOVF   00,W
01D7A:  IORWF  FF2,F
01D7C:  MOVLW  14
01D7E:  MOVLB  3
01D80:  MOVWF  x55
01D82:  MOVLB  0
01D84:  CALL   0C96
01D88:  CLRF   FAA
01D8A:  MOVLW  15
01D8C:  MOVWF  FA9
01D8E:  CLRF   FA8
01D90:  BCF    FA6.6
01D92:  BCF    FA6.7
01D94:  BSF    FA6.2
01D96:  MOVF   FF2,W
01D98:  MOVWF  00
01D9A:  BCF    FF2.6
01D9C:  BCF    FF2.7
01D9E:  MOVLB  F
01DA0:  MOVLW  55
01DA2:  MOVWF  FA7
01DA4:  MOVLW  AA
01DA6:  MOVWF  FA7
01DA8:  BSF    FA6.1
01DAA:  BTFSC  FA6.1
01DAC:  BRA    1DAA
01DAE:  BCF    FA6.2
01DB0:  MOVF   00,W
01DB2:  IORWF  FF2,F
01DB4:  MOVLW  14
01DB6:  MOVLB  3
01DB8:  MOVWF  x55
01DBA:  MOVLB  0
01DBC:  CALL   0C96
....................    } 
....................    if(motor>1){ 
01DC0:  MOVF   44,W
01DC2:  SUBLW  01
01DC4:  BC    1E04
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
01DC6:  MOVLW  01
01DC8:  MOVWF  44
01DCA:  CLRF   FAA
01DCC:  MOVLW  16
01DCE:  MOVWF  FA9
01DD0:  MOVLW  01
01DD2:  MOVWF  FA8
01DD4:  BCF    FA6.6
01DD6:  BCF    FA6.7
01DD8:  BSF    FA6.2
01DDA:  MOVF   FF2,W
01DDC:  MOVWF  00
01DDE:  BCF    FF2.6
01DE0:  BCF    FF2.7
01DE2:  MOVLB  F
01DE4:  MOVLW  55
01DE6:  MOVWF  FA7
01DE8:  MOVLW  AA
01DEA:  MOVWF  FA7
01DEC:  BSF    FA6.1
01DEE:  BTFSC  FA6.1
01DF0:  BRA    1DEE
01DF2:  BCF    FA6.2
01DF4:  MOVF   00,W
01DF6:  IORWF  FF2,F
01DF8:  MOVLW  14
01DFA:  MOVLB  3
01DFC:  MOVWF  x55
01DFE:  MOVLB  0
01E00:  CALL   0C96
....................    } 
....................    if(luz>1){ 
01E04:  MOVF   45,W
01E06:  SUBLW  01
01E08:  BC    1E48
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
01E0A:  MOVLW  01
01E0C:  MOVWF  45
01E0E:  CLRF   FAA
01E10:  MOVLW  17
01E12:  MOVWF  FA9
01E14:  MOVLW  01
01E16:  MOVWF  FA8
01E18:  BCF    FA6.6
01E1A:  BCF    FA6.7
01E1C:  BSF    FA6.2
01E1E:  MOVF   FF2,W
01E20:  MOVWF  00
01E22:  BCF    FF2.6
01E24:  BCF    FF2.7
01E26:  MOVLB  F
01E28:  MOVLW  55
01E2A:  MOVWF  FA7
01E2C:  MOVLW  AA
01E2E:  MOVWF  FA7
01E30:  BSF    FA6.1
01E32:  BTFSC  FA6.1
01E34:  BRA    1E32
01E36:  BCF    FA6.2
01E38:  MOVF   00,W
01E3A:  IORWF  FF2,F
01E3C:  MOVLW  14
01E3E:  MOVLB  3
01E40:  MOVWF  x55
01E42:  MOVLB  0
01E44:  CALL   0C96
....................    } 
....................    if(velocidadInicial>15){ 
01E48:  MOVF   46,W
01E4A:  SUBLW  0F
01E4C:  BC    1E8C
....................       velocidadInicial=10;write_eeprom(24,10);delay_ms(20); 
01E4E:  MOVLW  0A
01E50:  MOVWF  46
01E52:  CLRF   FAA
01E54:  MOVLW  18
01E56:  MOVWF  FA9
01E58:  MOVLW  0A
01E5A:  MOVWF  FA8
01E5C:  BCF    FA6.6
01E5E:  BCF    FA6.7
01E60:  BSF    FA6.2
01E62:  MOVF   FF2,W
01E64:  MOVWF  00
01E66:  BCF    FF2.6
01E68:  BCF    FF2.7
01E6A:  MOVLB  F
01E6C:  MOVLW  55
01E6E:  MOVWF  FA7
01E70:  MOVLW  AA
01E72:  MOVWF  FA7
01E74:  BSF    FA6.1
01E76:  BTFSC  FA6.1
01E78:  BRA    1E76
01E7A:  BCF    FA6.2
01E7C:  MOVF   00,W
01E7E:  IORWF  FF2,F
01E80:  MOVLW  14
01E82:  MOVLB  3
01E84:  MOVWF  x55
01E86:  MOVLB  0
01E88:  CALL   0C96
....................    } 
....................    if(Flujo[1].Ajuste>10.0 || Flujo[1].Ajuste==0.0){ 
01E8C:  MOVLB  3
01E8E:  CLRF   x81
01E90:  CLRF   x80
01E92:  MOVLW  20
01E94:  MOVWF  x7F
01E96:  MOVLW  82
01E98:  MOVWF  x7E
01E9A:  MOVFF  1B2,385
01E9E:  MOVFF  1B1,384
01EA2:  MOVFF  1B0,383
01EA6:  MOVFF  1AF,382
01EAA:  MOVLB  0
01EAC:  RCALL  183A
01EAE:  BC    1ED0
01EB0:  MOVFF  1B2,381
01EB4:  MOVFF  1B1,380
01EB8:  MOVFF  1B0,37F
01EBC:  MOVFF  1AF,37E
01EC0:  MOVLB  3
01EC2:  CLRF   x85
01EC4:  CLRF   x84
01EC6:  CLRF   x83
01EC8:  CLRF   x82
01ECA:  MOVLB  0
01ECC:  RCALL  183A
01ECE:  BNZ   1F38
....................       Flujo[1].Ajuste=1.5;write_eeprom(25,1);write_eeprom(26,50); 
01ED0:  MOVLB  1
01ED2:  CLRF   xB2
01ED4:  CLRF   xB1
01ED6:  MOVLW  40
01ED8:  MOVWF  xB0
01EDA:  MOVLW  7F
01EDC:  MOVWF  xAF
01EDE:  CLRF   FAA
01EE0:  MOVLW  19
01EE2:  MOVWF  FA9
01EE4:  MOVLW  01
01EE6:  MOVWF  FA8
01EE8:  BCF    FA6.6
01EEA:  BCF    FA6.7
01EEC:  BSF    FA6.2
01EEE:  MOVF   FF2,W
01EF0:  MOVWF  00
01EF2:  BCF    FF2.6
01EF4:  BCF    FF2.7
01EF6:  MOVLB  F
01EF8:  MOVLW  55
01EFA:  MOVWF  FA7
01EFC:  MOVLW  AA
01EFE:  MOVWF  FA7
01F00:  BSF    FA6.1
01F02:  BTFSC  FA6.1
01F04:  BRA    1F02
01F06:  BCF    FA6.2
01F08:  MOVF   00,W
01F0A:  IORWF  FF2,F
01F0C:  CLRF   FAA
01F0E:  MOVLW  1A
01F10:  MOVWF  FA9
01F12:  MOVLW  32
01F14:  MOVWF  FA8
01F16:  BCF    FA6.6
01F18:  BCF    FA6.7
01F1A:  BSF    FA6.2
01F1C:  MOVF   FF2,W
01F1E:  MOVWF  00
01F20:  BCF    FF2.6
01F22:  BCF    FF2.7
01F24:  MOVLW  55
01F26:  MOVWF  FA7
01F28:  MOVLW  AA
01F2A:  MOVWF  FA7
01F2C:  BSF    FA6.1
01F2E:  BTFSC  FA6.1
01F30:  BRA    1F2E
01F32:  BCF    FA6.2
01F34:  MOVF   00,W
01F36:  IORWF  FF2,F
....................    } 
....................    if(Flujo[1].zero_actual>280 ||Flujo[1].zero_actual<180 ){ 
01F38:  MOVLB  3
01F3A:  CLRF   x81
01F3C:  CLRF   x80
01F3E:  MOVLW  0C
01F40:  MOVWF  x7F
01F42:  MOVLW  87
01F44:  MOVWF  x7E
01F46:  MOVFF  19D,385
01F4A:  MOVFF  19C,384
01F4E:  MOVFF  19B,383
01F52:  MOVFF  19A,382
01F56:  MOVLB  0
01F58:  RCALL  183A
01F5A:  BC    1F80
01F5C:  MOVFF  19D,381
01F60:  MOVFF  19C,380
01F64:  MOVFF  19B,37F
01F68:  MOVFF  19A,37E
01F6C:  MOVLB  3
01F6E:  CLRF   x85
01F70:  CLRF   x84
01F72:  MOVLW  34
01F74:  MOVWF  x83
01F76:  MOVLW  86
01F78:  MOVWF  x82
01F7A:  MOVLB  0
01F7C:  RCALL  183A
01F7E:  BNC   1FE6
....................       Flujo[1].zero_actual=203;write_eeprom(27,203);write_eeprom(28,0); 
01F80:  MOVLB  1
01F82:  CLRF   x9D
01F84:  CLRF   x9C
01F86:  MOVLW  4B
01F88:  MOVWF  x9B
01F8A:  MOVLW  86
01F8C:  MOVWF  x9A
01F8E:  CLRF   FAA
01F90:  MOVLW  1B
01F92:  MOVWF  FA9
01F94:  MOVLW  CB
01F96:  MOVWF  FA8
01F98:  BCF    FA6.6
01F9A:  BCF    FA6.7
01F9C:  BSF    FA6.2
01F9E:  MOVF   FF2,W
01FA0:  MOVWF  00
01FA2:  BCF    FF2.6
01FA4:  BCF    FF2.7
01FA6:  MOVLB  F
01FA8:  MOVLW  55
01FAA:  MOVWF  FA7
01FAC:  MOVLW  AA
01FAE:  MOVWF  FA7
01FB0:  BSF    FA6.1
01FB2:  BTFSC  FA6.1
01FB4:  BRA    1FB2
01FB6:  BCF    FA6.2
01FB8:  MOVF   00,W
01FBA:  IORWF  FF2,F
01FBC:  CLRF   FAA
01FBE:  MOVLW  1C
01FC0:  MOVWF  FA9
01FC2:  CLRF   FA8
01FC4:  BCF    FA6.6
01FC6:  BCF    FA6.7
01FC8:  BSF    FA6.2
01FCA:  MOVF   FF2,W
01FCC:  MOVWF  00
01FCE:  BCF    FF2.6
01FD0:  BCF    FF2.7
01FD2:  MOVLW  55
01FD4:  MOVWF  FA7
01FD6:  MOVLW  AA
01FD8:  MOVWF  FA7
01FDA:  BSF    FA6.1
01FDC:  BTFSC  FA6.1
01FDE:  BRA    1FDC
01FE0:  BCF    FA6.2
01FE2:  MOVF   00,W
01FE4:  IORWF  FF2,F
....................    } 
....................    if(Pr>110 || Pr<60){ 
01FE6:  MOVLB  3
01FE8:  CLRF   x81
01FEA:  CLRF   x80
01FEC:  MOVLW  5C
01FEE:  MOVWF  x7F
01FF0:  MOVLW  85
01FF2:  MOVWF  x7E
01FF4:  MOVFF  11C,385
01FF8:  MOVFF  11B,384
01FFC:  MOVFF  11A,383
02000:  MOVFF  119,382
02004:  MOVLB  0
02006:  RCALL  183A
02008:  BC    202E
0200A:  MOVFF  11C,381
0200E:  MOVFF  11B,380
02012:  MOVFF  11A,37F
02016:  MOVFF  119,37E
0201A:  MOVLB  3
0201C:  CLRF   x85
0201E:  CLRF   x84
02020:  MOVLW  70
02022:  MOVWF  x83
02024:  MOVLW  84
02026:  MOVWF  x82
02028:  MOVLB  0
0202A:  RCALL  183A
0202C:  BNC   206A
....................       Pr=71;write_eeprom(29,71); 
0202E:  MOVLB  1
02030:  CLRF   x1C
02032:  CLRF   x1B
02034:  MOVLW  0E
02036:  MOVWF  x1A
02038:  MOVLW  85
0203A:  MOVWF  x19
0203C:  CLRF   FAA
0203E:  MOVLW  1D
02040:  MOVWF  FA9
02042:  MOVLW  47
02044:  MOVWF  FA8
02046:  BCF    FA6.6
02048:  BCF    FA6.7
0204A:  BSF    FA6.2
0204C:  MOVF   FF2,W
0204E:  MOVWF  00
02050:  BCF    FF2.6
02052:  BCF    FF2.7
02054:  MOVLB  F
02056:  MOVLW  55
02058:  MOVWF  FA7
0205A:  MOVLW  AA
0205C:  MOVWF  FA7
0205E:  BSF    FA6.1
02060:  BTFSC  FA6.1
02062:  BRA    2060
02064:  BCF    FA6.2
02066:  MOVF   00,W
02068:  IORWF  FF2,F
....................    } 
....................    if(HR>100 || HR<20){ 
0206A:  MOVLB  3
0206C:  CLRF   x81
0206E:  CLRF   x80
02070:  MOVLW  48
02072:  MOVWF  x7F
02074:  MOVLW  85
02076:  MOVWF  x7E
02078:  MOVFF  124,385
0207C:  MOVFF  123,384
02080:  MOVFF  122,383
02084:  MOVFF  121,382
02088:  MOVLB  0
0208A:  CALL   183A
0208E:  BC    20B6
02090:  MOVFF  124,381
02094:  MOVFF  123,380
02098:  MOVFF  122,37F
0209C:  MOVFF  121,37E
020A0:  MOVLB  3
020A2:  CLRF   x85
020A4:  CLRF   x84
020A6:  MOVLW  20
020A8:  MOVWF  x83
020AA:  MOVLW  83
020AC:  MOVWF  x82
020AE:  MOVLB  0
020B0:  CALL   183A
020B4:  BNC   20F2
....................       HR=60;write_eeprom(30,60); 
020B6:  MOVLB  1
020B8:  CLRF   x24
020BA:  CLRF   x23
020BC:  MOVLW  70
020BE:  MOVWF  x22
020C0:  MOVLW  84
020C2:  MOVWF  x21
020C4:  CLRF   FAA
020C6:  MOVLW  1E
020C8:  MOVWF  FA9
020CA:  MOVLW  3C
020CC:  MOVWF  FA8
020CE:  BCF    FA6.6
020D0:  BCF    FA6.7
020D2:  BSF    FA6.2
020D4:  MOVF   FF2,W
020D6:  MOVWF  00
020D8:  BCF    FF2.6
020DA:  BCF    FF2.7
020DC:  MOVLB  F
020DE:  MOVLW  55
020E0:  MOVWF  FA7
020E2:  MOVLW  AA
020E4:  MOVWF  FA7
020E6:  BSF    FA6.1
020E8:  BTFSC  FA6.1
020EA:  BRA    20E8
020EC:  BCF    FA6.2
020EE:  MOVF   00,W
020F0:  IORWF  FF2,F
020F2:  MOVLB  0
....................    } 
.................... } 
020F4:  GOTO   5552 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
04FB2:  MOVF   xD5,W
04FB4:  SUBLW  0D
04FB6:  BTFSC  FD8.0
04FB8:  BRA    50D6
04FBA:  XORLW  FF
04FBC:  BNZ   4FC6
04FBE:  MOVF   xD4,W
04FC0:  SUBLW  0F
04FC2:  BTFSC  FD8.0
04FC4:  BRA    50D6
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
04FC6:  CLRF   xD5
04FC8:  CLRF   xD4
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
04FCA:  MOVFF  D4,33E
04FCE:  CLRF   FAA
04FD0:  MOVLW  14
04FD2:  MOVWF  FA9
04FD4:  MOVFF  33E,FA8
04FD8:  BCF    FA6.6
04FDA:  BCF    FA6.7
04FDC:  BSF    FA6.2
04FDE:  MOVF   FF2,W
04FE0:  MOVWF  00
04FE2:  BCF    FF2.6
04FE4:  BCF    FF2.7
04FE6:  MOVLB  F
04FE8:  MOVLW  55
04FEA:  MOVWF  FA7
04FEC:  MOVLW  AA
04FEE:  MOVWF  FA7
04FF0:  BSF    FA6.1
04FF2:  BTFSC  FA6.1
04FF4:  BRA    4FF2
04FF6:  BCF    FA6.2
04FF8:  MOVF   00,W
04FFA:  IORWF  FF2,F
....................       delay_ms(20); 
04FFC:  MOVLW  14
04FFE:  MOVLB  3
05000:  MOVWF  x55
05002:  MOVLB  0
05004:  CALL   0C96
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
05008:  MOVFF  D5,33E
0500C:  CLRF   FAA
0500E:  MOVLW  15
05010:  MOVWF  FA9
05012:  MOVFF  33E,FA8
05016:  BCF    FA6.6
05018:  BCF    FA6.7
0501A:  BSF    FA6.2
0501C:  MOVF   FF2,W
0501E:  MOVWF  00
05020:  BCF    FF2.6
05022:  BCF    FF2.7
05024:  MOVLB  F
05026:  MOVLW  55
05028:  MOVWF  FA7
0502A:  MOVLW  AA
0502C:  MOVWF  FA7
0502E:  BSF    FA6.1
05030:  BTFSC  FA6.1
05032:  BRA    5030
05034:  BCF    FA6.2
05036:  MOVF   00,W
05038:  IORWF  FF2,F
....................       delay_ms(20); 
0503A:  MOVLW  14
0503C:  MOVLB  3
0503E:  MOVWF  x55
05040:  MOVLB  0
05042:  CALL   0C96
....................       horasTrabajo++; 
05046:  INCF   xD6,F
05048:  BTFSC  FD8.2
0504A:  INCF   xD7,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
0504C:  MOVFF  D6,33E
05050:  CLRF   FAA
05052:  MOVLW  12
05054:  MOVWF  FA9
05056:  MOVFF  33E,FA8
0505A:  BCF    FA6.6
0505C:  BCF    FA6.7
0505E:  BSF    FA6.2
05060:  MOVF   FF2,W
05062:  MOVWF  00
05064:  BCF    FF2.6
05066:  BCF    FF2.7
05068:  MOVLB  F
0506A:  MOVLW  55
0506C:  MOVWF  FA7
0506E:  MOVLW  AA
05070:  MOVWF  FA7
05072:  BSF    FA6.1
05074:  BTFSC  FA6.1
05076:  BRA    5074
05078:  BCF    FA6.2
0507A:  MOVF   00,W
0507C:  IORWF  FF2,F
....................       delay_ms(20); 
0507E:  MOVLW  14
05080:  MOVLB  3
05082:  MOVWF  x55
05084:  MOVLB  0
05086:  CALL   0C96
....................       write_eeprom(19,make8(horasTrabajo,1)); 
0508A:  MOVFF  D7,33E
0508E:  CLRF   FAA
05090:  MOVLW  13
05092:  MOVWF  FA9
05094:  MOVFF  33E,FA8
05098:  BCF    FA6.6
0509A:  BCF    FA6.7
0509C:  BSF    FA6.2
0509E:  MOVF   FF2,W
050A0:  MOVWF  00
050A2:  BCF    FF2.6
050A4:  BCF    FF2.7
050A6:  MOVLB  F
050A8:  MOVLW  55
050AA:  MOVWF  FA7
050AC:  MOVLW  AA
050AE:  MOVWF  FA7
050B0:  BSF    FA6.1
050B2:  BTFSC  FA6.1
050B4:  BRA    50B2
050B6:  BCF    FA6.2
050B8:  MOVF   00,W
050BA:  IORWF  FF2,F
....................       delay_ms(20); 
050BC:  MOVLW  14
050BE:  MOVLB  3
050C0:  MOVWF  x55
050C2:  MOVLB  0
050C4:  CALL   0C96
....................       delay_ms(20); 
050C8:  MOVLW  14
050CA:  MOVLB  3
050CC:  MOVWF  x55
050CE:  MOVLB  0
050D0:  CALL   0C96
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
050D4:  BRA    5176
050D6:  MOVF   xD4,W
050D8:  SUBLW  84
050DA:  BNZ   50E2
050DC:  MOVF   xD5,W
050DE:  SUBLW  03
050E0:  BZ    50FA
050E2:  MOVF   xD4,W
050E4:  SUBLW  08
050E6:  BNZ   50EE
050E8:  MOVF   xD5,W
050EA:  SUBLW  07
050EC:  BZ    50FA
050EE:  MOVF   xD4,W
050F0:  SUBLW  8C
050F2:  BNZ   5176
050F4:  MOVF   xD5,W
050F6:  SUBLW  0A
050F8:  BNZ   5176
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
050FA:  MOVFF  D4,33E
050FE:  CLRF   FAA
05100:  MOVLW  14
05102:  MOVWF  FA9
05104:  MOVFF  33E,FA8
05108:  BCF    FA6.6
0510A:  BCF    FA6.7
0510C:  BSF    FA6.2
0510E:  MOVF   FF2,W
05110:  MOVWF  00
05112:  BCF    FF2.6
05114:  BCF    FF2.7
05116:  MOVLB  F
05118:  MOVLW  55
0511A:  MOVWF  FA7
0511C:  MOVLW  AA
0511E:  MOVWF  FA7
05120:  BSF    FA6.1
05122:  BTFSC  FA6.1
05124:  BRA    5122
05126:  BCF    FA6.2
05128:  MOVF   00,W
0512A:  IORWF  FF2,F
....................       delay_ms(20); 
0512C:  MOVLW  14
0512E:  MOVLB  3
05130:  MOVWF  x55
05132:  MOVLB  0
05134:  CALL   0C96
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
05138:  MOVFF  D5,33E
0513C:  CLRF   FAA
0513E:  MOVLW  15
05140:  MOVWF  FA9
05142:  MOVFF  33E,FA8
05146:  BCF    FA6.6
05148:  BCF    FA6.7
0514A:  BSF    FA6.2
0514C:  MOVF   FF2,W
0514E:  MOVWF  00
05150:  BCF    FF2.6
05152:  BCF    FF2.7
05154:  MOVLB  F
05156:  MOVLW  55
05158:  MOVWF  FA7
0515A:  MOVLW  AA
0515C:  MOVWF  FA7
0515E:  BSF    FA6.1
05160:  BTFSC  FA6.1
05162:  BRA    5160
05164:  BCF    FA6.2
05166:  MOVF   00,W
05168:  IORWF  FF2,F
....................       delay_ms(20); 
0516A:  MOVLW  14
0516C:  MOVLB  3
0516E:  MOVWF  x55
05170:  MOVLB  0
05172:  CALL   0C96
....................    } 
.................... //----------------------------------------// 
.................... } 
05176:  GOTO   61F8 (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    //output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    //output_bit(PIN_C4,0); 
....................    //output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }  
....................  
.................... Float LeerFlujo(int8 media,int8 canal){ 
*
03F3A:  MOVLB  3
03F3C:  CLRF   x43
03F3E:  CLRF   x42
03F40:  CLRF   x41
03F42:  CLRF   x40
....................     float dif=0.0; 
....................     Flujo[canal].adc=sensores(canal); 
03F44:  CLRF   x4D
03F46:  MOVFF  33F,34C
03F4A:  CLRF   x4F
03F4C:  MOVLW  69
03F4E:  MOVWF  x4E
03F50:  MOVLB  0
03F52:  RCALL  3EC0
03F54:  MOVFF  01,344
03F58:  MOVLW  08
03F5A:  MOVLB  3
03F5C:  ADDWF  01,W
03F5E:  MOVWF  01
03F60:  MOVLW  00
03F62:  ADDWFC 02,W
03F64:  MOVWF  03
03F66:  MOVF   01,W
03F68:  ADDLW  31
03F6A:  MOVWF  01
03F6C:  MOVLW  01
03F6E:  ADDWFC 03,F
03F70:  MOVFF  01,344
03F74:  MOVFF  03,345
03F78:  MOVFF  33F,346
03F7C:  MOVLB  0
03F7E:  RCALL  3EE2
03F80:  MOVFF  03,381
03F84:  MOVFF  02,380
03F88:  MOVFF  01,37F
03F8C:  MOVFF  00,37E
03F90:  CALL   2386
03F94:  MOVFF  345,FEA
03F98:  MOVFF  344,FE9
03F9C:  MOVFF  02,FEC
03FA0:  MOVF   FED,F
03FA2:  MOVFF  01,FEF
....................      
....................     dif=zero_fabrica-Flujo[canal].zero_actual; 
03FA6:  MOVLB  3
03FA8:  CLRF   x4D
03FAA:  MOVFF  33F,34C
03FAE:  CLRF   x4F
03FB0:  MOVLW  69
03FB2:  MOVWF  x4E
03FB4:  MOVLB  0
03FB6:  RCALL  3EC0
03FB8:  MOVFF  02,345
03FBC:  MOVFF  01,344
03FC0:  MOVLW  31
03FC2:  MOVLB  3
03FC4:  ADDWF  01,W
03FC6:  MOVWF  FE9
03FC8:  MOVLW  01
03FCA:  ADDWFC 02,W
03FCC:  MOVWF  FEA
03FCE:  MOVFF  FEF,00
03FD2:  MOVFF  FEC,01
03FD6:  MOVFF  FEC,02
03FDA:  MOVFF  FEC,03
03FDE:  MOVFF  FEA,345
03FE2:  MOVFF  FE9,344
03FE6:  BSF    FD8.1
03FE8:  MOVFF  F4,385
03FEC:  MOVFF  F3,384
03FF0:  MOVFF  F2,383
03FF4:  MOVFF  F1,382
03FF8:  MOVFF  03,389
03FFC:  MOVFF  02,388
04000:  MOVFF  01,387
04004:  MOVFF  00,386
04008:  MOVLB  0
0400A:  CALL   0F8E
0400E:  MOVFF  345,FEA
04012:  MOVFF  344,FE9
04016:  MOVFF  03,343
0401A:  MOVFF  02,342
0401E:  MOVFF  01,341
04022:  MOVFF  00,340
....................     x_uno=Flujo[canal].adc+dif; 
04026:  MOVLB  3
04028:  CLRF   x4D
0402A:  MOVFF  33F,34C
0402E:  CLRF   x4F
04030:  MOVLW  69
04032:  MOVWF  x4E
04034:  MOVLB  0
04036:  RCALL  3EC0
04038:  MOVFF  01,344
0403C:  MOVLW  08
0403E:  MOVLB  3
04040:  ADDWF  01,W
04042:  MOVWF  01
04044:  MOVLW  00
04046:  ADDWFC 02,W
04048:  MOVWF  03
0404A:  MOVF   01,W
0404C:  ADDLW  31
0404E:  MOVWF  FE9
04050:  MOVLW  01
04052:  ADDWFC 03,W
04054:  MOVWF  FEA
04056:  MOVFF  FEC,345
0405A:  MOVF   FED,F
0405C:  MOVFF  FEF,344
04060:  MOVFF  345,383
04064:  MOVFF  344,382
04068:  MOVLB  0
0406A:  CALL   0DFA
0406E:  MOVFF  FEA,347
04072:  MOVFF  FE9,346
04076:  BCF    FD8.1
04078:  MOVFF  03,385
0407C:  MOVFF  02,384
04080:  MOVFF  01,383
04084:  MOVFF  00,382
04088:  MOVFF  343,389
0408C:  MOVFF  342,388
04090:  MOVFF  341,387
04094:  MOVFF  340,386
04098:  CALL   0F8E
0409C:  MOVFF  347,FEA
040A0:  MOVFF  346,FE9
040A4:  MOVFF  03,F8
040A8:  MOVFF  02,F7
040AC:  MOVFF  01,F6
040B0:  MOVFF  00,F5
....................     x_uno=(x_uno/1023)*5;     
040B4:  MOVFF  F8,381
040B8:  MOVFF  F7,380
040BC:  MOVFF  F6,37F
040C0:  MOVFF  F5,37E
040C4:  MOVLB  3
040C6:  CLRF   x85
040C8:  MOVLW  C0
040CA:  MOVWF  x84
040CC:  MOVLW  7F
040CE:  MOVWF  x83
040D0:  MOVLW  88
040D2:  MOVWF  x82
040D4:  MOVLB  0
040D6:  CALL   0E30
040DA:  MOVFF  00,344
040DE:  MOVFF  01,345
040E2:  MOVFF  02,346
040E6:  MOVFF  03,347
040EA:  MOVFF  03,381
040EE:  MOVFF  02,380
040F2:  MOVFF  01,37F
040F6:  MOVFF  00,37E
040FA:  MOVLB  3
040FC:  CLRF   x85
040FE:  CLRF   x84
04100:  MOVLW  20
04102:  MOVWF  x83
04104:  MOVLW  81
04106:  MOVWF  x82
04108:  MOVLB  0
0410A:  CALL   2290
0410E:  MOVFF  03,F8
04112:  MOVFF  02,F7
04116:  MOVFF  01,F6
0411A:  MOVFF  00,F5
....................     Flujo[canal].Velocidad=(pow(x_uno,4)*p1)+(pow(x_uno,3)*p2)+(pow(x_uno,2)*p3)+(x_uno*p4)+p5;     
0411E:  MOVLB  3
04120:  CLRF   x4D
04122:  MOVFF  33F,34C
04126:  CLRF   x4F
04128:  MOVLW  69
0412A:  MOVWF  x4E
0412C:  MOVLB  0
0412E:  RCALL  3EC0
04130:  MOVFF  01,344
04134:  MOVLW  0B
04136:  MOVLB  3
04138:  ADDWF  01,W
0413A:  MOVWF  01
0413C:  MOVLW  00
0413E:  ADDWFC 02,W
04140:  MOVWF  03
04142:  MOVF   01,W
04144:  ADDLW  31
04146:  MOVWF  01
04148:  MOVLW  01
0414A:  ADDWFC 03,F
0414C:  MOVFF  01,344
04150:  MOVFF  03,345
04154:  MOVFF  F8,355
04158:  MOVFF  F7,354
0415C:  MOVFF  F6,353
04160:  MOVFF  F5,352
04164:  CLRF   x59
04166:  CLRF   x58
04168:  CLRF   x57
0416A:  MOVLW  81
0416C:  MOVWF  x56
0416E:  MOVLB  0
04170:  CALL   3200
04174:  MOVFF  00,346
04178:  MOVFF  01,347
0417C:  MOVFF  02,348
04180:  MOVFF  03,349
04184:  MOVFF  03,381
04188:  MOVFF  02,380
0418C:  MOVFF  01,37F
04190:  MOVFF  00,37E
04194:  MOVFF  DD,385
04198:  MOVFF  DC,384
0419C:  MOVFF  DB,383
041A0:  MOVFF  DA,382
041A4:  CALL   2290
041A8:  MOVFF  00,346
041AC:  MOVFF  01,347
041B0:  MOVFF  02,348
041B4:  MOVFF  03,349
041B8:  MOVFF  F8,355
041BC:  MOVFF  F7,354
041C0:  MOVFF  F6,353
041C4:  MOVFF  F5,352
041C8:  MOVLB  3
041CA:  CLRF   x59
041CC:  CLRF   x58
041CE:  MOVLW  40
041D0:  MOVWF  x57
041D2:  MOVLW  80
041D4:  MOVWF  x56
041D6:  MOVLB  0
041D8:  CALL   3200
041DC:  MOVFF  00,34A
041E0:  MOVFF  01,34B
041E4:  MOVFF  02,34C
041E8:  MOVFF  03,34D
041EC:  MOVFF  03,381
041F0:  MOVFF  02,380
041F4:  MOVFF  01,37F
041F8:  MOVFF  00,37E
041FC:  MOVFF  E1,385
04200:  MOVFF  E0,384
04204:  MOVFF  DF,383
04208:  MOVFF  DE,382
0420C:  CALL   2290
04210:  MOVFF  FEA,34B
04214:  MOVFF  FE9,34A
04218:  BCF    FD8.1
0421A:  MOVFF  349,385
0421E:  MOVFF  348,384
04222:  MOVFF  347,383
04226:  MOVFF  346,382
0422A:  MOVFF  03,389
0422E:  MOVFF  02,388
04232:  MOVFF  01,387
04236:  MOVFF  00,386
0423A:  CALL   0F8E
0423E:  MOVFF  34B,FEA
04242:  MOVFF  34A,FE9
04246:  MOVFF  00,346
0424A:  MOVFF  01,347
0424E:  MOVFF  02,348
04252:  MOVFF  03,349
04256:  MOVFF  F8,355
0425A:  MOVFF  F7,354
0425E:  MOVFF  F6,353
04262:  MOVFF  F5,352
04266:  MOVLB  3
04268:  CLRF   x59
0426A:  CLRF   x58
0426C:  CLRF   x57
0426E:  MOVLW  80
04270:  MOVWF  x56
04272:  MOVLB  0
04274:  CALL   3200
04278:  MOVFF  00,34C
0427C:  MOVFF  01,34D
04280:  MOVFF  02,34E
04284:  MOVFF  03,34F
04288:  MOVFF  03,381
0428C:  MOVFF  02,380
04290:  MOVFF  01,37F
04294:  MOVFF  00,37E
04298:  MOVFF  E5,385
0429C:  MOVFF  E4,384
042A0:  MOVFF  E3,383
042A4:  MOVFF  E2,382
042A8:  CALL   2290
042AC:  MOVFF  FEA,34D
042B0:  MOVFF  FE9,34C
042B4:  BCF    FD8.1
042B6:  MOVFF  349,385
042BA:  MOVFF  348,384
042BE:  MOVFF  347,383
042C2:  MOVFF  346,382
042C6:  MOVFF  03,389
042CA:  MOVFF  02,388
042CE:  MOVFF  01,387
042D2:  MOVFF  00,386
042D6:  CALL   0F8E
042DA:  MOVFF  34D,FEA
042DE:  MOVFF  34C,FE9
042E2:  MOVFF  00,346
042E6:  MOVFF  01,347
042EA:  MOVFF  02,348
042EE:  MOVFF  03,349
042F2:  MOVFF  F8,381
042F6:  MOVFF  F7,380
042FA:  MOVFF  F6,37F
042FE:  MOVFF  F5,37E
04302:  MOVFF  E9,385
04306:  MOVFF  E8,384
0430A:  MOVFF  E7,383
0430E:  MOVFF  E6,382
04312:  CALL   2290
04316:  MOVFF  FEA,34F
0431A:  MOVFF  FE9,34E
0431E:  BCF    FD8.1
04320:  MOVFF  349,385
04324:  MOVFF  348,384
04328:  MOVFF  347,383
0432C:  MOVFF  346,382
04330:  MOVFF  03,389
04334:  MOVFF  02,388
04338:  MOVFF  01,387
0433C:  MOVFF  00,386
04340:  CALL   0F8E
04344:  MOVFF  34F,FEA
04348:  MOVFF  34E,FE9
0434C:  MOVFF  00,346
04350:  MOVFF  01,347
04354:  MOVFF  02,348
04358:  MOVFF  03,349
0435C:  MOVFF  FEA,351
04360:  MOVFF  FE9,350
04364:  BCF    FD8.1
04366:  MOVFF  03,385
0436A:  MOVFF  02,384
0436E:  MOVFF  01,383
04372:  MOVFF  00,382
04376:  MOVFF  ED,389
0437A:  MOVFF  EC,388
0437E:  MOVFF  EB,387
04382:  MOVFF  EA,386
04386:  CALL   0F8E
0438A:  MOVFF  351,FEA
0438E:  MOVFF  350,FE9
04392:  MOVFF  345,FEA
04396:  MOVFF  344,FE9
0439A:  MOVFF  00,FEF
0439E:  MOVFF  01,FEC
043A2:  MOVFF  02,FEC
043A6:  MOVFF  03,FEC
....................      
....................     if(Flujo[canal].Velocidad<0.0) 
043AA:  MOVLB  3
043AC:  CLRF   x4D
043AE:  MOVFF  33F,34C
043B2:  CLRF   x4F
043B4:  MOVLW  69
043B6:  MOVWF  x4E
043B8:  MOVLB  0
043BA:  RCALL  3EC0
043BC:  MOVFF  01,344
043C0:  MOVLW  0B
043C2:  MOVLB  3
043C4:  ADDWF  01,W
043C6:  MOVWF  01
043C8:  MOVLW  00
043CA:  ADDWFC 02,W
043CC:  MOVWF  03
043CE:  MOVF   01,W
043D0:  ADDLW  31
043D2:  MOVWF  FE9
043D4:  MOVLW  01
043D6:  ADDWFC 03,W
043D8:  MOVWF  FEA
043DA:  MOVFF  FEF,344
043DE:  MOVFF  FEC,345
043E2:  MOVFF  FEC,346
043E6:  MOVFF  FEC,347
043EA:  MOVFF  347,381
043EE:  MOVFF  346,380
043F2:  MOVFF  345,37F
043F6:  MOVFF  344,37E
043FA:  CLRF   x85
043FC:  CLRF   x84
043FE:  CLRF   x83
04400:  CLRF   x82
04402:  MOVLB  0
04404:  CALL   183A
04408:  BNC   4442
....................       Flujo[canal].Velocidad=0.0; 
0440A:  MOVLB  3
0440C:  CLRF   x4D
0440E:  MOVFF  33F,34C
04412:  CLRF   x4F
04414:  MOVLW  69
04416:  MOVWF  x4E
04418:  MOVLB  0
0441A:  RCALL  3EC0
0441C:  MOVFF  01,344
04420:  MOVLW  0B
04422:  MOVLB  3
04424:  ADDWF  01,W
04426:  MOVWF  01
04428:  MOVLW  00
0442A:  ADDWFC 02,W
0442C:  MOVWF  03
0442E:  MOVF   01,W
04430:  ADDLW  31
04432:  MOVWF  FE9
04434:  MOVLW  01
04436:  ADDWFC 03,W
04438:  MOVWF  FEA
0443A:  CLRF   FEF
0443C:  CLRF   FEC
0443E:  CLRF   FEC
04440:  CLRF   FEC
....................       
....................      if(Flujo[canal].l>media-1) 
04442:  MOVLB  3
04444:  CLRF   x4D
04446:  MOVFF  33F,34C
0444A:  CLRF   x4F
0444C:  MOVLW  69
0444E:  MOVWF  x4E
04450:  MOVLB  0
04452:  RCALL  3EC0
04454:  MOVFF  02,345
04458:  MOVFF  01,344
0445C:  MOVLW  0F
0445E:  MOVLB  3
04460:  ADDWF  01,W
04462:  MOVWF  01
04464:  MOVLW  00
04466:  ADDWFC 02,W
04468:  MOVWF  03
0446A:  MOVF   01,W
0446C:  ADDLW  31
0446E:  MOVWF  FE9
04470:  MOVLW  01
04472:  ADDWFC 03,W
04474:  MOVWF  FEA
04476:  MOVFF  FEF,344
0447A:  MOVLW  01
0447C:  SUBWF  x3E,W
0447E:  SUBWF  x44,W
04480:  BZ    44B4
04482:  BNC   44B4
....................        {Flujo[canal].l=0;} 
04484:  CLRF   x4D
04486:  MOVFF  33F,34C
0448A:  CLRF   x4F
0448C:  MOVLW  69
0448E:  MOVWF  x4E
04490:  MOVLB  0
04492:  RCALL  3EC0
04494:  MOVFF  01,344
04498:  MOVLW  0F
0449A:  MOVLB  3
0449C:  ADDWF  01,W
0449E:  MOVWF  01
044A0:  MOVLW  00
044A2:  ADDWFC 02,W
044A4:  MOVWF  03
044A6:  MOVF   01,W
044A8:  ADDLW  31
044AA:  MOVWF  FE9
044AC:  MOVLW  01
044AE:  ADDWFC 03,W
044B0:  MOVWF  FEA
044B2:  CLRF   FEF
....................       
....................      Flujo[canal].promedio[Flujo[canal].l]=Flujo[canal].Velocidad; 
044B4:  CLRF   x4D
044B6:  MOVFF  33F,34C
044BA:  CLRF   x4F
044BC:  MOVLW  69
044BE:  MOVWF  x4E
044C0:  MOVLB  0
044C2:  RCALL  3EC0
044C4:  MOVFF  02,345
044C8:  MOVFF  01,344
044CC:  MOVLW  19
044CE:  MOVLB  3
044D0:  ADDWF  x44,F
044D2:  MOVLW  00
044D4:  ADDWFC x45,F
044D6:  CLRF   x4D
044D8:  MOVFF  33F,34C
044DC:  CLRF   x4F
044DE:  MOVLW  69
044E0:  MOVWF  x4E
044E2:  MOVLB  0
044E4:  RCALL  3EC0
044E6:  MOVFF  02,347
044EA:  MOVFF  01,346
044EE:  MOVLW  0F
044F0:  MOVLB  3
044F2:  ADDWF  01,W
044F4:  MOVWF  01
044F6:  MOVLW  00
044F8:  ADDWFC 02,W
044FA:  MOVWF  03
044FC:  MOVF   01,W
044FE:  ADDLW  31
04500:  MOVWF  FE9
04502:  MOVLW  01
04504:  ADDWFC 03,W
04506:  MOVWF  FEA
04508:  CLRF   x4D
0450A:  MOVFF  FEF,34C
0450E:  CLRF   x4F
04510:  MOVLW  04
04512:  MOVWF  x4E
04514:  MOVLB  0
04516:  RCALL  3EC0
04518:  MOVFF  02,03
0451C:  MOVF   01,W
0451E:  MOVLB  3
04520:  ADDWF  x44,W
04522:  MOVWF  01
04524:  MOVF   x45,W
04526:  ADDWFC 03,F
04528:  MOVF   01,W
0452A:  ADDLW  31
0452C:  MOVWF  01
0452E:  MOVLW  01
04530:  ADDWFC 03,F
04532:  MOVFF  01,344
04536:  MOVFF  03,345
0453A:  CLRF   x4D
0453C:  MOVFF  33F,34C
04540:  CLRF   x4F
04542:  MOVLW  69
04544:  MOVWF  x4E
04546:  MOVLB  0
04548:  RCALL  3EC0
0454A:  MOVFF  02,347
0454E:  MOVFF  01,346
04552:  MOVLW  0B
04554:  MOVLB  3
04556:  ADDWF  01,W
04558:  MOVWF  01
0455A:  MOVLW  00
0455C:  ADDWFC 02,W
0455E:  MOVWF  03
04560:  MOVF   01,W
04562:  ADDLW  31
04564:  MOVWF  FE9
04566:  MOVLW  01
04568:  ADDWFC 03,W
0456A:  MOVWF  FEA
0456C:  MOVFF  FEF,00
04570:  MOVFF  FEC,01
04574:  MOVFF  FEC,02
04578:  MOVFF  FEC,03
0457C:  MOVFF  345,FEA
04580:  MOVFF  344,FE9
04584:  MOVFF  00,FEF
04588:  MOVFF  01,FEC
0458C:  MOVFF  02,FEC
04590:  MOVFF  03,FEC
....................      Flujo[canal].l++; 
04594:  CLRF   x4D
04596:  MOVFF  33F,34C
0459A:  CLRF   x4F
0459C:  MOVLW  69
0459E:  MOVWF  x4E
045A0:  MOVLB  0
045A2:  RCALL  3EC0
045A4:  MOVFF  01,344
045A8:  MOVLW  0F
045AA:  MOVLB  3
045AC:  ADDWF  01,W
045AE:  MOVWF  01
045B0:  MOVLW  00
045B2:  ADDWFC 02,W
045B4:  MOVWF  03
045B6:  MOVF   01,W
045B8:  ADDLW  31
045BA:  MOVWF  FE9
045BC:  MOVLW  01
045BE:  ADDWFC 03,W
045C0:  MOVWF  FEA
045C2:  INCF   FEF,F
....................      Flujo[canal].Flujo=0; 
045C4:  CLRF   x4D
045C6:  MOVFF  33F,34C
045CA:  CLRF   x4F
045CC:  MOVLW  69
045CE:  MOVWF  x4E
045D0:  MOVLB  0
045D2:  RCALL  3EC0
045D4:  MOVFF  01,344
045D8:  MOVLW  11
045DA:  MOVLB  3
045DC:  ADDWF  01,W
045DE:  MOVWF  01
045E0:  MOVLW  00
045E2:  ADDWFC 02,W
045E4:  MOVWF  03
045E6:  MOVF   01,W
045E8:  ADDLW  31
045EA:  MOVWF  FE9
045EC:  MOVLW  01
045EE:  ADDWFC 03,W
045F0:  MOVWF  FEA
045F2:  CLRF   FEF
045F4:  CLRF   FEC
045F6:  CLRF   FEC
045F8:  CLRF   FEC
....................       
....................      for(q=0;q<=(media-1);q++){ 
045FA:  CLRF   3F
045FC:  MOVLW  01
045FE:  SUBWF  x3E,W
04600:  SUBWF  3F,W
04602:  BZ    4608
04604:  BTFSC  FD8.0
04606:  BRA    4708
....................         Flujo[canal].Flujo+=Flujo[canal].promedio[q]; 
04608:  CLRF   x4D
0460A:  MOVFF  33F,34C
0460E:  CLRF   x4F
04610:  MOVLW  69
04612:  MOVWF  x4E
04614:  MOVLB  0
04616:  RCALL  3EC0
04618:  MOVFF  01,344
0461C:  MOVLW  11
0461E:  MOVLB  3
04620:  ADDWF  01,W
04622:  MOVWF  01
04624:  MOVLW  00
04626:  ADDWFC 02,W
04628:  MOVWF  03
0462A:  MOVF   01,W
0462C:  ADDLW  31
0462E:  MOVWF  01
04630:  MOVLW  01
04632:  ADDWFC 03,F
04634:  MOVFF  01,344
04638:  MOVFF  03,345
0463C:  MOVFF  03,FEA
04640:  MOVFF  01,FE9
04644:  MOVFF  FEF,346
04648:  MOVFF  FEC,347
0464C:  MOVFF  FEC,348
04650:  MOVFF  FEC,349
04654:  CLRF   x4D
04656:  MOVFF  33F,34C
0465A:  CLRF   x4F
0465C:  MOVLW  69
0465E:  MOVWF  x4E
04660:  MOVLB  0
04662:  RCALL  3EC0
04664:  MOVFF  02,34B
04668:  MOVFF  01,34A
0466C:  MOVLW  19
0466E:  MOVLB  3
04670:  ADDWF  x4A,F
04672:  MOVLW  00
04674:  ADDWFC x4B,F
04676:  CLRF   x4D
04678:  MOVFF  3F,34C
0467C:  CLRF   x4F
0467E:  MOVLW  04
04680:  MOVWF  x4E
04682:  MOVLB  0
04684:  RCALL  3EC0
04686:  MOVFF  02,03
0468A:  MOVF   01,W
0468C:  MOVLB  3
0468E:  ADDWF  x4A,W
04690:  MOVWF  01
04692:  MOVF   x4B,W
04694:  ADDWFC 03,F
04696:  MOVF   01,W
04698:  ADDLW  31
0469A:  MOVWF  FE9
0469C:  MOVLW  01
0469E:  ADDWFC 03,W
046A0:  MOVWF  FEA
046A2:  MOVFF  FEF,00
046A6:  MOVFF  FEC,01
046AA:  MOVFF  FEC,02
046AE:  MOVFF  FEC,03
046B2:  MOVFF  FEA,34B
046B6:  MOVFF  FE9,34A
046BA:  BCF    FD8.1
046BC:  MOVFF  349,385
046C0:  MOVFF  348,384
046C4:  MOVFF  347,383
046C8:  MOVFF  346,382
046CC:  MOVFF  03,389
046D0:  MOVFF  02,388
046D4:  MOVFF  01,387
046D8:  MOVFF  00,386
046DC:  MOVLB  0
046DE:  CALL   0F8E
046E2:  MOVFF  34B,FEA
046E6:  MOVFF  34A,FE9
046EA:  MOVFF  345,FEA
046EE:  MOVFF  344,FE9
046F2:  MOVFF  00,FEF
046F6:  MOVFF  01,FEC
046FA:  MOVFF  02,FEC
046FE:  MOVFF  03,FEC
....................      }  
04702:  INCF   3F,F
04704:  MOVLB  3
04706:  BRA    45FC
....................      Flujo[canal].Flujo=(Flujo[canal].Flujo/media)*Flujo[canal].Ajuste;  
04708:  CLRF   x4D
0470A:  MOVFF  33F,34C
0470E:  CLRF   x4F
04710:  MOVLW  69
04712:  MOVWF  x4E
04714:  MOVLB  0
04716:  CALL   3EC0
0471A:  MOVFF  01,344
0471E:  MOVLW  11
04720:  MOVLB  3
04722:  ADDWF  01,W
04724:  MOVWF  01
04726:  MOVLW  00
04728:  ADDWFC 02,W
0472A:  MOVWF  03
0472C:  MOVF   01,W
0472E:  ADDLW  31
04730:  MOVWF  01
04732:  MOVLW  01
04734:  ADDWFC 03,F
04736:  MOVFF  01,344
0473A:  MOVFF  03,345
0473E:  CLRF   x4D
04740:  MOVFF  33F,34C
04744:  CLRF   x4F
04746:  MOVLW  69
04748:  MOVWF  x4E
0474A:  MOVLB  0
0474C:  CALL   3EC0
04750:  MOVFF  01,346
04754:  MOVLW  11
04756:  MOVLB  3
04758:  ADDWF  01,W
0475A:  MOVWF  01
0475C:  MOVLW  00
0475E:  ADDWFC 02,W
04760:  MOVWF  03
04762:  MOVF   01,W
04764:  ADDLW  31
04766:  MOVWF  FE9
04768:  MOVLW  01
0476A:  ADDWFC 03,W
0476C:  MOVWF  FEA
0476E:  MOVFF  FEF,346
04772:  MOVFF  FEC,347
04776:  MOVFF  FEC,348
0477A:  MOVFF  FEC,349
0477E:  CLRF   x83
04780:  MOVFF  33E,382
04784:  MOVLB  0
04786:  CALL   0DFA
0478A:  MOVFF  349,381
0478E:  MOVFF  348,380
04792:  MOVFF  347,37F
04796:  MOVFF  346,37E
0479A:  MOVFF  03,385
0479E:  MOVFF  02,384
047A2:  MOVFF  01,383
047A6:  MOVFF  00,382
047AA:  CALL   0E30
047AE:  MOVFF  00,346
047B2:  MOVFF  01,347
047B6:  MOVFF  02,348
047BA:  MOVFF  03,349
047BE:  MOVLB  3
047C0:  CLRF   x4D
047C2:  MOVFF  33F,34C
047C6:  CLRF   x4F
047C8:  MOVLW  69
047CA:  MOVWF  x4E
047CC:  MOVLB  0
047CE:  CALL   3EC0
047D2:  MOVFF  02,34B
047D6:  MOVFF  01,34A
047DA:  MOVLW  15
047DC:  MOVLB  3
047DE:  ADDWF  01,W
047E0:  MOVWF  01
047E2:  MOVLW  00
047E4:  ADDWFC 02,W
047E6:  MOVWF  03
047E8:  MOVF   01,W
047EA:  ADDLW  31
047EC:  MOVWF  FE9
047EE:  MOVLW  01
047F0:  ADDWFC 03,W
047F2:  MOVWF  FEA
047F4:  MOVFF  FEF,00
047F8:  MOVFF  FEC,01
047FC:  MOVFF  FEC,02
04800:  MOVFF  FEC,03
04804:  MOVFF  349,381
04808:  MOVFF  348,380
0480C:  MOVFF  347,37F
04810:  MOVFF  346,37E
04814:  MOVFF  03,385
04818:  MOVFF  02,384
0481C:  MOVFF  01,383
04820:  MOVFF  00,382
04824:  MOVLB  0
04826:  CALL   2290
0482A:  MOVFF  345,FEA
0482E:  MOVFF  344,FE9
04832:  MOVFF  00,FEF
04836:  MOVFF  01,FEC
0483A:  MOVFF  02,FEC
0483E:  MOVFF  03,FEC
....................       
....................      Flujo[canal].Flujo=Flujo[canal].Flujo/(densidad*0.0052810296*3600);//0.0052810296=Area con tubo de 8.2cm 
04842:  MOVLB  3
04844:  CLRF   x4D
04846:  MOVFF  33F,34C
0484A:  CLRF   x4F
0484C:  MOVLW  69
0484E:  MOVWF  x4E
04850:  MOVLB  0
04852:  CALL   3EC0
04856:  MOVFF  01,344
0485A:  MOVLW  11
0485C:  MOVLB  3
0485E:  ADDWF  01,W
04860:  MOVWF  01
04862:  MOVLW  00
04864:  ADDWFC 02,W
04866:  MOVWF  03
04868:  MOVF   01,W
0486A:  ADDLW  31
0486C:  MOVWF  01
0486E:  MOVLW  01
04870:  ADDWFC 03,F
04872:  MOVFF  01,344
04876:  MOVFF  03,345
0487A:  CLRF   x4D
0487C:  MOVFF  33F,34C
04880:  CLRF   x4F
04882:  MOVLW  69
04884:  MOVWF  x4E
04886:  MOVLB  0
04888:  CALL   3EC0
0488C:  MOVFF  01,346
04890:  MOVLW  11
04892:  MOVLB  3
04894:  ADDWF  01,W
04896:  MOVWF  01
04898:  MOVLW  00
0489A:  ADDWFC 02,W
0489C:  MOVWF  03
0489E:  MOVF   01,W
048A0:  ADDLW  31
048A2:  MOVWF  FE9
048A4:  MOVLW  01
048A6:  ADDWFC 03,W
048A8:  MOVWF  FEA
048AA:  MOVFF  FEF,346
048AE:  MOVFF  FEC,347
048B2:  MOVFF  FEC,348
048B6:  MOVFF  FEC,349
048BA:  MOVFF  FC,381
048BE:  MOVFF  FB,380
048C2:  MOVFF  FA,37F
048C6:  MOVFF  F9,37E
048CA:  MOVLW  7D
048CC:  MOVWF  x85
048CE:  MOVLW  0C
048D0:  MOVWF  x84
048D2:  MOVLW  2D
048D4:  MOVWF  x83
048D6:  MOVLW  77
048D8:  MOVWF  x82
048DA:  MOVLB  0
048DC:  CALL   2290
048E0:  MOVFF  00,34A
048E4:  MOVFF  01,34B
048E8:  MOVFF  02,34C
048EC:  MOVFF  03,34D
048F0:  MOVFF  03,381
048F4:  MOVFF  02,380
048F8:  MOVFF  01,37F
048FC:  MOVFF  00,37E
04900:  MOVLB  3
04902:  CLRF   x85
04904:  CLRF   x84
04906:  MOVLW  61
04908:  MOVWF  x83
0490A:  MOVLW  8A
0490C:  MOVWF  x82
0490E:  MOVLB  0
04910:  CALL   2290
04914:  MOVFF  349,381
04918:  MOVFF  348,380
0491C:  MOVFF  347,37F
04920:  MOVFF  346,37E
04924:  MOVFF  03,385
04928:  MOVFF  02,384
0492C:  MOVFF  01,383
04930:  MOVFF  00,382
04934:  CALL   0E30
04938:  MOVFF  345,FEA
0493C:  MOVFF  344,FE9
04940:  MOVFF  00,FEF
04944:  MOVFF  01,FEC
04948:  MOVFF  02,FEC
0494C:  MOVFF  03,FEC
....................      return Flujo[canal].Flujo; 
04950:  MOVLB  3
04952:  CLRF   x4D
04954:  MOVFF  33F,34C
04958:  CLRF   x4F
0495A:  MOVLW  69
0495C:  MOVWF  x4E
0495E:  MOVLB  0
04960:  CALL   3EC0
04964:  MOVFF  02,345
04968:  MOVFF  01,344
0496C:  MOVLW  11
0496E:  MOVLB  3
04970:  ADDWF  01,W
04972:  MOVWF  01
04974:  MOVLW  00
04976:  ADDWFC 02,W
04978:  MOVWF  03
0497A:  MOVF   01,W
0497C:  ADDLW  31
0497E:  MOVWF  FE9
04980:  MOVLW  01
04982:  ADDWFC 03,W
04984:  MOVWF  FEA
04986:  MOVFF  FEF,00
0498A:  MOVFF  FEC,01
0498E:  MOVFF  FEC,02
04992:  MOVFF  FEC,03
.................... } 
04996:  MOVLB  0
04998:  RETLW  00
....................  
.................... void calculaDensidad(){ 
....................    Temp=20; 
*
0350C:  MOVLB  1
0350E:  CLRF   x00
03510:  MOVLB  0
03512:  CLRF   xFF
03514:  MOVLW  20
03516:  MOVWF  xFE
03518:  MOVLW  83
0351A:  MOVWF  xFD
....................    TempK=Temp+273.15; 
0351C:  BCF    FD8.1
0351E:  MOVFF  100,385
03522:  MOVFF  FF,384
03526:  MOVFF  FE,383
0352A:  MOVFF  FD,382
0352E:  MOVLW  33
03530:  MOVLB  3
03532:  MOVWF  x89
03534:  MOVLW  93
03536:  MOVWF  x88
03538:  MOVLW  08
0353A:  MOVWF  x87
0353C:  MOVLW  87
0353E:  MOVWF  x86
03540:  MOVLB  0
03542:  CALL   0F8E
03546:  MOVFF  03,104
0354A:  MOVFF  02,103
0354E:  MOVFF  01,102
03552:  MOVFF  00,101
....................    Pa=Pr*1000; 
03556:  MOVFF  11C,381
0355A:  MOVFF  11B,380
0355E:  MOVFF  11A,37F
03562:  MOVFF  119,37E
03566:  MOVLB  3
03568:  CLRF   x85
0356A:  CLRF   x84
0356C:  MOVLW  7A
0356E:  MOVWF  x83
03570:  MOVLW  88
03572:  MOVWF  x82
03574:  MOVLB  0
03576:  CALL   2290
0357A:  MOVFF  03,108
0357E:  MOVFF  02,107
03582:  MOVFF  01,106
03586:  MOVFF  00,105
....................     
....................    Psv=exp((0.000012378847*pow(TempK,2))+(-0.019121316*TempK)+33.93711047+(-6343.1645/TempK)); 
0358A:  MOVFF  104,355
0358E:  MOVFF  103,354
03592:  MOVFF  102,353
03596:  MOVFF  101,352
0359A:  MOVLB  3
0359C:  CLRF   x59
0359E:  CLRF   x58
035A0:  CLRF   x57
035A2:  MOVLW  80
035A4:  MOVWF  x56
035A6:  MOVLB  0
035A8:  RCALL  3200
035AA:  MOVLW  BE
035AC:  MOVLB  3
035AE:  MOVWF  x81
035B0:  MOVLW  AE
035B2:  MOVWF  x80
035B4:  MOVLW  4F
035B6:  MOVWF  x7F
035B8:  MOVLW  6E
035BA:  MOVWF  x7E
035BC:  MOVFF  03,385
035C0:  MOVFF  02,384
035C4:  MOVFF  01,383
035C8:  MOVFF  00,382
035CC:  MOVLB  0
035CE:  CALL   2290
035D2:  MOVFF  00,33E
035D6:  MOVFF  01,33F
035DA:  MOVFF  02,340
035DE:  MOVFF  03,341
035E2:  MOVLW  4E
035E4:  MOVLB  3
035E6:  MOVWF  x81
035E8:  MOVLW  A4
035EA:  MOVWF  x80
035EC:  MOVLW  9C
035EE:  MOVWF  x7F
035F0:  MOVLW  79
035F2:  MOVWF  x7E
035F4:  MOVFF  104,385
035F8:  MOVFF  103,384
035FC:  MOVFF  102,383
03600:  MOVFF  101,382
03604:  MOVLB  0
03606:  CALL   2290
0360A:  MOVFF  FEA,343
0360E:  MOVFF  FE9,342
03612:  BCF    FD8.1
03614:  MOVFF  341,385
03618:  MOVFF  340,384
0361C:  MOVFF  33F,383
03620:  MOVFF  33E,382
03624:  MOVFF  03,389
03628:  MOVFF  02,388
0362C:  MOVFF  01,387
03630:  MOVFF  00,386
03634:  CALL   0F8E
03638:  MOVFF  343,FEA
0363C:  MOVFF  342,FE9
03640:  MOVFF  00,33E
03644:  MOVFF  01,33F
03648:  MOVFF  02,340
0364C:  MOVFF  03,341
03650:  MOVFF  FEA,345
03654:  MOVFF  FE9,344
03658:  BCF    FD8.1
0365A:  MOVFF  03,385
0365E:  MOVFF  02,384
03662:  MOVFF  01,383
03666:  MOVFF  00,382
0366A:  MOVLW  9A
0366C:  MOVLB  3
0366E:  MOVWF  x89
03670:  MOVLW  BF
03672:  MOVWF  x88
03674:  MOVLW  07
03676:  MOVWF  x87
03678:  MOVLW  84
0367A:  MOVWF  x86
0367C:  MOVLB  0
0367E:  CALL   0F8E
03682:  MOVFF  345,FEA
03686:  MOVFF  344,FE9
0368A:  MOVFF  00,33E
0368E:  MOVFF  01,33F
03692:  MOVFF  02,340
03696:  MOVFF  03,341
0369A:  MOVLW  51
0369C:  MOVLB  3
0369E:  MOVWF  x81
036A0:  MOVLW  39
036A2:  MOVWF  x80
036A4:  MOVLW  C6
036A6:  MOVWF  x7F
036A8:  MOVLW  8B
036AA:  MOVWF  x7E
036AC:  MOVFF  104,385
036B0:  MOVFF  103,384
036B4:  MOVFF  102,383
036B8:  MOVFF  101,382
036BC:  MOVLB  0
036BE:  CALL   0E30
036C2:  MOVFF  FEA,347
036C6:  MOVFF  FE9,346
036CA:  BCF    FD8.1
036CC:  MOVFF  341,385
036D0:  MOVFF  340,384
036D4:  MOVFF  33F,383
036D8:  MOVFF  33E,382
036DC:  MOVFF  03,389
036E0:  MOVFF  02,388
036E4:  MOVFF  01,387
036E8:  MOVFF  00,386
036EC:  CALL   0F8E
036F0:  MOVFF  347,FEA
036F4:  MOVFF  346,FE9
036F8:  MOVFF  00,33E
036FC:  MOVFF  01,33F
03700:  MOVFF  02,340
03704:  MOVFF  03,341
03708:  MOVFF  03,361
0370C:  MOVFF  02,360
03710:  MOVFF  01,35F
03714:  MOVFF  00,35E
03718:  CALL   2DF6
0371C:  MOVFF  03,10C
03720:  MOVFF  02,10B
03724:  MOVFF  01,10A
03728:  MOVFF  00,109
....................    f=1.00062+(0.0000000314*Pa)+(0.00000056*Temp); 
0372C:  MOVLW  AA
0372E:  MOVLB  3
03730:  MOVWF  x81
03732:  MOVLW  DC
03734:  MOVWF  x80
03736:  MOVLW  06
03738:  MOVWF  x7F
0373A:  MOVLW  66
0373C:  MOVWF  x7E
0373E:  MOVFF  108,385
03742:  MOVFF  107,384
03746:  MOVFF  106,383
0374A:  MOVFF  105,382
0374E:  MOVLB  0
03750:  CALL   2290
03754:  BCF    FD8.1
03756:  MOVLW  51
03758:  MOVLB  3
0375A:  MOVWF  x85
0375C:  MOVLW  14
0375E:  MOVWF  x84
03760:  CLRF   x83
03762:  MOVLW  7F
03764:  MOVWF  x82
03766:  MOVFF  03,389
0376A:  MOVFF  02,388
0376E:  MOVFF  01,387
03772:  MOVFF  00,386
03776:  MOVLB  0
03778:  CALL   0F8E
0377C:  MOVFF  00,33E
03780:  MOVFF  01,33F
03784:  MOVFF  02,340
03788:  MOVFF  03,341
0378C:  MOVLW  E8
0378E:  MOVLB  3
03790:  MOVWF  x81
03792:  MOVLW  52
03794:  MOVWF  x80
03796:  MOVLW  16
03798:  MOVWF  x7F
0379A:  MOVLW  6A
0379C:  MOVWF  x7E
0379E:  MOVFF  100,385
037A2:  MOVFF  FF,384
037A6:  MOVFF  FE,383
037AA:  MOVFF  FD,382
037AE:  MOVLB  0
037B0:  CALL   2290
037B4:  BCF    FD8.1
037B6:  MOVFF  341,385
037BA:  MOVFF  340,384
037BE:  MOVFF  33F,383
037C2:  MOVFF  33E,382
037C6:  MOVFF  03,389
037CA:  MOVFF  02,388
037CE:  MOVFF  01,387
037D2:  MOVFF  00,386
037D6:  CALL   0F8E
037DA:  MOVFF  03,110
037DE:  MOVFF  02,10F
037E2:  MOVFF  01,10E
037E6:  MOVFF  00,10D
....................    Xv=(HR/100)*f*(Psv/Pa); 
037EA:  MOVFF  124,381
037EE:  MOVFF  123,380
037F2:  MOVFF  122,37F
037F6:  MOVFF  121,37E
037FA:  MOVLB  3
037FC:  CLRF   x85
037FE:  CLRF   x84
03800:  MOVLW  48
03802:  MOVWF  x83
03804:  MOVLW  85
03806:  MOVWF  x82
03808:  MOVLB  0
0380A:  CALL   0E30
0380E:  MOVFF  00,33E
03812:  MOVFF  01,33F
03816:  MOVFF  02,340
0381A:  MOVFF  03,341
0381E:  MOVFF  03,381
03822:  MOVFF  02,380
03826:  MOVFF  01,37F
0382A:  MOVFF  00,37E
0382E:  MOVFF  110,385
03832:  MOVFF  10F,384
03836:  MOVFF  10E,383
0383A:  MOVFF  10D,382
0383E:  CALL   2290
03842:  MOVFF  00,33E
03846:  MOVFF  01,33F
0384A:  MOVFF  02,340
0384E:  MOVFF  03,341
03852:  MOVFF  10C,381
03856:  MOVFF  10B,380
0385A:  MOVFF  10A,37F
0385E:  MOVFF  109,37E
03862:  MOVFF  108,385
03866:  MOVFF  107,384
0386A:  MOVFF  106,383
0386E:  MOVFF  105,382
03872:  CALL   0E30
03876:  MOVFF  341,381
0387A:  MOVFF  340,380
0387E:  MOVFF  33F,37F
03882:  MOVFF  33E,37E
03886:  MOVFF  03,385
0388A:  MOVFF  02,384
0388E:  MOVFF  01,383
03892:  MOVFF  00,382
03896:  CALL   2290
0389A:  MOVFF  03,114
0389E:  MOVFF  02,113
038A2:  MOVFF  01,112
038A6:  MOVFF  00,111
....................    Z1=1-((Pa/TempK)*(0.00000158123+(-0.000000029331*Temp)+(0.00000000011043*pow(Temp,2))+((0.000005707+(-0.00000002051*Temp))*Xv)+((0.0001989+(-0.000002376*Temp)))*pow(Xv,2)))+((pow(Pa,2)/pow(TempK,2))*(0.0000000000183+(-0.00000000765*pow(Xv,2)))); 
038AA:  MOVFF  108,381
038AE:  MOVFF  107,380
038B2:  MOVFF  106,37F
038B6:  MOVFF  105,37E
038BA:  MOVFF  104,385
038BE:  MOVFF  103,384
038C2:  MOVFF  102,383
038C6:  MOVFF  101,382
038CA:  CALL   0E30
038CE:  MOVFF  00,33E
038D2:  MOVFF  01,33F
038D6:  MOVFF  02,340
038DA:  MOVFF  03,341
038DE:  MOVLW  8D
038E0:  MOVLB  3
038E2:  MOVWF  x81
038E4:  MOVLW  F3
038E6:  MOVWF  x80
038E8:  MOVLW  FB
038EA:  MOVWF  x7F
038EC:  MOVLW  65
038EE:  MOVWF  x7E
038F0:  MOVFF  100,385
038F4:  MOVFF  FF,384
038F8:  MOVFF  FE,383
038FC:  MOVFF  FD,382
03900:  MOVLB  0
03902:  CALL   2290
03906:  BCF    FD8.1
03908:  MOVLW  A6
0390A:  MOVLB  3
0390C:  MOVWF  x85
0390E:  MOVLW  3A
03910:  MOVWF  x84
03912:  MOVLW  54
03914:  MOVWF  x83
03916:  MOVLW  6B
03918:  MOVWF  x82
0391A:  MOVFF  03,389
0391E:  MOVFF  02,388
03922:  MOVFF  01,387
03926:  MOVFF  00,386
0392A:  MOVLB  0
0392C:  CALL   0F8E
03930:  MOVFF  00,342
03934:  MOVFF  01,343
03938:  MOVFF  02,344
0393C:  MOVFF  03,345
03940:  MOVFF  100,355
03944:  MOVFF  FF,354
03948:  MOVFF  FE,353
0394C:  MOVFF  FD,352
03950:  MOVLB  3
03952:  CLRF   x59
03954:  CLRF   x58
03956:  CLRF   x57
03958:  MOVLW  80
0395A:  MOVWF  x56
0395C:  MOVLB  0
0395E:  RCALL  3200
03960:  MOVLW  90
03962:  MOVLB  3
03964:  MOVWF  x81
03966:  MOVLW  D6
03968:  MOVWF  x80
0396A:  MOVLW  72
0396C:  MOVWF  x7F
0396E:  MOVLW  5D
03970:  MOVWF  x7E
03972:  MOVFF  03,385
03976:  MOVFF  02,384
0397A:  MOVFF  01,383
0397E:  MOVFF  00,382
03982:  MOVLB  0
03984:  CALL   2290
03988:  MOVFF  FEA,347
0398C:  MOVFF  FE9,346
03990:  BCF    FD8.1
03992:  MOVFF  345,385
03996:  MOVFF  344,384
0399A:  MOVFF  343,383
0399E:  MOVFF  342,382
039A2:  MOVFF  03,389
039A6:  MOVFF  02,388
039AA:  MOVFF  01,387
039AE:  MOVFF  00,386
039B2:  CALL   0F8E
039B6:  MOVFF  347,FEA
039BA:  MOVFF  346,FE9
039BE:  MOVFF  00,342
039C2:  MOVFF  01,343
039C6:  MOVFF  02,344
039CA:  MOVFF  03,345
039CE:  MOVLW  F8
039D0:  MOVLB  3
039D2:  MOVWF  x81
039D4:  MOVLW  2D
039D6:  MOVWF  x80
039D8:  MOVLW  B0
039DA:  MOVWF  x7F
039DC:  MOVLW  65
039DE:  MOVWF  x7E
039E0:  MOVFF  100,385
039E4:  MOVFF  FF,384
039E8:  MOVFF  FE,383
039EC:  MOVFF  FD,382
039F0:  MOVLB  0
039F2:  CALL   2290
039F6:  MOVFF  FEA,349
039FA:  MOVFF  FE9,348
039FE:  BCF    FD8.1
03A00:  MOVLW  C2
03A02:  MOVLB  3
03A04:  MOVWF  x85
03A06:  MOVLW  7E
03A08:  MOVWF  x84
03A0A:  MOVLW  3F
03A0C:  MOVWF  x83
03A0E:  MOVLW  6D
03A10:  MOVWF  x82
03A12:  MOVFF  03,389
03A16:  MOVFF  02,388
03A1A:  MOVFF  01,387
03A1E:  MOVFF  00,386
03A22:  MOVLB  0
03A24:  CALL   0F8E
03A28:  MOVFF  349,FEA
03A2C:  MOVFF  348,FE9
03A30:  MOVFF  00,34A
03A34:  MOVFF  01,34B
03A38:  MOVFF  02,34C
03A3C:  MOVFF  03,34D
03A40:  MOVFF  03,381
03A44:  MOVFF  02,380
03A48:  MOVFF  01,37F
03A4C:  MOVFF  00,37E
03A50:  MOVFF  114,385
03A54:  MOVFF  113,384
03A58:  MOVFF  112,383
03A5C:  MOVFF  111,382
03A60:  CALL   2290
03A64:  MOVFF  FEA,34B
03A68:  MOVFF  FE9,34A
03A6C:  BCF    FD8.1
03A6E:  MOVFF  345,385
03A72:  MOVFF  344,384
03A76:  MOVFF  343,383
03A7A:  MOVFF  342,382
03A7E:  MOVFF  03,389
03A82:  MOVFF  02,388
03A86:  MOVFF  01,387
03A8A:  MOVFF  00,386
03A8E:  CALL   0F8E
03A92:  MOVFF  34B,FEA
03A96:  MOVFF  34A,FE9
03A9A:  MOVFF  00,342
03A9E:  MOVFF  01,343
03AA2:  MOVFF  02,344
03AA6:  MOVFF  03,345
03AAA:  MOVLW  5F
03AAC:  MOVLB  3
03AAE:  MOVWF  x81
03AB0:  MOVLW  73
03AB2:  MOVWF  x80
03AB4:  MOVLW  9F
03AB6:  MOVWF  x7F
03AB8:  MOVLW  6C
03ABA:  MOVWF  x7E
03ABC:  MOVFF  100,385
03AC0:  MOVFF  FF,384
03AC4:  MOVFF  FE,383
03AC8:  MOVFF  FD,382
03ACC:  MOVLB  0
03ACE:  CALL   2290
03AD2:  MOVFF  FEA,34D
03AD6:  MOVFF  FE9,34C
03ADA:  BCF    FD8.1
03ADC:  MOVLW  D0
03ADE:  MOVLB  3
03AE0:  MOVWF  x85
03AE2:  MOVLW  8F
03AE4:  MOVWF  x84
03AE6:  MOVLW  50
03AE8:  MOVWF  x83
03AEA:  MOVLW  72
03AEC:  MOVWF  x82
03AEE:  MOVFF  03,389
03AF2:  MOVFF  02,388
03AF6:  MOVFF  01,387
03AFA:  MOVFF  00,386
03AFE:  MOVLB  0
03B00:  CALL   0F8E
03B04:  MOVFF  34D,FEA
03B08:  MOVFF  34C,FE9
03B0C:  MOVFF  00,34E
03B10:  MOVFF  01,34F
03B14:  MOVFF  02,350
03B18:  MOVFF  03,351
03B1C:  MOVFF  114,355
03B20:  MOVFF  113,354
03B24:  MOVFF  112,353
03B28:  MOVFF  111,352
03B2C:  MOVLB  3
03B2E:  CLRF   x59
03B30:  CLRF   x58
03B32:  CLRF   x57
03B34:  MOVLW  80
03B36:  MOVWF  x56
03B38:  MOVLB  0
03B3A:  CALL   3200
03B3E:  MOVFF  351,381
03B42:  MOVFF  350,380
03B46:  MOVFF  34F,37F
03B4A:  MOVFF  34E,37E
03B4E:  MOVFF  03,385
03B52:  MOVFF  02,384
03B56:  MOVFF  01,383
03B5A:  MOVFF  00,382
03B5E:  CALL   2290
03B62:  MOVFF  FEA,34F
03B66:  MOVFF  FE9,34E
03B6A:  BCF    FD8.1
03B6C:  MOVFF  345,385
03B70:  MOVFF  344,384
03B74:  MOVFF  343,383
03B78:  MOVFF  342,382
03B7C:  MOVFF  03,389
03B80:  MOVFF  02,388
03B84:  MOVFF  01,387
03B88:  MOVFF  00,386
03B8C:  CALL   0F8E
03B90:  MOVFF  34F,FEA
03B94:  MOVFF  34E,FE9
03B98:  MOVFF  341,381
03B9C:  MOVFF  340,380
03BA0:  MOVFF  33F,37F
03BA4:  MOVFF  33E,37E
03BA8:  MOVFF  03,385
03BAC:  MOVFF  02,384
03BB0:  MOVFF  01,383
03BB4:  MOVFF  00,382
03BB8:  CALL   2290
03BBC:  MOVFF  FEA,33F
03BC0:  MOVFF  FE9,33E
03BC4:  BSF    FD8.1
03BC6:  MOVLB  3
03BC8:  CLRF   x85
03BCA:  CLRF   x84
03BCC:  CLRF   x83
03BCE:  MOVLW  7F
03BD0:  MOVWF  x82
03BD2:  MOVFF  03,389
03BD6:  MOVFF  02,388
03BDA:  MOVFF  01,387
03BDE:  MOVFF  00,386
03BE2:  MOVLB  0
03BE4:  CALL   0F8E
03BE8:  MOVFF  33F,FEA
03BEC:  MOVFF  33E,FE9
03BF0:  MOVFF  00,340
03BF4:  MOVFF  01,341
03BF8:  MOVFF  02,342
03BFC:  MOVFF  03,343
03C00:  MOVFF  108,355
03C04:  MOVFF  107,354
03C08:  MOVFF  106,353
03C0C:  MOVFF  105,352
03C10:  MOVLB  3
03C12:  CLRF   x59
03C14:  CLRF   x58
03C16:  CLRF   x57
03C18:  MOVLW  80
03C1A:  MOVWF  x56
03C1C:  MOVLB  0
03C1E:  CALL   3200
03C22:  MOVFF  00,344
03C26:  MOVFF  01,345
03C2A:  MOVFF  02,346
03C2E:  MOVFF  03,347
03C32:  MOVFF  104,355
03C36:  MOVFF  103,354
03C3A:  MOVFF  102,353
03C3E:  MOVFF  101,352
03C42:  MOVLB  3
03C44:  CLRF   x59
03C46:  CLRF   x58
03C48:  CLRF   x57
03C4A:  MOVLW  80
03C4C:  MOVWF  x56
03C4E:  MOVLB  0
03C50:  CALL   3200
03C54:  MOVFF  347,381
03C58:  MOVFF  346,380
03C5C:  MOVFF  345,37F
03C60:  MOVFF  344,37E
03C64:  MOVFF  03,385
03C68:  MOVFF  02,384
03C6C:  MOVFF  01,383
03C70:  MOVFF  00,382
03C74:  CALL   0E30
03C78:  MOVFF  00,344
03C7C:  MOVFF  01,345
03C80:  MOVFF  02,346
03C84:  MOVFF  03,347
03C88:  MOVFF  114,355
03C8C:  MOVFF  113,354
03C90:  MOVFF  112,353
03C94:  MOVFF  111,352
03C98:  MOVLB  3
03C9A:  CLRF   x59
03C9C:  CLRF   x58
03C9E:  CLRF   x57
03CA0:  MOVLW  80
03CA2:  MOVWF  x56
03CA4:  MOVLB  0
03CA6:  CALL   3200
03CAA:  MOVLW  0E
03CAC:  MOVLB  3
03CAE:  MOVWF  x81
03CB0:  MOVLW  6D
03CB2:  MOVWF  x80
03CB4:  MOVLW  83
03CB6:  MOVWF  x7F
03CB8:  MOVLW  64
03CBA:  MOVWF  x7E
03CBC:  MOVFF  03,385
03CC0:  MOVFF  02,384
03CC4:  MOVFF  01,383
03CC8:  MOVFF  00,382
03CCC:  MOVLB  0
03CCE:  CALL   2290
03CD2:  MOVFF  FEA,351
03CD6:  MOVFF  FE9,350
03CDA:  BCF    FD8.1
03CDC:  MOVLW  F0
03CDE:  MOVLB  3
03CE0:  MOVWF  x85
03CE2:  MOVLW  F7
03CE4:  MOVWF  x84
03CE6:  MOVLW  20
03CE8:  MOVWF  x83
03CEA:  MOVLW  5B
03CEC:  MOVWF  x82
03CEE:  MOVFF  03,389
03CF2:  MOVFF  02,388
03CF6:  MOVFF  01,387
03CFA:  MOVFF  00,386
03CFE:  MOVLB  0
03D00:  CALL   0F8E
03D04:  MOVFF  351,FEA
03D08:  MOVFF  350,FE9
03D0C:  MOVFF  347,381
03D10:  MOVFF  346,380
03D14:  MOVFF  345,37F
03D18:  MOVFF  344,37E
03D1C:  MOVFF  03,385
03D20:  MOVFF  02,384
03D24:  MOVFF  01,383
03D28:  MOVFF  00,382
03D2C:  CALL   2290
03D30:  MOVFF  FEA,345
03D34:  MOVFF  FE9,344
03D38:  BCF    FD8.1
03D3A:  MOVFF  343,385
03D3E:  MOVFF  342,384
03D42:  MOVFF  341,383
03D46:  MOVFF  340,382
03D4A:  MOVFF  03,389
03D4E:  MOVFF  02,388
03D52:  MOVFF  01,387
03D56:  MOVFF  00,386
03D5A:  CALL   0F8E
03D5E:  MOVFF  345,FEA
03D62:  MOVFF  344,FE9
03D66:  MOVFF  03,118
03D6A:  MOVFF  02,117
03D6E:  MOVFF  01,116
03D72:  MOVFF  00,115
....................    densidad=((Pa*0.028963512440)/(Z1*TempK*8.314472))*(1-(Xv*(1-(0.018015/0.028963512440)))); 
03D76:  MOVFF  108,381
03D7A:  MOVFF  107,380
03D7E:  MOVFF  106,37F
03D82:  MOVFF  105,37E
03D86:  MOVLW  E3
03D88:  MOVLB  3
03D8A:  MOVWF  x85
03D8C:  MOVLW  44
03D8E:  MOVWF  x84
03D90:  MOVLW  6D
03D92:  MOVWF  x83
03D94:  MOVLW  79
03D96:  MOVWF  x82
03D98:  MOVLB  0
03D9A:  CALL   2290
03D9E:  MOVFF  00,33E
03DA2:  MOVFF  01,33F
03DA6:  MOVFF  02,340
03DAA:  MOVFF  03,341
03DAE:  MOVFF  118,381
03DB2:  MOVFF  117,380
03DB6:  MOVFF  116,37F
03DBA:  MOVFF  115,37E
03DBE:  MOVFF  104,385
03DC2:  MOVFF  103,384
03DC6:  MOVFF  102,383
03DCA:  MOVFF  101,382
03DCE:  CALL   2290
03DD2:  MOVFF  00,342
03DD6:  MOVFF  01,343
03DDA:  MOVFF  02,344
03DDE:  MOVFF  03,345
03DE2:  MOVFF  03,381
03DE6:  MOVFF  02,380
03DEA:  MOVFF  01,37F
03DEE:  MOVFF  00,37E
03DF2:  MOVLW  14
03DF4:  MOVLB  3
03DF6:  MOVWF  x85
03DF8:  MOVLW  08
03DFA:  MOVWF  x84
03DFC:  MOVLW  05
03DFE:  MOVWF  x83
03E00:  MOVLW  82
03E02:  MOVWF  x82
03E04:  MOVLB  0
03E06:  CALL   2290
03E0A:  MOVFF  341,381
03E0E:  MOVFF  340,380
03E12:  MOVFF  33F,37F
03E16:  MOVFF  33E,37E
03E1A:  MOVFF  03,385
03E1E:  MOVFF  02,384
03E22:  MOVFF  01,383
03E26:  MOVFF  00,382
03E2A:  CALL   0E30
03E2E:  MOVFF  00,33E
03E32:  MOVFF  01,33F
03E36:  MOVFF  02,340
03E3A:  MOVFF  03,341
03E3E:  MOVFF  114,381
03E42:  MOVFF  113,380
03E46:  MOVFF  112,37F
03E4A:  MOVFF  111,37E
03E4E:  MOVLW  98
03E50:  MOVLB  3
03E52:  MOVWF  x85
03E54:  MOVLW  8A
03E56:  MOVWF  x84
03E58:  MOVLW  41
03E5A:  MOVWF  x83
03E5C:  MOVLW  7D
03E5E:  MOVWF  x82
03E60:  MOVLB  0
03E62:  CALL   2290
03E66:  BSF    FD8.1
03E68:  MOVLB  3
03E6A:  CLRF   x85
03E6C:  CLRF   x84
03E6E:  CLRF   x83
03E70:  MOVLW  7F
03E72:  MOVWF  x82
03E74:  MOVFF  03,389
03E78:  MOVFF  02,388
03E7C:  MOVFF  01,387
03E80:  MOVFF  00,386
03E84:  MOVLB  0
03E86:  CALL   0F8E
03E8A:  MOVFF  341,381
03E8E:  MOVFF  340,380
03E92:  MOVFF  33F,37F
03E96:  MOVFF  33E,37E
03E9A:  MOVFF  03,385
03E9E:  MOVFF  02,384
03EA2:  MOVFF  01,383
03EA6:  MOVFF  00,382
03EAA:  CALL   2290
03EAE:  MOVFF  03,FC
03EB2:  MOVFF  02,FB
03EB6:  MOVFF  01,FA
03EBA:  MOVFF  00,F9
.................... } 
03EBE:  RETLW  00
....................  
....................  
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
00248:  BSF    xC9.1
....................     
....................    if(VelMotor==19){ 
0024A:  MOVF   xEE,W
0024C:  SUBLW  13
0024E:  BNZ   0260
....................       set_timer0(237);       
00250:  CLRF   FD7
00252:  MOVLW  ED
00254:  MOVWF  FD6
....................       Motor_off;  
00256:  BCF    F8B.2
00258:  BCF    F94.2
....................       Motor2_off;  
0025A:  BCF    F8B.1
0025C:  BCF    F94.1
....................    }else if(VelMotor==18){ 
0025E:  BRA    03E8
00260:  MOVF   xEE,W
00262:  SUBLW  12
00264:  BNZ   0276
....................       set_timer0(234);       
00266:  CLRF   FD7
00268:  MOVLW  EA
0026A:  MOVWF  FD6
....................       Motor_off;  
0026C:  BCF    F8B.2
0026E:  BCF    F94.2
....................       Motor2_off;  
00270:  BCF    F8B.1
00272:  BCF    F94.1
....................    }else if(VelMotor==17){ 
00274:  BRA    03E8
00276:  MOVF   xEE,W
00278:  SUBLW  11
0027A:  BNZ   028C
....................       set_timer0(231);       
0027C:  CLRF   FD7
0027E:  MOVLW  E7
00280:  MOVWF  FD6
....................       Motor_off;  
00282:  BCF    F8B.2
00284:  BCF    F94.2
....................       Motor2_off;  
00286:  BCF    F8B.1
00288:  BCF    F94.1
....................    }else if(VelMotor==16){ 
0028A:  BRA    03E8
0028C:  MOVF   xEE,W
0028E:  SUBLW  10
00290:  BNZ   02A2
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
00292:  CLRF   FD7
00294:  MOVLW  E4
00296:  MOVWF  FD6
....................       Motor_off;  
00298:  BCF    F8B.2
0029A:  BCF    F94.2
....................       Motor2_off;  
0029C:  BCF    F8B.1
0029E:  BCF    F94.1
....................    }else if(VelMotor==15){ 
002A0:  BRA    03E8
002A2:  MOVF   xEE,W
002A4:  SUBLW  0F
002A6:  BNZ   02B8
....................       set_timer0(225);       
002A8:  CLRF   FD7
002AA:  MOVLW  E1
002AC:  MOVWF  FD6
....................       Motor_off;  
002AE:  BCF    F8B.2
002B0:  BCF    F94.2
....................       Motor2_off;  
002B2:  BCF    F8B.1
002B4:  BCF    F94.1
....................    }else if(VelMotor==14){ 
002B6:  BRA    03E8
002B8:  MOVF   xEE,W
002BA:  SUBLW  0E
002BC:  BNZ   02CE
....................       set_timer0(222);       
002BE:  CLRF   FD7
002C0:  MOVLW  DE
002C2:  MOVWF  FD6
....................       Motor_off;  
002C4:  BCF    F8B.2
002C6:  BCF    F94.2
....................       Motor2_off;  
002C8:  BCF    F8B.1
002CA:  BCF    F94.1
....................    }else if(VelMotor==13){ 
002CC:  BRA    03E8
002CE:  MOVF   xEE,W
002D0:  SUBLW  0D
002D2:  BNZ   02E4
....................       set_timer0(219);       
002D4:  CLRF   FD7
002D6:  MOVLW  DB
002D8:  MOVWF  FD6
....................       Motor_off;  
002DA:  BCF    F8B.2
002DC:  BCF    F94.2
....................       Motor2_off;  
002DE:  BCF    F8B.1
002E0:  BCF    F94.1
....................    }else if(VelMotor==12){ 
002E2:  BRA    03E8
002E4:  MOVF   xEE,W
002E6:  SUBLW  0C
002E8:  BNZ   02FA
....................       set_timer0(216);       
002EA:  CLRF   FD7
002EC:  MOVLW  D8
002EE:  MOVWF  FD6
....................       Motor_off;  
002F0:  BCF    F8B.2
002F2:  BCF    F94.2
....................       Motor2_off;  
002F4:  BCF    F8B.1
002F6:  BCF    F94.1
....................    }else if(VelMotor==11){ 
002F8:  BRA    03E8
002FA:  MOVF   xEE,W
002FC:  SUBLW  0B
002FE:  BNZ   0310
....................       set_timer0(213);       
00300:  CLRF   FD7
00302:  MOVLW  D5
00304:  MOVWF  FD6
....................       Motor_off;  
00306:  BCF    F8B.2
00308:  BCF    F94.2
....................       Motor2_off;  
0030A:  BCF    F8B.1
0030C:  BCF    F94.1
....................    }else if(VelMotor==10){ 
0030E:  BRA    03E8
00310:  MOVF   xEE,W
00312:  SUBLW  0A
00314:  BNZ   0326
....................       set_timer0(210);       
00316:  CLRF   FD7
00318:  MOVLW  D2
0031A:  MOVWF  FD6
....................       Motor_off;  
0031C:  BCF    F8B.2
0031E:  BCF    F94.2
....................       Motor2_off;  
00320:  BCF    F8B.1
00322:  BCF    F94.1
....................    }else if(VelMotor==9){ 
00324:  BRA    03E8
00326:  MOVF   xEE,W
00328:  SUBLW  09
0032A:  BNZ   033C
....................       set_timer0(207);       
0032C:  CLRF   FD7
0032E:  MOVLW  CF
00330:  MOVWF  FD6
....................       Motor_off;  
00332:  BCF    F8B.2
00334:  BCF    F94.2
....................       Motor2_off;  
00336:  BCF    F8B.1
00338:  BCF    F94.1
....................    }else if(VelMotor==8){ 
0033A:  BRA    03E8
0033C:  MOVF   xEE,W
0033E:  SUBLW  08
00340:  BNZ   0352
....................       set_timer0(204);       
00342:  CLRF   FD7
00344:  MOVLW  CC
00346:  MOVWF  FD6
....................       Motor_off;  
00348:  BCF    F8B.2
0034A:  BCF    F94.2
....................       Motor2_off;  
0034C:  BCF    F8B.1
0034E:  BCF    F94.1
....................    }else if(VelMotor==7){ 
00350:  BRA    03E8
00352:  MOVF   xEE,W
00354:  SUBLW  07
00356:  BNZ   0368
....................       set_timer0(201);       
00358:  CLRF   FD7
0035A:  MOVLW  C9
0035C:  MOVWF  FD6
....................       Motor_off;  
0035E:  BCF    F8B.2
00360:  BCF    F94.2
....................       Motor2_off;  
00362:  BCF    F8B.1
00364:  BCF    F94.1
....................    }else if(VelMotor==6){ 
00366:  BRA    03E8
00368:  MOVF   xEE,W
0036A:  SUBLW  06
0036C:  BNZ   037E
....................       set_timer0(198);       
0036E:  CLRF   FD7
00370:  MOVLW  C6
00372:  MOVWF  FD6
....................       Motor_off;  
00374:  BCF    F8B.2
00376:  BCF    F94.2
....................       Motor2_off;  
00378:  BCF    F8B.1
0037A:  BCF    F94.1
....................    }else if(VelMotor==5){ 
0037C:  BRA    03E8
0037E:  MOVF   xEE,W
00380:  SUBLW  05
00382:  BNZ   0394
....................       set_timer0(195);       
00384:  CLRF   FD7
00386:  MOVLW  C3
00388:  MOVWF  FD6
....................       Motor_off;  
0038A:  BCF    F8B.2
0038C:  BCF    F94.2
....................       Motor2_off;  
0038E:  BCF    F8B.1
00390:  BCF    F94.1
....................    }else if(VelMotor==4){ 
00392:  BRA    03E8
00394:  MOVF   xEE,W
00396:  SUBLW  04
00398:  BNZ   03AA
....................       set_timer0(192);       
0039A:  CLRF   FD7
0039C:  MOVLW  C0
0039E:  MOVWF  FD6
....................       Motor_off;  
003A0:  BCF    F8B.2
003A2:  BCF    F94.2
....................       Motor2_off;  
003A4:  BCF    F8B.1
003A6:  BCF    F94.1
....................    }else if(VelMotor==3){ 
003A8:  BRA    03E8
003AA:  MOVF   xEE,W
003AC:  SUBLW  03
003AE:  BNZ   03C0
....................       set_timer0(189); 
003B0:  CLRF   FD7
003B2:  MOVLW  BD
003B4:  MOVWF  FD6
....................       Motor_off;  
003B6:  BCF    F8B.2
003B8:  BCF    F94.2
....................       Motor2_off;  
003BA:  BCF    F8B.1
003BC:  BCF    F94.1
....................    }else if(VelMotor==2){ 
003BE:  BRA    03E8
003C0:  MOVF   xEE,W
003C2:  SUBLW  02
003C4:  BNZ   03D6
....................       set_timer0(186); 
003C6:  CLRF   FD7
003C8:  MOVLW  BA
003CA:  MOVWF  FD6
....................       Motor_off;  
003CC:  BCF    F8B.2
003CE:  BCF    F94.2
....................       Motor2_off;  
003D0:  BCF    F8B.1
003D2:  BCF    F94.1
....................    }else if(VelMotor==1){ 
003D4:  BRA    03E8
003D6:  DECFSZ xEE,W
003D8:  BRA    03E8
....................       set_timer0(183); 
003DA:  CLRF   FD7
003DC:  MOVLW  B7
003DE:  MOVWF  FD6
....................       Motor_off;  
003E0:  BCF    F8B.2
003E2:  BCF    F94.2
....................       Motor2_off;  
003E4:  BCF    F8B.1
003E6:  BCF    F94.1
....................    } 
....................    pulsos++;    
003E8:  INCF   xCA,F
003EA:  BTFSC  FD8.2
003EC:  INCF   xCB,F
.................... } 
....................  
003EE:  BCF    FF2.1
003F0:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<20){ 
003F4:  MOVF   xEE,F
003F6:  BZ    0420
003F8:  MOVF   xEE,W
003FA:  SUBLW  13
003FC:  BNC   0420
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
003FE:  BTFSS  xC9.1
00400:  BRA    0414
....................       Motor_on; 
00402:  BSF    F8B.2
00404:  BCF    F94.2
....................       Motor2_on;  
00406:  BSF    F8B.1
00408:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
0040A:  CLRF   FD7
0040C:  MOVLW  FD
0040E:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
00410:  BCF    xC9.1
....................    } else {            //The triac has been triggered, cut the pulse 
00412:  BRA    0420
....................       Motor_off; 
00414:  BCF    F8B.2
00416:  BCF    F94.2
....................       Motor2_off;  
00418:  BCF    F8B.1
0041A:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
0041C:  CLRF   FD7
0041E:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
00420:  BCF    FF2.2
00422:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(40536);//5ms 
00426:  MOVLW  9E
00428:  MOVWF  FCF
0042A:  MOVLW  58
0042C:  MOVWF  FCE
....................    tiempos++; 
0042E:  INCF   59,F
00430:  BTFSC  FD8.2
00432:  INCF   5A,F
....................    if(UP) 
00434:  BSF    F92.5
00436:  BTFSC  F80.5
00438:  BRA    0442
....................          tup++; 
0043A:  INCF   xCC,F
0043C:  BTFSC  FD8.2
0043E:  INCF   xCD,F
....................       else 
00440:  BRA    0446
....................          tup=0; 
00442:  CLRF   xCD
00444:  CLRF   xCC
....................           
....................       if(DOWN) 
00446:  BSF    F96.0
00448:  BTFSC  F84.0
0044A:  BRA    0454
....................          tdown++; 
0044C:  INCF   xCE,F
0044E:  BTFSC  FD8.2
00450:  INCF   xCF,F
....................       else 
00452:  BRA    0458
....................          tdown=0; 
00454:  CLRF   xCF
00456:  CLRF   xCE
....................           
....................       if(RIGHT) 
00458:  BSF    F96.1
0045A:  BTFSC  F84.1
0045C:  BRA    0466
....................          tright++; 
0045E:  INCF   xD0,F
00460:  BTFSC  FD8.2
00462:  INCF   xD1,F
....................       else 
00464:  BRA    046A
....................          tright=0; 
00466:  CLRF   xD1
00468:  CLRF   xD0
....................        
....................       if(IZQU) 
0046A:  BSF    F96.2
0046C:  BTFSC  F84.2
0046E:  BRA    0478
....................          tleft++; 
00470:  INCF   xD2,F
00472:  BTFSC  FD8.2
00474:  INCF   xD3,F
....................       else 
00476:  BRA    047C
....................          tleft=0; 
00478:  CLRF   xD3
0047A:  CLRF   xD2
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
0047C:  MOVF   5A,F
0047E:  BNZ   0486
00480:  MOVF   59,W
00482:  SUBLW  C7
00484:  BC    04F2
....................       output_toggle(PIN_A3); 
00486:  BCF    F92.3
00488:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
0048A:  CLRF   5A
0048C:  CLRF   59
0048E:  INCF   42,F
00490:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
00492:  DECFSZ 54,W
00494:  BRA    04AA
....................          if(estadobuzzer==0){ 
00496:  BTFSC  2A.3
00498:  BRA    04A0
....................             Buzzer_off; 
0049A:  BCF    F8B.0
0049C:  BCF    F94.0
....................          }else{ 
0049E:  BRA    04A8
....................             if(estadoalarma==1) 
004A0:  BTFSS  2A.4
004A2:  BRA    04A8
....................                Buzzer_on; 
004A4:  BSF    F8B.0
004A6:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
004A8:  BTG    2A.3
....................       } 
....................       if(estadomv==1){ 
004AA:  BTFSS  29.2
004AC:  BRA    04C4
....................          segundosTrabajo++; 
004AE:  INCF   xD4,F
004B0:  BTFSC  FD8.2
004B2:  INCF   xD5,F
....................          if(tEncendido<60){ 
004B4:  MOVF   60,F
004B6:  BNZ   04C4
004B8:  MOVF   5F,W
004BA:  SUBLW  3B
004BC:  BNC   04C4
....................             tEncendido++; 
004BE:  INCF   5F,F
004C0:  BTFSC  FD8.2
004C2:  INCF   60,F
....................          } 
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
004C4:  BTFSS  29.0
004C6:  BRA    04F2
....................          segundos++; 
004C8:  INCF   34,F
....................          if(tiempo_cumplido==0){ 
004CA:  BTFSC  29.7
004CC:  BRA    04F2
....................             if(tempo_segundos>0){ 
004CE:  MOVF   3B,F
004D0:  BZ    04D6
....................                tempo_segundos--; 
004D2:  DECF   3B,F
....................             }else{ 
004D4:  BRA    04F2
....................                if(tempo_minutos>0){ 
004D6:  MOVF   3A,F
004D8:  BZ    04E2
....................                   tempo_minutos--; 
004DA:  DECF   3A,F
....................                   tempo_segundos=59; 
004DC:  MOVLW  3B
004DE:  MOVWF  3B
....................                }else{ 
004E0:  BRA    04F2
....................                   tiempo_cumplido=1; 
004E2:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
004E4:  BCF    29.0
004E6:  BSF    F8A.4
004E8:  BCF    F93.4
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
004EA:  MOVFF  3C,3A
004EE:  MOVFF  3D,3B
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
004F2:  BCF    F9E.0
004F4:  GOTO   0064
.................... void main () 
.................... { 
*
05354:  CLRF   FF8
05356:  BSF    FF1.2
05358:  BCF    F9F.0
0535A:  BSF    FD0.7
0535C:  BSF    07.7
0535E:  CLRF   FEA
05360:  CLRF   FE9
05362:  BCF    29.0
05364:  BCF    29.1
05366:  BCF    29.2
05368:  BCF    29.3
0536A:  BCF    29.4
0536C:  BCF    29.5
0536E:  BCF    29.6
05370:  BCF    29.7
05372:  BCF    2A.0
05374:  BCF    2A.1
05376:  BCF    2A.2
05378:  BCF    2A.3
0537A:  BCF    2A.4
0537C:  BCF    2A.5
0537E:  BCF    2A.6
05380:  CLRF   2B
05382:  MOVLW  07
05384:  MOVWF  2C
05386:  MOVLW  02
05388:  MOVWF  2D
0538A:  MOVLW  0B
0538C:  MOVWF  2E
0538E:  MOVLW  02
05390:  MOVWF  2F
05392:  MOVLW  03
05394:  MOVWF  30
05396:  MOVLW  02
05398:  MOVWF  31
0539A:  MOVWF  32
0539C:  MOVLW  04
0539E:  MOVWF  33
053A0:  CLRF   34
053A2:  CLRF   35
053A4:  CLRF   36
053A6:  CLRF   37
053A8:  CLRF   38
053AA:  CLRF   39
053AC:  CLRF   3A
053AE:  CLRF   3B
053B0:  CLRF   3C
053B2:  CLRF   3D
053B4:  CLRF   3E
053B6:  CLRF   3F
053B8:  CLRF   40
053BA:  MOVLW  01
053BC:  MOVWF  41
053BE:  CLRF   42
053C0:  CLRF   43
053C2:  CLRF   44
053C4:  CLRF   45
053C6:  MOVLW  0A
053C8:  MOVWF  46
053CA:  CLRF   47
053CC:  CLRF   48
053CE:  CLRF   54
053D0:  CLRF   55
053D2:  CLRF   56
053D4:  CLRF   57
053D6:  MOVLW  04
053D8:  MOVWF  58
053DA:  CLRF   5C
053DC:  CLRF   5B
053DE:  CLRF   5E
053E0:  CLRF   5D
053E2:  CLRF   60
053E4:  CLRF   5F
053E6:  CLRF   xB4
053E8:  CLRF   xB3
053EA:  CLRF   xB2
053EC:  CLRF   xB1
053EE:  CLRF   xB8
053F0:  CLRF   xB7
053F2:  CLRF   xB6
053F4:  CLRF   xB5
053F6:  CLRF   xBC
053F8:  CLRF   xBB
053FA:  CLRF   xBA
053FC:  CLRF   xB9
053FE:  CLRF   xC0
05400:  CLRF   xBF
05402:  CLRF   xBE
05404:  CLRF   xBD
05406:  CLRF   xC4
05408:  CLRF   xC3
0540A:  CLRF   xC2
0540C:  CLRF   xC1
0540E:  CLRF   xC8
05410:  CLRF   xC7
05412:  CLRF   xC6
05414:  MOVLW  80
05416:  MOVWF  xC5
05418:  BSF    2A.7
0541A:  BCF    xC9.0
0541C:  CLRF   xCB
0541E:  CLRF   xCA
05420:  CLRF   xCD
05422:  CLRF   xCC
05424:  CLRF   xCF
05426:  CLRF   xCE
05428:  CLRF   xD1
0542A:  CLRF   xD0
0542C:  CLRF   xD3
0542E:  CLRF   xD2
05430:  CLRF   xD5
05432:  CLRF   xD4
05434:  CLRF   xD7
05436:  CLRF   xD6
05438:  CLRF   xD9
0543A:  CLRF   xD8
0543C:  BCF    xC9.1
0543E:  MOVLW  AE
05440:  MOVWF  xDD
05442:  MOVLW  47
05444:  MOVWF  xDC
05446:  CLRF   xDB
05448:  MOVLW  82
0544A:  MOVWF  xDA
0544C:  MOVLW  AE
0544E:  MOVWF  xE1
05450:  MOVLW  47
05452:  MOVWF  xE0
05454:  MOVLW  D1
05456:  MOVWF  xDF
05458:  MOVLW  84
0545A:  MOVWF  xDE
0545C:  MOVLW  48
0545E:  MOVWF  xE5
05460:  MOVLW  21
05462:  MOVWF  xE4
05464:  MOVLW  07
05466:  MOVWF  xE3
05468:  MOVLW  86
0546A:  MOVWF  xE2
0546C:  MOVLW  E9
0546E:  MOVWF  xE9
05470:  MOVLW  26
05472:  MOVWF  xE8
05474:  MOVLW  82
05476:  MOVWF  xE7
05478:  MOVLW  85
0547A:  MOVWF  xE6
0547C:  MOVLW  BE
0547E:  MOVWF  xED
05480:  MOVLW  9F
05482:  MOVWF  xEC
05484:  MOVLW  C1
05486:  MOVWF  xEB
05488:  MOVLW  83
0548A:  MOVWF  xEA
0548C:  CLRF   xEE
0548E:  CLRF   xEF
05490:  CLRF   xF0
05492:  CLRF   xF4
05494:  CLRF   xF3
05496:  MOVLW  47
05498:  MOVWF  xF2
0549A:  MOVLW  86
0549C:  MOVWF  xF1
0549E:  CLRF   xF8
054A0:  CLRF   xF7
054A2:  CLRF   xF6
054A4:  CLRF   xF5
054A6:  MOVLW  9A
054A8:  MOVWF  xFC
054AA:  MOVLW  99
054AC:  MOVWF  xFB
054AE:  MOVLW  19
054B0:  MOVWF  xFA
054B2:  MOVLW  7F
054B4:  MOVWF  xF9
054B6:  MOVLB  1
054B8:  CLRF   x00
054BA:  MOVLB  0
054BC:  CLRF   xFF
054BE:  CLRF   xFE
054C0:  CLRF   xFD
054C2:  MOVLB  1
054C4:  CLRF   x04
054C6:  CLRF   x03
054C8:  CLRF   x02
054CA:  CLRF   x01
054CC:  CLRF   x08
054CE:  CLRF   x07
054D0:  CLRF   x06
054D2:  CLRF   x05
054D4:  CLRF   x0C
054D6:  CLRF   x0B
054D8:  CLRF   x0A
054DA:  CLRF   x09
054DC:  CLRF   x10
054DE:  CLRF   x0F
054E0:  CLRF   x0E
054E2:  CLRF   x0D
054E4:  CLRF   x14
054E6:  CLRF   x13
054E8:  CLRF   x12
054EA:  CLRF   x11
054EC:  CLRF   x18
054EE:  CLRF   x17
054F0:  CLRF   x16
054F2:  CLRF   x15
054F4:  CLRF   x1C
054F6:  CLRF   x1B
054F8:  CLRF   x1A
054FA:  CLRF   x19
054FC:  CLRF   x20
054FE:  CLRF   x1F
05500:  CLRF   x1E
05502:  CLRF   x1D
05504:  CLRF   x24
05506:  CLRF   x23
05508:  CLRF   x22
0550A:  CLRF   x21
0550C:  CLRF   x28
0550E:  CLRF   x27
05510:  CLRF   x26
05512:  CLRF   x25
05514:  MOVF   FC1,W
05516:  ANDLW  C0
05518:  IORLW  0F
0551A:  MOVWF  FC1
0551C:  MOVLW  07
0551E:  MOVWF  FB4
05520:  MOVLW  3E
05522:  MOVWF  49
05524:  MOVLW  20
05526:  MOVWF  4A
05528:  MOVLW  5E
0552A:  MOVWF  4B
0552C:  CLRF   4C
0552E:  CLRF   4D
05530:  CLRF   4E
05532:  CLRF   4F
05534:  CLRF   50
05536:  CLRF   51
05538:  CLRF   52
0553A:  CLRF   53
....................    Motor_off; 
0553C:  BCF    F8B.2
0553E:  BCF    F94.2
....................    Motor2_off; 
05540:  BCF    F8B.1
05542:  BCF    F94.1
....................    ConfigInterrupciones(); 
05544:  MOVLB  0
05546:  GOTO   0DB2
....................    //MensajeBienvenida(); 
....................    LeeEEPROM();  
0554A:  GOTO   1206
....................    LimitaValores(); 
0554E:  GOTO   18B4
....................    if(motor!=1){ 
05552:  DECFSZ 44,W
05554:  BRA    5558
05556:  BRA    555E
....................       MensajeBienvenida();  
05558:  GOTO   2210
....................    }else{ 
0555C:  BRA    5570
....................       if(luz==1) 
0555E:  DECFSZ 45,W
05560:  BRA    5564
....................          estadofl=1; 
05562:  BSF    29.1
....................       if(luz==0) 
05564:  MOVF   45,F
05566:  BNZ   556A
....................          estadofl=0; 
05568:  BCF    29.1
....................       estadomv=1; 
0556A:  BSF    29.2
....................       Menu=50; 
0556C:  MOVLW  32
0556E:  MOVWF  2B
....................    } 
....................    Motor_off; 
05570:  BCF    F8B.2
05572:  BCF    F94.2
....................    Motor2_off; 
05574:  BCF    F8B.1
05576:  BCF    F94.1
....................    calculaDensidad(); 
05578:  CALL   350C
....................    for(i=0;i<10;i++){ 
0557C:  CLRF   40
0557E:  MOVF   40,W
05580:  SUBLW  09
05582:  BNC   55C4
....................       DownFlow=LeerFlujo(10,1); 
05584:  MOVLW  0A
05586:  MOVLB  3
05588:  MOVWF  x3E
0558A:  MOVLW  01
0558C:  MOVWF  x3F
0558E:  MOVLB  0
05590:  CALL   3F3A
05594:  MOVFF  03,C4
05598:  MOVFF  02,C3
0559C:  MOVFF  01,C2
055A0:  MOVFF  00,C1
....................       CaidaPresion=Leer_Sensor_Presion(8); 
055A4:  MOVLW  08
055A6:  MOVLB  3
055A8:  MOVWF  x3E
055AA:  MOVLB  0
055AC:  CALL   499A
055B0:  MOVFF  03,C0
055B4:  MOVFF  02,BF
055B8:  MOVFF  01,BE
055BC:  MOVFF  00,BD
....................    } 
055C0:  INCF   40,F
055C2:  BRA    557E
....................     
....................    if(UP && DOWN && RIGHT){ 
055C4:  BSF    F92.5
055C6:  BTFSC  F80.5
055C8:  GOTO   5FCC
055CC:  BSF    F96.0
055CE:  BTFSC  F84.0
055D0:  GOTO   5FCC
055D4:  BSF    F96.1
055D6:  BTFSC  F84.1
055D8:  GOTO   5FCC
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
055DC:  MOVLW  01
055DE:  MOVLB  3
055E0:  MOVWF  x50
055E2:  MOVWF  x51
055E4:  MOVLB  0
055E6:  CALL   20F8
....................          printf(lcd_putc,"Ajuste de Parametros"); 
055EA:  MOVLW  F8
055EC:  MOVWF  FF6
055EE:  MOVLW  04
055F0:  MOVWF  FF7
055F2:  CALL   21F0
....................           
....................          if(RIGHT){ 
055F6:  BSF    F96.1
055F8:  BTFSC  F84.1
055FA:  BRA    5624
....................             delay_ms(500); 
055FC:  MOVLW  02
055FE:  MOVLB  3
05600:  MOVWF  x3E
05602:  MOVLW  FA
05604:  MOVWF  x55
05606:  MOVLB  0
05608:  CALL   0C96
0560C:  MOVLB  3
0560E:  DECFSZ x3E,F
05610:  BRA    5602
....................             if(RIGHT){ 
05612:  BSF    F96.1
05614:  BTFSC  F84.1
05616:  BRA    5626
....................                OpcionMenu++; 
05618:  INCF   48,F
....................                printf(lcd_putc,"\f"); 
0561A:  MOVLW  0C
0561C:  MOVWF  x4F
0561E:  MOVLB  0
05620:  CALL   2172
05624:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(IZQU){ 
05626:  BSF    F96.2
05628:  BTFSC  F84.2
0562A:  BRA    5654
....................             delay_ms(500); 
0562C:  MOVLW  02
0562E:  MOVWF  x3E
05630:  MOVLW  FA
05632:  MOVWF  x55
05634:  MOVLB  0
05636:  CALL   0C96
0563A:  MOVLB  3
0563C:  DECFSZ x3E,F
0563E:  BRA    5630
....................             if(IZQU){ 
05640:  BSF    F96.2
05642:  BTFSC  F84.2
05644:  BRA    5654
....................                OpcionMenu--; 
05646:  DECF   48,F
....................                printf(lcd_putc,"\f"); 
05648:  MOVLW  0C
0564A:  MOVWF  x4F
0564C:  MOVLB  0
0564E:  CALL   2172
05652:  MOVLB  3
....................             } 
....................          } 
....................           
....................          if(OpcionMenu<0) 
05654:  BTFSC  48.7
05656:  BRA    565A
05658:  BRA    565E
....................             OpcionMenu=4; 
0565A:  MOVLW  04
0565C:  MOVWF  48
....................          if(OpcionMenu>4) 
0565E:  BTFSC  48.7
05660:  BRA    566A
05662:  MOVF   48,W
05664:  SUBLW  04
05666:  BC    566A
....................             OpcionMenu=0;    
05668:  CLRF   48
....................          
....................          if(IZQU && RIGHT)//Si oprime boton de Toma. 
0566A:  BSF    F96.2
0566C:  BTFSC  F84.2
0566E:  BRA    592A
05670:  BSF    F96.1
05672:  BTFSC  F84.1
05674:  BRA    592A
....................          {                   
....................             write_eeprom(24,velocidadInicial);//Guardar valor de Setpoint en eeprom 
05676:  CLRF   FAA
05678:  MOVLW  18
0567A:  MOVWF  FA9
0567C:  MOVFF  46,FA8
05680:  BCF    FA6.6
05682:  BCF    FA6.7
05684:  BSF    FA6.2
05686:  MOVF   FF2,W
05688:  MOVWF  00
0568A:  BCF    FF2.6
0568C:  BCF    FF2.7
0568E:  MOVLB  F
05690:  MOVLW  55
05692:  MOVWF  FA7
05694:  MOVLW  AA
05696:  MOVWF  FA7
05698:  BSF    FA6.1
0569A:  BTFSC  FA6.1
0569C:  BRA    569A
0569E:  BCF    FA6.2
056A0:  MOVF   00,W
056A2:  IORWF  FF2,F
....................             delay_ms(20); 
056A4:  MOVLW  14
056A6:  MOVLB  3
056A8:  MOVWF  x55
056AA:  MOVLB  0
056AC:  CALL   0C96
....................              
....................             Temporal=Flujo[1].Ajuste; 
056B0:  MOVFF  1B2,120
056B4:  MOVFF  1B1,11F
056B8:  MOVFF  1B0,11E
056BC:  MOVFF  1AF,11D
....................             Entero=(int)Flujo[1].Ajuste; 
056C0:  MOVFF  1B2,381
056C4:  MOVFF  1B1,380
056C8:  MOVFF  1B0,37F
056CC:  MOVFF  1AF,37E
056D0:  CALL   2386
056D4:  MOVFF  01,EF
....................             Temporal=Temporal-Entero; 
056D8:  MOVLB  3
056DA:  CLRF   x83
056DC:  MOVFF  EF,382
056E0:  MOVLB  0
056E2:  CALL   0DFA
056E6:  BSF    FD8.1
056E8:  MOVFF  120,385
056EC:  MOVFF  11F,384
056F0:  MOVFF  11E,383
056F4:  MOVFF  11D,382
056F8:  MOVFF  03,389
056FC:  MOVFF  02,388
05700:  MOVFF  01,387
05704:  MOVFF  00,386
05708:  CALL   0F8E
0570C:  MOVFF  03,120
05710:  MOVFF  02,11F
05714:  MOVFF  01,11E
05718:  MOVFF  00,11D
....................             Temporal2=Temporal*100.0; 
0571C:  MOVFF  120,381
05720:  MOVFF  11F,380
05724:  MOVFF  11E,37F
05728:  MOVFF  11D,37E
0572C:  MOVLB  3
0572E:  CLRF   x85
05730:  CLRF   x84
05732:  MOVLW  48
05734:  MOVWF  x83
05736:  MOVLW  85
05738:  MOVWF  x82
0573A:  MOVLB  0
0573C:  CALL   2290
05740:  MOVFF  03,128
05744:  MOVFF  02,127
05748:  MOVFF  01,126
0574C:  MOVFF  00,125
....................             Decimal1=(int8)Temporal2; 
05750:  MOVFF  128,381
05754:  MOVFF  127,380
05758:  MOVFF  126,37F
0575C:  MOVFF  125,37E
05760:  CALL   2386
05764:  MOVFF  01,F0
....................             write_eeprom(25,Entero); 
05768:  CLRF   FAA
0576A:  MOVLW  19
0576C:  MOVWF  FA9
0576E:  MOVFF  EF,FA8
05772:  BCF    FA6.6
05774:  BCF    FA6.7
05776:  BSF    FA6.2
05778:  MOVF   FF2,W
0577A:  MOVWF  00
0577C:  BCF    FF2.6
0577E:  BCF    FF2.7
05780:  MOVLB  F
05782:  MOVLW  55
05784:  MOVWF  FA7
05786:  MOVLW  AA
05788:  MOVWF  FA7
0578A:  BSF    FA6.1
0578C:  BTFSC  FA6.1
0578E:  BRA    578C
05790:  BCF    FA6.2
05792:  MOVF   00,W
05794:  IORWF  FF2,F
....................             delay_ms(20); 
05796:  MOVLW  14
05798:  MOVLB  3
0579A:  MOVWF  x55
0579C:  MOVLB  0
0579E:  CALL   0C96
....................             write_eeprom(26,Decimal1); 
057A2:  CLRF   FAA
057A4:  MOVLW  1A
057A6:  MOVWF  FA9
057A8:  MOVFF  F0,FA8
057AC:  BCF    FA6.6
057AE:  BCF    FA6.7
057B0:  BSF    FA6.2
057B2:  MOVF   FF2,W
057B4:  MOVWF  00
057B6:  BCF    FF2.6
057B8:  BCF    FF2.7
057BA:  MOVLB  F
057BC:  MOVLW  55
057BE:  MOVWF  FA7
057C0:  MOVLW  AA
057C2:  MOVWF  FA7
057C4:  BSF    FA6.1
057C6:  BTFSC  FA6.1
057C8:  BRA    57C6
057CA:  BCF    FA6.2
057CC:  MOVF   00,W
057CE:  IORWF  FF2,F
....................             delay_ms(20); 
057D0:  MOVLW  14
057D2:  MOVLB  3
057D4:  MOVWF  x55
057D6:  MOVLB  0
057D8:  CALL   0C96
....................              
....................             write_eeprom(29,(int8)Pr); 
057DC:  MOVFF  11C,381
057E0:  MOVFF  11B,380
057E4:  MOVFF  11A,37F
057E8:  MOVFF  119,37E
057EC:  CALL   2386
057F0:  MOVFF  01,33E
057F4:  CLRF   FAA
057F6:  MOVLW  1D
057F8:  MOVWF  FA9
057FA:  MOVFF  33E,FA8
057FE:  BCF    FA6.6
05800:  BCF    FA6.7
05802:  BSF    FA6.2
05804:  MOVF   FF2,W
05806:  MOVWF  00
05808:  BCF    FF2.6
0580A:  BCF    FF2.7
0580C:  MOVLB  F
0580E:  MOVLW  55
05810:  MOVWF  FA7
05812:  MOVLW  AA
05814:  MOVWF  FA7
05816:  BSF    FA6.1
05818:  BTFSC  FA6.1
0581A:  BRA    5818
0581C:  BCF    FA6.2
0581E:  MOVF   00,W
05820:  IORWF  FF2,F
....................             delay_ms(20); 
05822:  MOVLW  14
05824:  MOVLB  3
05826:  MOVWF  x55
05828:  MOVLB  0
0582A:  CALL   0C96
....................             write_eeprom(30,(int8)HR); 
0582E:  MOVFF  124,381
05832:  MOVFF  123,380
05836:  MOVFF  122,37F
0583A:  MOVFF  121,37E
0583E:  CALL   2386
05842:  MOVFF  01,33E
05846:  CLRF   FAA
05848:  MOVLW  1E
0584A:  MOVWF  FA9
0584C:  MOVFF  33E,FA8
05850:  BCF    FA6.6
05852:  BCF    FA6.7
05854:  BSF    FA6.2
05856:  MOVF   FF2,W
05858:  MOVWF  00
0585A:  BCF    FF2.6
0585C:  BCF    FF2.7
0585E:  MOVLB  F
05860:  MOVLW  55
05862:  MOVWF  FA7
05864:  MOVLW  AA
05866:  MOVWF  FA7
05868:  BSF    FA6.1
0586A:  BTFSC  FA6.1
0586C:  BRA    586A
0586E:  BCF    FA6.2
05870:  MOVF   00,W
05872:  IORWF  FF2,F
....................             delay_ms(20); 
05874:  MOVLW  14
05876:  MOVLB  3
05878:  MOVWF  x55
0587A:  MOVLB  0
0587C:  CALL   0C96
....................             Buzzer_on;delay_ms(500);Buzzer_off; 
05880:  BSF    F8B.0
05882:  BCF    F94.0
05884:  MOVLW  02
05886:  MOVLB  3
05888:  MOVWF  x3E
0588A:  MOVLW  FA
0588C:  MOVWF  x55
0588E:  MOVLB  0
05890:  CALL   0C96
05894:  MOVLB  3
05896:  DECFSZ x3E,F
05898:  BRA    588A
0589A:  BCF    F8B.0
0589C:  BCF    F94.0
....................             lcd_gotoxy(1,1); 
0589E:  MOVLW  01
058A0:  MOVWF  x50
058A2:  MOVWF  x51
058A4:  MOVLB  0
058A6:  CALL   20F8
....................             printf(lcd_putc,"                    "); 
058AA:  MOVLW  0E
058AC:  MOVWF  FF6
058AE:  MOVLW  05
058B0:  MOVWF  FF7
058B2:  CALL   21F0
....................             lcd_gotoxy(1,2); 
058B6:  MOVLW  01
058B8:  MOVLB  3
058BA:  MOVWF  x50
058BC:  MOVLW  02
058BE:  MOVWF  x51
058C0:  MOVLB  0
058C2:  CALL   20F8
....................             printf(lcd_putc,"    Almacenando      "); 
058C6:  MOVLW  24
058C8:  MOVWF  FF6
058CA:  MOVLW  05
058CC:  MOVWF  FF7
058CE:  CALL   21F0
....................             lcd_gotoxy(1,3); 
058D2:  MOVLW  01
058D4:  MOVLB  3
058D6:  MOVWF  x50
058D8:  MOVLW  03
058DA:  MOVWF  x51
058DC:  MOVLB  0
058DE:  CALL   20F8
....................             printf(lcd_putc,"     Parametros     "); 
058E2:  MOVLW  3A
058E4:  MOVWF  FF6
058E6:  MOVLW  05
058E8:  MOVWF  FF7
058EA:  CALL   21F0
....................             lcd_gotoxy(1,4); 
058EE:  MOVLW  01
058F0:  MOVLB  3
058F2:  MOVWF  x50
058F4:  MOVLW  04
058F6:  MOVWF  x51
058F8:  MOVLB  0
058FA:  CALL   20F8
....................             printf(lcd_putc,"                    ");  
058FE:  MOVLW  50
05900:  MOVWF  FF6
05902:  MOVLW  05
05904:  MOVWF  FF7
05906:  CALL   21F0
....................             Buzzer_on;delay_ms(500);Buzzer_off; 
0590A:  BSF    F8B.0
0590C:  BCF    F94.0
0590E:  MOVLW  02
05910:  MOVLB  3
05912:  MOVWF  x3E
05914:  MOVLW  FA
05916:  MOVWF  x55
05918:  MOVLB  0
0591A:  CALL   0C96
0591E:  MOVLB  3
05920:  DECFSZ x3E,F
05922:  BRA    5914
05924:  BCF    F8B.0
05926:  BCF    F94.0
....................             reset_cpu(); 
05928:  RESET
....................          } 
....................           
....................          if(OpcionMenu==0){ 
0592A:  MOVF   48,F
0592C:  BNZ   59D2
....................             if(velocidadInicial>15) 
0592E:  MOVF   46,W
05930:  SUBLW  0F
05932:  BC    5938
....................                velocidadInicial=15; 
05934:  MOVLW  0F
05936:  MOVWF  46
....................             if(velocidadInicial<1) 
05938:  MOVF   46,F
0593A:  BNZ   5940
....................                velocidadInicial=1; 
0593C:  MOVLW  01
0593E:  MOVWF  46
....................            
....................             lcd_gotoxy(1,2); 
05940:  MOVLW  01
05942:  MOVWF  x50
05944:  MOVLW  02
05946:  MOVWF  x51
05948:  MOVLB  0
0594A:  CALL   20F8
....................             printf(lcd_putc,"Inicial   Ventilador"); 
0594E:  MOVLW  66
05950:  MOVWF  FF6
05952:  MOVLW  05
05954:  MOVWF  FF7
05956:  CALL   21F0
....................             lcd_gotoxy(1,3); 
0595A:  MOVLW  01
0595C:  MOVLB  3
0595E:  MOVWF  x50
05960:  MOVLW  03
05962:  MOVWF  x51
05964:  MOVLB  0
05966:  CALL   20F8
....................             printf(lcd_putc,"     Vel: %02u       ",velocidadInicial);   
0596A:  MOVLW  7C
0596C:  MOVWF  FF6
0596E:  MOVLW  05
05970:  MOVWF  FF7
05972:  MOVLW  0A
05974:  MOVLB  3
05976:  MOVWF  x42
05978:  MOVLB  0
0597A:  CALL   4BA4
0597E:  MOVFF  46,33E
05982:  MOVLW  01
05984:  MOVLB  3
05986:  MOVWF  x3F
05988:  MOVLB  0
0598A:  CALL   4BFA
0598E:  MOVLW  8A
05990:  MOVWF  FF6
05992:  MOVLW  05
05994:  MOVWF  FF7
05996:  MOVLW  07
05998:  MOVLB  3
0599A:  MOVWF  x42
0599C:  MOVLB  0
0599E:  CALL   4BA4
....................           
....................             if(UP){   
059A2:  BSF    F92.5
059A4:  BTFSC  F80.5
059A6:  BRA    59B6
....................                delay_ms(200);velocidadInicial++; 
059A8:  MOVLW  C8
059AA:  MOVLB  3
059AC:  MOVWF  x55
059AE:  MOVLB  0
059B0:  CALL   0C96
059B4:  INCF   46,F
....................             } 
....................                    
....................             if(DOWN && Vel1>0){//Si oprime hacia abajo   
059B6:  BSF    F96.0
059B8:  BTFSC  F84.0
059BA:  BRA    59CE
059BC:  MOVF   58,F
059BE:  BZ    59CE
....................                delay_ms(200);velocidadInicial--; 
059C0:  MOVLW  C8
059C2:  MOVLB  3
059C4:  MOVWF  x55
059C6:  MOVLB  0
059C8:  CALL   0C96
059CC:  DECF   46,F
....................             } 
....................          }else if(OpcionMenu==1){ 
059CE:  BRA    5FC4
059D0:  MOVLB  3
059D2:  DECFSZ 48,W
059D4:  BRA    5B3E
....................             if(Pr>120) 
059D6:  CLRF   x81
059D8:  CLRF   x80
059DA:  MOVLW  70
059DC:  MOVWF  x7F
059DE:  MOVLW  85
059E0:  MOVWF  x7E
059E2:  MOVFF  11C,385
059E6:  MOVFF  11B,384
059EA:  MOVFF  11A,383
059EE:  MOVFF  119,382
059F2:  MOVLB  0
059F4:  CALL   183A
059F8:  BNC   5A08
....................                Pr=60; 
059FA:  MOVLB  1
059FC:  CLRF   x1C
059FE:  CLRF   x1B
05A00:  MOVLW  70
05A02:  MOVWF  x1A
05A04:  MOVLW  84
05A06:  MOVWF  x19
....................             if(Pr<60) 
05A08:  MOVFF  11C,381
05A0C:  MOVFF  11B,380
05A10:  MOVFF  11A,37F
05A14:  MOVFF  119,37E
05A18:  MOVLB  3
05A1A:  CLRF   x85
05A1C:  CLRF   x84
05A1E:  MOVLW  70
05A20:  MOVWF  x83
05A22:  MOVLW  84
05A24:  MOVWF  x82
05A26:  MOVLB  0
05A28:  CALL   183A
05A2C:  BNC   5A3C
....................                Pr=120; 
05A2E:  MOVLB  1
05A30:  CLRF   x1C
05A32:  CLRF   x1B
05A34:  MOVLW  70
05A36:  MOVWF  x1A
05A38:  MOVLW  85
05A3A:  MOVWF  x19
....................            
....................             lcd_gotoxy(1,2); 
05A3C:  MOVLW  01
05A3E:  MOVLB  3
05A40:  MOVWF  x50
05A42:  MOVLW  02
05A44:  MOVWF  x51
05A46:  MOVLB  0
05A48:  CALL   20F8
....................             printf(lcd_putc,"Presion Atmosferica "); 
05A4C:  MOVLW  92
05A4E:  MOVWF  FF6
05A50:  MOVLW  05
05A52:  MOVWF  FF7
05A54:  CALL   21F0
....................             lcd_gotoxy(1,3); 
05A58:  MOVLW  01
05A5A:  MOVLB  3
05A5C:  MOVWF  x50
05A5E:  MOVLW  03
05A60:  MOVWF  x51
05A62:  MOVLB  0
05A64:  CALL   20F8
....................             printf(lcd_putc,"     Pr: %2.0f       ",Pr); 
05A68:  MOVLW  A8
05A6A:  MOVWF  FF6
05A6C:  MOVLW  05
05A6E:  MOVWF  FF7
05A70:  MOVLW  09
05A72:  MOVLB  3
05A74:  MOVWF  x42
05A76:  MOVLB  0
05A78:  CALL   4BA4
05A7C:  MOVLW  01
05A7E:  MOVWF  FE9
05A80:  MOVFF  11C,345
05A84:  MOVFF  11B,344
05A88:  MOVFF  11A,343
05A8C:  MOVFF  119,342
05A90:  MOVLB  3
05A92:  CLRF   x46
05A94:  MOVLB  0
05A96:  CALL   4D40
05A9A:  MOVLW  B6
05A9C:  MOVWF  FF6
05A9E:  MOVLW  05
05AA0:  MOVWF  FF7
05AA2:  MOVLW  07
05AA4:  MOVLB  3
05AA6:  MOVWF  x42
05AA8:  MOVLB  0
05AAA:  CALL   4BA4
....................           
....................             if(UP){   
05AAE:  BSF    F92.5
05AB0:  BTFSC  F80.5
05AB2:  BRA    5AF4
....................                delay_ms(200);Pr+=1.0; 
05AB4:  MOVLW  C8
05AB6:  MOVLB  3
05AB8:  MOVWF  x55
05ABA:  MOVLB  0
05ABC:  CALL   0C96
05AC0:  BCF    FD8.1
05AC2:  MOVFF  11C,385
05AC6:  MOVFF  11B,384
05ACA:  MOVFF  11A,383
05ACE:  MOVFF  119,382
05AD2:  MOVLB  3
05AD4:  CLRF   x89
05AD6:  CLRF   x88
05AD8:  CLRF   x87
05ADA:  MOVLW  7F
05ADC:  MOVWF  x86
05ADE:  MOVLB  0
05AE0:  CALL   0F8E
05AE4:  MOVFF  03,11C
05AE8:  MOVFF  02,11B
05AEC:  MOVFF  01,11A
05AF0:  MOVFF  00,119
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
05AF4:  BSF    F96.0
05AF6:  BTFSC  F84.0
05AF8:  BRA    5B3A
....................                delay_ms(200);Pr-=1.0; 
05AFA:  MOVLW  C8
05AFC:  MOVLB  3
05AFE:  MOVWF  x55
05B00:  MOVLB  0
05B02:  CALL   0C96
05B06:  BSF    FD8.1
05B08:  MOVFF  11C,385
05B0C:  MOVFF  11B,384
05B10:  MOVFF  11A,383
05B14:  MOVFF  119,382
05B18:  MOVLB  3
05B1A:  CLRF   x89
05B1C:  CLRF   x88
05B1E:  CLRF   x87
05B20:  MOVLW  7F
05B22:  MOVWF  x86
05B24:  MOVLB  0
05B26:  CALL   0F8E
05B2A:  MOVFF  03,11C
05B2E:  MOVFF  02,11B
05B32:  MOVFF  01,11A
05B36:  MOVFF  00,119
....................             } 
....................          }else if(OpcionMenu==2){ 
05B3A:  BRA    5FC4
05B3C:  MOVLB  3
05B3E:  MOVF   48,W
05B40:  SUBLW  02
05B42:  BTFSS  FD8.2
05B44:  BRA    5CC2
....................             if(Flujo[1].Ajuste>10.0) 
05B46:  CLRF   x81
05B48:  CLRF   x80
05B4A:  MOVLW  20
05B4C:  MOVWF  x7F
05B4E:  MOVLW  82
05B50:  MOVWF  x7E
05B52:  MOVFF  1B2,385
05B56:  MOVFF  1B1,384
05B5A:  MOVFF  1B0,383
05B5E:  MOVFF  1AF,382
05B62:  MOVLB  0
05B64:  CALL   183A
05B68:  BNC   5B7C
....................                Flujo[1].Ajuste=0.1; 
05B6A:  MOVLW  CD
05B6C:  MOVLB  1
05B6E:  MOVWF  xB2
05B70:  MOVLW  CC
05B72:  MOVWF  xB1
05B74:  MOVLW  4C
05B76:  MOVWF  xB0
05B78:  MOVLW  7B
05B7A:  MOVWF  xAF
....................             if(Flujo[1].Ajuste<0.1) 
05B7C:  MOVFF  1B2,381
05B80:  MOVFF  1B1,380
05B84:  MOVFF  1B0,37F
05B88:  MOVFF  1AF,37E
05B8C:  MOVLW  CD
05B8E:  MOVLB  3
05B90:  MOVWF  x85
05B92:  MOVLW  CC
05B94:  MOVWF  x84
05B96:  MOVLW  4C
05B98:  MOVWF  x83
05B9A:  MOVLW  7B
05B9C:  MOVWF  x82
05B9E:  MOVLB  0
05BA0:  CALL   183A
05BA4:  BNC   5BB4
....................                Flujo[1].Ajuste=10.0; 
05BA6:  MOVLB  1
05BA8:  CLRF   xB2
05BAA:  CLRF   xB1
05BAC:  MOVLW  20
05BAE:  MOVWF  xB0
05BB0:  MOVLW  82
05BB2:  MOVWF  xAF
....................            
....................             lcd_gotoxy(1,2); 
05BB4:  MOVLW  01
05BB6:  MOVLB  3
05BB8:  MOVWF  x50
05BBA:  MOVLW  02
05BBC:  MOVWF  x51
05BBE:  MOVLB  0
05BC0:  CALL   20F8
....................             printf(lcd_putc,"Ajuste Sensor Flujo "); 
05BC4:  MOVLW  BE
05BC6:  MOVWF  FF6
05BC8:  MOVLW  05
05BCA:  MOVWF  FF7
05BCC:  CALL   21F0
....................             lcd_gotoxy(1,3); 
05BD0:  MOVLW  01
05BD2:  MOVLB  3
05BD4:  MOVWF  x50
05BD6:  MOVLW  03
05BD8:  MOVWF  x51
05BDA:  MOVLB  0
05BDC:  CALL   20F8
....................             printf(lcd_putc,"   Ajuste: %2.1f     ",Flujo[1].Ajuste); 
05BE0:  MOVLW  D4
05BE2:  MOVWF  FF6
05BE4:  MOVLW  05
05BE6:  MOVWF  FF7
05BE8:  MOVLW  0B
05BEA:  MOVLB  3
05BEC:  MOVWF  x42
05BEE:  MOVLB  0
05BF0:  CALL   4BA4
05BF4:  MOVLW  01
05BF6:  MOVWF  FE9
05BF8:  MOVFF  1B2,345
05BFC:  MOVFF  1B1,344
05C00:  MOVFF  1B0,343
05C04:  MOVFF  1AF,342
05C08:  MOVLB  3
05C0A:  MOVWF  x46
05C0C:  MOVLB  0
05C0E:  CALL   4D40
05C12:  MOVLW  E4
05C14:  MOVWF  FF6
05C16:  MOVLW  05
05C18:  MOVWF  FF7
05C1A:  MOVLW  05
05C1C:  MOVLB  3
05C1E:  MOVWF  x42
05C20:  MOVLB  0
05C22:  CALL   4BA4
....................           
....................             if(UP){   
05C26:  BSF    F92.5
05C28:  BTFSC  F80.5
05C2A:  BRA    5C72
....................                delay_ms(200);Flujo[1].Ajuste+=0.1; 
05C2C:  MOVLW  C8
05C2E:  MOVLB  3
05C30:  MOVWF  x55
05C32:  MOVLB  0
05C34:  CALL   0C96
05C38:  BCF    FD8.1
05C3A:  MOVFF  1B2,385
05C3E:  MOVFF  1B1,384
05C42:  MOVFF  1B0,383
05C46:  MOVFF  1AF,382
05C4A:  MOVLW  CD
05C4C:  MOVLB  3
05C4E:  MOVWF  x89
05C50:  MOVLW  CC
05C52:  MOVWF  x88
05C54:  MOVLW  4C
05C56:  MOVWF  x87
05C58:  MOVLW  7B
05C5A:  MOVWF  x86
05C5C:  MOVLB  0
05C5E:  CALL   0F8E
05C62:  MOVFF  03,1B2
05C66:  MOVFF  02,1B1
05C6A:  MOVFF  01,1B0
05C6E:  MOVFF  00,1AF
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
05C72:  BSF    F96.0
05C74:  BTFSC  F84.0
05C76:  BRA    5CBE
....................                delay_ms(200);Flujo[1].Ajuste-=0.1; 
05C78:  MOVLW  C8
05C7A:  MOVLB  3
05C7C:  MOVWF  x55
05C7E:  MOVLB  0
05C80:  CALL   0C96
05C84:  BSF    FD8.1
05C86:  MOVFF  1B2,385
05C8A:  MOVFF  1B1,384
05C8E:  MOVFF  1B0,383
05C92:  MOVFF  1AF,382
05C96:  MOVLW  CD
05C98:  MOVLB  3
05C9A:  MOVWF  x89
05C9C:  MOVLW  CC
05C9E:  MOVWF  x88
05CA0:  MOVLW  4C
05CA2:  MOVWF  x87
05CA4:  MOVLW  7B
05CA6:  MOVWF  x86
05CA8:  MOVLB  0
05CAA:  CALL   0F8E
05CAE:  MOVFF  03,1B2
05CB2:  MOVFF  02,1B1
05CB6:  MOVFF  01,1B0
05CBA:  MOVFF  00,1AF
....................             } 
....................          }else if(OpcionMenu==3){           
05CBE:  BRA    5FC4
05CC0:  MOVLB  3
05CC2:  MOVF   48,W
05CC4:  SUBLW  03
05CC6:  BTFSS  FD8.2
05CC8:  BRA    5E40
....................             lcd_gotoxy(1,2); 
05CCA:  MOVLW  01
05CCC:  MOVWF  x50
05CCE:  MOVLW  02
05CD0:  MOVWF  x51
05CD2:  MOVLB  0
05CD4:  CALL   20F8
....................             printf(lcd_putc,"Punto Cero Flujo     "); 
05CD8:  MOVLW  EA
05CDA:  MOVWF  FF6
05CDC:  MOVLW  05
05CDE:  MOVWF  FF7
05CE0:  CALL   21F0
....................             lcd_gotoxy(1,3); 
05CE4:  MOVLW  01
05CE6:  MOVLB  3
05CE8:  MOVWF  x50
05CEA:  MOVLW  03
05CEC:  MOVWF  x51
05CEE:  MOVLB  0
05CF0:  CALL   20F8
....................             printf(lcd_putc,"   Cero: %2.0f     ",Flujo[1].zero_actual);     
05CF4:  MOVLW  00
05CF6:  MOVWF  FF6
05CF8:  MOVLW  06
05CFA:  MOVWF  FF7
05CFC:  MOVLW  09
05CFE:  MOVLB  3
05D00:  MOVWF  x42
05D02:  MOVLB  0
05D04:  CALL   4BA4
05D08:  MOVLW  01
05D0A:  MOVWF  FE9
05D0C:  MOVFF  19D,345
05D10:  MOVFF  19C,344
05D14:  MOVFF  19B,343
05D18:  MOVFF  19A,342
05D1C:  MOVLB  3
05D1E:  CLRF   x46
05D20:  MOVLB  0
05D22:  CALL   4D40
05D26:  MOVLW  0E
05D28:  MOVWF  FF6
05D2A:  MOVLW  06
05D2C:  MOVWF  FF7
05D2E:  MOVLW  05
05D30:  MOVLB  3
05D32:  MOVWF  x42
05D34:  MOVLB  0
05D36:  CALL   4BA4
....................           
....................             if(UP){   
05D3A:  BSF    F92.5
05D3C:  BTFSC  F80.5
05D3E:  BRA    5E3C
....................                Flujo[1].zero_actual=sensores(1); 
05D40:  MOVLW  01
05D42:  MOVLB  3
05D44:  MOVWF  x46
05D46:  MOVLB  0
05D48:  CALL   3EE2
05D4C:  MOVFF  03,19D
05D50:  MOVFF  02,19C
05D54:  MOVFF  01,19B
05D58:  MOVFF  00,19A
....................                Flujo[1].adc=sensores(1); 
05D5C:  MOVLW  01
05D5E:  MOVLB  3
05D60:  MOVWF  x46
05D62:  MOVLB  0
05D64:  CALL   3EE2
05D68:  MOVFF  03,381
05D6C:  MOVFF  02,380
05D70:  MOVFF  01,37F
05D74:  MOVFF  00,37E
05D78:  CALL   2386
05D7C:  MOVFF  02,1A3
05D80:  MOVFF  01,1A2
....................        
....................                Temporal1=(int16)Flujo[1].zero_actual; 
05D84:  MOVFF  19D,381
05D88:  MOVFF  19C,380
05D8C:  MOVFF  19B,37F
05D90:  MOVFF  19A,37E
05D94:  CALL   2386
05D98:  MOVFF  02,D9
05D9C:  MOVFF  01,D8
....................                write_eeprom(27,make8(Temporal1,0)); 
05DA0:  MOVFF  D8,33E
05DA4:  CLRF   FAA
05DA6:  MOVLW  1B
05DA8:  MOVWF  FA9
05DAA:  MOVFF  33E,FA8
05DAE:  BCF    FA6.6
05DB0:  BCF    FA6.7
05DB2:  BSF    FA6.2
05DB4:  MOVF   FF2,W
05DB6:  MOVWF  00
05DB8:  BCF    FF2.6
05DBA:  BCF    FF2.7
05DBC:  MOVLB  F
05DBE:  MOVLW  55
05DC0:  MOVWF  FA7
05DC2:  MOVLW  AA
05DC4:  MOVWF  FA7
05DC6:  BSF    FA6.1
05DC8:  BTFSC  FA6.1
05DCA:  BRA    5DC8
05DCC:  BCF    FA6.2
05DCE:  MOVF   00,W
05DD0:  IORWF  FF2,F
....................                delay_ms(20); 
05DD2:  MOVLW  14
05DD4:  MOVLB  3
05DD6:  MOVWF  x55
05DD8:  MOVLB  0
05DDA:  CALL   0C96
....................                write_eeprom(28,make8(Temporal1,1));//Guardar valor de Setpoint en eeprom 
05DDE:  MOVFF  D9,33E
05DE2:  CLRF   FAA
05DE4:  MOVLW  1C
05DE6:  MOVWF  FA9
05DE8:  MOVFF  33E,FA8
05DEC:  BCF    FA6.6
05DEE:  BCF    FA6.7
05DF0:  BSF    FA6.2
05DF2:  MOVF   FF2,W
05DF4:  MOVWF  00
05DF6:  BCF    FF2.6
05DF8:  BCF    FF2.7
05DFA:  MOVLB  F
05DFC:  MOVLW  55
05DFE:  MOVWF  FA7
05E00:  MOVLW  AA
05E02:  MOVWF  FA7
05E04:  BSF    FA6.1
05E06:  BTFSC  FA6.1
05E08:  BRA    5E06
05E0A:  BCF    FA6.2
05E0C:  MOVF   00,W
05E0E:  IORWF  FF2,F
....................                delay_ms(20); 
05E10:  MOVLW  14
05E12:  MOVLB  3
05E14:  MOVWF  x55
05E16:  MOVLB  0
05E18:  CALL   0C96
....................                Buzzer_on;delay_ms(500);Buzzer_off; 
05E1C:  BSF    F8B.0
05E1E:  BCF    F94.0
05E20:  MOVLW  02
05E22:  MOVLB  3
05E24:  MOVWF  x3E
05E26:  MOVLW  FA
05E28:  MOVWF  x55
05E2A:  MOVLB  0
05E2C:  CALL   0C96
05E30:  MOVLB  3
05E32:  DECFSZ x3E,F
05E34:  BRA    5E26
05E36:  BCF    F8B.0
05E38:  BCF    F94.0
05E3A:  MOVLB  0
....................             } 
....................          }else if(OpcionMenu==4){ 
05E3C:  BRA    5FC4
05E3E:  MOVLB  3
05E40:  MOVF   48,W
05E42:  SUBLW  04
05E44:  BTFSS  FD8.2
05E46:  BRA    5FC6
....................             if(HR>100) 
05E48:  CLRF   x81
05E4A:  CLRF   x80
05E4C:  MOVLW  48
05E4E:  MOVWF  x7F
05E50:  MOVLW  85
05E52:  MOVWF  x7E
05E54:  MOVFF  124,385
05E58:  MOVFF  123,384
05E5C:  MOVFF  122,383
05E60:  MOVFF  121,382
05E64:  MOVLB  0
05E66:  CALL   183A
05E6A:  BNC   5E7A
....................                HR=40; 
05E6C:  MOVLB  1
05E6E:  CLRF   x24
05E70:  CLRF   x23
05E72:  MOVLW  20
05E74:  MOVWF  x22
05E76:  MOVLW  84
05E78:  MOVWF  x21
....................             if(HR<40) 
05E7A:  MOVFF  124,381
05E7E:  MOVFF  123,380
05E82:  MOVFF  122,37F
05E86:  MOVFF  121,37E
05E8A:  MOVLB  3
05E8C:  CLRF   x85
05E8E:  CLRF   x84
05E90:  MOVLW  20
05E92:  MOVWF  x83
05E94:  MOVLW  84
05E96:  MOVWF  x82
05E98:  MOVLB  0
05E9A:  CALL   183A
05E9E:  BNC   5EAE
....................                HR=100; 
05EA0:  MOVLB  1
05EA2:  CLRF   x24
05EA4:  CLRF   x23
05EA6:  MOVLW  48
05EA8:  MOVWF  x22
05EAA:  MOVLW  85
05EAC:  MOVWF  x21
....................            
....................             lcd_gotoxy(1,2); 
05EAE:  MOVLW  01
05EB0:  MOVLB  3
05EB2:  MOVWF  x50
05EB4:  MOVLW  02
05EB6:  MOVWF  x51
05EB8:  MOVLB  0
05EBA:  CALL   20F8
....................             printf(lcd_putc,"Humedad Relativa     "); 
05EBE:  MOVLW  14
05EC0:  MOVWF  FF6
05EC2:  MOVLW  06
05EC4:  MOVWF  FF7
05EC6:  CALL   21F0
....................             lcd_gotoxy(1,3); 
05ECA:  MOVLW  01
05ECC:  MOVLB  3
05ECE:  MOVWF  x50
05ED0:  MOVLW  03
05ED2:  MOVWF  x51
05ED4:  MOVLB  0
05ED6:  CALL   20F8
....................             printf(lcd_putc,"     HR: %2.0f %%    ",HR);   
05EDA:  MOVLW  2A
05EDC:  MOVWF  FF6
05EDE:  MOVLW  06
05EE0:  MOVWF  FF7
05EE2:  MOVLW  09
05EE4:  MOVLB  3
05EE6:  MOVWF  x42
05EE8:  MOVLB  0
05EEA:  CALL   4BA4
05EEE:  MOVLW  01
05EF0:  MOVWF  FE9
05EF2:  MOVFF  124,345
05EF6:  MOVFF  123,344
05EFA:  MOVFF  122,343
05EFE:  MOVFF  121,342
05F02:  MOVLB  3
05F04:  CLRF   x46
05F06:  MOVLB  0
05F08:  CALL   4D40
05F0C:  MOVLW  20
05F0E:  MOVLB  3
05F10:  MOVWF  x4F
05F12:  MOVLB  0
05F14:  CALL   2172
05F18:  MOVLW  25
05F1A:  MOVLB  3
05F1C:  MOVWF  x4F
05F1E:  MOVLB  0
05F20:  CALL   2172
05F24:  MOVLW  3B
05F26:  MOVWF  FF6
05F28:  MOVLW  06
05F2A:  MOVWF  FF7
05F2C:  MOVLW  04
05F2E:  MOVLB  3
05F30:  MOVWF  x42
05F32:  MOVLB  0
05F34:  CALL   4BA4
....................           
....................             if(UP){   
05F38:  BSF    F92.5
05F3A:  BTFSC  F80.5
05F3C:  BRA    5F7E
....................                delay_ms(200);HR+=1.0; 
05F3E:  MOVLW  C8
05F40:  MOVLB  3
05F42:  MOVWF  x55
05F44:  MOVLB  0
05F46:  CALL   0C96
05F4A:  BCF    FD8.1
05F4C:  MOVFF  124,385
05F50:  MOVFF  123,384
05F54:  MOVFF  122,383
05F58:  MOVFF  121,382
05F5C:  MOVLB  3
05F5E:  CLRF   x89
05F60:  CLRF   x88
05F62:  CLRF   x87
05F64:  MOVLW  7F
05F66:  MOVWF  x86
05F68:  MOVLB  0
05F6A:  CALL   0F8E
05F6E:  MOVFF  03,124
05F72:  MOVFF  02,123
05F76:  MOVFF  01,122
05F7A:  MOVFF  00,121
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
05F7E:  BSF    F96.0
05F80:  BTFSC  F84.0
05F82:  BRA    5FC4
....................                delay_ms(200);HR-=1.0; 
05F84:  MOVLW  C8
05F86:  MOVLB  3
05F88:  MOVWF  x55
05F8A:  MOVLB  0
05F8C:  CALL   0C96
05F90:  BSF    FD8.1
05F92:  MOVFF  124,385
05F96:  MOVFF  123,384
05F9A:  MOVFF  122,383
05F9E:  MOVFF  121,382
05FA2:  MOVLB  3
05FA4:  CLRF   x89
05FA6:  CLRF   x88
05FA8:  CLRF   x87
05FAA:  MOVLW  7F
05FAC:  MOVWF  x86
05FAE:  MOVLB  0
05FB0:  CALL   0F8E
05FB4:  MOVFF  03,124
05FB8:  MOVFF  02,123
05FBC:  MOVFF  01,122
05FC0:  MOVFF  00,121
05FC4:  MOVLB  3
....................             } 
....................          } 
....................       } 
05FC6:  MOVLB  0
05FC8:  GOTO   55DC
....................    } 
....................     
....................    if(UP && RIGHT){ 
05FCC:  BSF    F92.5
05FCE:  BTFSC  F80.5
05FD0:  BRA    61F4
05FD2:  BSF    F96.1
05FD4:  BTFSC  F84.1
05FD6:  BRA    61F4
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
05FD8:  MOVLW  01
05FDA:  MOVLB  3
05FDC:  MOVWF  x50
05FDE:  MOVWF  x51
05FE0:  MOVLB  0
05FE2:  CALL   20F8
....................          printf(lcd_putc,"  Tiempo de Trabajo  "); 
05FE6:  MOVLW  40
05FE8:  MOVWF  FF6
05FEA:  MOVLW  06
05FEC:  MOVWF  FF7
05FEE:  CALL   21F0
....................          lcd_gotoxy(1,2); 
05FF2:  MOVLW  01
05FF4:  MOVLB  3
05FF6:  MOVWF  x50
05FF8:  MOVLW  02
05FFA:  MOVWF  x51
05FFC:  MOVLB  0
05FFE:  CALL   20F8
....................          printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
06002:  MOVLW  56
06004:  MOVWF  FF6
06006:  MOVLW  06
06008:  MOVWF  FF7
0600A:  MOVLW  0B
0600C:  MOVLB  3
0600E:  MOVWF  x42
06010:  MOVLB  0
06012:  CALL   4BA4
06016:  MOVLW  08
06018:  MOVWF  FE9
0601A:  MOVFF  5C,33F
0601E:  MOVFF  5B,33E
06022:  CALL   4EF4
06026:  MOVLW  20
06028:  MOVLB  3
0602A:  MOVWF  x4F
0602C:  MOVLB  0
0602E:  CALL   2172
06032:  MOVLW  20
06034:  MOVLB  3
06036:  MOVWF  x4F
06038:  MOVLB  0
0603A:  CALL   2172
0603E:  MOVLW  20
06040:  MOVLB  3
06042:  MOVWF  x4F
06044:  MOVLB  0
06046:  CALL   2172
....................          lcd_gotoxy(1,4); 
0604A:  MOVLW  01
0604C:  MOVLB  3
0604E:  MOVWF  x50
06050:  MOVLW  04
06052:  MOVWF  x51
06054:  MOVLB  0
06056:  CALL   20F8
....................          printf(lcd_putc," RESET= Oprima < "); 
0605A:  MOVLW  6A
0605C:  MOVWF  FF6
0605E:  MOVLW  06
06060:  MOVWF  FF7
06062:  CALL   21F0
....................           
....................          if(IZQU){ 
06066:  BSF    F96.2
06068:  BTFSC  F84.2
0606A:  BRA    61F2
....................          delay_ms(100); 
0606C:  MOVLW  64
0606E:  MOVLB  3
06070:  MOVWF  x55
06072:  MOVLB  0
06074:  CALL   0C96
....................             if(IZQU){ 
06078:  BSF    F96.2
0607A:  BTFSC  F84.2
0607C:  BRA    61F2
....................                write_eeprom(20,0); 
0607E:  CLRF   FAA
06080:  MOVLW  14
06082:  MOVWF  FA9
06084:  CLRF   FA8
06086:  BCF    FA6.6
06088:  BCF    FA6.7
0608A:  BSF    FA6.2
0608C:  MOVF   FF2,W
0608E:  MOVWF  00
06090:  BCF    FF2.6
06092:  BCF    FF2.7
06094:  MOVLB  F
06096:  MOVLW  55
06098:  MOVWF  FA7
0609A:  MOVLW  AA
0609C:  MOVWF  FA7
0609E:  BSF    FA6.1
060A0:  BTFSC  FA6.1
060A2:  BRA    60A0
060A4:  BCF    FA6.2
060A6:  MOVF   00,W
060A8:  IORWF  FF2,F
....................                delay_ms(20); 
060AA:  MOVLW  14
060AC:  MOVLB  3
060AE:  MOVWF  x55
060B0:  MOVLB  0
060B2:  CALL   0C96
....................                write_eeprom(21,0); 
060B6:  CLRF   FAA
060B8:  MOVLW  15
060BA:  MOVWF  FA9
060BC:  CLRF   FA8
060BE:  BCF    FA6.6
060C0:  BCF    FA6.7
060C2:  BSF    FA6.2
060C4:  MOVF   FF2,W
060C6:  MOVWF  00
060C8:  BCF    FF2.6
060CA:  BCF    FF2.7
060CC:  MOVLB  F
060CE:  MOVLW  55
060D0:  MOVWF  FA7
060D2:  MOVLW  AA
060D4:  MOVWF  FA7
060D6:  BSF    FA6.1
060D8:  BTFSC  FA6.1
060DA:  BRA    60D8
060DC:  BCF    FA6.2
060DE:  MOVF   00,W
060E0:  IORWF  FF2,F
....................                delay_ms(20); 
060E2:  MOVLW  14
060E4:  MOVLB  3
060E6:  MOVWF  x55
060E8:  MOVLB  0
060EA:  CALL   0C96
....................                write_eeprom(18,0); 
060EE:  CLRF   FAA
060F0:  MOVLW  12
060F2:  MOVWF  FA9
060F4:  CLRF   FA8
060F6:  BCF    FA6.6
060F8:  BCF    FA6.7
060FA:  BSF    FA6.2
060FC:  MOVF   FF2,W
060FE:  MOVWF  00
06100:  BCF    FF2.6
06102:  BCF    FF2.7
06104:  MOVLB  F
06106:  MOVLW  55
06108:  MOVWF  FA7
0610A:  MOVLW  AA
0610C:  MOVWF  FA7
0610E:  BSF    FA6.1
06110:  BTFSC  FA6.1
06112:  BRA    6110
06114:  BCF    FA6.2
06116:  MOVF   00,W
06118:  IORWF  FF2,F
....................                delay_ms(20); 
0611A:  MOVLW  14
0611C:  MOVLB  3
0611E:  MOVWF  x55
06120:  MOVLB  0
06122:  CALL   0C96
....................                write_eeprom(19,0); 
06126:  CLRF   FAA
06128:  MOVLW  13
0612A:  MOVWF  FA9
0612C:  CLRF   FA8
0612E:  BCF    FA6.6
06130:  BCF    FA6.7
06132:  BSF    FA6.2
06134:  MOVF   FF2,W
06136:  MOVWF  00
06138:  BCF    FF2.6
0613A:  BCF    FF2.7
0613C:  MOVLB  F
0613E:  MOVLW  55
06140:  MOVWF  FA7
06142:  MOVLW  AA
06144:  MOVWF  FA7
06146:  BSF    FA6.1
06148:  BTFSC  FA6.1
0614A:  BRA    6148
0614C:  BCF    FA6.2
0614E:  MOVF   00,W
06150:  IORWF  FF2,F
....................                delay_ms(20); 
06152:  MOVLW  14
06154:  MOVLB  3
06156:  MOVWF  x55
06158:  MOVLB  0
0615A:  CALL   0C96
....................                lcd_gotoxy(1,1); 
0615E:  MOVLW  01
06160:  MOVLB  3
06162:  MOVWF  x50
06164:  MOVWF  x51
06166:  MOVLB  0
06168:  CALL   20F8
....................                printf(lcd_putc,"                    "); 
0616C:  MOVLW  7C
0616E:  MOVWF  FF6
06170:  MOVLW  06
06172:  MOVWF  FF7
06174:  CALL   21F0
....................                lcd_gotoxy(1,2); 
06178:  MOVLW  01
0617A:  MOVLB  3
0617C:  MOVWF  x50
0617E:  MOVLW  02
06180:  MOVWF  x51
06182:  MOVLB  0
06184:  CALL   20F8
....................                printf(lcd_putc,"  Borrando  Tiempo  "); 
06188:  MOVLW  92
0618A:  MOVWF  FF6
0618C:  MOVLW  06
0618E:  MOVWF  FF7
06190:  CALL   21F0
....................                lcd_gotoxy(1,3); 
06194:  MOVLW  01
06196:  MOVLB  3
06198:  MOVWF  x50
0619A:  MOVLW  03
0619C:  MOVWF  x51
0619E:  MOVLB  0
061A0:  CALL   20F8
....................                printf(lcd_putc,"    de Trabajo      "); 
061A4:  MOVLW  A8
061A6:  MOVWF  FF6
061A8:  MOVLW  06
061AA:  MOVWF  FF7
061AC:  CALL   21F0
....................                lcd_gotoxy(1,4); 
061B0:  MOVLW  01
061B2:  MOVLB  3
061B4:  MOVWF  x50
061B6:  MOVLW  04
061B8:  MOVWF  x51
061BA:  MOVLB  0
061BC:  CALL   20F8
....................                printf(lcd_putc,"                    ");  
061C0:  MOVLW  BE
061C2:  MOVWF  FF6
061C4:  MOVLW  06
061C6:  MOVWF  FF7
061C8:  CALL   21F0
....................                delay_ms(1000); 
061CC:  MOVLW  04
061CE:  MOVLB  3
061D0:  MOVWF  x3E
061D2:  MOVLW  FA
061D4:  MOVWF  x55
061D6:  MOVLB  0
061D8:  CALL   0C96
061DC:  MOVLB  3
061DE:  DECFSZ x3E,F
061E0:  BRA    61D2
....................                printf(lcd_putc,"\f"); 
061E2:  MOVLW  0C
061E4:  MOVWF  x4F
061E6:  MOVLB  0
061E8:  CALL   2172
....................                lcd_init(); 
061EC:  CALL   0D38
....................                reset_cpu(); 
061F0:  RESET
....................             } 
....................          } 
....................       } 
061F2:  BRA    5FD8
....................    } 
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
061F4:  GOTO   4FB2
....................    if(VelMotor==20){ 
061F8:  MOVF   xEE,W
061FA:  SUBLW  14
061FC:  BNZ   620A
....................       Motor_on; 
061FE:  BSF    F8B.2
06200:  BCF    F94.2
....................       Motor2_on;  
06202:  BSF    F8B.1
06204:  BCF    F94.1
....................       set_timer0(0); 
06206:  CLRF   FD7
06208:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
0620A:  MOVF   xEE,F
0620C:  BNZ   621A
....................       Motor_off; 
0620E:  BCF    F8B.2
06210:  BCF    F94.2
....................       Motor2_off;  
06212:  BCF    F8B.1
06214:  BCF    F94.1
....................       set_timer0(0); 
06216:  CLRF   FD7
06218:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
0621A:  MOVF   2B,F
0621C:  BTFSS  FD8.2
0621E:  BRA    66CA
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
06220:  MOVLW  01
06222:  MOVLB  3
06224:  MOVWF  x50
06226:  MOVWF  x51
06228:  MOVLB  0
0622A:  CALL   20F8
....................          printf(lcd_putc,"     Ingrese        "); 
0622E:  MOVLW  D4
06230:  MOVWF  FF6
06232:  MOVLW  06
06234:  MOVWF  FF7
06236:  CALL   21F0
....................          lcd_gotoxy(1,2); 
0623A:  MOVLW  01
0623C:  MOVLB  3
0623E:  MOVWF  x50
06240:  MOVLW  02
06242:  MOVWF  x51
06244:  MOVLB  0
06246:  CALL   20F8
....................          printf(lcd_putc,"    Contraseña      "); 
0624A:  MOVLW  EA
0624C:  MOVWF  FF6
0624E:  MOVLW  06
06250:  MOVWF  FF7
06252:  CALL   21F0
....................          lcd_gotoxy(1,3); 
06256:  MOVLW  01
06258:  MOVLB  3
0625A:  MOVWF  x50
0625C:  MOVLW  03
0625E:  MOVWF  x51
06260:  MOVLB  0
06262:  CALL   20F8
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
06266:  MOVLW  00
06268:  MOVWF  FF6
0626A:  MOVLW  07
0626C:  MOVWF  FF7
0626E:  MOVLW  0A
06270:  MOVLB  3
06272:  MOVWF  x42
06274:  MOVLB  0
06276:  CALL   4BA4
0627A:  MOVFF  4C,33E
0627E:  MOVLW  1F
06280:  MOVLB  3
06282:  MOVWF  x3F
06284:  MOVLB  0
06286:  CALL   517A
0628A:  MOVFF  4D,33E
0628E:  MOVLW  1F
06290:  MOVLB  3
06292:  MOVWF  x3F
06294:  MOVLB  0
06296:  CALL   517A
0629A:  MOVFF  4E,33E
0629E:  MOVLW  1F
062A0:  MOVLB  3
062A2:  MOVWF  x3F
062A4:  MOVLB  0
062A6:  CALL   517A
062AA:  MOVFF  4F,33E
062AE:  MOVLW  1F
062B0:  MOVLB  3
062B2:  MOVWF  x3F
062B4:  MOVLB  0
062B6:  CALL   517A
062BA:  MOVLW  20
062BC:  MOVLB  3
062BE:  MOVWF  x4F
062C0:  MOVLB  0
062C2:  CALL   2172
062C6:  MOVLW  20
062C8:  MOVLB  3
062CA:  MOVWF  x4F
062CC:  MOVLB  0
062CE:  CALL   2172
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
062D2:  MOVFF  2E,350
062D6:  MOVLW  04
062D8:  MOVLB  3
062DA:  MOVWF  x51
062DC:  MOVLB  0
062DE:  CALL   20F8
....................          lcd_putc(t[2]); 
062E2:  MOVFF  4B,34F
062E6:  CALL   2172
....................           
....................          if(unidad>11&&unidad<14){ 
062EA:  MOVF   2E,W
062EC:  SUBLW  0B
062EE:  BC    6312
062F0:  MOVF   2E,W
062F2:  SUBLW  0D
062F4:  BNC   6312
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
062F6:  MOVLW  01
062F8:  SUBWF  2E,W
062FA:  MOVLB  3
062FC:  MOVWF  x3E
062FE:  MOVWF  x50
06300:  MOVLW  04
06302:  MOVWF  x51
06304:  MOVLB  0
06306:  CALL   20F8
....................             lcd_putc(t[1]); 
0630A:  MOVFF  4A,34F
0630E:  CALL   2172
....................          } 
....................           
....................          Cambio=OFF; 
06312:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
06314:  BSF    F92.5
06316:  BTFSC  F80.5
06318:  BRA    6354
....................          delay_ms(20); 
0631A:  MOVLW  14
0631C:  MOVLB  3
0631E:  MOVWF  x55
06320:  MOVLB  0
06322:  CALL   0C96
....................          if(UP){ 
06326:  BSF    F92.5
06328:  BTFSC  F80.5
0632A:  BRA    6352
....................             if(Flanco == 0) { 
0632C:  BTFSC  29.3
0632E:  BRA    6352
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
06330:  MOVLW  0B
06332:  SUBWF  2E,W
06334:  CLRF   03
06336:  ADDLW  4C
06338:  MOVWF  FE9
0633A:  MOVLW  00
0633C:  ADDWFC 03,W
0633E:  MOVWF  FEA
06340:  INCF   FEF,F
06342:  BSF    29.3
06344:  MOVLW  1E
06346:  MOVLB  3
06348:  MOVWF  x55
0634A:  MOVLB  0
0634C:  CALL   0C96
06350:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06352:  BRA    6356
....................          Flanco = 0; 
06354:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
06356:  BSF    F96.0
06358:  BTFSC  F84.0
0635A:  BRA    6396
....................          delay_ms(20); 
0635C:  MOVLW  14
0635E:  MOVLB  3
06360:  MOVWF  x55
06362:  MOVLB  0
06364:  CALL   0C96
....................          if(DOWN){ 
06368:  BSF    F96.0
0636A:  BTFSC  F84.0
0636C:  BRA    6394
....................             if(Flanco2 == 0) { 
0636E:  BTFSC  29.5
06370:  BRA    6394
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
06372:  MOVLW  0B
06374:  SUBWF  2E,W
06376:  CLRF   03
06378:  ADDLW  4C
0637A:  MOVWF  FE9
0637C:  MOVLW  00
0637E:  ADDWFC 03,W
06380:  MOVWF  FEA
06382:  DECF   FEF,F
06384:  BSF    29.5
06386:  MOVLW  1E
06388:  MOVLB  3
0638A:  MOVWF  x55
0638C:  MOVLB  0
0638E:  CALL   0C96
06392:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06394:  BRA    6398
....................          Flanco2 = 0; 
06396:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
06398:  BSF    F96.1
0639A:  BTFSC  F84.1
0639C:  BRA    63D4
....................          delay_ms(20); 
0639E:  MOVLW  14
063A0:  MOVLB  3
063A2:  MOVWF  x55
063A4:  MOVLB  0
063A6:  CALL   0C96
....................          if(RIGHT){ 
063AA:  BSF    F96.1
063AC:  BTFSC  F84.1
063AE:  BRA    63D2
....................             if(Flanco1 == 0) { 
063B0:  BTFSC  29.4
063B2:  BRA    63D2
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
063B4:  BSF    29.4
063B6:  INCF   2E,F
063B8:  MOVLW  1E
063BA:  MOVLB  3
063BC:  MOVWF  x55
063BE:  MOVLB  0
063C0:  CALL   0C96
063C4:  MOVLW  0C
063C6:  MOVLB  3
063C8:  MOVWF  x4F
063CA:  MOVLB  0
063CC:  CALL   2172
063D0:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
063D2:  BRA    63D6
....................          Flanco1 = 0; 
063D4:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
063D6:  BSF    F96.2
063D8:  BTFSC  F84.2
063DA:  BRA    6412
....................          delay_ms(150); 
063DC:  MOVLW  96
063DE:  MOVLB  3
063E0:  MOVWF  x55
063E2:  MOVLB  0
063E4:  CALL   0C96
....................          if(IZQU){ 
063E8:  BSF    F96.2
063EA:  BTFSC  F84.2
063EC:  BRA    6410
....................             if(Flanco3 == 0){ 
063EE:  BTFSC  29.6
063F0:  BRA    6410
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
063F2:  BSF    29.6
063F4:  DECF   2E,F
063F6:  MOVLW  1E
063F8:  MOVLB  3
063FA:  MOVWF  x55
063FC:  MOVLB  0
063FE:  CALL   0C96
06402:  MOVLW  0C
06404:  MOVLB  3
06406:  MOVWF  x4F
06408:  MOVLB  0
0640A:  CALL   2172
0640E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06410:  BRA    6414
....................         Flanco3 = 0; 
06412:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
06414:  MOVLW  0B
06416:  SUBWF  2E,W
06418:  CLRF   03
0641A:  ADDLW  4C
0641C:  MOVWF  FE9
0641E:  MOVLW  00
06420:  ADDWFC 03,W
06422:  MOVWF  FEA
06424:  BTFSC  FEF.7
06426:  BRA    642A
06428:  BRA    643E
....................          clave[unidad-11]=9; 
0642A:  MOVLW  0B
0642C:  SUBWF  2E,W
0642E:  CLRF   03
06430:  ADDLW  4C
06432:  MOVWF  FE9
06434:  MOVLW  00
06436:  ADDWFC 03,W
06438:  MOVWF  FEA
0643A:  MOVLW  09
0643C:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
0643E:  MOVLW  0B
06440:  SUBWF  2E,W
06442:  CLRF   03
06444:  ADDLW  4C
06446:  MOVWF  FE9
06448:  MOVLW  00
0644A:  ADDWFC 03,W
0644C:  MOVWF  FEA
0644E:  BTFSC  FEF.7
06450:  BRA    646A
06452:  MOVF   FEF,W
06454:  SUBLW  09
06456:  BC    646A
....................          clave[unidad-11]=0; 
06458:  MOVLW  0B
0645A:  SUBWF  2E,W
0645C:  CLRF   03
0645E:  ADDLW  4C
06460:  MOVWF  FE9
06462:  MOVLW  00
06464:  ADDWFC 03,W
06466:  MOVWF  FEA
06468:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
0646A:  MOVF   2E,W
0646C:  SUBLW  0A
0646E:  BNC   6474
....................          unidad=11; 
06470:  MOVLW  0B
06472:  MOVWF  2E
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
06474:  MOVF   2E,W
06476:  SUBLW  0E
06478:  BTFSC  FD8.0
0647A:  BRA    66CA
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
0647C:  MOVF   4C,W
0647E:  SUBLW  03
06480:  BTFSS  FD8.2
06482:  BRA    6578
06484:  MOVF   4D,W
06486:  SUBLW  08
06488:  BTFSS  FD8.2
0648A:  BRA    6578
0648C:  MOVF   4E,W
0648E:  SUBLW  09
06490:  BNZ   6578
06492:  MOVF   4F,W
06494:  SUBLW  02
06496:  BNZ   6578
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
06498:  CLRF   FAA
0649A:  CLRF   FA9
0649C:  CLRF   FA8
0649E:  BCF    FA6.6
064A0:  BCF    FA6.7
064A2:  BSF    FA6.2
064A4:  MOVF   FF2,W
064A6:  MOVWF  00
064A8:  BCF    FF2.6
064AA:  BCF    FF2.7
064AC:  MOVLB  F
064AE:  MOVLW  55
064B0:  MOVWF  FA7
064B2:  MOVLW  AA
064B4:  MOVWF  FA7
064B6:  BSF    FA6.1
064B8:  BTFSC  FA6.1
064BA:  BRA    64B8
064BC:  BCF    FA6.2
064BE:  MOVF   00,W
064C0:  IORWF  FF2,F
064C2:  MOVLW  14
064C4:  MOVLB  3
064C6:  MOVWF  x55
064C8:  MOVLB  0
064CA:  CALL   0C96
064CE:  CLRF   FAA
064D0:  MOVLW  01
064D2:  MOVWF  FA9
064D4:  CLRF   FA8
064D6:  BCF    FA6.6
064D8:  BCF    FA6.7
064DA:  BSF    FA6.2
064DC:  MOVF   FF2,W
064DE:  MOVWF  00
064E0:  BCF    FF2.6
064E2:  BCF    FF2.7
064E4:  MOVLB  F
064E6:  MOVLW  55
064E8:  MOVWF  FA7
064EA:  MOVLW  AA
064EC:  MOVWF  FA7
064EE:  BSF    FA6.1
064F0:  BTFSC  FA6.1
064F2:  BRA    64F0
064F4:  BCF    FA6.2
064F6:  MOVF   00,W
064F8:  IORWF  FF2,F
064FA:  MOVLW  14
064FC:  MOVLB  3
064FE:  MOVWF  x55
06500:  MOVLB  0
06502:  CALL   0C96
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
06506:  CLRF   FAA
06508:  MOVLW  02
0650A:  MOVWF  FA9
0650C:  CLRF   FA8
0650E:  BCF    FA6.6
06510:  BCF    FA6.7
06512:  BSF    FA6.2
06514:  MOVF   FF2,W
06516:  MOVWF  00
06518:  BCF    FF2.6
0651A:  BCF    FF2.7
0651C:  MOVLB  F
0651E:  MOVLW  55
06520:  MOVWF  FA7
06522:  MOVLW  AA
06524:  MOVWF  FA7
06526:  BSF    FA6.1
06528:  BTFSC  FA6.1
0652A:  BRA    6528
0652C:  BCF    FA6.2
0652E:  MOVF   00,W
06530:  IORWF  FF2,F
06532:  MOVLW  14
06534:  MOVLB  3
06536:  MOVWF  x55
06538:  MOVLB  0
0653A:  CALL   0C96
0653E:  CLRF   FAA
06540:  MOVLW  03
06542:  MOVWF  FA9
06544:  CLRF   FA8
06546:  BCF    FA6.6
06548:  BCF    FA6.7
0654A:  BSF    FA6.2
0654C:  MOVF   FF2,W
0654E:  MOVWF  00
06550:  BCF    FF2.6
06552:  BCF    FF2.7
06554:  MOVLB  F
06556:  MOVLW  55
06558:  MOVWF  FA7
0655A:  MOVLW  AA
0655C:  MOVWF  FA7
0655E:  BSF    FA6.1
06560:  BTFSC  FA6.1
06562:  BRA    6560
06564:  BCF    FA6.2
06566:  MOVF   00,W
06568:  IORWF  FF2,F
0656A:  MOVLW  14
0656C:  MOVLB  3
0656E:  MOVWF  x55
06570:  MOVLB  0
06572:  CALL   0C96
....................              reset_cpu(); 
06576:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
06578:  MOVF   50,W
0657A:  SUBWF  4C,W
0657C:  BNZ   6638
0657E:  MOVF   51,W
06580:  SUBWF  4D,W
06582:  BNZ   6638
06584:  MOVF   52,W
06586:  SUBWF  4E,W
06588:  BNZ   6638
0658A:  MOVF   53,W
0658C:  SUBWF  4F,W
0658E:  BNZ   6638
....................             lcd_gotoxy(1,1); 
06590:  MOVLW  01
06592:  MOVLB  3
06594:  MOVWF  x50
06596:  MOVWF  x51
06598:  MOVLB  0
0659A:  CALL   20F8
....................             printf(lcd_putc,"                   "); 
0659E:  MOVLW  16
065A0:  MOVWF  FF6
065A2:  MOVLW  07
065A4:  MOVWF  FF7
065A6:  CALL   21F0
....................             lcd_gotoxy(1,2); 
065AA:  MOVLW  01
065AC:  MOVLB  3
065AE:  MOVWF  x50
065B0:  MOVLW  02
065B2:  MOVWF  x51
065B4:  MOVLB  0
065B6:  CALL   20F8
....................             printf(lcd_putc,"     Contraseña    "); 
065BA:  MOVLW  2A
065BC:  MOVWF  FF6
065BE:  MOVLW  07
065C0:  MOVWF  FF7
065C2:  CALL   21F0
....................             lcd_gotoxy(1,3); 
065C6:  MOVLW  01
065C8:  MOVLB  3
065CA:  MOVWF  x50
065CC:  MOVLW  03
065CE:  MOVWF  x51
065D0:  MOVLB  0
065D2:  CALL   20F8
....................             printf(lcd_putc,"      Correcta     "); 
065D6:  MOVLW  3E
065D8:  MOVWF  FF6
065DA:  MOVLW  07
065DC:  MOVWF  FF7
065DE:  CALL   21F0
....................             lcd_gotoxy(1,4); 
065E2:  MOVLW  01
065E4:  MOVLB  3
065E6:  MOVWF  x50
065E8:  MOVLW  04
065EA:  MOVWF  x51
065EC:  MOVLB  0
065EE:  CALL   20F8
....................             printf(lcd_putc,"                   "); 
065F2:  MOVLW  52
065F4:  MOVWF  FF6
065F6:  MOVLW  07
065F8:  MOVWF  FF7
065FA:  CALL   21F0
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
065FE:  MOVLW  04
06600:  MOVLB  3
06602:  MOVWF  x3E
06604:  MOVLW  FA
06606:  MOVWF  x55
06608:  MOVLB  0
0660A:  CALL   0C96
0660E:  MOVLB  3
06610:  DECFSZ x3E,F
06612:  BRA    6604
06614:  MOVLW  32
06616:  MOVWF  2B
06618:  MOVLW  0B
0661A:  MOVWF  2E
0661C:  MOVLW  0C
0661E:  MOVWF  x4F
06620:  MOVLB  0
06622:  CALL   2172
06626:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON;calculaDensidad(); 
06628:  CLRF   4C
0662A:  CLRF   4D
0662C:  CLRF   4E
0662E:  CLRF   4F
06630:  BSF    2A.7
06632:  CALL   350C
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
06636:  BRA    66CA
....................             lcd_gotoxy(1,1); 
06638:  MOVLW  01
0663A:  MOVLB  3
0663C:  MOVWF  x50
0663E:  MOVWF  x51
06640:  MOVLB  0
06642:  CALL   20F8
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
06646:  MOVLW  01
06648:  MOVLB  3
0664A:  MOVWF  x50
0664C:  MOVLW  02
0664E:  MOVWF  x51
06650:  MOVLB  0
06652:  CALL   20F8
....................             printf(lcd_putc,"     Contraseña    "); 
06656:  MOVLW  66
06658:  MOVWF  FF6
0665A:  MOVLW  07
0665C:  MOVWF  FF7
0665E:  CALL   21F0
....................             lcd_gotoxy(1,3); 
06662:  MOVLW  01
06664:  MOVLB  3
06666:  MOVWF  x50
06668:  MOVLW  03
0666A:  MOVWF  x51
0666C:  MOVLB  0
0666E:  CALL   20F8
....................             printf(lcd_putc,"     Incorrecta    "); 
06672:  MOVLW  7A
06674:  MOVWF  FF6
06676:  MOVLW  07
06678:  MOVWF  FF7
0667A:  CALL   21F0
....................             lcd_gotoxy(1,4); 
0667E:  MOVLW  01
06680:  MOVLB  3
06682:  MOVWF  x50
06684:  MOVLW  04
06686:  MOVWF  x51
06688:  MOVLB  0
0668A:  CALL   20F8
....................             printf(lcd_putc,"                   "); 
0668E:  MOVLW  8E
06690:  MOVWF  FF6
06692:  MOVLW  07
06694:  MOVWF  FF7
06696:  CALL   21F0
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
0669A:  MOVLW  04
0669C:  MOVLB  3
0669E:  MOVWF  x3E
066A0:  MOVLW  FA
066A2:  MOVWF  x55
066A4:  MOVLB  0
066A6:  CALL   0C96
066AA:  MOVLB  3
066AC:  DECFSZ x3E,F
066AE:  BRA    66A0
066B0:  MOVLW  0B
066B2:  MOVWF  2E
066B4:  MOVLW  0C
066B6:  MOVWF  x4F
066B8:  MOVLB  0
066BA:  CALL   2172
066BE:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
066C0:  CLRF   4C
066C2:  CLRF   4D
066C4:  CLRF   4E
066C6:  CLRF   4F
066C8:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
066CA:  DECFSZ 2B,W
066CC:  BRA    6958
....................       EliminaRuido(); 
066CE:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
066D2:  MOVLW  01
066D4:  MOVLB  3
066D6:  MOVWF  x50
066D8:  MOVWF  x51
066DA:  MOVLB  0
066DC:  CALL   20F8
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
066E0:  MOVLW  A2
066E2:  MOVWF  FF6
066E4:  MOVLW  07
066E6:  MOVWF  FF7
066E8:  CALL   21F0
....................          mensajes(1+paso,2); 
066EC:  MOVLW  01
066EE:  ADDWF  47,W
066F0:  MOVLB  3
066F2:  MOVWF  x3E
066F4:  MOVWF  x3F
066F6:  MOVLW  02
066F8:  MOVWF  x40
066FA:  MOVLB  0
066FC:  CALL   5260
....................          mensajes(2+paso,3); 
06700:  MOVLW  02
06702:  ADDWF  47,W
06704:  MOVLB  3
06706:  MOVWF  x3E
06708:  MOVWF  x3F
0670A:  MOVLW  03
0670C:  MOVWF  x40
0670E:  MOVLB  0
06710:  CALL   5260
....................          mensajes(3+paso,4); 
06714:  MOVLW  03
06716:  ADDWF  47,W
06718:  MOVLB  3
0671A:  MOVWF  x3E
0671C:  MOVWF  x3F
0671E:  MOVLW  04
06720:  MOVWF  x40
06722:  MOVLB  0
06724:  CALL   5260
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
06728:  MOVLW  01
0672A:  MOVLB  3
0672C:  MOVWF  x50
0672E:  MOVFF  2F,351
06732:  MOVLB  0
06734:  CALL   20F8
....................         lcd_putc(t[0]); 
06738:  MOVFF  49,34F
0673C:  CALL   2172
....................  
....................         if(Flecha==2) 
06740:  MOVF   2F,W
06742:  SUBLW  02
06744:  BNZ   6776
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
06746:  MOVLW  01
06748:  MOVLB  3
0674A:  MOVWF  x50
0674C:  MOVLW  04
0674E:  MOVWF  x51
06750:  MOVLB  0
06752:  CALL   20F8
....................             lcd_putc(t[1]); 
06756:  MOVFF  4A,34F
0675A:  CALL   2172
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
0675E:  MOVLW  01
06760:  MOVLB  3
06762:  MOVWF  x50
06764:  MOVLW  03
06766:  MOVWF  x51
06768:  MOVLB  0
0676A:  CALL   20F8
....................             lcd_putc(t[1]); 
0676E:  MOVFF  4A,34F
06772:  CALL   2172
....................           } 
....................          
....................         if(Flecha==4) 
06776:  MOVF   2F,W
06778:  SUBLW  04
0677A:  BNZ   67AC
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
0677C:  MOVLW  01
0677E:  MOVLB  3
06780:  MOVWF  x50
06782:  MOVLW  02
06784:  MOVWF  x51
06786:  MOVLB  0
06788:  CALL   20F8
....................             lcd_putc(t[1]); 
0678C:  MOVFF  4A,34F
06790:  CALL   2172
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
06794:  MOVLW  01
06796:  MOVLB  3
06798:  MOVWF  x50
0679A:  MOVLW  03
0679C:  MOVWF  x51
0679E:  MOVLB  0
067A0:  CALL   20F8
....................             lcd_putc(t[1]); 
067A4:  MOVFF  4A,34F
067A8:  CALL   2172
....................           } 
....................          
....................         if(Flecha==3) 
067AC:  MOVF   2F,W
067AE:  SUBLW  03
067B0:  BNZ   67E2
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
067B2:  MOVLW  01
067B4:  MOVLB  3
067B6:  MOVWF  x50
067B8:  MOVLW  04
067BA:  MOVWF  x51
067BC:  MOVLB  0
067BE:  CALL   20F8
....................             lcd_putc(t[1]); 
067C2:  MOVFF  4A,34F
067C6:  CALL   2172
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
067CA:  MOVLW  01
067CC:  MOVLB  3
067CE:  MOVWF  x50
067D0:  MOVLW  02
067D2:  MOVWF  x51
067D4:  MOVLB  0
067D6:  CALL   20F8
....................             lcd_putc(t[1]); 
067DA:  MOVFF  4A,34F
067DE:  CALL   2172
....................           } 
....................          Cambio=OFF; 
067E2:  BCF    2A.7
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
067E4:  BSF    F92.5
067E6:  BTFSC  F80.5
067E8:  BRA    681C
....................          delay_ms(20); 
067EA:  MOVLW  14
067EC:  MOVLB  3
067EE:  MOVWF  x55
067F0:  MOVLB  0
067F2:  CALL   0C96
....................          if(UP){ 
067F6:  BSF    F92.5
067F8:  BTFSC  F80.5
067FA:  BRA    681A
....................             if(Flanco == 0){ 
067FC:  BTFSC  29.3
067FE:  BRA    681A
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
06800:  DECF   31,F
06802:  DECF   2F,F
06804:  MOVLW  01
06806:  ADDWF  2F,W
06808:  MOVWF  30
0680A:  BSF    29.3
0680C:  MOVLW  1E
0680E:  MOVLB  3
06810:  MOVWF  x55
06812:  MOVLB  0
06814:  CALL   0C96
06818:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
0681A:  BRA    681E
....................          Flanco = 0; 
0681C:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
0681E:  BSF    F96.0
06820:  BTFSC  F84.0
06822:  BRA    6856
....................          delay_ms(20); 
06824:  MOVLW  14
06826:  MOVLB  3
06828:  MOVWF  x55
0682A:  MOVLB  0
0682C:  CALL   0C96
....................          if(DOWN){ 
06830:  BSF    F96.0
06832:  BTFSC  F84.0
06834:  BRA    6854
....................             if(Flanco2 == 0){ 
06836:  BTFSC  29.5
06838:  BRA    6854
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
0683A:  INCF   31,F
0683C:  INCF   2F,F
0683E:  MOVLW  01
06840:  SUBWF  2F,W
06842:  MOVWF  30
06844:  BSF    29.5
06846:  MOVLW  1E
06848:  MOVLB  3
0684A:  MOVWF  x55
0684C:  MOVLB  0
0684E:  CALL   0C96
06852:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06854:  BRA    6858
....................          Flanco2 = 0; 
06856:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
06858:  MOVF   31,W
0685A:  SUBWF  33,W
0685C:  BC    686E
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
0685E:  INCF   47,F
06860:  MOVFF  31,33
06864:  MOVLW  02
06866:  SUBWF  33,W
06868:  MOVWF  32
0686A:  MOVLW  04
0686C:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
0686E:  MOVF   32,W
06870:  SUBWF  31,W
06872:  BC    6884
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
06874:  DECF   47,F
06876:  MOVFF  31,32
0687A:  MOVLW  02
0687C:  ADDWF  32,W
0687E:  MOVWF  33
06880:  MOVLW  02
06882:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
06884:  MOVF   31,W
06886:  SUBWF  2C,W
06888:  BC    689C
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
0688A:  MOVFF  2D,31
0688E:  MOVLW  02
06890:  MOVWF  2F
06892:  CLRF   47
06894:  MOVFF  31,32
06898:  ADDWF  32,W
0689A:  MOVWF  33
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
0689C:  MOVF   2D,W
0689E:  SUBWF  31,W
068A0:  BC    68B8
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
068A2:  MOVFF  2C,31
068A6:  MOVLW  04
068A8:  MOVWF  2F
068AA:  SUBWF  2C,W
068AC:  MOVWF  47
068AE:  MOVFF  31,33
068B2:  MOVLW  02
068B4:  SUBWF  33,W
068B6:  MOVWF  32
....................       } 
....................          
....................       if(paso<0) 
068B8:  BTFSC  47.7
068BA:  BRA    68BE
068BC:  BRA    68C0
....................          paso=0; 
068BE:  CLRF   47
....................           
....................       if(RIGHT){// Si oprime derecha 
068C0:  BSF    F96.1
068C2:  BTFSC  F84.1
068C4:  BRA    6918
....................          delay_ms(20); 
068C6:  MOVLW  14
068C8:  MOVLB  3
068CA:  MOVWF  x55
068CC:  MOVLB  0
068CE:  CALL   0C96
....................          if(RIGHT){ 
068D2:  BSF    F96.1
068D4:  BTFSC  F84.1
068D6:  BRA    6914
....................             if(Flanco1 == 0){ 
068D8:  BTFSC  29.4
068DA:  BRA    6914
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
068DC:  BSF    29.4
068DE:  MOVFF  31,2B
068E2:  MOVLW  03
068E4:  MOVWF  2F
068E6:  MOVLW  02
068E8:  MOVLB  3
068EA:  MOVWF  x3E
068EC:  MOVLW  96
068EE:  MOVWF  x55
068F0:  MOVLB  0
068F2:  CALL   0C96
068F6:  MOVLB  3
068F8:  DECFSZ x3E,F
068FA:  BRA    68EC
068FC:  MOVLW  0C
068FE:  MOVWF  x4F
06900:  MOVLB  0
06902:  CALL   2172
....................                if(Menu==6){ 
06906:  MOVF   2B,W
06908:  SUBLW  06
0690A:  BNZ   6914
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
0690C:  CLRF   4C
0690E:  CLRF   4D
06910:  CLRF   4E
06912:  CLRF   4F
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
06914:  BSF    2A.7
....................       }else{ 
06916:  BRA    691A
....................         Flanco1 = 0; 
06918:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
0691A:  BSF    F96.2
0691C:  BTFSC  F84.2
0691E:  BRA    6958
....................          delay_ms(20); 
06920:  MOVLW  14
06922:  MOVLB  3
06924:  MOVWF  x55
06926:  MOVLB  0
06928:  CALL   0C96
....................          if(IZQU){ 
0692C:  BSF    F96.2
0692E:  BTFSC  F84.2
06930:  BRA    6958
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
06932:  MOVLW  02
06934:  MOVLB  3
06936:  MOVWF  x3E
06938:  MOVLW  FA
0693A:  MOVWF  x55
0693C:  MOVLB  0
0693E:  CALL   0C96
06942:  MOVLB  3
06944:  DECFSZ x3E,F
06946:  BRA    6938
06948:  MOVLW  32
0694A:  MOVWF  2B
0694C:  MOVLW  0C
0694E:  MOVWF  x4F
06950:  MOVLB  0
06952:  CALL   2172
06956:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
06958:  MOVF   2B,W
0695A:  SUBLW  02
0695C:  BTFSS  FD8.2
0695E:  BRA    6C30
....................    EliminaRuido(); 
06960:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
06964:  MOVLW  01
06966:  MOVLB  3
06968:  MOVWF  x50
0696A:  MOVWF  x51
0696C:  MOVLB  0
0696E:  CALL   20F8
....................       printf(lcd_putc,"    Temporizador     "); 
06972:  MOVLW  B8
06974:  MOVWF  FF6
06976:  MOVLW  07
06978:  MOVWF  FF7
0697A:  CALL   21F0
....................       lcd_gotoxy(1,2); 
0697E:  MOVLW  01
06980:  MOVLB  3
06982:  MOVWF  x50
06984:  MOVLW  02
06986:  MOVWF  x51
06988:  MOVLB  0
0698A:  CALL   20F8
....................       printf(lcd_putc,"       Luz UV        "); 
0698E:  MOVLW  CE
06990:  MOVWF  FF6
06992:  MOVLW  07
06994:  MOVWF  FF7
06996:  CALL   21F0
....................       lcd_gotoxy(6,3); 
0699A:  MOVLW  06
0699C:  MOVLB  3
0699E:  MOVWF  x50
069A0:  MOVLW  03
069A2:  MOVWF  x51
069A4:  MOVLB  0
069A6:  CALL   20F8
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
069AA:  MOVFF  3C,33E
069AE:  MOVLW  03
069B0:  MOVLB  3
069B2:  MOVWF  x3F
069B4:  MOVLB  0
069B6:  CALL   4BFA
069BA:  MOVLW  3A
069BC:  MOVLB  3
069BE:  MOVWF  x4F
069C0:  MOVLB  0
069C2:  CALL   2172
069C6:  MOVFF  3D,33E
069CA:  MOVLW  01
069CC:  MOVLB  3
069CE:  MOVWF  x3F
069D0:  MOVLB  0
069D2:  CALL   4BFA
069D6:  MOVLW  ED
069D8:  MOVWF  FF6
069DA:  MOVLW  07
069DC:  MOVWF  FF7
069DE:  MOVLW  08
069E0:  MOVLB  3
069E2:  MOVWF  x42
069E4:  MOVLB  0
069E6:  CALL   4BA4
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
069EA:  MOVLW  06
069EC:  ADDWF  41,W
069EE:  MOVLB  3
069F0:  MOVWF  x3E
069F2:  MOVWF  x50
069F4:  MOVLW  04
069F6:  MOVWF  x51
069F8:  MOVLB  0
069FA:  CALL   20F8
....................       lcd_putc(t[2]); 
069FE:  MOVFF  4B,34F
06A02:  CALL   2172
....................        
....................       Cambio=OFF; 
06A06:  BCF    2A.7
.................... //   } 
....................     
....................    if(UP) 
06A08:  BSF    F92.5
06A0A:  BTFSC  F80.5
06A0C:  BRA    6A6E
....................    { 
....................       delay_ms(20); 
06A0E:  MOVLW  14
06A10:  MOVLB  3
06A12:  MOVWF  x55
06A14:  MOVLB  0
06A16:  CALL   0C96
....................       if(UP){ 
06A1A:  BSF    F92.5
06A1C:  BTFSC  F80.5
06A1E:  BRA    6A6E
....................          if(unidad2==1) 
06A20:  DECFSZ 41,W
06A22:  BRA    6A46
....................          { 
....................             if(tempo_minutos_pro<240) 
06A24:  MOVF   3C,W
06A26:  SUBLW  EF
06A28:  BNC   6A46
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
06A2A:  MOVLW  05
06A2C:  ADDWF  3C,F
06A2E:  MOVLW  02
06A30:  MOVLB  3
06A32:  MOVWF  x3E
06A34:  MOVLW  96
06A36:  MOVWF  x55
06A38:  MOVLB  0
06A3A:  CALL   0C96
06A3E:  MOVLB  3
06A40:  DECFSZ x3E,F
06A42:  BRA    6A34
06A44:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
06A46:  MOVF   41,W
06A48:  SUBLW  04
06A4A:  BNZ   6A6C
....................          { 
....................             if(tempo_segundos_pro<59) 
06A4C:  MOVF   3D,W
06A4E:  SUBLW  3A
06A50:  BNC   6A6C
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
06A52:  INCF   3D,F
06A54:  MOVLW  02
06A56:  MOVLB  3
06A58:  MOVWF  x3E
06A5A:  MOVLW  96
06A5C:  MOVWF  x55
06A5E:  MOVLB  0
06A60:  CALL   0C96
06A64:  MOVLB  3
06A66:  DECFSZ x3E,F
06A68:  BRA    6A5A
06A6A:  MOVLB  0
....................             } 
....................          }      
....................       Cambio=ON; 
06A6C:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(DOWN) 
06A6E:  BSF    F96.0
06A70:  BTFSC  F84.0
06A72:  BRA    6AD0
....................    { 
....................       delay_ms(20); 
06A74:  MOVLW  14
06A76:  MOVLB  3
06A78:  MOVWF  x55
06A7A:  MOVLB  0
06A7C:  CALL   0C96
....................       if(DOWN){ 
06A80:  BSF    F96.0
06A82:  BTFSC  F84.0
06A84:  BRA    6AD0
....................          if(unidad2==1) 
06A86:  DECFSZ 41,W
06A88:  BRA    6AAA
....................          { 
....................             if(tempo_minutos_pro>0) 
06A8A:  MOVF   3C,F
06A8C:  BZ    6AAA
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
06A8E:  MOVLW  05
06A90:  SUBWF  3C,F
06A92:  MOVLW  02
06A94:  MOVLB  3
06A96:  MOVWF  x3E
06A98:  MOVLW  96
06A9A:  MOVWF  x55
06A9C:  MOVLB  0
06A9E:  CALL   0C96
06AA2:  MOVLB  3
06AA4:  DECFSZ x3E,F
06AA6:  BRA    6A98
06AA8:  MOVLB  0
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
06AAA:  MOVF   41,W
06AAC:  SUBLW  04
06AAE:  BNZ   6ACE
....................          { 
....................             if(tempo_segundos_pro>0) 
06AB0:  MOVF   3D,F
06AB2:  BZ    6ACE
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
06AB4:  DECF   3D,F
06AB6:  MOVLW  02
06AB8:  MOVLB  3
06ABA:  MOVWF  x3E
06ABC:  MOVLW  96
06ABE:  MOVWF  x55
06AC0:  MOVLB  0
06AC2:  CALL   0C96
06AC6:  MOVLB  3
06AC8:  DECFSZ x3E,F
06ACA:  BRA    6ABC
06ACC:  MOVLB  0
....................             }    
....................          } 
....................       Cambio=ON; 
06ACE:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
06AD0:  BSF    F96.1
06AD2:  BTFSC  F84.1
06AD4:  BRA    6B1E
....................    { 
....................       delay_ms(20); 
06AD6:  MOVLW  14
06AD8:  MOVLB  3
06ADA:  MOVWF  x55
06ADC:  MOVLB  0
06ADE:  CALL   0C96
....................       if(RIGHT){ 
06AE2:  BSF    F96.1
06AE4:  BTFSC  F84.1
06AE6:  BRA    6B1E
....................          if(unidad2==1) 
06AE8:  DECFSZ 41,W
06AEA:  BRA    6AF2
....................          { 
....................             unidad2=4; 
06AEC:  MOVLW  04
06AEE:  MOVWF  41
....................          } 
....................          else 
06AF0:  BRA    6AFC
....................          { 
....................             if(unidad2==4) 
06AF2:  MOVF   41,W
06AF4:  SUBLW  04
06AF6:  BNZ   6AFC
....................             { 
....................                unidad2=1; 
06AF8:  MOVLW  01
06AFA:  MOVWF  41
....................             } 
....................          } 
....................       delay_ms(500); 
06AFC:  MOVLW  02
06AFE:  MOVLB  3
06B00:  MOVWF  x3E
06B02:  MOVLW  FA
06B04:  MOVWF  x55
06B06:  MOVLB  0
06B08:  CALL   0C96
06B0C:  MOVLB  3
06B0E:  DECFSZ x3E,F
06B10:  BRA    6B02
....................       printf(lcd_putc,"\f"); 
06B12:  MOVLW  0C
06B14:  MOVWF  x4F
06B16:  MOVLB  0
06B18:  CALL   2172
....................       Cambio=ON; 
06B1C:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(IZQU) 
06B1E:  BSF    F96.2
06B20:  BTFSC  F84.2
06B22:  BRA    6C30
....................    { 
....................       if(IZQU){ 
06B24:  BSF    F96.2
06B26:  BTFSC  F84.2
06B28:  BRA    6C30
....................          delay_ms(200); 
06B2A:  MOVLW  C8
06B2C:  MOVLB  3
06B2E:  MOVWF  x55
06B30:  MOVLB  0
06B32:  CALL   0C96
....................          printf(lcd_putc,"\f"); 
06B36:  MOVLW  0C
06B38:  MOVLB  3
06B3A:  MOVWF  x4F
06B3C:  MOVLB  0
06B3E:  CALL   2172
....................          lcd_gotoxy(1,2); 
06B42:  MOVLW  01
06B44:  MOVLB  3
06B46:  MOVWF  x50
06B48:  MOVLW  02
06B4A:  MOVWF  x51
06B4C:  MOVLB  0
06B4E:  CALL   20F8
....................          printf(lcd_putc,"Tiempo Almacenado"); 
06B52:  MOVLW  F6
06B54:  MOVWF  FF6
06B56:  MOVLW  07
06B58:  MOVWF  FF7
06B5A:  CALL   21F0
....................          lcd_gotoxy(1,3); 
06B5E:  MOVLW  01
06B60:  MOVLB  3
06B62:  MOVWF  x50
06B64:  MOVLW  03
06B66:  MOVWF  x51
06B68:  MOVLB  0
06B6A:  CALL   20F8
....................          printf(lcd_putc,"  Correctamente  "); 
06B6E:  MOVLW  08
06B70:  MOVWF  FF6
06B72:  MOVLW  08
06B74:  MOVWF  FF7
06B76:  CALL   21F0
....................          write_eeprom(5,tempo_minutos_pro); 
06B7A:  CLRF   FAA
06B7C:  MOVLW  05
06B7E:  MOVWF  FA9
06B80:  MOVFF  3C,FA8
06B84:  BCF    FA6.6
06B86:  BCF    FA6.7
06B88:  BSF    FA6.2
06B8A:  MOVF   FF2,W
06B8C:  MOVWF  00
06B8E:  BCF    FF2.6
06B90:  BCF    FF2.7
06B92:  MOVLB  F
06B94:  MOVLW  55
06B96:  MOVWF  FA7
06B98:  MOVLW  AA
06B9A:  MOVWF  FA7
06B9C:  BSF    FA6.1
06B9E:  BTFSC  FA6.1
06BA0:  BRA    6B9E
06BA2:  BCF    FA6.2
06BA4:  MOVF   00,W
06BA6:  IORWF  FF2,F
....................          delay_ms(20); 
06BA8:  MOVLW  14
06BAA:  MOVLB  3
06BAC:  MOVWF  x55
06BAE:  MOVLB  0
06BB0:  CALL   0C96
....................          write_eeprom(6,tempo_segundos_pro); 
06BB4:  CLRF   FAA
06BB6:  MOVLW  06
06BB8:  MOVWF  FA9
06BBA:  MOVFF  3D,FA8
06BBE:  BCF    FA6.6
06BC0:  BCF    FA6.7
06BC2:  BSF    FA6.2
06BC4:  MOVF   FF2,W
06BC6:  MOVWF  00
06BC8:  BCF    FF2.6
06BCA:  BCF    FF2.7
06BCC:  MOVLB  F
06BCE:  MOVLW  55
06BD0:  MOVWF  FA7
06BD2:  MOVLW  AA
06BD4:  MOVWF  FA7
06BD6:  BSF    FA6.1
06BD8:  BTFSC  FA6.1
06BDA:  BRA    6BD8
06BDC:  BCF    FA6.2
06BDE:  MOVF   00,W
06BE0:  IORWF  FF2,F
....................          delay_ms(20); 
06BE2:  MOVLW  14
06BE4:  MOVLB  3
06BE6:  MOVWF  x55
06BE8:  MOVLB  0
06BEA:  CALL   0C96
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
06BEE:  MOVFF  3C,3A
06BF2:  MOVFF  3D,3B
....................          delay_ms(700); 
06BF6:  MOVLW  04
06BF8:  MOVLB  3
06BFA:  MOVWF  x3E
06BFC:  MOVLW  AF
06BFE:  MOVWF  x55
06C00:  MOVLB  0
06C02:  CALL   0C96
06C06:  MOVLB  3
06C08:  DECFSZ x3E,F
06C0A:  BRA    6BFC
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
06C0C:  MOVLW  1E
06C0E:  MOVWF  x55
06C10:  MOVLB  0
06C12:  CALL   0C96
06C16:  MOVLW  01
06C18:  MOVWF  2B
06C1A:  CLRF   47
06C1C:  MOVLW  02
06C1E:  MOVWF  2F
06C20:  MOVWF  31
06C22:  MOVLW  0C
06C24:  MOVLB  3
06C26:  MOVWF  x4F
06C28:  MOVLB  0
06C2A:  CALL   2172
....................          Cambio=ON; 
06C2E:  BSF    2A.7
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
06C30:  MOVF   2B,W
06C32:  SUBLW  03
06C34:  BTFSS  FD8.2
06C36:  BRA    700E
....................       EliminaRuido(); 
06C38:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
06C3C:  MOVLW  01
06C3E:  MOVLB  3
06C40:  MOVWF  x50
06C42:  MOVWF  x51
06C44:  MOVLB  0
06C46:  CALL   20F8
....................          printf(lcd_putc,"     Ingrese        "); 
06C4A:  MOVLW  1A
06C4C:  MOVWF  FF6
06C4E:  MOVLW  08
06C50:  MOVWF  FF7
06C52:  CALL   21F0
....................          lcd_gotoxy(1,2); 
06C56:  MOVLW  01
06C58:  MOVLB  3
06C5A:  MOVWF  x50
06C5C:  MOVLW  02
06C5E:  MOVWF  x51
06C60:  MOVLB  0
06C62:  CALL   20F8
....................          printf(lcd_putc,"    Contraseña      "); 
06C66:  MOVLW  30
06C68:  MOVWF  FF6
06C6A:  MOVLW  08
06C6C:  MOVWF  FF7
06C6E:  CALL   21F0
....................          lcd_gotoxy(1,3); 
06C72:  MOVLW  01
06C74:  MOVLB  3
06C76:  MOVWF  x50
06C78:  MOVLW  03
06C7A:  MOVWF  x51
06C7C:  MOVLB  0
06C7E:  CALL   20F8
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
06C82:  MOVLW  46
06C84:  MOVWF  FF6
06C86:  MOVLW  08
06C88:  MOVWF  FF7
06C8A:  MOVLW  0A
06C8C:  MOVLB  3
06C8E:  MOVWF  x42
06C90:  MOVLB  0
06C92:  CALL   4BA4
06C96:  MOVFF  4C,33E
06C9A:  MOVLW  1F
06C9C:  MOVLB  3
06C9E:  MOVWF  x3F
06CA0:  MOVLB  0
06CA2:  CALL   517A
06CA6:  MOVFF  4D,33E
06CAA:  MOVLW  1F
06CAC:  MOVLB  3
06CAE:  MOVWF  x3F
06CB0:  MOVLB  0
06CB2:  CALL   517A
06CB6:  MOVFF  4E,33E
06CBA:  MOVLW  1F
06CBC:  MOVLB  3
06CBE:  MOVWF  x3F
06CC0:  MOVLB  0
06CC2:  CALL   517A
06CC6:  MOVFF  4F,33E
06CCA:  MOVLW  1F
06CCC:  MOVLB  3
06CCE:  MOVWF  x3F
06CD0:  MOVLB  0
06CD2:  CALL   517A
06CD6:  MOVLW  20
06CD8:  MOVLB  3
06CDA:  MOVWF  x4F
06CDC:  MOVLB  0
06CDE:  CALL   2172
06CE2:  MOVLW  20
06CE4:  MOVLB  3
06CE6:  MOVWF  x4F
06CE8:  MOVLB  0
06CEA:  CALL   2172
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
06CEE:  MOVFF  2E,350
06CF2:  MOVLW  04
06CF4:  MOVLB  3
06CF6:  MOVWF  x51
06CF8:  MOVLB  0
06CFA:  CALL   20F8
....................          lcd_putc(t[2]); 
06CFE:  MOVFF  4B,34F
06D02:  CALL   2172
....................           
....................          if(unidad>11&&unidad<14){ 
06D06:  MOVF   2E,W
06D08:  SUBLW  0B
06D0A:  BC    6D2E
06D0C:  MOVF   2E,W
06D0E:  SUBLW  0D
06D10:  BNC   6D2E
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
06D12:  MOVLW  01
06D14:  SUBWF  2E,W
06D16:  MOVLB  3
06D18:  MOVWF  x3E
06D1A:  MOVWF  x50
06D1C:  MOVLW  04
06D1E:  MOVWF  x51
06D20:  MOVLB  0
06D22:  CALL   20F8
....................             lcd_putc(t[1]); 
06D26:  MOVFF  4A,34F
06D2A:  CALL   2172
....................          } 
....................           
....................          Cambio=OFF; 
06D2E:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
06D30:  BSF    F92.5
06D32:  BTFSC  F80.5
06D34:  BRA    6D70
....................          delay_ms(20); 
06D36:  MOVLW  14
06D38:  MOVLB  3
06D3A:  MOVWF  x55
06D3C:  MOVLB  0
06D3E:  CALL   0C96
....................          if(UP){ 
06D42:  BSF    F92.5
06D44:  BTFSC  F80.5
06D46:  BRA    6D6E
....................             if(Flanco == 0) { 
06D48:  BTFSC  29.3
06D4A:  BRA    6D6E
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
06D4C:  MOVLW  0B
06D4E:  SUBWF  2E,W
06D50:  CLRF   03
06D52:  ADDLW  4C
06D54:  MOVWF  FE9
06D56:  MOVLW  00
06D58:  ADDWFC 03,W
06D5A:  MOVWF  FEA
06D5C:  INCF   FEF,F
06D5E:  BSF    29.3
06D60:  MOVLW  1E
06D62:  MOVLB  3
06D64:  MOVWF  x55
06D66:  MOVLB  0
06D68:  CALL   0C96
06D6C:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06D6E:  BRA    6D72
....................          Flanco = 0; 
06D70:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
06D72:  BSF    F96.0
06D74:  BTFSC  F84.0
06D76:  BRA    6DB2
....................          delay_ms(20); 
06D78:  MOVLW  14
06D7A:  MOVLB  3
06D7C:  MOVWF  x55
06D7E:  MOVLB  0
06D80:  CALL   0C96
....................          if(DOWN){ 
06D84:  BSF    F96.0
06D86:  BTFSC  F84.0
06D88:  BRA    6DB0
....................             if(Flanco2 == 0) { 
06D8A:  BTFSC  29.5
06D8C:  BRA    6DB0
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
06D8E:  MOVLW  0B
06D90:  SUBWF  2E,W
06D92:  CLRF   03
06D94:  ADDLW  4C
06D96:  MOVWF  FE9
06D98:  MOVLW  00
06D9A:  ADDWFC 03,W
06D9C:  MOVWF  FEA
06D9E:  DECF   FEF,F
06DA0:  BSF    29.5
06DA2:  MOVLW  1E
06DA4:  MOVLB  3
06DA6:  MOVWF  x55
06DA8:  MOVLB  0
06DAA:  CALL   0C96
06DAE:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06DB0:  BRA    6DB4
....................          Flanco2 = 0; 
06DB2:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
06DB4:  BSF    F96.1
06DB6:  BTFSC  F84.1
06DB8:  BRA    6DF0
....................          delay_ms(20); 
06DBA:  MOVLW  14
06DBC:  MOVLB  3
06DBE:  MOVWF  x55
06DC0:  MOVLB  0
06DC2:  CALL   0C96
....................          if(RIGHT){ 
06DC6:  BSF    F96.1
06DC8:  BTFSC  F84.1
06DCA:  BRA    6DEE
....................             if(Flanco1 == 0) { 
06DCC:  BTFSC  29.4
06DCE:  BRA    6DEE
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
06DD0:  BSF    29.4
06DD2:  INCF   2E,F
06DD4:  MOVLW  1E
06DD6:  MOVLB  3
06DD8:  MOVWF  x55
06DDA:  MOVLB  0
06DDC:  CALL   0C96
06DE0:  MOVLW  0C
06DE2:  MOVLB  3
06DE4:  MOVWF  x4F
06DE6:  MOVLB  0
06DE8:  CALL   2172
06DEC:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06DEE:  BRA    6DF2
....................          Flanco1 = 0; 
06DF0:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
06DF2:  BSF    F96.2
06DF4:  BTFSC  F84.2
06DF6:  BRA    6E2E
....................          delay_ms(150); 
06DF8:  MOVLW  96
06DFA:  MOVLB  3
06DFC:  MOVWF  x55
06DFE:  MOVLB  0
06E00:  CALL   0C96
....................          if(IZQU){ 
06E04:  BSF    F96.2
06E06:  BTFSC  F84.2
06E08:  BRA    6E2C
....................             if(Flanco3 == 0){ 
06E0A:  BTFSC  29.6
06E0C:  BRA    6E2C
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
06E0E:  BSF    29.6
06E10:  DECF   2E,F
06E12:  MOVLW  1E
06E14:  MOVLB  3
06E16:  MOVWF  x55
06E18:  MOVLB  0
06E1A:  CALL   0C96
06E1E:  MOVLW  0C
06E20:  MOVLB  3
06E22:  MOVWF  x4F
06E24:  MOVLB  0
06E26:  CALL   2172
06E2A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
06E2C:  BRA    6E30
....................         Flanco3 = 0; 
06E2E:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
06E30:  MOVLW  0B
06E32:  SUBWF  2E,W
06E34:  CLRF   03
06E36:  ADDLW  4C
06E38:  MOVWF  FE9
06E3A:  MOVLW  00
06E3C:  ADDWFC 03,W
06E3E:  MOVWF  FEA
06E40:  BTFSC  FEF.7
06E42:  BRA    6E46
06E44:  BRA    6E5A
....................          clave[unidad-11]=9; 
06E46:  MOVLW  0B
06E48:  SUBWF  2E,W
06E4A:  CLRF   03
06E4C:  ADDLW  4C
06E4E:  MOVWF  FE9
06E50:  MOVLW  00
06E52:  ADDWFC 03,W
06E54:  MOVWF  FEA
06E56:  MOVLW  09
06E58:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
06E5A:  MOVLW  0B
06E5C:  SUBWF  2E,W
06E5E:  CLRF   03
06E60:  ADDLW  4C
06E62:  MOVWF  FE9
06E64:  MOVLW  00
06E66:  ADDWFC 03,W
06E68:  MOVWF  FEA
06E6A:  BTFSC  FEF.7
06E6C:  BRA    6E86
06E6E:  MOVF   FEF,W
06E70:  SUBLW  09
06E72:  BC    6E86
....................          clave[unidad-11]=0; 
06E74:  MOVLW  0B
06E76:  SUBWF  2E,W
06E78:  CLRF   03
06E7A:  ADDLW  4C
06E7C:  MOVWF  FE9
06E7E:  MOVLW  00
06E80:  ADDWFC 03,W
06E82:  MOVWF  FEA
06E84:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
06E86:  MOVF   2E,W
06E88:  SUBLW  0A
06E8A:  BNC   6EB0
....................          unidad=11; 
06E8C:  MOVLW  0B
06E8E:  MOVWF  2E
....................          Menu=1; 
06E90:  MOVLW  01
06E92:  MOVWF  2B
....................          paso=0; 
06E94:  CLRF   47
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
06E96:  CLRF   4C
06E98:  CLRF   4D
06E9A:  CLRF   4E
06E9C:  CLRF   4F
06E9E:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
06EA0:  MOVLW  0B
06EA2:  MOVWF  2E
06EA4:  MOVLW  0C
06EA6:  MOVLB  3
06EA8:  MOVWF  x4F
06EAA:  MOVLB  0
06EAC:  CALL   2172
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
06EB0:  MOVF   2E,W
06EB2:  SUBLW  0E
06EB4:  BTFSC  FD8.0
06EB6:  BRA    700E
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
06EB8:  MOVF   50,W
06EBA:  SUBWF  4C,W
06EBC:  BNZ   6F72
06EBE:  MOVF   51,W
06EC0:  SUBWF  4D,W
06EC2:  BNZ   6F72
06EC4:  MOVF   52,W
06EC6:  SUBWF  4E,W
06EC8:  BNZ   6F72
06ECA:  MOVF   53,W
06ECC:  SUBWF  4F,W
06ECE:  BNZ   6F72
....................             lcd_gotoxy(1,1); 
06ED0:  MOVLW  01
06ED2:  MOVLB  3
06ED4:  MOVWF  x50
06ED6:  MOVWF  x51
06ED8:  MOVLB  0
06EDA:  CALL   20F8
....................             printf(lcd_putc,"                    "); 
06EDE:  MOVLW  5C
06EE0:  MOVWF  FF6
06EE2:  MOVLW  08
06EE4:  MOVWF  FF7
06EE6:  CALL   21F0
....................             lcd_gotoxy(1,2); 
06EEA:  MOVLW  01
06EEC:  MOVLB  3
06EEE:  MOVWF  x50
06EF0:  MOVLW  02
06EF2:  MOVWF  x51
06EF4:  MOVLB  0
06EF6:  CALL   20F8
....................             printf(lcd_putc,"     Contraseña     "); 
06EFA:  MOVLW  72
06EFC:  MOVWF  FF6
06EFE:  MOVLW  08
06F00:  MOVWF  FF7
06F02:  CALL   21F0
....................             lcd_gotoxy(1,3); 
06F06:  MOVLW  01
06F08:  MOVLB  3
06F0A:  MOVWF  x50
06F0C:  MOVLW  03
06F0E:  MOVWF  x51
06F10:  MOVLB  0
06F12:  CALL   20F8
....................             printf(lcd_putc,"      Correcta      "); 
06F16:  MOVLW  88
06F18:  MOVWF  FF6
06F1A:  MOVLW  08
06F1C:  MOVWF  FF7
06F1E:  CALL   21F0
....................             lcd_gotoxy(1,4); 
06F22:  MOVLW  01
06F24:  MOVLB  3
06F26:  MOVWF  x50
06F28:  MOVLW  04
06F2A:  MOVWF  x51
06F2C:  MOVLB  0
06F2E:  CALL   20F8
....................             printf(lcd_putc,"                    "); 
06F32:  MOVLW  9E
06F34:  MOVWF  FF6
06F36:  MOVLW  08
06F38:  MOVWF  FF7
06F3A:  CALL   21F0
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
06F3E:  MOVLW  02
06F40:  MOVLB  3
06F42:  MOVWF  x3E
06F44:  MOVLW  FA
06F46:  MOVWF  x55
06F48:  MOVLB  0
06F4A:  CALL   0C96
06F4E:  MOVLB  3
06F50:  DECFSZ x3E,F
06F52:  BRA    6F44
06F54:  MOVLW  3D
06F56:  MOVWF  2B
06F58:  MOVLW  0B
06F5A:  MOVWF  2E
06F5C:  MOVLW  0C
06F5E:  MOVWF  x4F
06F60:  MOVLB  0
06F62:  CALL   2172
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
06F66:  CLRF   4C
06F68:  CLRF   4D
06F6A:  CLRF   4E
06F6C:  CLRF   4F
06F6E:  BSF    2A.7
....................          }else{ 
06F70:  BRA    700E
....................             lcd_gotoxy(1,1); 
06F72:  MOVLW  01
06F74:  MOVLB  3
06F76:  MOVWF  x50
06F78:  MOVWF  x51
06F7A:  MOVLB  0
06F7C:  CALL   20F8
....................             printf(lcd_putc,"                    "); 
06F80:  MOVLW  B4
06F82:  MOVWF  FF6
06F84:  MOVLW  08
06F86:  MOVWF  FF7
06F88:  CALL   21F0
....................             lcd_gotoxy(1,2); 
06F8C:  MOVLW  01
06F8E:  MOVLB  3
06F90:  MOVWF  x50
06F92:  MOVLW  02
06F94:  MOVWF  x51
06F96:  MOVLB  0
06F98:  CALL   20F8
....................             printf(lcd_putc,"     Contraseña     "); 
06F9C:  MOVLW  CA
06F9E:  MOVWF  FF6
06FA0:  MOVLW  08
06FA2:  MOVWF  FF7
06FA4:  CALL   21F0
....................             lcd_gotoxy(1,3); 
06FA8:  MOVLW  01
06FAA:  MOVLB  3
06FAC:  MOVWF  x50
06FAE:  MOVLW  03
06FB0:  MOVWF  x51
06FB2:  MOVLB  0
06FB4:  CALL   20F8
....................             printf(lcd_putc,"     Incorrecta     "); 
06FB8:  MOVLW  E0
06FBA:  MOVWF  FF6
06FBC:  MOVLW  08
06FBE:  MOVWF  FF7
06FC0:  CALL   21F0
....................             lcd_gotoxy(1,4); 
06FC4:  MOVLW  01
06FC6:  MOVLB  3
06FC8:  MOVWF  x50
06FCA:  MOVLW  04
06FCC:  MOVWF  x51
06FCE:  MOVLB  0
06FD0:  CALL   20F8
....................             printf(lcd_putc,"                    "); 
06FD4:  MOVLW  F6
06FD6:  MOVWF  FF6
06FD8:  MOVLW  08
06FDA:  MOVWF  FF7
06FDC:  CALL   21F0
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
06FE0:  MOVLW  02
06FE2:  MOVLB  3
06FE4:  MOVWF  x3E
06FE6:  MOVLW  FA
06FE8:  MOVWF  x55
06FEA:  MOVLB  0
06FEC:  CALL   0C96
06FF0:  MOVLB  3
06FF2:  DECFSZ x3E,F
06FF4:  BRA    6FE6
06FF6:  MOVLW  0B
06FF8:  MOVWF  2E
06FFA:  MOVLW  0C
06FFC:  MOVWF  x4F
06FFE:  MOVLB  0
07000:  CALL   2172
07004:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
07006:  CLRF   4C
07008:  CLRF   4D
0700A:  CLRF   4E
0700C:  CLRF   4F
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
0700E:  MOVF   2B,W
07010:  SUBLW  3D
07012:  BTFSS  FD8.2
07014:  BRA    7426
....................       EliminaRuido(); 
07016:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
0701A:  MOVLW  01
0701C:  MOVLB  3
0701E:  MOVWF  x50
07020:  MOVWF  x51
07022:  MOVLB  0
07024:  CALL   20F8
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
07028:  MOVLW  0C
0702A:  MOVWF  FF6
0702C:  MOVLW  09
0702E:  MOVWF  FF7
07030:  CALL   21F0
....................          lcd_gotoxy(1,2); 
07034:  MOVLW  01
07036:  MOVLB  3
07038:  MOVWF  x50
0703A:  MOVLW  02
0703C:  MOVWF  x51
0703E:  MOVLB  0
07040:  CALL   20F8
....................          printf(lcd_putc,"     Contraseña     "); 
07044:  MOVLW  22
07046:  MOVWF  FF6
07048:  MOVLW  09
0704A:  MOVWF  FF7
0704C:  CALL   21F0
....................          lcd_gotoxy(1,3); 
07050:  MOVLW  01
07052:  MOVLB  3
07054:  MOVWF  x50
07056:  MOVLW  03
07058:  MOVWF  x51
0705A:  MOVLB  0
0705C:  CALL   20F8
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
07060:  MOVLW  38
07062:  MOVWF  FF6
07064:  MOVLW  09
07066:  MOVWF  FF7
07068:  MOVLW  0A
0706A:  MOVLB  3
0706C:  MOVWF  x42
0706E:  MOVLB  0
07070:  CALL   4BA4
07074:  MOVFF  4C,33E
07078:  MOVLW  1F
0707A:  MOVLB  3
0707C:  MOVWF  x3F
0707E:  MOVLB  0
07080:  CALL   517A
07084:  MOVFF  4D,33E
07088:  MOVLW  1F
0708A:  MOVLB  3
0708C:  MOVWF  x3F
0708E:  MOVLB  0
07090:  CALL   517A
07094:  MOVFF  4E,33E
07098:  MOVLW  1F
0709A:  MOVLB  3
0709C:  MOVWF  x3F
0709E:  MOVLB  0
070A0:  CALL   517A
070A4:  MOVFF  4F,33E
070A8:  MOVLW  1F
070AA:  MOVLB  3
070AC:  MOVWF  x3F
070AE:  MOVLB  0
070B0:  CALL   517A
070B4:  MOVLW  20
070B6:  MOVLB  3
070B8:  MOVWF  x4F
070BA:  MOVLB  0
070BC:  CALL   2172
070C0:  MOVLW  20
070C2:  MOVLB  3
070C4:  MOVWF  x4F
070C6:  MOVLB  0
070C8:  CALL   2172
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
070CC:  MOVFF  2E,350
070D0:  MOVLW  04
070D2:  MOVLB  3
070D4:  MOVWF  x51
070D6:  MOVLB  0
070D8:  CALL   20F8
....................          lcd_putc(t[2]); 
070DC:  MOVFF  4B,34F
070E0:  CALL   2172
....................           
....................          if(unidad>11&&unidad<14){ 
070E4:  MOVF   2E,W
070E6:  SUBLW  0B
070E8:  BC    710C
070EA:  MOVF   2E,W
070EC:  SUBLW  0D
070EE:  BNC   710C
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
070F0:  MOVLW  01
070F2:  SUBWF  2E,W
070F4:  MOVLB  3
070F6:  MOVWF  x3E
070F8:  MOVWF  x50
070FA:  MOVLW  04
070FC:  MOVWF  x51
070FE:  MOVLB  0
07100:  CALL   20F8
....................             lcd_putc(t[1]); 
07104:  MOVFF  4A,34F
07108:  CALL   2172
....................          } 
....................           
....................          Cambio=OFF; 
0710C:  BCF    2A.7
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
0710E:  BSF    F92.5
07110:  BTFSC  F80.5
07112:  BRA    714E
....................          delay_ms(20); 
07114:  MOVLW  14
07116:  MOVLB  3
07118:  MOVWF  x55
0711A:  MOVLB  0
0711C:  CALL   0C96
....................          if(UP){ 
07120:  BSF    F92.5
07122:  BTFSC  F80.5
07124:  BRA    714C
....................             if(Flanco == 0) { 
07126:  BTFSC  29.3
07128:  BRA    714C
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
0712A:  MOVLW  0B
0712C:  SUBWF  2E,W
0712E:  CLRF   03
07130:  ADDLW  4C
07132:  MOVWF  FE9
07134:  MOVLW  00
07136:  ADDWFC 03,W
07138:  MOVWF  FEA
0713A:  INCF   FEF,F
0713C:  BSF    29.3
0713E:  MOVLW  1E
07140:  MOVLB  3
07142:  MOVWF  x55
07144:  MOVLB  0
07146:  CALL   0C96
0714A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
0714C:  BRA    7150
....................          Flanco = 0; 
0714E:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
07150:  BSF    F96.0
07152:  BTFSC  F84.0
07154:  BRA    7190
....................          delay_ms(20); 
07156:  MOVLW  14
07158:  MOVLB  3
0715A:  MOVWF  x55
0715C:  MOVLB  0
0715E:  CALL   0C96
....................          if(DOWN){ 
07162:  BSF    F96.0
07164:  BTFSC  F84.0
07166:  BRA    718E
....................             if(Flanco2 == 0) { 
07168:  BTFSC  29.5
0716A:  BRA    718E
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
0716C:  MOVLW  0B
0716E:  SUBWF  2E,W
07170:  CLRF   03
07172:  ADDLW  4C
07174:  MOVWF  FE9
07176:  MOVLW  00
07178:  ADDWFC 03,W
0717A:  MOVWF  FEA
0717C:  DECF   FEF,F
0717E:  BSF    29.5
07180:  MOVLW  1E
07182:  MOVLB  3
07184:  MOVWF  x55
07186:  MOVLB  0
07188:  CALL   0C96
0718C:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
0718E:  BRA    7192
....................          Flanco2 = 0; 
07190:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
07192:  BSF    F96.1
07194:  BTFSC  F84.1
07196:  BRA    71C2
....................          if(RIGHT){ 
07198:  BSF    F96.1
0719A:  BTFSC  F84.1
0719C:  BRA    71C0
....................             if(Flanco1 == 0) { 
0719E:  BTFSC  29.4
071A0:  BRA    71C0
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
071A2:  BSF    29.4
071A4:  INCF   2E,F
071A6:  MOVLW  1E
071A8:  MOVLB  3
071AA:  MOVWF  x55
071AC:  MOVLB  0
071AE:  CALL   0C96
071B2:  MOVLW  0C
071B4:  MOVLB  3
071B6:  MOVWF  x4F
071B8:  MOVLB  0
071BA:  CALL   2172
071BE:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
071C0:  BRA    71C4
....................          Flanco1 = 0; 
071C2:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
071C4:  BSF    F96.2
071C6:  BTFSC  F84.2
071C8:  BRA    7200
....................          delay_ms(150); 
071CA:  MOVLW  96
071CC:  MOVLB  3
071CE:  MOVWF  x55
071D0:  MOVLB  0
071D2:  CALL   0C96
....................          if(IZQU){ 
071D6:  BSF    F96.2
071D8:  BTFSC  F84.2
071DA:  BRA    71FE
....................             if(Flanco3 == 0){ 
071DC:  BTFSC  29.6
071DE:  BRA    71FE
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
071E0:  BSF    29.6
071E2:  DECF   2E,F
071E4:  MOVLW  1E
071E6:  MOVLB  3
071E8:  MOVWF  x55
071EA:  MOVLB  0
071EC:  CALL   0C96
071F0:  MOVLW  0C
071F2:  MOVLB  3
071F4:  MOVWF  x4F
071F6:  MOVLB  0
071F8:  CALL   2172
071FC:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
071FE:  BRA    7202
....................         Flanco3 = 0; 
07200:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
07202:  MOVLW  0B
07204:  SUBWF  2E,W
07206:  CLRF   03
07208:  ADDLW  4C
0720A:  MOVWF  FE9
0720C:  MOVLW  00
0720E:  ADDWFC 03,W
07210:  MOVWF  FEA
07212:  BTFSC  FEF.7
07214:  BRA    7218
07216:  BRA    722C
....................          clave[unidad-11]=9; 
07218:  MOVLW  0B
0721A:  SUBWF  2E,W
0721C:  CLRF   03
0721E:  ADDLW  4C
07220:  MOVWF  FE9
07222:  MOVLW  00
07224:  ADDWFC 03,W
07226:  MOVWF  FEA
07228:  MOVLW  09
0722A:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
0722C:  MOVLW  0B
0722E:  SUBWF  2E,W
07230:  CLRF   03
07232:  ADDLW  4C
07234:  MOVWF  FE9
07236:  MOVLW  00
07238:  ADDWFC 03,W
0723A:  MOVWF  FEA
0723C:  BTFSC  FEF.7
0723E:  BRA    7258
07240:  MOVF   FEF,W
07242:  SUBLW  09
07244:  BC    7258
....................          clave[unidad-11]=0; 
07246:  MOVLW  0B
07248:  SUBWF  2E,W
0724A:  CLRF   03
0724C:  ADDLW  4C
0724E:  MOVWF  FE9
07250:  MOVLW  00
07252:  ADDWFC 03,W
07254:  MOVWF  FEA
07256:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
07258:  MOVF   2E,W
0725A:  SUBLW  0A
0725C:  BNC   7280
....................          unidad=11; 
0725E:  MOVLW  0B
07260:  MOVWF  2E
....................          Menu=1; 
07262:  MOVLW  01
07264:  MOVWF  2B
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
07266:  CLRF   4C
07268:  CLRF   4D
0726A:  CLRF   4E
0726C:  CLRF   4F
0726E:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
07270:  MOVLW  0B
07272:  MOVWF  2E
07274:  MOVLW  0C
07276:  MOVLB  3
07278:  MOVWF  x4F
0727A:  MOVLB  0
0727C:  CALL   2172
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
07280:  MOVF   2E,W
07282:  SUBLW  0E
07284:  BTFSC  FD8.0
07286:  BRA    7426
....................          lcd_gotoxy(1,1); 
07288:  MOVLW  01
0728A:  MOVLB  3
0728C:  MOVWF  x50
0728E:  MOVWF  x51
07290:  MOVLB  0
07292:  CALL   20F8
....................          printf(lcd_putc,"                    "); 
07296:  MOVLW  4E
07298:  MOVWF  FF6
0729A:  MOVLW  09
0729C:  MOVWF  FF7
0729E:  CALL   21F0
....................          lcd_gotoxy(1,2); 
072A2:  MOVLW  01
072A4:  MOVLB  3
072A6:  MOVWF  x50
072A8:  MOVLW  02
072AA:  MOVWF  x51
072AC:  MOVLB  0
072AE:  CALL   20F8
....................          printf(lcd_putc,"     Contraseña     "); 
072B2:  MOVLW  64
072B4:  MOVWF  FF6
072B6:  MOVLW  09
072B8:  MOVWF  FF7
072BA:  CALL   21F0
....................          lcd_gotoxy(1,3); 
072BE:  MOVLW  01
072C0:  MOVLB  3
072C2:  MOVWF  x50
072C4:  MOVLW  03
072C6:  MOVWF  x51
072C8:  MOVLB  0
072CA:  CALL   20F8
....................          printf(lcd_putc,"     Almacenada     "); 
072CE:  MOVLW  7A
072D0:  MOVWF  FF6
072D2:  MOVLW  09
072D4:  MOVWF  FF7
072D6:  CALL   21F0
....................          lcd_gotoxy(1,4); 
072DA:  MOVLW  01
072DC:  MOVLB  3
072DE:  MOVWF  x50
072E0:  MOVLW  04
072E2:  MOVWF  x51
072E4:  MOVLB  0
072E6:  CALL   20F8
....................          printf(lcd_putc,"                    "); 
072EA:  MOVLW  90
072EC:  MOVWF  FF6
072EE:  MOVLW  09
072F0:  MOVWF  FF7
072F2:  CALL   21F0
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
072F6:  CLRF   FAA
072F8:  CLRF   FA9
072FA:  MOVFF  4C,FA8
072FE:  BCF    FA6.6
07300:  BCF    FA6.7
07302:  BSF    FA6.2
07304:  MOVF   FF2,W
07306:  MOVWF  00
07308:  BCF    FF2.6
0730A:  BCF    FF2.7
0730C:  MOVLB  F
0730E:  MOVLW  55
07310:  MOVWF  FA7
07312:  MOVLW  AA
07314:  MOVWF  FA7
07316:  BSF    FA6.1
07318:  BTFSC  FA6.1
0731A:  BRA    7318
0731C:  BCF    FA6.2
0731E:  MOVF   00,W
07320:  IORWF  FF2,F
07322:  MOVLW  14
07324:  MOVLB  3
07326:  MOVWF  x55
07328:  MOVLB  0
0732A:  CALL   0C96
0732E:  CLRF   FAA
07330:  MOVLW  01
07332:  MOVWF  FA9
07334:  MOVFF  4D,FA8
07338:  BCF    FA6.6
0733A:  BCF    FA6.7
0733C:  BSF    FA6.2
0733E:  MOVF   FF2,W
07340:  MOVWF  00
07342:  BCF    FF2.6
07344:  BCF    FF2.7
07346:  MOVLB  F
07348:  MOVLW  55
0734A:  MOVWF  FA7
0734C:  MOVLW  AA
0734E:  MOVWF  FA7
07350:  BSF    FA6.1
07352:  BTFSC  FA6.1
07354:  BRA    7352
07356:  BCF    FA6.2
07358:  MOVF   00,W
0735A:  IORWF  FF2,F
0735C:  MOVLW  14
0735E:  MOVLB  3
07360:  MOVWF  x55
07362:  MOVLB  0
07364:  CALL   0C96
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
07368:  CLRF   FAA
0736A:  MOVLW  02
0736C:  MOVWF  FA9
0736E:  MOVFF  4E,FA8
07372:  BCF    FA6.6
07374:  BCF    FA6.7
07376:  BSF    FA6.2
07378:  MOVF   FF2,W
0737A:  MOVWF  00
0737C:  BCF    FF2.6
0737E:  BCF    FF2.7
07380:  MOVLB  F
07382:  MOVLW  55
07384:  MOVWF  FA7
07386:  MOVLW  AA
07388:  MOVWF  FA7
0738A:  BSF    FA6.1
0738C:  BTFSC  FA6.1
0738E:  BRA    738C
07390:  BCF    FA6.2
07392:  MOVF   00,W
07394:  IORWF  FF2,F
07396:  MOVLW  14
07398:  MOVLB  3
0739A:  MOVWF  x55
0739C:  MOVLB  0
0739E:  CALL   0C96
073A2:  CLRF   FAA
073A4:  MOVLW  03
073A6:  MOVWF  FA9
073A8:  MOVFF  4F,FA8
073AC:  BCF    FA6.6
073AE:  BCF    FA6.7
073B0:  BSF    FA6.2
073B2:  MOVF   FF2,W
073B4:  MOVWF  00
073B6:  BCF    FF2.6
073B8:  BCF    FF2.7
073BA:  MOVLB  F
073BC:  MOVLW  55
073BE:  MOVWF  FA7
073C0:  MOVLW  AA
073C2:  MOVWF  FA7
073C4:  BSF    FA6.1
073C6:  BTFSC  FA6.1
073C8:  BRA    73C6
073CA:  BCF    FA6.2
073CC:  MOVF   00,W
073CE:  IORWF  FF2,F
073D0:  MOVLW  14
073D2:  MOVLB  3
073D4:  MOVWF  x55
073D6:  MOVLB  0
073D8:  CALL   0C96
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
073DC:  MOVLW  02
073DE:  MOVLB  3
073E0:  MOVWF  x3E
073E2:  MOVLW  FA
073E4:  MOVWF  x55
073E6:  MOVLB  0
073E8:  CALL   0C96
073EC:  MOVLB  3
073EE:  DECFSZ x3E,F
073F0:  BRA    73E2
073F2:  MOVLW  01
073F4:  MOVWF  2B
073F6:  CLRF   47
073F8:  MOVLW  02
073FA:  MOVWF  2F
073FC:  MOVWF  31
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
073FE:  MOVFF  4C,50
07402:  MOVFF  4D,51
07406:  MOVFF  4E,52
0740A:  MOVFF  4F,53
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
0740E:  CLRF   4C
07410:  CLRF   4D
07412:  CLRF   4E
07414:  CLRF   4F
07416:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f");          
07418:  MOVLW  0B
0741A:  MOVWF  2E
0741C:  MOVLW  0C
0741E:  MOVWF  x4F
07420:  MOVLB  0
07422:  CALL   2172
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
07426:  MOVF   2B,W
07428:  SUBLW  04
0742A:  BTFSS  FD8.2
0742C:  BRA    769C
....................    EliminaRuido(); 
0742E:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
07432:  MOVLW  01
07434:  MOVLB  3
07436:  MOVWF  x50
07438:  MOVWF  x51
0743A:  MOVLB  0
0743C:  CALL   20F8
....................       printf(lcd_putc,"  Duracion Actual   "); 
07440:  MOVLW  A6
07442:  MOVWF  FF6
07444:  MOVLW  09
07446:  MOVWF  FF7
07448:  CALL   21F0
....................       lcd_gotoxy(1,2); 
0744C:  MOVLW  01
0744E:  MOVLB  3
07450:  MOVWF  x50
07452:  MOVLW  02
07454:  MOVWF  x51
07456:  MOVLB  0
07458:  CALL   20F8
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
0745C:  MOVLW  BC
0745E:  MOVWF  FF6
07460:  MOVLW  09
07462:  MOVWF  FF7
07464:  MOVLW  0B
07466:  MOVLB  3
07468:  MOVWF  x42
0746A:  MOVLB  0
0746C:  CALL   4BA4
07470:  MOVLW  08
07472:  MOVWF  FE9
07474:  MOVFF  5C,33F
07478:  MOVFF  5B,33E
0747C:  CALL   4EF4
07480:  MOVLW  20
07482:  MOVLB  3
07484:  MOVWF  x4F
07486:  MOVLB  0
07488:  CALL   2172
0748C:  MOVLW  20
0748E:  MOVLB  3
07490:  MOVWF  x4F
07492:  MOVLB  0
07494:  CALL   2172
07498:  MOVLW  20
0749A:  MOVLB  3
0749C:  MOVWF  x4F
0749E:  MOVLB  0
074A0:  CALL   2172
....................       lcd_gotoxy(1,4); 
074A4:  MOVLW  01
074A6:  MOVLB  3
074A8:  MOVWF  x50
074AA:  MOVLW  04
074AC:  MOVWF  x51
074AE:  MOVLB  0
074B0:  CALL   20F8
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
074B4:  MOVLW  D0
074B6:  MOVWF  FF6
074B8:  MOVLW  09
074BA:  MOVWF  FF7
074BC:  CALL   21F0
....................        
....................       Cambio=OFF; 
074C0:  BCF    2A.7
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
074C2:  BSF    F92.5
074C4:  BTFSC  F80.5
074C6:  BRA    764C
074C8:  BSF    F96.1
074CA:  BTFSC  F84.1
074CC:  BRA    764C
....................          delay_ms(20); 
074CE:  MOVLW  14
074D0:  MOVLB  3
074D2:  MOVWF  x55
074D4:  MOVLB  0
074D6:  CALL   0C96
....................          if(UP && RIGHT){ 
074DA:  BSF    F92.5
074DC:  BTFSC  F80.5
074DE:  BRA    764C
074E0:  BSF    F96.1
074E2:  BTFSC  F84.1
074E4:  BRA    764C
....................             delay_ms(200); 
074E6:  MOVLW  C8
074E8:  MOVLB  3
074EA:  MOVWF  x55
074EC:  MOVLB  0
074EE:  CALL   0C96
....................             printf(lcd_putc,"\f"); 
074F2:  MOVLW  0C
074F4:  MOVLB  3
074F6:  MOVWF  x4F
074F8:  MOVLB  0
074FA:  CALL   2172
....................             lcd_gotoxy(1,2); 
074FE:  MOVLW  01
07500:  MOVLB  3
07502:  MOVWF  x50
07504:  MOVLW  02
07506:  MOVWF  x51
07508:  MOVLB  0
0750A:  CALL   20F8
....................             printf(lcd_putc," Reset de tiempo "); 
0750E:  MOVLW  E6
07510:  MOVWF  FF6
07512:  MOVLW  09
07514:  MOVWF  FF7
07516:  CALL   21F0
....................             lcd_gotoxy(1,3); 
0751A:  MOVLW  01
0751C:  MOVLB  3
0751E:  MOVWF  x50
07520:  MOVLW  03
07522:  MOVWF  x51
07524:  MOVLB  0
07526:  CALL   20F8
....................             printf(lcd_putc,"     Exitoso     "); 
0752A:  MOVLW  F8
0752C:  MOVWF  FF6
0752E:  MOVLW  09
07530:  MOVWF  FF7
07532:  CALL   21F0
....................             write_eeprom(7,0); 
07536:  CLRF   FAA
07538:  MOVLW  07
0753A:  MOVWF  FA9
0753C:  CLRF   FA8
0753E:  BCF    FA6.6
07540:  BCF    FA6.7
07542:  BSF    FA6.2
07544:  MOVF   FF2,W
07546:  MOVWF  00
07548:  BCF    FF2.6
0754A:  BCF    FF2.7
0754C:  MOVLB  F
0754E:  MOVLW  55
07550:  MOVWF  FA7
07552:  MOVLW  AA
07554:  MOVWF  FA7
07556:  BSF    FA6.1
07558:  BTFSC  FA6.1
0755A:  BRA    7558
0755C:  BCF    FA6.2
0755E:  MOVF   00,W
07560:  IORWF  FF2,F
....................             delay_ms(20); 
07562:  MOVLW  14
07564:  MOVLB  3
07566:  MOVWF  x55
07568:  MOVLB  0
0756A:  CALL   0C96
....................             write_eeprom(8,0); 
0756E:  CLRF   FAA
07570:  MOVLW  08
07572:  MOVWF  FA9
07574:  CLRF   FA8
07576:  BCF    FA6.6
07578:  BCF    FA6.7
0757A:  BSF    FA6.2
0757C:  MOVF   FF2,W
0757E:  MOVWF  00
07580:  BCF    FF2.6
07582:  BCF    FF2.7
07584:  MOVLB  F
07586:  MOVLW  55
07588:  MOVWF  FA7
0758A:  MOVLW  AA
0758C:  MOVWF  FA7
0758E:  BSF    FA6.1
07590:  BTFSC  FA6.1
07592:  BRA    7590
07594:  BCF    FA6.2
07596:  MOVF   00,W
07598:  IORWF  FF2,F
....................             delay_ms(20); 
0759A:  MOVLW  14
0759C:  MOVLB  3
0759E:  MOVWF  x55
075A0:  MOVLB  0
075A2:  CALL   0C96
....................             write_eeprom(9,0); 
075A6:  CLRF   FAA
075A8:  MOVLW  09
075AA:  MOVWF  FA9
075AC:  CLRF   FA8
075AE:  BCF    FA6.6
075B0:  BCF    FA6.7
075B2:  BSF    FA6.2
075B4:  MOVF   FF2,W
075B6:  MOVWF  00
075B8:  BCF    FF2.6
075BA:  BCF    FF2.7
075BC:  MOVLB  F
075BE:  MOVLW  55
075C0:  MOVWF  FA7
075C2:  MOVLW  AA
075C4:  MOVWF  FA7
075C6:  BSF    FA6.1
075C8:  BTFSC  FA6.1
075CA:  BRA    75C8
075CC:  BCF    FA6.2
075CE:  MOVF   00,W
075D0:  IORWF  FF2,F
....................             delay_ms(20); 
075D2:  MOVLW  14
075D4:  MOVLB  3
075D6:  MOVWF  x55
075D8:  MOVLB  0
075DA:  CALL   0C96
....................             write_eeprom(10,0); 
075DE:  CLRF   FAA
075E0:  MOVLW  0A
075E2:  MOVWF  FA9
075E4:  CLRF   FA8
075E6:  BCF    FA6.6
075E8:  BCF    FA6.7
075EA:  BSF    FA6.2
075EC:  MOVF   FF2,W
075EE:  MOVWF  00
075F0:  BCF    FF2.6
075F2:  BCF    FF2.7
075F4:  MOVLB  F
075F6:  MOVLW  55
075F8:  MOVWF  FA7
075FA:  MOVLW  AA
075FC:  MOVWF  FA7
075FE:  BSF    FA6.1
07600:  BTFSC  FA6.1
07602:  BRA    7600
07604:  BCF    FA6.2
07606:  MOVF   00,W
07608:  IORWF  FF2,F
....................             delay_ms(700); 
0760A:  MOVLW  04
0760C:  MOVLB  3
0760E:  MOVWF  x3E
07610:  MOVLW  AF
07612:  MOVWF  x55
07614:  MOVLB  0
07616:  CALL   0C96
0761A:  MOVLB  3
0761C:  DECFSZ x3E,F
0761E:  BRA    7610
....................             segundos=0;minutos=0;horas=0; 
07620:  CLRF   34
07622:  CLRF   35
07624:  CLRF   5C
07626:  CLRF   5B
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
07628:  MOVLW  1E
0762A:  MOVWF  x55
0762C:  MOVLB  0
0762E:  CALL   0C96
07632:  MOVLW  01
07634:  MOVWF  2B
07636:  CLRF   47
07638:  MOVLW  02
0763A:  MOVWF  2F
0763C:  MOVWF  31
0763E:  MOVLW  0C
07640:  MOVLB  3
07642:  MOVWF  x4F
07644:  MOVLB  0
07646:  CALL   2172
....................             Cambio=ON; 
0764A:  BSF    2A.7
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
0764C:  BSF    F96.2
0764E:  BTFSC  F84.2
07650:  BRA    769A
....................          delay_ms(20); 
07652:  MOVLW  14
07654:  MOVLB  3
07656:  MOVWF  x55
07658:  MOVLB  0
0765A:  CALL   0C96
....................          if(IZQU){ 
0765E:  BSF    F96.2
07660:  BTFSC  F84.2
07662:  BRA    7698
....................             if(Flanco3 == 0){ 
07664:  BTFSC  29.6
07666:  BRA    7698
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
07668:  BSF    29.6
0766A:  MOVLW  02
0766C:  MOVLB  3
0766E:  MOVWF  x3E
07670:  MOVLW  FA
07672:  MOVWF  x55
07674:  MOVLB  0
07676:  CALL   0C96
0767A:  MOVLB  3
0767C:  DECFSZ x3E,F
0767E:  BRA    7670
07680:  MOVLW  01
07682:  MOVWF  2B
07684:  CLRF   47
07686:  MOVLW  02
07688:  MOVWF  2F
0768A:  MOVWF  31
0768C:  MOVLW  0C
0768E:  MOVWF  x4F
07690:  MOVLB  0
07692:  CALL   2172
07696:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
07698:  BRA    769C
....................          Flanco3 = 0; 
0769A:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
0769C:  MOVF   2B,W
0769E:  SUBLW  05
076A0:  BTFSS  FD8.2
076A2:  BRA    7958
....................       EliminaRuido(); 
076A4:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
076A8:  MOVLW  01
076AA:  MOVLB  3
076AC:  MOVWF  x50
076AE:  MOVWF  x51
076B0:  MOVLB  0
076B2:  CALL   20F8
....................          printf(lcd_putc,"  Zero Point Config "); 
076B6:  MOVLW  0A
076B8:  MOVWF  FF6
076BA:  MOVLW  0A
076BC:  MOVWF  FF7
076BE:  CALL   21F0
....................          lcd_gotoxy(1,2); 
076C2:  MOVLW  01
076C4:  MOVLB  3
076C6:  MOVWF  x50
076C8:  MOVLW  02
076CA:  MOVWF  x51
076CC:  MOVLB  0
076CE:  CALL   20F8
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
076D2:  MOVLW  05
076D4:  MOVLB  3
076D6:  MOVWF  x3E
076D8:  MOVLB  0
076DA:  CALL   499A
076DE:  MOVFF  00,33E
076E2:  MOVFF  01,33F
076E6:  MOVFF  02,340
076EA:  MOVFF  03,341
076EE:  MOVFF  03,381
076F2:  MOVFF  02,380
076F6:  MOVFF  01,37F
076FA:  MOVFF  00,37E
076FE:  MOVLW  D7
07700:  MOVLB  3
07702:  MOVWF  x85
07704:  MOVLW  A3
07706:  MOVWF  x84
07708:  CLRF   x83
0770A:  MOVLW  81
0770C:  MOVWF  x82
0770E:  MOVLB  0
07710:  CALL   2290
07714:  MOVFF  00,33E
07718:  MOVFF  01,33F
0771C:  MOVFF  02,340
07720:  MOVFF  03,341
07724:  MOVLW  20
07726:  MOVWF  FF6
07728:  MOVLW  0A
0772A:  MOVWF  FF7
0772C:  MOVLW  09
0772E:  MOVLB  3
07730:  MOVWF  x42
07732:  MOVLB  0
07734:  CALL   4BA4
07738:  MOVLW  02
0773A:  MOVWF  FE9
0773C:  MOVFF  341,345
07740:  MOVFF  340,344
07744:  MOVFF  33F,343
07748:  MOVFF  33E,342
0774C:  MOVLB  3
0774E:  MOVWF  x46
07750:  MOVLB  0
07752:  CALL   4D40
07756:  MOVLW  2E
07758:  MOVWF  FF6
0775A:  MOVLW  0A
0775C:  MOVWF  FF7
0775E:  MOVLW  07
07760:  MOVLB  3
07762:  MOVWF  x42
07764:  MOVLB  0
07766:  CALL   4BA4
....................          lcd_gotoxy(1,3); 
0776A:  MOVLW  01
0776C:  MOVLB  3
0776E:  MOVWF  x50
07770:  MOVLW  03
07772:  MOVWF  x51
07774:  MOVLB  0
07776:  CALL   20F8
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
0777A:  MOVLB  3
0777C:  CLRF   x46
0777E:  MOVLB  0
07780:  CALL   3EE2
07784:  MOVFF  00,33E
07788:  MOVFF  01,33F
0778C:  MOVFF  02,340
07790:  MOVFF  03,341
07794:  MOVLW  36
07796:  MOVWF  FF6
07798:  MOVLW  0A
0779A:  MOVWF  FF7
0779C:  MOVLW  08
0779E:  MOVLB  3
077A0:  MOVWF  x42
077A2:  MOVLB  0
077A4:  CALL   4BA4
077A8:  MOVLW  01
077AA:  MOVWF  FE9
077AC:  MOVFF  341,345
077B0:  MOVFF  340,344
077B4:  MOVFF  33F,343
077B8:  MOVFF  33E,342
077BC:  MOVLB  3
077BE:  CLRF   x46
077C0:  MOVLB  0
077C2:  CALL   4D40
....................          lcd_gotoxy(1,4); 
077C6:  MOVLW  01
077C8:  MOVLB  3
077CA:  MOVWF  x50
077CC:  MOVLW  04
077CE:  MOVWF  x51
077D0:  MOVLB  0
077D2:  CALL   20F8
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
077D6:  MOVLW  44
077D8:  MOVWF  FF6
077DA:  MOVLW  0A
077DC:  MOVWF  FF7
077DE:  MOVLW  07
077E0:  MOVLB  3
077E2:  MOVWF  x42
077E4:  MOVLB  0
077E6:  CALL   4BA4
077EA:  MOVLW  01
077EC:  MOVWF  FE9
077EE:  MOVFF  C8,345
077F2:  MOVFF  C7,344
077F6:  MOVFF  C6,343
077FA:  MOVFF  C5,342
077FE:  MOVLB  3
07800:  CLRF   x46
07802:  MOVLB  0
07804:  CALL   4D40
....................           
....................          Cambio=OFF; 
07808:  BCF    2A.7
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
0780A:  BSF    F96.1
0780C:  BTFSC  F84.1
0780E:  BRA    790C
....................          delay_ms(20); 
07810:  MOVLW  14
07812:  MOVLB  3
07814:  MOVWF  x55
07816:  MOVLB  0
07818:  CALL   0C96
....................          if(RIGHT){ 
0781C:  BSF    F96.1
0781E:  BTFSC  F84.1
07820:  BRA    790A
....................             if(Flanco1 == 0){ 
07822:  BTFSC  29.4
07824:  BRA    790A
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
07826:  MOVLW  01
07828:  MOVWF  2B
0782A:  CLRF   47
0782C:  MOVLW  02
0782E:  MOVWF  2F
07830:  MOVWF  31
07832:  MOVLW  0B
07834:  MOVWF  2E
07836:  MOVLW  02
07838:  MOVLB  3
0783A:  MOVWF  x3E
0783C:  MOVLW  FA
0783E:  MOVWF  x55
07840:  MOVLB  0
07842:  CALL   0C96
07846:  MOVLB  3
07848:  DECFSZ x3E,F
0784A:  BRA    783C
0784C:  MOVLW  0C
0784E:  MOVWF  x4F
07850:  MOVLB  0
07852:  CALL   2172
....................                G=sensores(0); 
07856:  MOVLB  3
07858:  CLRF   x46
0785A:  MOVLB  0
0785C:  CALL   3EE2
07860:  MOVFF  03,C8
07864:  MOVFF  02,C7
07868:  MOVFF  01,C6
0786C:  MOVFF  00,C5
....................                G16=(int16)G; 
07870:  MOVFF  C8,381
07874:  MOVFF  C7,380
07878:  MOVFF  C6,37F
0787C:  MOVFF  C5,37E
07880:  CALL   2386
07884:  MOVFF  02,5E
07888:  MOVFF  01,5D
....................                G_l=G16; G_h=(G16>>8); 
0788C:  MOVFF  5D,38
07890:  MOVFF  5E,39
....................                 
....................                write_eeprom(11,G_l); 
07894:  CLRF   FAA
07896:  MOVLW  0B
07898:  MOVWF  FA9
0789A:  MOVFF  38,FA8
0789E:  BCF    FA6.6
078A0:  BCF    FA6.7
078A2:  BSF    FA6.2
078A4:  MOVF   FF2,W
078A6:  MOVWF  00
078A8:  BCF    FF2.6
078AA:  BCF    FF2.7
078AC:  MOVLB  F
078AE:  MOVLW  55
078B0:  MOVWF  FA7
078B2:  MOVLW  AA
078B4:  MOVWF  FA7
078B6:  BSF    FA6.1
078B8:  BTFSC  FA6.1
078BA:  BRA    78B8
078BC:  BCF    FA6.2
078BE:  MOVF   00,W
078C0:  IORWF  FF2,F
....................                delay_ms(20); 
078C2:  MOVLW  14
078C4:  MOVLB  3
078C6:  MOVWF  x55
078C8:  MOVLB  0
078CA:  CALL   0C96
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
078CE:  CLRF   FAA
078D0:  MOVLW  0C
078D2:  MOVWF  FA9
078D4:  MOVFF  39,FA8
078D8:  BCF    FA6.6
078DA:  BCF    FA6.7
078DC:  BSF    FA6.2
078DE:  MOVF   FF2,W
078E0:  MOVWF  00
078E2:  BCF    FF2.6
078E4:  BCF    FF2.7
078E6:  MOVLB  F
078E8:  MOVLW  55
078EA:  MOVWF  FA7
078EC:  MOVLW  AA
078EE:  MOVWF  FA7
078F0:  BSF    FA6.1
078F2:  BTFSC  FA6.1
078F4:  BRA    78F2
078F6:  BCF    FA6.2
078F8:  MOVF   00,W
078FA:  IORWF  FF2,F
....................                delay_ms(20); 
078FC:  MOVLW  14
078FE:  MOVLB  3
07900:  MOVWF  x55
07902:  MOVLB  0
07904:  CALL   0C96
....................                Cambio=ON; 
07908:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
0790A:  BRA    790E
....................          Flanco1 = 0; 
0790C:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
0790E:  BSF    F96.2
07910:  BTFSC  F84.2
07912:  BRA    7956
....................          delay_ms(20); 
07914:  MOVLW  14
07916:  MOVLB  3
07918:  MOVWF  x55
0791A:  MOVLB  0
0791C:  CALL   0C96
....................          if(IZQU){ 
07920:  BSF    F96.2
07922:  BTFSC  F84.2
07924:  BRA    7954
....................             if(Flanco3 == 0){ 
07926:  BTFSC  29.6
07928:  BRA    7954
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
0792A:  MOVLW  01
0792C:  MOVWF  2B
0792E:  CLRF   47
07930:  MOVLW  02
07932:  MOVWF  2F
07934:  MOVWF  31
07936:  MOVLW  0B
07938:  MOVWF  2E
0793A:  MOVLW  1E
0793C:  MOVLB  3
0793E:  MOVWF  x55
07940:  MOVLB  0
07942:  CALL   0C96
07946:  MOVLW  0C
07948:  MOVLB  3
0794A:  MOVWF  x4F
0794C:  MOVLB  0
0794E:  CALL   2172
....................                Cambio=ON; 
07952:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
07954:  BRA    7958
....................          Flanco3 = 0; 
07956:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
07958:  MOVF   2B,W
0795A:  SUBLW  06
0795C:  BTFSS  FD8.2
0795E:  BRA    7AB2
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
07960:  BTG    2A.4
07962:  BSF    29.4
07964:  MOVLW  01
07966:  MOVWF  2B
07968:  CLRF   47
....................                        
....................             if(estadoalarma==1) 
0796A:  BTFSS  2A.4
0796C:  BRA    79DE
....................             {estadoalarma=1; 
0796E:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
07970:  MOVLW  01
07972:  MOVLB  3
07974:  MOVWF  x50
07976:  MOVWF  x51
07978:  MOVLB  0
0797A:  CALL   20F8
....................                printf(lcd_putc,"                    "); 
0797E:  MOVLW  52
07980:  MOVWF  FF6
07982:  MOVLW  0A
07984:  MOVWF  FF7
07986:  CALL   21F0
....................                lcd_gotoxy(1,2); 
0798A:  MOVLW  01
0798C:  MOVLB  3
0798E:  MOVWF  x50
07990:  MOVLW  02
07992:  MOVWF  x51
07994:  MOVLB  0
07996:  CALL   20F8
....................                printf(lcd_putc,"        Activo      "); 
0799A:  MOVLW  68
0799C:  MOVWF  FF6
0799E:  MOVLW  0A
079A0:  MOVWF  FF7
079A2:  CALL   21F0
....................                lcd_gotoxy(1,3); 
079A6:  MOVLW  01
079A8:  MOVLB  3
079AA:  MOVWF  x50
079AC:  MOVLW  03
079AE:  MOVWF  x51
079B0:  MOVLB  0
079B2:  CALL   20F8
....................                printf(lcd_putc,"        Alarma      "); 
079B6:  MOVLW  7E
079B8:  MOVWF  FF6
079BA:  MOVLW  0A
079BC:  MOVWF  FF7
079BE:  CALL   21F0
....................                lcd_gotoxy(1,4); 
079C2:  MOVLW  01
079C4:  MOVLB  3
079C6:  MOVWF  x50
079C8:  MOVLW  04
079CA:  MOVWF  x51
079CC:  MOVLB  0
079CE:  CALL   20F8
....................                printf(lcd_putc,"                    ");} 
079D2:  MOVLW  94
079D4:  MOVWF  FF6
079D6:  MOVLW  0A
079D8:  MOVWF  FF7
079DA:  CALL   21F0
....................                 
....................             if(estadoalarma==0) 
079DE:  BTFSC  2A.4
079E0:  BRA    7A52
....................             {estadoalarma=0; 
079E2:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
079E4:  MOVLW  01
079E6:  MOVLB  3
079E8:  MOVWF  x50
079EA:  MOVWF  x51
079EC:  MOVLB  0
079EE:  CALL   20F8
....................                printf(lcd_putc,"                    "); 
079F2:  MOVLW  AA
079F4:  MOVWF  FF6
079F6:  MOVLW  0A
079F8:  MOVWF  FF7
079FA:  CALL   21F0
....................                lcd_gotoxy(1,2); 
079FE:  MOVLW  01
07A00:  MOVLB  3
07A02:  MOVWF  x50
07A04:  MOVLW  02
07A06:  MOVWF  x51
07A08:  MOVLB  0
07A0A:  CALL   20F8
....................                printf(lcd_putc,"      Desactivo     "); 
07A0E:  MOVLW  C0
07A10:  MOVWF  FF6
07A12:  MOVLW  0A
07A14:  MOVWF  FF7
07A16:  CALL   21F0
....................                lcd_gotoxy(1,3); 
07A1A:  MOVLW  01
07A1C:  MOVLB  3
07A1E:  MOVWF  x50
07A20:  MOVLW  03
07A22:  MOVWF  x51
07A24:  MOVLB  0
07A26:  CALL   20F8
....................                printf(lcd_putc,"       Alarma       "); 
07A2A:  MOVLW  D6
07A2C:  MOVWF  FF6
07A2E:  MOVLW  0A
07A30:  MOVWF  FF7
07A32:  CALL   21F0
....................                lcd_gotoxy(1,4); 
07A36:  MOVLW  01
07A38:  MOVLB  3
07A3A:  MOVWF  x50
07A3C:  MOVLW  04
07A3E:  MOVWF  x51
07A40:  MOVLB  0
07A42:  CALL   20F8
....................                printf(lcd_putc,"                    ");} 
07A46:  MOVLW  EC
07A48:  MOVWF  FF6
07A4A:  MOVLW  0A
07A4C:  MOVWF  FF7
07A4E:  CALL   21F0
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
07A52:  MOVLW  00
07A54:  BTFSC  2A.4
07A56:  MOVLW  01
07A58:  MOVLB  3
07A5A:  MOVWF  x3E
07A5C:  CLRF   FAA
07A5E:  MOVLW  04
07A60:  MOVWF  FA9
07A62:  MOVFF  33E,FA8
07A66:  BCF    FA6.6
07A68:  BCF    FA6.7
07A6A:  BSF    FA6.2
07A6C:  MOVF   FF2,W
07A6E:  MOVWF  00
07A70:  BCF    FF2.6
07A72:  BCF    FF2.7
07A74:  MOVLB  F
07A76:  MOVLW  55
07A78:  MOVWF  FA7
07A7A:  MOVLW  AA
07A7C:  MOVWF  FA7
07A7E:  BSF    FA6.1
07A80:  BTFSC  FA6.1
07A82:  BRA    7A80
07A84:  BCF    FA6.2
07A86:  MOVF   00,W
07A88:  IORWF  FF2,F
07A8A:  MOVLW  04
07A8C:  MOVLB  3
07A8E:  MOVWF  x3E
07A90:  MOVLW  FA
07A92:  MOVWF  x55
07A94:  MOVLB  0
07A96:  CALL   0C96
07A9A:  MOVLB  3
07A9C:  DECFSZ x3E,F
07A9E:  BRA    7A90
07AA0:  MOVLW  02
07AA2:  MOVWF  2F
07AA4:  MOVWF  31
07AA6:  MOVLW  0C
07AA8:  MOVWF  x4F
07AAA:  MOVLB  0
07AAC:  CALL   2172
....................             Cambio=ON; 
07AB0:  BSF    2A.7
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
07AB2:  MOVF   2B,W
07AB4:  SUBLW  07
07AB6:  BTFSS  FD8.2
07AB8:  BRA    7C98
....................       if(Vel1>20) 
07ABA:  MOVF   58,W
07ABC:  SUBLW  14
07ABE:  BC    7AC4
....................          Vel1=20; 
07AC0:  MOVLW  14
07AC2:  MOVWF  58
....................       if(Vel1<1) 
07AC4:  MOVF   58,F
07AC6:  BNZ   7ACC
....................          Vel1=1; 
07AC8:  MOVLW  01
07ACA:  MOVWF  58
....................        
....................       lcd_gotoxy(1,1); 
07ACC:  MOVLW  01
07ACE:  MOVLB  3
07AD0:  MOVWF  x50
07AD2:  MOVWF  x51
07AD4:  MOVLB  0
07AD6:  CALL   20F8
....................       printf(lcd_putc,"Seleccione Velocidad"); 
07ADA:  MOVLW  02
07ADC:  MOVWF  FF6
07ADE:  MOVLW  0B
07AE0:  MOVWF  FF7
07AE2:  CALL   21F0
....................       lcd_gotoxy(1,2); 
07AE6:  MOVLW  01
07AE8:  MOVLB  3
07AEA:  MOVWF  x50
07AEC:  MOVLW  02
07AEE:  MOVWF  x51
07AF0:  MOVLB  0
07AF2:  CALL   20F8
....................       printf(lcd_putc,"   del Ventilador   "); 
07AF6:  MOVLW  18
07AF8:  MOVWF  FF6
07AFA:  MOVLW  0B
07AFC:  MOVWF  FF7
07AFE:  CALL   21F0
....................       lcd_gotoxy(1,3); 
07B02:  MOVLW  01
07B04:  MOVLB  3
07B06:  MOVWF  x50
07B08:  MOVLW  03
07B0A:  MOVWF  x51
07B0C:  MOVLB  0
07B0E:  CALL   20F8
....................       printf(lcd_putc,"     Vel: %02u       ",Vel1); 
07B12:  MOVLW  2E
07B14:  MOVWF  FF6
07B16:  MOVLW  0B
07B18:  MOVWF  FF7
07B1A:  MOVLW  0A
07B1C:  MOVLB  3
07B1E:  MOVWF  x42
07B20:  MOVLB  0
07B22:  CALL   4BA4
07B26:  MOVFF  58,33E
07B2A:  MOVLW  01
07B2C:  MOVLB  3
07B2E:  MOVWF  x3F
07B30:  MOVLB  0
07B32:  CALL   4BFA
07B36:  MOVLW  3C
07B38:  MOVWF  FF6
07B3A:  MOVLW  0B
07B3C:  MOVWF  FF7
07B3E:  MOVLW  07
07B40:  MOVLB  3
07B42:  MOVWF  x42
07B44:  MOVLB  0
07B46:  CALL   4BA4
....................       lcd_gotoxy(1,4); 
07B4A:  MOVLW  01
07B4C:  MOVLB  3
07B4E:  MOVWF  x50
07B50:  MOVLW  04
07B52:  MOVWF  x51
07B54:  MOVLB  0
07B56:  CALL   20F8
....................       printf(lcd_putc,"                    ");       
07B5A:  MOVLW  44
07B5C:  MOVWF  FF6
07B5E:  MOVLW  0B
07B60:  MOVWF  FF7
07B62:  CALL   21F0
....................        
....................       if(UP && Vel1<20)//Si oprime hacia arriba 
07B66:  BSF    F92.5
07B68:  BTFSC  F80.5
07B6A:  BRA    7B80
07B6C:  MOVF   58,W
07B6E:  SUBLW  13
07B70:  BNC   7B80
....................       {   
....................          delay_ms(200);Vel1++; 
07B72:  MOVLW  C8
07B74:  MOVLB  3
07B76:  MOVWF  x55
07B78:  MOVLB  0
07B7A:  CALL   0C96
07B7E:  INCF   58,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
07B80:  BSF    F96.0
07B82:  BTFSC  F84.0
07B84:  BRA    7B98
07B86:  MOVF   58,F
07B88:  BZ    7B98
....................       {   
....................          delay_ms(200);Vel1--; 
07B8A:  MOVLW  C8
07B8C:  MOVLB  3
07B8E:  MOVWF  x55
07B90:  MOVLB  0
07B92:  CALL   0C96
07B96:  DECF   58,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
07B98:  BSF    F96.1
07B9A:  BTFSC  F84.1
07B9C:  BRA    7BA2
....................       {            
....................          VelMotor=Vel1; 
07B9E:  MOVFF  58,EE
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
07BA2:  BSF    F96.2
07BA4:  BTFSC  F84.2
07BA6:  BRA    7C98
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
07BA8:  MOVLW  64
07BAA:  MOVLB  3
07BAC:  MOVWF  x55
07BAE:  MOVLB  0
07BB0:  CALL   0C96
07BB4:  MOVLW  02
07BB6:  MOVWF  2F
07BB8:  MOVWF  31
07BBA:  MOVLW  0C
07BBC:  MOVLB  3
07BBE:  MOVWF  x4F
07BC0:  MOVLB  0
07BC2:  CALL   2172
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
07BC6:  CLRF   FAA
07BC8:  MOVLW  0D
07BCA:  MOVWF  FA9
07BCC:  MOVFF  58,FA8
07BD0:  BCF    FA6.6
07BD2:  BCF    FA6.7
07BD4:  BSF    FA6.2
07BD6:  MOVF   FF2,W
07BD8:  MOVWF  00
07BDA:  BCF    FF2.6
07BDC:  BCF    FF2.7
07BDE:  MOVLB  F
07BE0:  MOVLW  55
07BE2:  MOVWF  FA7
07BE4:  MOVLW  AA
07BE6:  MOVWF  FA7
07BE8:  BSF    FA6.1
07BEA:  BTFSC  FA6.1
07BEC:  BRA    7BEA
07BEE:  BCF    FA6.2
07BF0:  MOVF   00,W
07BF2:  IORWF  FF2,F
....................          delay_ms(20); 
07BF4:  MOVLW  14
07BF6:  MOVLB  3
07BF8:  MOVWF  x55
07BFA:  MOVLB  0
07BFC:  CALL   0C96
....................          lcd_gotoxy(1,1); 
07C00:  MOVLW  01
07C02:  MOVLB  3
07C04:  MOVWF  x50
07C06:  MOVWF  x51
07C08:  MOVLB  0
07C0A:  CALL   20F8
....................          printf(lcd_putc,"                    "); 
07C0E:  MOVLW  5A
07C10:  MOVWF  FF6
07C12:  MOVLW  0B
07C14:  MOVWF  FF7
07C16:  CALL   21F0
....................          lcd_gotoxy(1,2); 
07C1A:  MOVLW  01
07C1C:  MOVLB  3
07C1E:  MOVWF  x50
07C20:  MOVLW  02
07C22:  MOVWF  x51
07C24:  MOVLB  0
07C26:  CALL   20F8
....................          printf(lcd_putc,"     Velocidad      "); 
07C2A:  MOVLW  70
07C2C:  MOVWF  FF6
07C2E:  MOVLW  0B
07C30:  MOVWF  FF7
07C32:  CALL   21F0
....................          lcd_gotoxy(1,3); 
07C36:  MOVLW  01
07C38:  MOVLB  3
07C3A:  MOVWF  x50
07C3C:  MOVLW  03
07C3E:  MOVWF  x51
07C40:  MOVLB  0
07C42:  CALL   20F8
....................          printf(lcd_putc,"      Almacenada    "); 
07C46:  MOVLW  86
07C48:  MOVWF  FF6
07C4A:  MOVLW  0B
07C4C:  MOVWF  FF7
07C4E:  CALL   21F0
....................          lcd_gotoxy(1,4); 
07C52:  MOVLW  01
07C54:  MOVLB  3
07C56:  MOVWF  x50
07C58:  MOVLW  04
07C5A:  MOVWF  x51
07C5C:  MOVLB  0
07C5E:  CALL   20F8
....................          printf(lcd_putc,"                    ");  
07C62:  MOVLW  9C
07C64:  MOVWF  FF6
07C66:  MOVLW  0B
07C68:  MOVWF  FF7
07C6A:  CALL   21F0
....................          delay_ms(1000); 
07C6E:  MOVLW  04
07C70:  MOVLB  3
07C72:  MOVWF  x3E
07C74:  MOVLW  FA
07C76:  MOVWF  x55
07C78:  MOVLB  0
07C7A:  CALL   0C96
07C7E:  MOVLB  3
07C80:  DECFSZ x3E,F
07C82:  BRA    7C74
....................          printf(lcd_putc,"\f"); 
07C84:  MOVLW  0C
07C86:  MOVWF  x4F
07C88:  MOVLB  0
07C8A:  CALL   2172
....................          lcd_init(); 
07C8E:  CALL   0D38
....................          Menu=1; paso=0; 
07C92:  MOVLW  01
07C94:  MOVWF  2B
07C96:  CLRF   47
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
07C98:  MOVF   2B,W
07C9A:  SUBLW  32
07C9C:  BTFSS  FD8.2
07C9E:  GOTO   856E
....................    if(Lectura==1){ 
07CA2:  BTFSS  2A.0
07CA4:  BRA    80B0
....................       Lectura=0; 
07CA6:  BCF    2A.0
....................       DownFlow=LeerFlujo(10,1); 
07CA8:  MOVLW  0A
07CAA:  MOVLB  3
07CAC:  MOVWF  x3E
07CAE:  MOVLW  01
07CB0:  MOVWF  x3F
07CB2:  MOVLB  0
07CB4:  CALL   3F3A
07CB8:  MOVFF  03,C4
07CBC:  MOVFF  02,C3
07CC0:  MOVFF  01,C2
07CC4:  MOVFF  00,C1
....................       CaidaPresion=Leer_Sensor_Presion(8); 
07CC8:  MOVLW  08
07CCA:  MOVLB  3
07CCC:  MOVWF  x3E
07CCE:  MOVLB  0
07CD0:  CALL   499A
07CD4:  MOVFF  03,C0
07CD8:  MOVFF  02,BF
07CDC:  MOVFF  01,BE
07CE0:  MOVFF  00,BD
....................       CaidaPresion=CaidaPresion*4.02; 
07CE4:  MOVFF  C0,381
07CE8:  MOVFF  BF,380
07CEC:  MOVFF  BE,37F
07CF0:  MOVFF  BD,37E
07CF4:  MOVLW  D7
07CF6:  MOVLB  3
07CF8:  MOVWF  x85
07CFA:  MOVLW  A3
07CFC:  MOVWF  x84
07CFE:  CLRF   x83
07D00:  MOVLW  81
07D02:  MOVWF  x82
07D04:  MOVLB  0
07D06:  CALL   2290
07D0A:  MOVFF  03,C0
07D0E:  MOVFF  02,BF
07D12:  MOVFF  01,BE
07D16:  MOVFF  00,BD
....................       if(DownFlow<0.3 && estadomv==1 && tEncendido>30){ 
07D1A:  MOVFF  C4,381
07D1E:  MOVFF  C3,380
07D22:  MOVFF  C2,37F
07D26:  MOVFF  C1,37E
07D2A:  MOVLW  9A
07D2C:  MOVLB  3
07D2E:  MOVWF  x85
07D30:  MOVLW  99
07D32:  MOVWF  x84
07D34:  MOVLW  19
07D36:  MOVWF  x83
07D38:  MOVLW  7D
07D3A:  MOVWF  x82
07D3C:  MOVLB  0
07D3E:  CALL   183A
07D42:  BNC   7D74
07D44:  BTFSS  29.2
07D46:  BRA    7D74
07D48:  MOVF   60,F
07D4A:  BNZ   7D52
07D4C:  MOVF   5F,W
07D4E:  SUBLW  1E
07D50:  BC    7D74
....................          lcd_gotoxy(1,2); 
07D52:  MOVLW  01
07D54:  MOVLB  3
07D56:  MOVWF  x50
07D58:  MOVLW  02
07D5A:  MOVWF  x51
07D5C:  MOVLB  0
07D5E:  CALL   20F8
....................          printf(lcd_putc,"!Verifique Flujo!  ");  
07D62:  MOVLW  B2
07D64:  MOVWF  FF6
07D66:  MOVLW  0B
07D68:  MOVWF  FF7
07D6A:  CALL   21F0
....................          ActivaBuzzer=1; 
07D6E:  MOVLW  01
07D70:  MOVWF  54
....................       }else if(CaidaPresion>=1.0){ 
07D72:  BRA    7EB2
07D74:  MOVLB  3
07D76:  CLRF   x81
07D78:  CLRF   x80
07D7A:  CLRF   x7F
07D7C:  MOVLW  7F
07D7E:  MOVWF  x7E
07D80:  MOVFF  C0,385
07D84:  MOVFF  BF,384
07D88:  MOVFF  BE,383
07D8C:  MOVFF  BD,382
07D90:  MOVLB  0
07D92:  CALL   183A
07D96:  BC    7D9A
07D98:  BNZ   7DBC
....................          lcd_gotoxy(1,2); 
07D9A:  MOVLW  01
07D9C:  MOVLB  3
07D9E:  MOVWF  x50
07DA0:  MOVLW  02
07DA2:  MOVWF  x51
07DA4:  MOVLB  0
07DA6:  CALL   20F8
....................          printf(lcd_putc,"!Verifique Filtro!");  
07DAA:  MOVLW  C6
07DAC:  MOVWF  FF6
07DAE:  MOVLW  0B
07DB0:  MOVWF  FF7
07DB2:  CALL   21F0
....................          ActivaBuzzer=1; 
07DB6:  MOVLW  01
07DB8:  MOVWF  54
....................       }else{ 
07DBA:  BRA    7EB2
....................          lcd_gotoxy(1,2); 
07DBC:  MOVLW  01
07DBE:  MOVLB  3
07DC0:  MOVWF  x50
07DC2:  MOVLW  02
07DC4:  MOVWF  x51
07DC6:  MOVLB  0
07DC8:  CALL   20F8
....................          printf(lcd_putc,"Filtro:"); 
07DCC:  MOVLW  DA
07DCE:  MOVWF  FF6
07DD0:  MOVLW  0B
07DD2:  MOVWF  FF7
07DD4:  CALL   21F0
....................          for(i=0;i<floor(Saturacion);i++){ 
07DD8:  CLRF   40
07DDA:  MOVFF  BC,36D
07DDE:  MOVFF  BB,36C
07DE2:  MOVFF  BA,36B
07DE6:  MOVFF  B9,36A
07DEA:  CALL   274A
07DEE:  MOVFF  00,33E
07DF2:  MOVFF  01,33F
07DF6:  MOVFF  02,340
07DFA:  MOVFF  03,341
07DFE:  MOVLB  3
07E00:  CLRF   x83
07E02:  MOVFF  40,382
07E06:  MOVLB  0
07E08:  CALL   0DFA
07E0C:  MOVFF  03,381
07E10:  MOVFF  02,380
07E14:  MOVFF  01,37F
07E18:  MOVFF  00,37E
07E1C:  MOVFF  341,385
07E20:  MOVFF  340,384
07E24:  MOVFF  33F,383
07E28:  MOVFF  33E,382
07E2C:  CALL   183A
07E30:  BNC   7E56
....................             lcd_gotoxy(i+8,2); 
07E32:  MOVLW  08
07E34:  ADDWF  40,W
07E36:  MOVLB  3
07E38:  MOVWF  x3E
07E3A:  MOVWF  x50
07E3C:  MOVLW  02
07E3E:  MOVWF  x51
07E40:  MOVLB  0
07E42:  CALL   20F8
....................             printf(lcd_putc,"Ñ"); 
07E46:  MOVLW  D1
07E48:  MOVLB  3
07E4A:  MOVWF  x4F
07E4C:  MOVLB  0
07E4E:  CALL   2172
....................          } 
07E52:  INCF   40,F
07E54:  BRA    7DDA
....................           
....................          for(i=floor(Saturacion);i<11;i++){ 
07E56:  MOVFF  BC,36D
07E5A:  MOVFF  BB,36C
07E5E:  MOVFF  BA,36B
07E62:  MOVFF  B9,36A
07E66:  CALL   274A
07E6A:  MOVFF  03,381
07E6E:  MOVFF  02,380
07E72:  MOVFF  01,37F
07E76:  MOVFF  00,37E
07E7A:  CALL   2386
07E7E:  MOVFF  01,40
07E82:  MOVF   40,W
07E84:  SUBLW  0A
07E86:  BNC   7EAC
....................             lcd_gotoxy(i+8,2); 
07E88:  MOVLW  08
07E8A:  ADDWF  40,W
07E8C:  MOVLB  3
07E8E:  MOVWF  x3E
07E90:  MOVWF  x50
07E92:  MOVLW  02
07E94:  MOVWF  x51
07E96:  MOVLB  0
07E98:  CALL   20F8
....................             printf(lcd_putc," "); 
07E9C:  MOVLW  20
07E9E:  MOVLB  3
07EA0:  MOVWF  x4F
07EA2:  MOVLB  0
07EA4:  CALL   2172
....................          }    
07EA8:  INCF   40,F
07EAA:  BRA    7E82
....................          Buzzer_off; 
07EAC:  BCF    F8B.0
07EAE:  BCF    F94.0
....................          ActivaBuzzer=0; 
07EB0:  CLRF   54
....................       } 
....................       lcd_gotoxy(1,1); 
07EB2:  MOVLW  01
07EB4:  MOVLB  3
07EB6:  MOVWF  x50
07EB8:  MOVWF  x51
07EBA:  MOVLB  0
07EBC:  CALL   20F8
....................       printf(lcd_putc,"F:%2.1fm/s P:%3.2finWC ",DownFlow,CaidaPresion);   
07EC0:  MOVLW  46
07EC2:  MOVLB  3
07EC4:  MOVWF  x4F
07EC6:  MOVLB  0
07EC8:  CALL   2172
07ECC:  MOVLW  3A
07ECE:  MOVLB  3
07ED0:  MOVWF  x4F
07ED2:  MOVLB  0
07ED4:  CALL   2172
07ED8:  MOVLW  01
07EDA:  MOVWF  FE9
07EDC:  MOVFF  C4,345
07EE0:  MOVFF  C3,344
07EE4:  MOVFF  C2,343
07EE8:  MOVFF  C1,342
07EEC:  MOVLB  3
07EEE:  MOVWF  x46
07EF0:  MOVLB  0
07EF2:  CALL   4D40
07EF6:  MOVLW  E9
07EF8:  MOVWF  FF6
07EFA:  MOVLW  0B
07EFC:  MOVWF  FF7
07EFE:  MOVLW  06
07F00:  MOVLB  3
07F02:  MOVWF  x42
07F04:  MOVLB  0
07F06:  CALL   4BA4
07F0A:  MOVLW  02
07F0C:  MOVWF  FE9
07F0E:  MOVFF  C0,345
07F12:  MOVFF  BF,344
07F16:  MOVFF  BE,343
07F1A:  MOVFF  BD,342
07F1E:  MOVLB  3
07F20:  MOVWF  x46
07F22:  MOVLB  0
07F24:  CALL   4D40
07F28:  MOVLW  F4
07F2A:  MOVWF  FF6
07F2C:  MOVLW  0B
07F2E:  MOVWF  FF7
07F30:  MOVLW  05
07F32:  MOVLB  3
07F34:  MOVWF  x42
07F36:  MOVLB  0
07F38:  CALL   4BA4
....................       //Saturacion=11*(((float)Vel1-(float)velocidadInicial)/(20.0-(float)velocidadInicial)); 
....................       Saturacion=(CaidaPresion/1.0)*11; 
07F3C:  MOVFF  C0,381
07F40:  MOVFF  BF,380
07F44:  MOVFF  BE,37F
07F48:  MOVFF  BD,37E
07F4C:  MOVLB  3
07F4E:  CLRF   x85
07F50:  CLRF   x84
07F52:  CLRF   x83
07F54:  MOVLW  7F
07F56:  MOVWF  x82
07F58:  MOVLB  0
07F5A:  CALL   0E30
07F5E:  MOVFF  00,33E
07F62:  MOVFF  01,33F
07F66:  MOVFF  02,340
07F6A:  MOVFF  03,341
07F6E:  MOVFF  03,381
07F72:  MOVFF  02,380
07F76:  MOVFF  01,37F
07F7A:  MOVFF  00,37E
07F7E:  MOVLB  3
07F80:  CLRF   x85
07F82:  CLRF   x84
07F84:  MOVLW  30
07F86:  MOVWF  x83
07F88:  MOVLW  82
07F8A:  MOVWF  x82
07F8C:  MOVLB  0
07F8E:  CALL   2290
07F92:  MOVFF  03,BC
07F96:  MOVFF  02,BB
07F9A:  MOVFF  01,BA
07F9E:  MOVFF  00,B9
....................        
....................       lcd_gotoxy(9,3); 
07FA2:  MOVLW  09
07FA4:  MOVLB  3
07FA6:  MOVWF  x50
07FA8:  MOVLW  03
07FAA:  MOVWF  x51
07FAC:  MOVLB  0
07FAE:  CALL   20F8
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
07FB2:  MOVLW  FA
07FB4:  MOVWF  FF6
07FB6:  MOVLW  0B
07FB8:  MOVWF  FF7
07FBA:  MOVLW  06
07FBC:  MOVLB  3
07FBE:  MOVWF  x42
07FC0:  MOVLB  0
07FC2:  CALL   4BA4
07FC6:  MOVFF  3A,33E
07FCA:  MOVLW  03
07FCC:  MOVLB  3
07FCE:  MOVWF  x3F
07FD0:  MOVLB  0
07FD2:  CALL   4BFA
07FD6:  MOVLW  3A
07FD8:  MOVLB  3
07FDA:  MOVWF  x4F
07FDC:  MOVLB  0
07FDE:  CALL   2172
07FE2:  MOVFF  3B,33E
07FE6:  MOVLW  01
07FE8:  MOVLB  3
07FEA:  MOVWF  x3F
07FEC:  MOVLB  0
07FEE:  CALL   4BFA
....................       EliminaRuido(); 
07FF2:  CALL   0004
....................        
....................       if(estadomv==1){ 
07FF6:  BTFSS  29.2
07FF8:  BRA    8018
....................          lcd_gotoxy(1,4); 
07FFA:  MOVLW  01
07FFC:  MOVLB  3
07FFE:  MOVWF  x50
08000:  MOVLW  04
08002:  MOVWF  x51
08004:  MOVLB  0
08006:  CALL   20F8
....................          printf(lcd_putc,"Motor:ON ");       
0800A:  MOVLW  0A
0800C:  MOVWF  FF6
0800E:  MOVLW  0C
08010:  MOVWF  FF7
08012:  CALL   21F0
....................       }else{ 
08016:  BRA    8034
....................          lcd_gotoxy(1,4); 
08018:  MOVLW  01
0801A:  MOVLB  3
0801C:  MOVWF  x50
0801E:  MOVLW  04
08020:  MOVWF  x51
08022:  MOVLB  0
08024:  CALL   20F8
....................          printf(lcd_putc,"Motor:OFF"); 
08028:  MOVLW  14
0802A:  MOVWF  FF6
0802C:  MOVLW  0C
0802E:  MOVWF  FF7
08030:  CALL   21F0
....................       } 
....................        
....................       if(estadofl==1){ 
08034:  BTFSS  29.1
08036:  BRA    8056
....................          lcd_gotoxy(1,3); 
08038:  MOVLW  01
0803A:  MOVLB  3
0803C:  MOVWF  x50
0803E:  MOVLW  03
08040:  MOVWF  x51
08042:  MOVLB  0
08044:  CALL   20F8
....................          printf(lcd_putc,"Luz:ON "); 
08048:  MOVLW  1E
0804A:  MOVWF  FF6
0804C:  MOVLW  0C
0804E:  MOVWF  FF7
08050:  CALL   21F0
....................       }else{ 
08054:  BRA    8072
....................          lcd_gotoxy(1,3); 
08056:  MOVLW  01
08058:  MOVLB  3
0805A:  MOVWF  x50
0805C:  MOVLW  03
0805E:  MOVWF  x51
08060:  MOVLB  0
08062:  CALL   20F8
....................          printf(lcd_putc,"Luz:OFF"); 
08066:  MOVLW  26
08068:  MOVWF  FF6
0806A:  MOVLW  0C
0806C:  MOVWF  FF7
0806E:  CALL   21F0
....................       }  
....................        
....................       if(estadouv==1){ 
08072:  BTFSS  29.0
08074:  BRA    8094
....................          lcd_gotoxy(13,4); 
08076:  MOVLW  0D
08078:  MOVLB  3
0807A:  MOVWF  x50
0807C:  MOVLW  04
0807E:  MOVWF  x51
08080:  MOVLB  0
08082:  CALL   20F8
....................          printf(lcd_putc,"UV:ON "); 
08086:  MOVLW  2E
08088:  MOVWF  FF6
0808A:  MOVLW  0C
0808C:  MOVWF  FF7
0808E:  CALL   21F0
....................       }else{          
08092:  BRA    80B0
....................          lcd_gotoxy(13,4); 
08094:  MOVLW  0D
08096:  MOVLB  3
08098:  MOVWF  x50
0809A:  MOVLW  04
0809C:  MOVWF  x51
0809E:  MOVLB  0
080A0:  CALL   20F8
....................          printf(lcd_putc,"UV:OFF"); 
080A4:  MOVLW  36
080A6:  MOVWF  FF6
080A8:  MOVLW  0C
080AA:  MOVWF  FF7
080AC:  CALL   21F0
....................       } 
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
080B0:  BTFSS  29.7
080B2:  BRA    816C
....................       if(estadoalarma==1){ 
080B4:  BTFSS  2A.4
080B6:  BRA    815E
....................          printf(lcd_putc,"\f"); 
080B8:  MOVLW  0C
080BA:  MOVLB  3
080BC:  MOVWF  x4F
080BE:  MOVLB  0
080C0:  CALL   2172
....................          lcd_gotoxy(1,2); 
080C4:  MOVLW  01
080C6:  MOVLB  3
080C8:  MOVWF  x50
080CA:  MOVLW  02
080CC:  MOVWF  x51
080CE:  MOVLB  0
080D0:  CALL   20F8
....................          printf(lcd_putc,"  Temporizador  de  "); 
080D4:  MOVLW  3E
080D6:  MOVWF  FF6
080D8:  MOVLW  0C
080DA:  MOVWF  FF7
080DC:  CALL   21F0
....................          lcd_gotoxy(1,3); 
080E0:  MOVLW  01
080E2:  MOVLB  3
080E4:  MOVWF  x50
080E6:  MOVLW  03
080E8:  MOVWF  x51
080EA:  MOVLB  0
080EC:  CALL   20F8
....................          printf(lcd_putc," Luz UV  Finalizado "); 
080F0:  MOVLW  54
080F2:  MOVWF  FF6
080F4:  MOVLW  0C
080F6:  MOVWF  FF7
080F8:  CALL   21F0
....................          lcd_gotoxy(1,4); 
080FC:  MOVLW  01
080FE:  MOVLB  3
08100:  MOVWF  x50
08102:  MOVLW  04
08104:  MOVWF  x51
08106:  MOVLB  0
08108:  CALL   20F8
....................          printf(lcd_putc,"                    "); 
0810C:  MOVLW  6A
0810E:  MOVWF  FF6
08110:  MOVLW  0C
08112:  MOVWF  FF7
08114:  CALL   21F0
....................          lcd_gotoxy(1,1); 
08118:  MOVLW  01
0811A:  MOVLB  3
0811C:  MOVWF  x50
0811E:  MOVWF  x51
08120:  MOVLB  0
08122:  CALL   20F8
....................          printf(lcd_putc,"                    "); 
08126:  MOVLW  80
08128:  MOVWF  FF6
0812A:  MOVLW  0C
0812C:  MOVWF  FF7
0812E:  CALL   21F0
....................          for(i=0;i<5;i++) 
08132:  CLRF   40
08134:  MOVF   40,W
08136:  SUBLW  04
08138:  BNC   815E
....................          { 
....................             Buzzer_on; 
0813A:  BSF    F8B.0
0813C:  BCF    F94.0
....................             delay_ms(200); 
0813E:  MOVLW  C8
08140:  MOVLB  3
08142:  MOVWF  x55
08144:  MOVLB  0
08146:  CALL   0C96
....................             Buzzer_off; 
0814A:  BCF    F8B.0
0814C:  BCF    F94.0
....................             delay_ms(200); 
0814E:  MOVLW  C8
08150:  MOVLB  3
08152:  MOVWF  x55
08154:  MOVLB  0
08156:  CALL   0C96
....................          } 
0815A:  INCF   40,F
0815C:  BRA    8134
....................       } 
....................       tiempo_cumplido=0; 
0815E:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
08160:  MOVLW  0C
08162:  MOVLB  3
08164:  MOVWF  x4F
08166:  MOVLB  0
08168:  CALL   2172
....................    }    
....................        
....................    if(estadofl==1){ 
0816C:  BTFSS  29.1
0816E:  BRA    8192
....................       Luz_Blanca_on; 
08170:  BCF    F8A.3
08172:  BCF    F93.3
....................       if(flagfl==0){ 
08174:  BTFSC  2A.2
08176:  BRA    8190
....................          lcd_init();delay_ms(200);lcd_init(); 
08178:  CALL   0D38
0817C:  MOVLW  C8
0817E:  MOVLB  3
08180:  MOVWF  x55
08182:  MOVLB  0
08184:  CALL   0C96
08188:  CALL   0D38
....................          flagfl=1;Cambio=ON; 
0818C:  BSF    2A.2
0818E:  BSF    2A.7
....................       } 
....................    }else{ 
08190:  BRA    81B2
....................       Luz_Blanca_off; 
08192:  BSF    F8A.3
08194:  BCF    F93.3
....................       if(flagfl==1){ 
08196:  BTFSS  2A.2
08198:  BRA    81B2
....................          lcd_init();delay_ms(200);lcd_init(); 
0819A:  CALL   0D38
0819E:  MOVLW  C8
081A0:  MOVLB  3
081A2:  MOVWF  x55
081A4:  MOVLB  0
081A6:  CALL   0C96
081AA:  CALL   0D38
....................          flagfl=0;Cambio=ON; 
081AE:  BCF    2A.2
081B0:  BSF    2A.7
....................       } 
....................    } 
....................       Cambio=OFF; 
081B2:  BCF    2A.7
....................     
....................    if(estadomv==1){  
081B4:  BTFSS  29.2
081B6:  BRA    81EA
....................       if(flagmv==0){ 
081B8:  BTFSC  xC9.0
081BA:  BRA    81E4
....................          VelMotor=6; 
081BC:  MOVLW  06
081BE:  MOVWF  xEE
....................          lcd_init();delay_ms(200);lcd_init(); 
081C0:  CALL   0D38
081C4:  MOVLW  C8
081C6:  MOVLB  3
081C8:  MOVWF  x55
081CA:  MOVLB  0
081CC:  CALL   0C96
081D0:  CALL   0D38
....................          flagmv=1;Cambio=ON;delay_ms(200); 
081D4:  BSF    xC9.0
081D6:  BSF    2A.7
081D8:  MOVLW  C8
081DA:  MOVLB  3
081DC:  MOVWF  x55
081DE:  MOVLB  0
081E0:  CALL   0C96
....................       } 
....................       VelMotor=Vel1; 
081E4:  MOVFF  58,EE
....................    }else{ 
081E8:  BRA    820C
....................       tEncendido=0; 
081EA:  CLRF   60
081EC:  CLRF   5F
....................       VelMotor=0; 
081EE:  CLRF   xEE
....................       if(flagmv==1){ 
081F0:  BTFSS  xC9.0
081F2:  BRA    820C
....................          lcd_init();delay_ms(200);lcd_init(); 
081F4:  CALL   0D38
081F8:  MOVLW  C8
081FA:  MOVLB  3
081FC:  MOVWF  x55
081FE:  MOVLB  0
08200:  CALL   0C96
08204:  CALL   0D38
....................          flagmv=0;Cambio=ON; 
08208:  BCF    xC9.0
0820A:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
0820C:  BTFSS  29.1
0820E:  BRA    8232
....................    { 
....................       Luz_Blanca_on; 
08210:  BCF    F8A.3
08212:  BCF    F93.3
....................       if(flagfl==0) 
08214:  BTFSC  2A.2
08216:  BRA    8230
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
08218:  CALL   0D38
0821C:  MOVLW  C8
0821E:  MOVLB  3
08220:  MOVWF  x55
08222:  MOVLB  0
08224:  CALL   0C96
08228:  CALL   0D38
....................          flagfl=1;Cambio=ON; 
0822C:  BSF    2A.2
0822E:  BSF    2A.7
....................       } 
....................    } 
....................    else 
08230:  BRA    8252
....................    { 
....................       Luz_Blanca_off; 
08232:  BSF    F8A.3
08234:  BCF    F93.3
....................       if(flagfl==1) 
08236:  BTFSS  2A.2
08238:  BRA    8252
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
0823A:  CALL   0D38
0823E:  MOVLW  C8
08240:  MOVLB  3
08242:  MOVWF  x55
08244:  MOVLB  0
08246:  CALL   0C96
0824A:  CALL   0D38
....................          flagfl=0;Cambio=ON; 
0824E:  BCF    2A.2
08250:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
08252:  BTFSS  29.0
08254:  BRA    8310
....................       Luz_UV_on; 
08256:  BCF    F8A.4
08258:  BCF    F93.4
....................       tiempo_cumplido=0;       
0825A:  BCF    29.7
....................       estadomv=0; 
0825C:  BCF    29.2
....................       VelMotor=0; 
0825E:  CLRF   xEE
....................       estadofl=0; 
08260:  BCF    29.1
....................       Luz_Blanca_off; 
08262:  BSF    F8A.3
08264:  BCF    F93.3
....................       if(flaguv==0){ 
08266:  BTFSC  2A.1
08268:  BRA    830E
....................          lcd_init();delay_ms(200);lcd_init(); 
0826A:  CALL   0D38
0826E:  MOVLW  C8
08270:  MOVLB  3
08272:  MOVWF  x55
08274:  MOVLB  0
08276:  CALL   0C96
0827A:  CALL   0D38
....................          flaguv=1;guardaruv=1;Cambio=ON; 
0827E:  BSF    2A.1
08280:  MOVLW  01
08282:  MOVWF  43
08284:  BSF    2A.7
....................          write_eeprom(22,estadomv);delay_ms(20); 
08286:  MOVLW  00
08288:  BTFSC  29.2
0828A:  MOVLW  01
0828C:  MOVLB  3
0828E:  MOVWF  x3E
08290:  CLRF   FAA
08292:  MOVLW  16
08294:  MOVWF  FA9
08296:  MOVFF  33E,FA8
0829A:  BCF    FA6.6
0829C:  BCF    FA6.7
0829E:  BSF    FA6.2
082A0:  MOVF   FF2,W
082A2:  MOVWF  00
082A4:  BCF    FF2.6
082A6:  BCF    FF2.7
082A8:  MOVLB  F
082AA:  MOVLW  55
082AC:  MOVWF  FA7
082AE:  MOVLW  AA
082B0:  MOVWF  FA7
082B2:  BSF    FA6.1
082B4:  BTFSC  FA6.1
082B6:  BRA    82B4
082B8:  BCF    FA6.2
082BA:  MOVF   00,W
082BC:  IORWF  FF2,F
082BE:  MOVLW  14
082C0:  MOVLB  3
082C2:  MOVWF  x55
082C4:  MOVLB  0
082C6:  CALL   0C96
....................          write_eeprom(23,estadofl);delay_ms(20); 
082CA:  MOVLW  00
082CC:  BTFSC  29.1
082CE:  MOVLW  01
082D0:  MOVLB  3
082D2:  MOVWF  x3E
082D4:  CLRF   FAA
082D6:  MOVLW  17
082D8:  MOVWF  FA9
082DA:  MOVFF  33E,FA8
082DE:  BCF    FA6.6
082E0:  BCF    FA6.7
082E2:  BSF    FA6.2
082E4:  MOVF   FF2,W
082E6:  MOVWF  00
082E8:  BCF    FF2.6
082EA:  BCF    FF2.7
082EC:  MOVLB  F
082EE:  MOVLW  55
082F0:  MOVWF  FA7
082F2:  MOVLW  AA
082F4:  MOVWF  FA7
082F6:  BSF    FA6.1
082F8:  BTFSC  FA6.1
082FA:  BRA    82F8
082FC:  BCF    FA6.2
082FE:  MOVF   00,W
08300:  IORWF  FF2,F
08302:  MOVLW  14
08304:  MOVLB  3
08306:  MOVWF  x55
08308:  MOVLB  0
0830A:  CALL   0C96
....................       } 
....................    }else{ 
0830E:  BRA    8336
....................       estadouv=0; 
08310:  BCF    29.0
....................       Luz_UV_off; 
08312:  BSF    F8A.4
08314:  BCF    F93.4
....................       if(flaguv==1){ 
08316:  BTFSS  2A.1
08318:  BRA    8336
....................          lcd_init();delay_ms(200);lcd_init(); 
0831A:  CALL   0D38
0831E:  MOVLW  C8
08320:  MOVLB  3
08322:  MOVWF  x55
08324:  MOVLB  0
08326:  CALL   0C96
0832A:  CALL   0D38
....................          flaguv=0;guardaruv=1;Cambio=ON; 
0832E:  BCF    2A.1
08330:  MOVLW  01
08332:  MOVWF  43
08334:  BSF    2A.7
....................       } 
....................    } 
....................        
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
08336:  MOVF   xCF,F
08338:  BNZ   8340
0833A:  MOVF   xCE,W
0833C:  SUBLW  3B
0833E:  BC    839C
....................       if(!Flanco){ 
08340:  BTFSC  29.3
08342:  BRA    839A
....................          estadofl=!estadofl;Flanco = 1;write_eeprom(23,estadofl);delay_ms(300);Cambio=ON; 
08344:  BTG    29.1
08346:  BSF    29.3
08348:  MOVLW  00
0834A:  BTFSC  29.1
0834C:  MOVLW  01
0834E:  MOVLB  3
08350:  MOVWF  x3E
08352:  CLRF   FAA
08354:  MOVLW  17
08356:  MOVWF  FA9
08358:  MOVFF  33E,FA8
0835C:  BCF    FA6.6
0835E:  BCF    FA6.7
08360:  BSF    FA6.2
08362:  MOVF   FF2,W
08364:  MOVWF  00
08366:  BCF    FF2.6
08368:  BCF    FF2.7
0836A:  MOVLB  F
0836C:  MOVLW  55
0836E:  MOVWF  FA7
08370:  MOVLW  AA
08372:  MOVWF  FA7
08374:  BSF    FA6.1
08376:  BTFSC  FA6.1
08378:  BRA    8376
0837A:  BCF    FA6.2
0837C:  MOVF   00,W
0837E:  IORWF  FF2,F
08380:  MOVLW  02
08382:  MOVLB  3
08384:  MOVWF  x3E
08386:  MOVLW  96
08388:  MOVWF  x55
0838A:  MOVLB  0
0838C:  CALL   0C96
08390:  MOVLB  3
08392:  DECFSZ x3E,F
08394:  BRA    8386
08396:  BSF    2A.7
08398:  MOVLB  0
....................       } 
....................    }else{ 
0839A:  BRA    839E
....................       Flanco=0; 
0839C:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
0839E:  MOVF   xD1,F
083A0:  BNZ   83A8
083A2:  MOVF   xD0,W
083A4:  SUBLW  3B
083A6:  BC    8404
....................       if(!Flanco2){ 
083A8:  BTFSC  29.5
083AA:  BRA    8402
....................          estadomv=!estadomv;Flanco2 = 1;write_eeprom(22,estadomv);delay_ms(300);Cambio=ON; 
083AC:  BTG    29.2
083AE:  BSF    29.5
083B0:  MOVLW  00
083B2:  BTFSC  29.2
083B4:  MOVLW  01
083B6:  MOVLB  3
083B8:  MOVWF  x3E
083BA:  CLRF   FAA
083BC:  MOVLW  16
083BE:  MOVWF  FA9
083C0:  MOVFF  33E,FA8
083C4:  BCF    FA6.6
083C6:  BCF    FA6.7
083C8:  BSF    FA6.2
083CA:  MOVF   FF2,W
083CC:  MOVWF  00
083CE:  BCF    FF2.6
083D0:  BCF    FF2.7
083D2:  MOVLB  F
083D4:  MOVLW  55
083D6:  MOVWF  FA7
083D8:  MOVLW  AA
083DA:  MOVWF  FA7
083DC:  BSF    FA6.1
083DE:  BTFSC  FA6.1
083E0:  BRA    83DE
083E2:  BCF    FA6.2
083E4:  MOVF   00,W
083E6:  IORWF  FF2,F
083E8:  MOVLW  02
083EA:  MOVLB  3
083EC:  MOVWF  x3E
083EE:  MOVLW  96
083F0:  MOVWF  x55
083F2:  MOVLB  0
083F4:  CALL   0C96
083F8:  MOVLB  3
083FA:  DECFSZ x3E,F
083FC:  BRA    83EE
083FE:  BSF    2A.7
08400:  MOVLB  0
....................       } 
....................    }else{ 
08402:  BRA    8406
....................       Flanco2=0; 
08404:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
08406:  MOVF   xD3,F
08408:  BNZ   8410
0840A:  MOVF   xD2,W
0840C:  SUBLW  3B
0840E:  BC    8428
....................       if(!Flanco3){ 
08410:  BTFSC  29.6
08412:  BRA    8426
....................          delay_ms(150);  
08414:  MOVLW  96
08416:  MOVLB  3
08418:  MOVWF  x55
0841A:  MOVLB  0
0841C:  CALL   0C96
....................          //estadouv=!estadouv; 
....................          estadouv=0; 
08420:  BCF    29.0
....................          Cambio=ON; 
08422:  BSF    2A.7
....................          Flanco3=1; 
08424:  BSF    29.6
....................       } 
....................    }else{ 
08426:  BRA    842A
....................       Flanco3=0; 
08428:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
0842A:  MOVF   xCD,F
0842C:  BNZ   8434
0842E:  MOVF   xCC,W
08430:  SUBLW  3B
08432:  BC    847A
....................       if(!Flanco1){ 
08434:  BTFSC  29.4
08436:  BRA    8478
....................          delay_ms(200); 
08438:  MOVLW  C8
0843A:  MOVLB  3
0843C:  MOVWF  x55
0843E:  MOVLB  0
08440:  CALL   0C96
....................          printf(lcd_putc,"\f"); 
08444:  MOVLW  0C
08446:  MOVLB  3
08448:  MOVWF  x4F
0844A:  MOVLB  0
0844C:  CALL   2172
....................          delay_ms(300); 
08450:  MOVLW  02
08452:  MOVLB  3
08454:  MOVWF  x3E
08456:  MOVLW  96
08458:  MOVWF  x55
0845A:  MOVLB  0
0845C:  CALL   0C96
08460:  MOVLB  3
08462:  DECFSZ x3E,F
08464:  BRA    8456
....................          Menu=1;  
08466:  MOVLW  01
08468:  MOVWF  2B
....................          paso=0; 
0846A:  CLRF   47
....................          Flecha=2; 
0846C:  MOVLW  02
0846E:  MOVWF  2F
....................          Flecha2=2; 
08470:  MOVWF  31
....................          Cambio=ON; 
08472:  BSF    2A.7
....................          Flanco1=1; 
08474:  BSF    29.4
08476:  MOVLB  0
....................       } 
....................    }else{ 
08478:  BRA    847C
....................       Flanco1=0; 
0847A:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
0847C:  DECFSZ 43,W
0847E:  BRA    8556
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
08480:  CLRF   FAA
08482:  MOVLW  07
08484:  MOVWF  FA9
08486:  MOVFF  34,FA8
0848A:  BCF    FA6.6
0848C:  BCF    FA6.7
0848E:  BSF    FA6.2
08490:  MOVF   FF2,W
08492:  MOVWF  00
08494:  BCF    FF2.6
08496:  BCF    FF2.7
08498:  MOVLB  F
0849A:  MOVLW  55
0849C:  MOVWF  FA7
0849E:  MOVLW  AA
084A0:  MOVWF  FA7
084A2:  BSF    FA6.1
084A4:  BTFSC  FA6.1
084A6:  BRA    84A4
084A8:  BCF    FA6.2
084AA:  MOVF   00,W
084AC:  IORWF  FF2,F
084AE:  CLRF   FAA
084B0:  MOVLW  08
084B2:  MOVWF  FA9
084B4:  MOVFF  35,FA8
084B8:  BCF    FA6.6
084BA:  BCF    FA6.7
084BC:  BSF    FA6.2
084BE:  MOVF   FF2,W
084C0:  MOVWF  00
084C2:  BCF    FF2.6
084C4:  BCF    FF2.7
084C6:  MOVLW  55
084C8:  MOVWF  FA7
084CA:  MOVLW  AA
084CC:  MOVWF  FA7
084CE:  BSF    FA6.1
084D0:  BTFSC  FA6.1
084D2:  BRA    84D0
084D4:  BCF    FA6.2
084D6:  MOVF   00,W
084D8:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
084DA:  MOVFF  5B,36
....................       horasH=make8(horas,1); 
084DE:  MOVFF  5C,37
....................       write_eeprom(9,horasL); 
084E2:  CLRF   FAA
084E4:  MOVLW  09
084E6:  MOVWF  FA9
084E8:  MOVFF  36,FA8
084EC:  BCF    FA6.6
084EE:  BCF    FA6.7
084F0:  BSF    FA6.2
084F2:  MOVFF  FF2,00
084F6:  BCF    FF2.6
084F8:  BCF    FF2.7
084FA:  MOVLW  55
084FC:  MOVWF  FA7
084FE:  MOVLW  AA
08500:  MOVWF  FA7
08502:  BSF    FA6.1
08504:  BTFSC  FA6.1
08506:  BRA    8504
08508:  BCF    FA6.2
0850A:  MOVF   00,W
0850C:  IORWF  FF2,F
....................       delay_ms(20); 
0850E:  MOVLW  14
08510:  MOVLB  3
08512:  MOVWF  x55
08514:  MOVLB  0
08516:  CALL   0C96
....................       write_eeprom(10,horasH); 
0851A:  CLRF   FAA
0851C:  MOVLW  0A
0851E:  MOVWF  FA9
08520:  MOVFF  37,FA8
08524:  BCF    FA6.6
08526:  BCF    FA6.7
08528:  BSF    FA6.2
0852A:  MOVF   FF2,W
0852C:  MOVWF  00
0852E:  BCF    FF2.6
08530:  BCF    FF2.7
08532:  MOVLB  F
08534:  MOVLW  55
08536:  MOVWF  FA7
08538:  MOVLW  AA
0853A:  MOVWF  FA7
0853C:  BSF    FA6.1
0853E:  BTFSC  FA6.1
08540:  BRA    853E
08542:  BCF    FA6.2
08544:  MOVF   00,W
08546:  IORWF  FF2,F
....................       delay_ms(20); 
08548:  MOVLW  14
0854A:  MOVLB  3
0854C:  MOVWF  x55
0854E:  MOVLB  0
08550:  CALL   0C96
....................       guardaruv=0; 
08554:  CLRF   43
....................    } 
....................     
....................    if(segundos>=60) 
08556:  MOVF   34,W
08558:  SUBLW  3B
0855A:  BC    8560
....................    { 
....................       segundos=0;minutos++; 
0855C:  CLRF   34
0855E:  INCF   35,F
....................    } 
....................    if(minutos==60) 
08560:  MOVF   35,W
08562:  SUBLW  3C
08564:  BNZ   856E
....................    { 
....................       minutos=0;horas++; 
08566:  CLRF   35
08568:  INCF   5B,F
0856A:  BTFSC  FD8.2
0856C:  INCF   5C,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
0856E:  MOVF   42,W
08570:  SUBLW  3B
08572:  BC    8594
....................    { 
....................       printf(lcd_putc,"\f"); 
08574:  MOVLW  0C
08576:  MOVLB  3
08578:  MOVWF  x4F
0857A:  MOVLB  0
0857C:  CALL   2172
....................       lcd_init(); 
08580:  CALL   0D38
....................       delay_ms(200); 
08584:  MOVLW  C8
08586:  MOVLB  3
08588:  MOVWF  x55
0858A:  MOVLB  0
0858C:  CALL   0C96
....................       tiemporeset=0; 
08590:  CLRF   42
....................       Cambio=ON; 
08592:  BSF    2A.7
....................    }    
....................    } 
08594:  GOTO   61F4
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
08598:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1A1F   BROWNOUT NOWDT BORV21 NOPUT WDT8192
   Word  3: 0100   CCP2C1 NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
