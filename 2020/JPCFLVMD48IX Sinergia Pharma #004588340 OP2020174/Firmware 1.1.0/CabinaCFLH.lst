CCS PCH C Compiler, Version 4.104, 5967               25-ago.-20 11:21

               Filename: D:\Laboratorio\Modulo Flujo Laminar\2020\JPCFLVMD48IX Sinergia Pharma #0045882XX OP2020175\Firmware 1.1.0\CabinaCFLH.lst

               ROM used: 16914 bytes (52%)
                         Largest free fragment is 15852
               RAM used: 228 (11%) at main() level
                         265 (13%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   229E
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   02F2
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   02C0
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=16000000) 
*
08F8:  CLRF   FEA
08FA:  MOVLW  F7
08FC:  MOVWF  FE9
08FE:  MOVF   FEF,W
0900:  BZ    091E
0902:  MOVLW  05
0904:  MOVWF  01
0906:  CLRF   00
0908:  DECFSZ 00,F
090A:  BRA    0908
090C:  DECFSZ 01,F
090E:  BRA    0906
0910:  MOVLW  2E
0912:  MOVWF  00
0914:  DECFSZ 00,F
0916:  BRA    0914
0918:  BRA    091A
091A:  DECFSZ FEF,F
091C:  BRA    0902
091E:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1EF6:  BCF    xF3.0
....................    y = x; 
1EF8:  MOVFF  E7,EC
1EFC:  MOVFF  E6,EB
1F00:  MOVFF  E5,EA
1F04:  MOVFF  E4,E9
....................  
....................    if (x < 0) 
1F08:  MOVFF  E7,F7
1F0C:  MOVFF  E6,F6
1F10:  MOVFF  E5,F5
1F14:  MOVFF  E4,F4
1F18:  CLRF   xFB
1F1A:  CLRF   xFA
1F1C:  CLRF   xF9
1F1E:  CLRF   xF8
1F20:  CALL   0E42
1F24:  BNC   1F2E
....................    { 
....................       s = 1; 
1F26:  BSF    xF3.0
....................       y = -y; 
1F28:  MOVF   xEA,W
1F2A:  XORLW  80
1F2C:  MOVWF  xEA
....................    } 
....................  
....................    if (y <= 32768.0) 
1F2E:  MOVFF  EC,F7
1F32:  MOVFF  EB,F6
1F36:  MOVFF  EA,F5
1F3A:  MOVFF  E9,F4
1F3E:  CLRF   xFB
1F40:  CLRF   xFA
1F42:  CLRF   xF9
1F44:  MOVLW  8E
1F46:  MOVWF  xF8
1F48:  CALL   0E42
1F4C:  BC    1F50
1F4E:  BNZ   1F80
....................   res = (float32)(unsigned int16)y; 
1F50:  MOVFF  EC,F7
1F54:  MOVFF  EB,F6
1F58:  MOVFF  EA,F5
1F5C:  MOVFF  E9,F4
1F60:  RCALL  1EBE
1F62:  MOVFF  02,F9
1F66:  MOVFF  01,F8
1F6A:  CALL   0B6E
1F6E:  MOVFF  03,F0
1F72:  MOVFF  02,EF
1F76:  MOVFF  01,EE
1F7A:  MOVFF  00,ED
....................  
....................  else if (y < 10000000.0) 
1F7E:  BRA    210A
1F80:  MOVFF  EC,F7
1F84:  MOVFF  EB,F6
1F88:  MOVFF  EA,F5
1F8C:  MOVFF  E9,F4
1F90:  MOVLW  80
1F92:  MOVWF  xFB
1F94:  MOVLW  96
1F96:  MOVWF  xFA
1F98:  MOVLW  18
1F9A:  MOVWF  xF9
1F9C:  MOVLW  96
1F9E:  MOVWF  xF8
1FA0:  CALL   0E42
1FA4:  BTFSS  FD8.0
1FA6:  BRA    20FA
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1FA8:  MOVFF  EC,F7
1FAC:  MOVFF  EB,F6
1FB0:  MOVFF  EA,F5
1FB4:  MOVFF  E9,F4
1FB8:  CLRF   xFB
1FBA:  CLRF   xFA
1FBC:  CLRF   xF9
1FBE:  MOVLW  8E
1FC0:  MOVWF  xF8
1FC2:  CALL   15CC
1FC6:  MOVFF  03,F7
1FCA:  MOVFF  02,F6
1FCE:  MOVFF  01,F5
1FD2:  MOVFF  00,F4
1FD6:  RCALL  1EBE
1FD8:  MOVFF  02,F2
1FDC:  MOVFF  01,F1
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1FE0:  MOVFF  EC,F7
1FE4:  MOVFF  EB,F6
1FE8:  MOVFF  EA,F5
1FEC:  MOVFF  E9,F4
1FF0:  CLRF   xFB
1FF2:  CLRF   xFA
1FF4:  CLRF   xF9
1FF6:  MOVLW  8E
1FF8:  MOVWF  xF8
1FFA:  CALL   15CC
1FFE:  MOVFF  00,F4
2002:  MOVFF  01,F5
2006:  MOVFF  02,F6
200A:  MOVFF  03,F7
200E:  MOVFF  F2,F9
2012:  MOVFF  F1,F8
2016:  CALL   0B6E
201A:  BSF    FD8.1
201C:  MOVFF  F7,FB
2020:  MOVFF  F6,FA
2024:  MOVFF  F5,F9
2028:  MOVFF  F4,F8
202C:  MOVFF  03,FF
2030:  MOVFF  02,FE
2034:  MOVFF  01,FD
2038:  MOVFF  00,FC
203C:  CALL   1774
2040:  CLRF   xF7
2042:  CLRF   xF6
2044:  CLRF   xF5
2046:  MOVLW  8E
2048:  MOVWF  xF4
204A:  MOVFF  03,FB
204E:  MOVFF  02,FA
2052:  MOVFF  01,F9
2056:  MOVFF  00,F8
205A:  RCALL  1B8C
205C:  MOVFF  03,EC
2060:  MOVFF  02,EB
2064:  MOVFF  01,EA
2068:  MOVFF  00,E9
....................   res = 32768.0*(float32)l; 
206C:  MOVFF  F2,F9
2070:  MOVFF  F1,F8
2074:  CALL   0B6E
2078:  CLRF   xF7
207A:  CLRF   xF6
207C:  CLRF   xF5
207E:  MOVLW  8E
2080:  MOVWF  xF4
2082:  MOVFF  03,FB
2086:  MOVFF  02,FA
208A:  MOVFF  01,F9
208E:  MOVFF  00,F8
2092:  RCALL  1B8C
2094:  MOVFF  03,F0
2098:  MOVFF  02,EF
209C:  MOVFF  01,EE
20A0:  MOVFF  00,ED
....................   res += (float32)(unsigned int16)y; 
20A4:  MOVFF  EC,F7
20A8:  MOVFF  EB,F6
20AC:  MOVFF  EA,F5
20B0:  MOVFF  E9,F4
20B4:  RCALL  1EBE
20B6:  MOVFF  02,F9
20BA:  MOVFF  01,F8
20BE:  CALL   0B6E
20C2:  BCF    FD8.1
20C4:  MOVFF  F0,FB
20C8:  MOVFF  EF,FA
20CC:  MOVFF  EE,F9
20D0:  MOVFF  ED,F8
20D4:  MOVFF  03,FF
20D8:  MOVFF  02,FE
20DC:  MOVFF  01,FD
20E0:  MOVFF  00,FC
20E4:  CALL   1774
20E8:  MOVFF  03,F0
20EC:  MOVFF  02,EF
20F0:  MOVFF  01,EE
20F4:  MOVFF  00,ED
....................  } 
....................  
....................  else 
20F8:  BRA    210A
....................   res = y; 
20FA:  MOVFF  EC,F0
20FE:  MOVFF  EB,EF
2102:  MOVFF  EA,EE
2106:  MOVFF  E9,ED
....................  
....................  y = y - (float32)(unsigned int16)y; 
210A:  MOVFF  EC,F7
210E:  MOVFF  EB,F6
2112:  MOVFF  EA,F5
2116:  MOVFF  E9,F4
211A:  RCALL  1EBE
211C:  MOVFF  02,F9
2120:  MOVFF  01,F8
2124:  CALL   0B6E
2128:  BSF    FD8.1
212A:  MOVFF  EC,FB
212E:  MOVFF  EB,FA
2132:  MOVFF  EA,F9
2136:  MOVFF  E9,F8
213A:  MOVFF  03,FF
213E:  MOVFF  02,FE
2142:  MOVFF  01,FD
2146:  MOVFF  00,FC
214A:  CALL   1774
214E:  MOVFF  03,EC
2152:  MOVFF  02,EB
2156:  MOVFF  01,EA
215A:  MOVFF  00,E9
....................  
....................  if (s) 
215E:  BTFSS  xF3.0
2160:  BRA    2168
....................   res = -res; 
2162:  MOVF   xEE,W
2164:  XORLW  80
2166:  MOVWF  xEE
....................  
....................  if (y != 0) 
2168:  MOVFF  EC,F7
216C:  MOVFF  EB,F6
2170:  MOVFF  EA,F5
2174:  MOVFF  E9,F4
2178:  CLRF   xFB
217A:  CLRF   xFA
217C:  CLRF   xF9
217E:  CLRF   xF8
2180:  CALL   0E42
2184:  BZ    21F6
....................  { 
....................   if (s == 1 && n == 0) 
2186:  BTFSS  xF3.0
2188:  BRA    21BE
218A:  MOVF   xE8,F
218C:  BNZ   21BE
....................    res -= 1.0; 
218E:  BSF    FD8.1
2190:  MOVFF  F0,FB
2194:  MOVFF  EF,FA
2198:  MOVFF  EE,F9
219C:  MOVFF  ED,F8
21A0:  CLRF   xFF
21A2:  CLRF   xFE
21A4:  CLRF   xFD
21A6:  MOVLW  7F
21A8:  MOVWF  xFC
21AA:  CALL   1774
21AE:  MOVFF  03,F0
21B2:  MOVFF  02,EF
21B6:  MOVFF  01,EE
21BA:  MOVFF  00,ED
....................  
....................   if (s == 0 && n == 1) 
21BE:  BTFSC  xF3.0
21C0:  BRA    21F6
21C2:  DECFSZ xE8,W
21C4:  BRA    21F6
....................    res += 1.0; 
21C6:  BCF    FD8.1
21C8:  MOVFF  F0,FB
21CC:  MOVFF  EF,FA
21D0:  MOVFF  EE,F9
21D4:  MOVFF  ED,F8
21D8:  CLRF   xFF
21DA:  CLRF   xFE
21DC:  CLRF   xFD
21DE:  MOVLW  7F
21E0:  MOVWF  xFC
21E2:  CALL   1774
21E6:  MOVFF  03,F0
21EA:  MOVFF  02,EF
21EE:  MOVFF  01,EE
21F2:  MOVFF  00,ED
....................  } 
....................  if (x == 0) 
21F6:  MOVFF  E7,F7
21FA:  MOVFF  E6,F6
21FE:  MOVFF  E5,F5
2202:  MOVFF  E4,F4
2206:  CLRF   xFB
2208:  CLRF   xFA
220A:  CLRF   xF9
220C:  CLRF   xF8
220E:  CALL   0E42
2212:  BNZ   221C
....................     res = 0; 
2214:  CLRF   xF0
2216:  CLRF   xEF
2218:  CLRF   xEE
221A:  CLRF   xED
....................  
....................  return (res); 
221C:  MOVFF  ED,00
2220:  MOVFF  EE,01
2224:  MOVFF  EF,02
2228:  MOVFF  F0,03
.................... } 
222C:  GOTO   2244 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
2230:  MOVFF  E3,E7
2234:  MOVFF  E2,E6
2238:  MOVFF  E1,E5
223C:  MOVFF  E0,E4
2240:  CLRF   xE8
2242:  BRA    1EF6
.................... } 
2244:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0920:  SWAPF  xF8,W
0922:  ANDLW  F0
0924:  MOVWF  00
0926:  MOVLW  0F
0928:  ANDWF  F83,W
092A:  IORWF  00,W
092C:  MOVWF  F83
....................       delay_cycles(30);//30 
092E:  MOVLW  09
0930:  MOVWF  00
0932:  DECFSZ 00,F
0934:  BRA    0932
0936:  BRA    0938
....................       lcd.enable = 1; 
0938:  BSF    F83.3
....................       delay_us(55);//55 
093A:  MOVLW  49
093C:  MOVWF  00
093E:  DECFSZ 00,F
0940:  BRA    093E
....................       lcd.enable = 0; 
0942:  BCF    F83.3
.................... } 
0944:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0946:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0948:  MOVLW  01
094A:  MOVWF  xF7
094C:  RCALL  08F8
....................       lcd.rs = address; 
094E:  BTFSS  xF5.0
0950:  BCF    F83.1
0952:  BTFSC  xF5.0
0954:  BSF    F83.1
....................       delay_cycles(30);//30 
0956:  MOVLW  09
0958:  MOVWF  00
095A:  DECFSZ 00,F
095C:  BRA    095A
095E:  BRA    0960
....................       lcd.rw = 0; 
0960:  BCF    F83.2
....................       delay_cycles(30);//30 
0962:  MOVLW  09
0964:  MOVWF  00
0966:  DECFSZ 00,F
0968:  BRA    0966
096A:  BRA    096C
....................       lcd.enable = 0; 
096C:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
096E:  SWAPF  xF6,W
0970:  MOVWF  xF7
0972:  MOVLW  0F
0974:  ANDWF  xF7,F
0976:  MOVFF  F7,F8
097A:  RCALL  0920
....................       lcd_send_nibble(n & 0xf); 
097C:  MOVF   xF6,W
097E:  ANDLW  0F
0980:  MOVWF  xF7
0982:  MOVWF  xF8
0984:  RCALL  0920
.................... } 
0986:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0988:  MOVLW  00
098A:  MOVWF  F95
....................     lcd.rs = 0; 
098C:  BCF    F83.1
....................     lcd.rw = 0; 
098E:  BCF    F83.2
....................     lcd.enable = 0; 
0990:  BCF    F83.3
....................     delay_ms(15); 
0992:  MOVLW  0F
0994:  MOVWF  xF7
0996:  RCALL  08F8
....................     for(i=1;i<=3;++i) { 
0998:  MOVLW  01
099A:  MOVWF  xE0
099C:  MOVF   xE0,W
099E:  SUBLW  03
09A0:  BNC   09B2
....................        lcd_send_nibble(3); 
09A2:  MOVLW  03
09A4:  MOVWF  xF8
09A6:  RCALL  0920
....................        delay_ms(5); 
09A8:  MOVLW  05
09AA:  MOVWF  xF7
09AC:  RCALL  08F8
....................     } 
09AE:  INCF   xE0,F
09B0:  BRA    099C
....................     lcd_send_nibble(2); 
09B2:  MOVLW  02
09B4:  MOVWF  xF8
09B6:  RCALL  0920
....................     for(i=0;i<=3;++i) 
09B8:  CLRF   xE0
09BA:  MOVF   xE0,W
09BC:  SUBLW  03
09BE:  BNC   09E4
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
09C0:  CLRF   03
09C2:  MOVF   xE0,W
09C4:  MOVFF  FF2,E1
09C8:  BCF    FF2.6
09CA:  BCF    FF2.7
09CC:  CALL   0140
09D0:  BTFSC  xE1.6
09D2:  BSF    FF2.6
09D4:  BTFSC  xE1.7
09D6:  BSF    FF2.7
09D8:  MOVWF  xE1
09DA:  CLRF   xF5
09DC:  MOVWF  xF6
09DE:  RCALL  0946
09E0:  INCF   xE0,F
09E2:  BRA    09BA
.................... } 
09E4:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0A22:  MOVLW  01
0A24:  SUBWF  xF3,W
0A26:  ADDLW  FC
0A28:  BC    0A48
0A2A:  ADDLW  04
0A2C:  GOTO   0A58
....................      case 1 : address=0x80;break; 
0A30:  MOVLW  80
0A32:  MOVWF  xF4
0A34:  BRA    0A48
....................      case 2 : address=0xc0;break; 
0A36:  MOVLW  C0
0A38:  MOVWF  xF4
0A3A:  BRA    0A48
....................      case 3 : address=0x94;break; 
0A3C:  MOVLW  94
0A3E:  MOVWF  xF4
0A40:  BRA    0A48
....................      case 4 : address=0xd4;break; 
0A42:  MOVLW  D4
0A44:  MOVWF  xF4
0A46:  BRA    0A48
....................    } 
....................    address+=x-1; 
0A48:  MOVLW  01
0A4A:  SUBWF  xF2,W
0A4C:  ADDWF  xF4,F
....................    lcd_send_byte(0,address); 
0A4E:  CLRF   xF5
0A50:  MOVFF  F4,F6
0A54:  RCALL  0946
.................... } 
0A56:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0A8A:  MOVF   xF1,W
0A8C:  SUBLW  F1
0A8E:  BNZ   0A94
....................    { 
....................       c=238; 
0A90:  MOVLW  EE
0A92:  MOVWF  xF1
....................    } 
....................    if(c=='Ñ') 
0A94:  MOVF   xF1,W
0A96:  SUBLW  D1
0A98:  BNZ   0A9E
....................    { 
....................       c=255; 
0A9A:  MOVLW  FF
0A9C:  MOVWF  xF1
....................    } 
....................     
....................    switch (c) { 
0A9E:  MOVF   xF1,W
0AA0:  XORLW  0C
0AA2:  BZ    0AAE
0AA4:  XORLW  06
0AA6:  BZ    0AC2
0AA8:  XORLW  02
0AAA:  BZ    0AD0
0AAC:  BRA    0ADA
....................      case '\f'   : lcd_send_byte(0,1); 
0AAE:  CLRF   xF5
0AB0:  MOVLW  01
0AB2:  MOVWF  xF6
0AB4:  RCALL  0946
....................                    lcdline=1; 
0AB6:  MOVLW  01
0AB8:  MOVWF  28
....................                    delay_ms(2); 
0ABA:  MOVLW  02
0ABC:  MOVWF  xF7
0ABE:  RCALL  08F8
....................                                            break; 
0AC0:  BRA    0AE6
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0AC2:  INCF   28,F
0AC4:  MOVLW  01
0AC6:  MOVWF  xF2
0AC8:  MOVFF  28,F3
0ACC:  RCALL  0A22
0ACE:  BRA    0AE6
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0AD0:  CLRF   xF5
0AD2:  MOVLW  10
0AD4:  MOVWF  xF6
0AD6:  RCALL  0946
0AD8:  BRA    0AE6
....................      default     : lcd_send_byte(1,c);     break; 
0ADA:  MOVLW  01
0ADC:  MOVWF  xF5
0ADE:  MOVFF  F1,F6
0AE2:  RCALL  0946
0AE4:  BRA    0AE6
....................    } 
.................... } 
0AE6:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF,flag_arriba=OFF,Entro=0; 
.................... short flagdn=0,flagup=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,n=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1380:  DECFSZ xE1,W
1382:  BRA    139C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1384:  MOVLW  02
1386:  MOVWF  xF2
1388:  MOVFF  E2,F3
138C:  CALL   0A22
1390:  MOVLW  64
1392:  MOVWF  FF6
1394:  MOVLW  01
1396:  MOVWF  FF7
1398:  CALL   0AE8
....................    if(x==2) 
139C:  MOVF   xE1,W
139E:  SUBLW  02
13A0:  BNZ   13BA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
13A2:  MOVLW  02
13A4:  MOVWF  xF2
13A6:  MOVFF  E2,F3
13AA:  CALL   0A22
13AE:  MOVLW  78
13B0:  MOVWF  FF6
13B2:  MOVLW  01
13B4:  MOVWF  FF7
13B6:  CALL   0AE8
....................    if(x==3) 
13BA:  MOVF   xE1,W
13BC:  SUBLW  03
13BE:  BNZ   13D8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
13C0:  MOVLW  02
13C2:  MOVWF  xF2
13C4:  MOVFF  E2,F3
13C8:  CALL   0A22
13CC:  MOVLW  8C
13CE:  MOVWF  FF6
13D0:  MOVLW  01
13D2:  MOVWF  FF7
13D4:  CALL   0AE8
....................    if(x==4) 
13D8:  MOVF   xE1,W
13DA:  SUBLW  04
13DC:  BNZ   13F6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
13DE:  MOVLW  02
13E0:  MOVWF  xF2
13E2:  MOVFF  E2,F3
13E6:  CALL   0A22
13EA:  MOVLW  A0
13EC:  MOVWF  FF6
13EE:  MOVLW  01
13F0:  MOVWF  FF7
13F2:  CALL   0AE8
....................     
....................    if(x==5) 
13F6:  MOVF   xE1,W
13F8:  SUBLW  05
13FA:  BNZ   1434
....................    {if(estadoalarma==0) 
13FC:  BTFSC  2A.4
13FE:  BRA    1418
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1400:  MOVLW  02
1402:  MOVWF  xF2
1404:  MOVFF  E2,F3
1408:  CALL   0A22
140C:  MOVLW  B4
140E:  MOVWF  FF6
1410:  MOVLW  01
1412:  MOVWF  FF7
1414:  CALL   0AE8
....................    if(estadoalarma==1) 
1418:  BTFSS  2A.4
141A:  BRA    1434
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
141C:  MOVLW  02
141E:  MOVWF  xF2
1420:  MOVFF  E2,F3
1424:  CALL   0A22
1428:  MOVLW  C8
142A:  MOVWF  FF6
142C:  MOVLW  01
142E:  MOVWF  FF7
1430:  CALL   0AE8
....................    } 
....................     
....................    if(x==6) 
1434:  MOVF   xE1,W
1436:  SUBLW  06
1438:  BNZ   1452
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
143A:  MOVLW  02
143C:  MOVWF  xF2
143E:  MOVFF  E2,F3
1442:  CALL   0A22
1446:  MOVLW  DC
1448:  MOVWF  FF6
144A:  MOVLW  01
144C:  MOVWF  FF7
144E:  CALL   0AE8
.................... } 
1452:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1576:  RLCF   xE5,W
1578:  MOVWF  00
157A:  RLCF   00,F
157C:  MOVLW  FC
157E:  ANDWF  00,F
1580:  MOVFF  00,01
1584:  MOVF   FC2,W
1586:  ANDLW  C3
1588:  IORWF  00,W
158A:  MOVWF  FC2
158C:  MOVLW  0A
158E:  MOVWF  xF7
1590:  CALL   08F8
1594:  BSF    FC2.1
1596:  BTFSC  FC2.1
1598:  BRA    1596
159A:  MOVFF  FC4,03
159E:  MOVFF  FC3,F8
15A2:  MOVFF  FC4,F9
15A6:  CALL   0B6E
15AA:  MOVFF  03,E9
15AE:  MOVFF  02,E8
15B2:  MOVFF  01,E7
15B6:  MOVFF  00,E6
15BA:  MOVFF  E6,00
15BE:  MOVFF  E7,01
15C2:  MOVFF  E8,02
15C6:  MOVFF  E9,03
.................... } 
15CA:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
19F6:  CLRF   xE4
19F8:  CLRF   xE3
19FA:  CLRF   xE2
19FC:  CLRF   xE1
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
19FE:  CLRF   xE5
1A00:  RCALL  1576
1A02:  MOVFF  03,B0
1A06:  MOVFF  02,AF
1A0A:  MOVFF  01,AE
1A0E:  MOVFF  00,AD
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1A12:  MOVFF  B0,F7
1A16:  MOVFF  AF,F6
1A1A:  MOVFF  AE,F5
1A1E:  MOVFF  AD,F4
1A22:  MOVFF  C0,FB
1A26:  MOVFF  BF,FA
1A2A:  MOVFF  BE,F9
1A2E:  MOVFF  BD,F8
1A32:  RCALL  15CC
1A34:  MOVFF  00,E5
1A38:  MOVFF  01,E6
1A3C:  MOVFF  02,E7
1A40:  MOVFF  03,E8
1A44:  BSF    FD8.1
1A46:  MOVFF  03,FB
1A4A:  MOVFF  02,FA
1A4E:  MOVFF  01,F9
1A52:  MOVFF  00,F8
1A56:  CLRF   xFF
1A58:  CLRF   xFE
1A5A:  CLRF   xFD
1A5C:  MOVLW  7F
1A5E:  MOVWF  xFC
1A60:  RCALL  1774
1A62:  MOVFF  03,B4
1A66:  MOVFF  02,B3
1A6A:  MOVFF  01,B2
1A6E:  MOVFF  00,B1
....................     
....................    if(Presion<0.0) 
1A72:  MOVFF  B4,F7
1A76:  MOVFF  B3,F6
1A7A:  MOVFF  B2,F5
1A7E:  MOVFF  B1,F4
1A82:  CLRF   xFB
1A84:  CLRF   xFA
1A86:  CLRF   xF9
1A88:  CLRF   xF8
1A8A:  CALL   0E42
1A8E:  BNC   1A98
....................    { 
....................       Presion=0.0; 
1A90:  CLRF   xB4
1A92:  CLRF   xB3
1A94:  CLRF   xB2
1A96:  CLRF   xB1
....................    } 
....................  
....................    if(r>media-1) 
1A98:  MOVLW  01
1A9A:  SUBWF  xE0,W
1A9C:  SUBWF  3F,W
1A9E:  BZ    1AA4
1AA0:  BNC   1AA4
....................    {r=0;} 
1AA2:  CLRF   3F
....................    PromPresion[r]=Presion;r++; 
1AA4:  MOVF   3F,W
1AA6:  MULLW  04
1AA8:  MOVF   FF3,W
1AAA:  CLRF   03
1AAC:  ADDLW  5D
1AAE:  MOVWF  FE9
1AB0:  MOVLW  00
1AB2:  ADDWFC 03,W
1AB4:  MOVWF  FEA
1AB6:  MOVFF  B1,FEF
1ABA:  MOVFF  B2,FEC
1ABE:  MOVFF  B3,FEC
1AC2:  MOVFF  B4,FEC
1AC6:  INCF   3F,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1AC8:  CLRF   40
1ACA:  MOVLW  01
1ACC:  SUBWF  xE0,W
1ACE:  SUBWF  40,W
1AD0:  BZ    1AD4
1AD2:  BC    1B3E
....................    { 
....................       promediopresion+=PromPresion[q]; 
1AD4:  MOVF   40,W
1AD6:  MULLW  04
1AD8:  MOVF   FF3,W
1ADA:  CLRF   03
1ADC:  ADDLW  5D
1ADE:  MOVWF  FE9
1AE0:  MOVLW  00
1AE2:  ADDWFC 03,W
1AE4:  MOVWF  FEA
1AE6:  MOVFF  FEF,00
1AEA:  MOVFF  FEC,01
1AEE:  MOVFF  FEC,02
1AF2:  MOVFF  FEC,03
1AF6:  MOVFF  FEA,E6
1AFA:  MOVFF  FE9,E5
1AFE:  BCF    FD8.1
1B00:  MOVFF  E4,FB
1B04:  MOVFF  E3,FA
1B08:  MOVFF  E2,F9
1B0C:  MOVFF  E1,F8
1B10:  MOVFF  03,FF
1B14:  MOVFF  02,FE
1B18:  MOVFF  01,FD
1B1C:  MOVFF  00,FC
1B20:  RCALL  1774
1B22:  MOVFF  E6,FEA
1B26:  MOVFF  E5,FE9
1B2A:  MOVFF  03,E4
1B2E:  MOVFF  02,E3
1B32:  MOVFF  01,E2
1B36:  MOVFF  00,E1
....................    }  
1B3A:  INCF   40,F
1B3C:  BRA    1ACA
....................    promediopresion=promediopresion/media;    
1B3E:  CLRF   xF9
1B40:  MOVFF  E0,F8
1B44:  CALL   0B6E
1B48:  MOVFF  E4,F7
1B4C:  MOVFF  E3,F6
1B50:  MOVFF  E2,F5
1B54:  MOVFF  E1,F4
1B58:  MOVFF  03,FB
1B5C:  MOVFF  02,FA
1B60:  MOVFF  01,F9
1B64:  MOVFF  00,F8
1B68:  RCALL  15CC
1B6A:  MOVFF  03,E4
1B6E:  MOVFF  02,E3
1B72:  MOVFF  01,E2
1B76:  MOVFF  00,E1
....................     
....................    return promediopresion; 
1B7A:  MOVFF  E1,00
1B7E:  MOVFF  E2,01
1B82:  MOVFF  E3,02
1B86:  MOVFF  E4,03
.................... } 
1B8A:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
09E6:  MOVLW  C8
09E8:  MOVWF  xF7
09EA:  RCALL  08F8
....................    lcd_init(); 
09EC:  RCALL  0988
....................    set_tris_a(0XFF); 
09EE:  MOVLW  FF
09F0:  MOVWF  F92
....................    set_tris_e(0XFF); 
09F2:  MOVWF  F96
....................    enable_interrupts(global); 
09F4:  MOVLW  C0
09F6:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
09F8:  BSF    FF2.4
09FA:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
09FC:  MOVLW  C7
09FE:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0A00:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0A02:  MOVLW  85
0A04:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0A06:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0A08:  MOVF   FC1,W
0A0A:  ANDLW  C0
0A0C:  IORLW  0E
0A0E:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0A10:  BCF    FC0.0
0A12:  BSF    FC0.1
0A14:  BCF    FC0.2
0A16:  BSF    FC0.7
0A18:  BSF    FC2.0
....................    enable_interrupts(global); 
0A1A:  MOVLW  C0
0A1C:  IORWF  FF2,F
.................... } 
0A1E:  GOTO   2456 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
0B08:  MOVLW  01
0B0A:  MOVWF  xF2
0B0C:  MOVWF  xF3
0B0E:  RCALL  0A22
....................    printf(lcd_putc,"       MODULO       "); 
0B10:  MOVLW  F0
0B12:  MOVWF  FF6
0B14:  MOVLW  01
0B16:  MOVWF  FF7
0B18:  RCALL  0AE8
....................    lcd_gotoxy(1,2); 
0B1A:  MOVLW  01
0B1C:  MOVWF  xF2
0B1E:  MOVLW  02
0B20:  MOVWF  xF3
0B22:  RCALL  0A22
....................    printf(lcd_putc,"   FLUJO LAMINAR    "); 
0B24:  MOVLW  06
0B26:  MOVWF  FF6
0B28:  MOVLW  02
0B2A:  MOVWF  FF7
0B2C:  RCALL  0AE8
....................    lcd_gotoxy(1,3); 
0B2E:  MOVLW  01
0B30:  MOVWF  xF2
0B32:  MOVLW  03
0B34:  MOVWF  xF3
0B36:  RCALL  0A22
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0B38:  MOVLW  1C
0B3A:  MOVWF  FF6
0B3C:  MOVLW  02
0B3E:  MOVWF  FF7
0B40:  RCALL  0AE8
....................    lcd_gotoxy(1,4); 
0B42:  MOVLW  01
0B44:  MOVWF  xF2
0B46:  MOVLW  04
0B48:  MOVWF  xF3
0B4A:  RCALL  0A22
....................    printf(lcd_putc,"  REF:JPCFLVMD48IX  "); 
0B4C:  MOVLW  32
0B4E:  MOVWF  FF6
0B50:  MOVLW  02
0B52:  MOVWF  FF7
0B54:  RCALL  0AE8
....................    delay_ms(2000); 
0B56:  MOVLW  08
0B58:  MOVWF  xE0
0B5A:  MOVLW  FA
0B5C:  MOVWF  xF7
0B5E:  RCALL  08F8
0B60:  DECFSZ xE0,F
0B62:  BRA    0B5A
....................    printf(lcd_putc,"\f"); 
0B64:  MOVLW  0C
0B66:  MOVWF  xF1
0B68:  RCALL  0A8A
.................... } 
0B6A:  GOTO   245A (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0BA4:  MOVFF  FF2,E0
0BA8:  BCF    FF2.6
0BAA:  BCF    FF2.7
0BAC:  CLRF   FA9
0BAE:  BCF    FA6.6
0BB0:  BCF    FA6.7
0BB2:  BSF    FA6.0
0BB4:  MOVF   FA8,W
0BB6:  BTFSC  xE0.6
0BB8:  BSF    FF2.6
0BBA:  BTFSC  xE0.7
0BBC:  BSF    FF2.7
0BBE:  MOVWF  4D
....................    delay_ms(20);  
0BC0:  MOVLW  14
0BC2:  MOVWF  xF7
0BC4:  RCALL  08F8
....................    contrasena[1]=read_eeprom(1); 
0BC6:  MOVFF  FF2,E0
0BCA:  BCF    FF2.6
0BCC:  BCF    FF2.7
0BCE:  MOVLW  01
0BD0:  MOVWF  FA9
0BD2:  BCF    FA6.6
0BD4:  BCF    FA6.7
0BD6:  BSF    FA6.0
0BD8:  MOVF   FA8,W
0BDA:  BTFSC  xE0.6
0BDC:  BSF    FF2.6
0BDE:  BTFSC  xE0.7
0BE0:  BSF    FF2.7
0BE2:  MOVWF  4E
....................    delay_ms(20); 
0BE4:  MOVLW  14
0BE6:  MOVWF  xF7
0BE8:  RCALL  08F8
....................    contrasena[2]=read_eeprom(2); 
0BEA:  MOVFF  FF2,E0
0BEE:  BCF    FF2.6
0BF0:  BCF    FF2.7
0BF2:  MOVLW  02
0BF4:  MOVWF  FA9
0BF6:  BCF    FA6.6
0BF8:  BCF    FA6.7
0BFA:  BSF    FA6.0
0BFC:  MOVF   FA8,W
0BFE:  BTFSC  xE0.6
0C00:  BSF    FF2.6
0C02:  BTFSC  xE0.7
0C04:  BSF    FF2.7
0C06:  MOVWF  4F
....................    delay_ms(20);  
0C08:  MOVLW  14
0C0A:  MOVWF  xF7
0C0C:  RCALL  08F8
....................    contrasena[3]=read_eeprom(3); 
0C0E:  MOVFF  FF2,E0
0C12:  BCF    FF2.6
0C14:  BCF    FF2.7
0C16:  MOVLW  03
0C18:  MOVWF  FA9
0C1A:  BCF    FA6.6
0C1C:  BCF    FA6.7
0C1E:  BSF    FA6.0
0C20:  MOVF   FA8,W
0C22:  BTFSC  xE0.6
0C24:  BSF    FF2.6
0C26:  BTFSC  xE0.7
0C28:  BSF    FF2.7
0C2A:  MOVWF  50
....................    delay_ms(20); 
0C2C:  MOVLW  14
0C2E:  MOVWF  xF7
0C30:  RCALL  08F8
....................    estadoalarma=read_eeprom(4); 
0C32:  MOVFF  FF2,E0
0C36:  BCF    FF2.6
0C38:  BCF    FF2.7
0C3A:  MOVLW  04
0C3C:  MOVWF  FA9
0C3E:  BCF    FA6.6
0C40:  BCF    FA6.7
0C42:  BSF    FA6.0
0C44:  MOVF   FA8,W
0C46:  BTFSC  xE0.6
0C48:  BSF    FF2.6
0C4A:  BTFSC  xE0.7
0C4C:  BSF    FF2.7
0C4E:  MOVWF  01
0C50:  BCF    2A.4
0C52:  BTFSC  01.0
0C54:  BSF    2A.4
....................    delay_ms(20); 
0C56:  MOVLW  14
0C58:  MOVWF  xF7
0C5A:  RCALL  08F8
....................    tempo_minutos=read_eeprom(5); 
0C5C:  MOVFF  FF2,E0
0C60:  BCF    FF2.6
0C62:  BCF    FF2.7
0C64:  MOVLW  05
0C66:  MOVWF  FA9
0C68:  BCF    FA6.6
0C6A:  BCF    FA6.7
0C6C:  BSF    FA6.0
0C6E:  MOVF   FA8,W
0C70:  BTFSC  xE0.6
0C72:  BSF    FF2.6
0C74:  BTFSC  xE0.7
0C76:  BSF    FF2.7
0C78:  MOVWF  3B
....................    delay_ms(20); 
0C7A:  MOVLW  14
0C7C:  MOVWF  xF7
0C7E:  RCALL  08F8
....................    tempo_segundos=read_eeprom(6); 
0C80:  MOVFF  FF2,E0
0C84:  BCF    FF2.6
0C86:  BCF    FF2.7
0C88:  MOVLW  06
0C8A:  MOVWF  FA9
0C8C:  BCF    FA6.6
0C8E:  BCF    FA6.7
0C90:  BSF    FA6.0
0C92:  MOVF   FA8,W
0C94:  BTFSC  xE0.6
0C96:  BSF    FF2.6
0C98:  BTFSC  xE0.7
0C9A:  BSF    FF2.7
0C9C:  MOVWF  3C
....................    delay_ms(20); 
0C9E:  MOVLW  14
0CA0:  MOVWF  xF7
0CA2:  RCALL  08F8
....................    segundos=read_eeprom(7); 
0CA4:  MOVFF  FF2,E0
0CA8:  BCF    FF2.6
0CAA:  BCF    FF2.7
0CAC:  MOVLW  07
0CAE:  MOVWF  FA9
0CB0:  BCF    FA6.6
0CB2:  BCF    FA6.7
0CB4:  BSF    FA6.0
0CB6:  MOVF   FA8,W
0CB8:  BTFSC  xE0.6
0CBA:  BSF    FF2.6
0CBC:  BTFSC  xE0.7
0CBE:  BSF    FF2.7
0CC0:  MOVWF  35
....................    delay_ms(20); 
0CC2:  MOVLW  14
0CC4:  MOVWF  xF7
0CC6:  RCALL  08F8
....................    minutos=read_eeprom(8); 
0CC8:  MOVFF  FF2,E0
0CCC:  BCF    FF2.6
0CCE:  BCF    FF2.7
0CD0:  MOVLW  08
0CD2:  MOVWF  FA9
0CD4:  BCF    FA6.6
0CD6:  BCF    FA6.7
0CD8:  BSF    FA6.0
0CDA:  MOVF   FA8,W
0CDC:  BTFSC  xE0.6
0CDE:  BSF    FF2.6
0CE0:  BTFSC  xE0.7
0CE2:  BSF    FF2.7
0CE4:  MOVWF  36
....................    delay_ms(20); 
0CE6:  MOVLW  14
0CE8:  MOVWF  xF7
0CEA:  RCALL  08F8
....................    horasL=read_eeprom(9); 
0CEC:  MOVFF  FF2,E0
0CF0:  BCF    FF2.6
0CF2:  BCF    FF2.7
0CF4:  MOVLW  09
0CF6:  MOVWF  FA9
0CF8:  BCF    FA6.6
0CFA:  BCF    FA6.7
0CFC:  BSF    FA6.0
0CFE:  MOVF   FA8,W
0D00:  BTFSC  xE0.6
0D02:  BSF    FF2.6
0D04:  BTFSC  xE0.7
0D06:  BSF    FF2.7
0D08:  MOVWF  37
....................    delay_ms(20); 
0D0A:  MOVLW  14
0D0C:  MOVWF  xF7
0D0E:  RCALL  08F8
....................    horasH=read_eeprom(10); 
0D10:  MOVFF  FF2,E0
0D14:  BCF    FF2.6
0D16:  BCF    FF2.7
0D18:  MOVLW  0A
0D1A:  MOVWF  FA9
0D1C:  BCF    FA6.6
0D1E:  BCF    FA6.7
0D20:  BSF    FA6.0
0D22:  MOVF   FA8,W
0D24:  BTFSC  xE0.6
0D26:  BSF    FF2.6
0D28:  BTFSC  xE0.7
0D2A:  BSF    FF2.7
0D2C:  MOVWF  38
....................    delay_ms(20); 
0D2E:  MOVLW  14
0D30:  MOVWF  xF7
0D32:  RCALL  08F8
....................    G_l=read_eeprom(11); 
0D34:  MOVFF  FF2,E0
0D38:  BCF    FF2.6
0D3A:  BCF    FF2.7
0D3C:  MOVLW  0B
0D3E:  MOVWF  FA9
0D40:  BCF    FA6.6
0D42:  BCF    FA6.7
0D44:  BSF    FA6.0
0D46:  MOVF   FA8,W
0D48:  BTFSC  xE0.6
0D4A:  BSF    FF2.6
0D4C:  BTFSC  xE0.7
0D4E:  BSF    FF2.7
0D50:  MOVWF  39
....................    delay_ms(20); 
0D52:  MOVLW  14
0D54:  MOVWF  xF7
0D56:  RCALL  08F8
....................    G_h=read_eeprom(12); 
0D58:  MOVFF  FF2,E0
0D5C:  BCF    FF2.6
0D5E:  BCF    FF2.7
0D60:  MOVLW  0C
0D62:  MOVWF  FA9
0D64:  BCF    FA6.6
0D66:  BCF    FA6.7
0D68:  BSF    FA6.0
0D6A:  MOVF   FA8,W
0D6C:  BTFSC  xE0.6
0D6E:  BSF    FF2.6
0D70:  BTFSC  xE0.7
0D72:  BSF    FF2.7
0D74:  MOVWF  3A
....................    delay_ms(20); 
0D76:  MOVLW  14
0D78:  MOVWF  xF7
0D7A:  RCALL  08F8
....................    Vel1=read_eeprom(13); 
0D7C:  MOVFF  FF2,E0
0D80:  BCF    FF2.6
0D82:  BCF    FF2.7
0D84:  MOVLW  0D
0D86:  MOVWF  FA9
0D88:  BCF    FA6.6
0D8A:  BCF    FA6.7
0D8C:  BSF    FA6.0
0D8E:  MOVF   FA8,W
0D90:  BTFSC  xE0.6
0D92:  BSF    FF2.6
0D94:  BTFSC  xE0.7
0D96:  BSF    FF2.7
0D98:  MOVWF  56
....................    delay_ms(20); 
0D9A:  MOVLW  14
0D9C:  MOVWF  xF7
0D9E:  RCALL  08F8
....................    codigoSubir=read_eeprom(15); 
0DA0:  MOVFF  FF2,E0
0DA4:  BCF    FF2.6
0DA6:  BCF    FF2.7
0DA8:  MOVLW  0F
0DAA:  MOVWF  FA9
0DAC:  BCF    FA6.6
0DAE:  BCF    FA6.7
0DB0:  BSF    FA6.0
0DB2:  MOVF   FA8,W
0DB4:  BTFSC  xE0.6
0DB6:  BSF    FF2.6
0DB8:  BTFSC  xE0.7
0DBA:  BSF    FF2.7
0DBC:  MOVWF  52
....................    delay_ms(20); 
0DBE:  MOVLW  14
0DC0:  MOVWF  xF7
0DC2:  RCALL  08F8
....................    codigoBajar=read_eeprom(16); 
0DC4:  MOVFF  FF2,E0
0DC8:  BCF    FF2.6
0DCA:  BCF    FF2.7
0DCC:  MOVLW  10
0DCE:  MOVWF  FA9
0DD0:  BCF    FA6.6
0DD2:  BCF    FA6.7
0DD4:  BSF    FA6.0
0DD6:  MOVF   FA8,W
0DD8:  BTFSC  xE0.6
0DDA:  BSF    FF2.6
0DDC:  BTFSC  xE0.7
0DDE:  BSF    FF2.7
0DE0:  MOVWF  53
....................    delay_ms(20); 
0DE2:  MOVLW  14
0DE4:  MOVWF  xF7
0DE6:  RCALL  08F8
....................    codigoDetener=read_eeprom(17); 
0DE8:  MOVFF  FF2,E0
0DEC:  BCF    FF2.6
0DEE:  BCF    FF2.7
0DF0:  MOVLW  11
0DF2:  MOVWF  FA9
0DF4:  BCF    FA6.6
0DF6:  BCF    FA6.7
0DF8:  BSF    FA6.0
0DFA:  MOVF   FA8,W
0DFC:  BTFSC  xE0.6
0DFE:  BSF    FF2.6
0E00:  BTFSC  xE0.7
0E02:  BSF    FF2.7
0E04:  MOVWF  54
....................    delay_ms(20); 
0E06:  MOVLW  14
0E08:  MOVWF  xF7
0E0A:  RCALL  08F8
....................    G16=make16(G_h,G_l); 
0E0C:  MOVFF  3A,5C
0E10:  MOVFF  39,5B
....................    G=G16; 
0E14:  MOVFF  5C,F9
0E18:  MOVFF  5B,F8
0E1C:  RCALL  0B6E
0E1E:  MOVFF  03,C0
0E22:  MOVFF  02,BF
0E26:  MOVFF  01,BE
0E2A:  MOVFF  00,BD
....................    horas=make16(horasH,horasL); 
0E2E:  MOVFF  38,5A
0E32:  MOVFF  37,59
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0E36:  MOVFF  3B,3D
0E3A:  MOVFF  3C,3E
.................... } 
0E3E:  GOTO   245E (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0EB8:  BTFSC  4D.7
0EBA:  BRA    0EC2
0EBC:  MOVF   4D,W
0EBE:  SUBLW  09
0EC0:  BNC   0EC8
0EC2:  BTFSC  4D.7
0EC4:  BRA    0EC8
0EC6:  BRA    0EFA
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0EC8:  CLRF   4D
0ECA:  CLRF   FA9
0ECC:  CLRF   FA8
0ECE:  BCF    FA6.6
0ED0:  BCF    FA6.7
0ED2:  BSF    FA6.2
0ED4:  MOVF   FF2,W
0ED6:  MOVWF  00
0ED8:  BCF    FF2.6
0EDA:  BCF    FF2.7
0EDC:  MOVLB  F
0EDE:  MOVLW  55
0EE0:  MOVWF  FA7
0EE2:  MOVLW  AA
0EE4:  MOVWF  FA7
0EE6:  BSF    FA6.1
0EE8:  BTFSC  FA6.1
0EEA:  BRA    0EE8
0EEC:  BCF    FA6.2
0EEE:  MOVF   00,W
0EF0:  IORWF  FF2,F
0EF2:  MOVLW  14
0EF4:  MOVLB  0
0EF6:  MOVWF  xF7
0EF8:  RCALL  08F8
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0EFA:  BTFSC  4E.7
0EFC:  BRA    0F04
0EFE:  MOVF   4E,W
0F00:  SUBLW  09
0F02:  BNC   0F0A
0F04:  BTFSC  4E.7
0F06:  BRA    0F0A
0F08:  BRA    0F3E
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0F0A:  CLRF   4E
0F0C:  MOVLW  01
0F0E:  MOVWF  FA9
0F10:  CLRF   FA8
0F12:  BCF    FA6.6
0F14:  BCF    FA6.7
0F16:  BSF    FA6.2
0F18:  MOVF   FF2,W
0F1A:  MOVWF  00
0F1C:  BCF    FF2.6
0F1E:  BCF    FF2.7
0F20:  MOVLB  F
0F22:  MOVLW  55
0F24:  MOVWF  FA7
0F26:  MOVLW  AA
0F28:  MOVWF  FA7
0F2A:  BSF    FA6.1
0F2C:  BTFSC  FA6.1
0F2E:  BRA    0F2C
0F30:  BCF    FA6.2
0F32:  MOVF   00,W
0F34:  IORWF  FF2,F
0F36:  MOVLW  14
0F38:  MOVLB  0
0F3A:  MOVWF  xF7
0F3C:  RCALL  08F8
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0F3E:  BTFSC  4F.7
0F40:  BRA    0F48
0F42:  MOVF   4F,W
0F44:  SUBLW  09
0F46:  BNC   0F4E
0F48:  BTFSC  4F.7
0F4A:  BRA    0F4E
0F4C:  BRA    0F82
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0F4E:  CLRF   4F
0F50:  MOVLW  02
0F52:  MOVWF  FA9
0F54:  CLRF   FA8
0F56:  BCF    FA6.6
0F58:  BCF    FA6.7
0F5A:  BSF    FA6.2
0F5C:  MOVF   FF2,W
0F5E:  MOVWF  00
0F60:  BCF    FF2.6
0F62:  BCF    FF2.7
0F64:  MOVLB  F
0F66:  MOVLW  55
0F68:  MOVWF  FA7
0F6A:  MOVLW  AA
0F6C:  MOVWF  FA7
0F6E:  BSF    FA6.1
0F70:  BTFSC  FA6.1
0F72:  BRA    0F70
0F74:  BCF    FA6.2
0F76:  MOVF   00,W
0F78:  IORWF  FF2,F
0F7A:  MOVLW  14
0F7C:  MOVLB  0
0F7E:  MOVWF  xF7
0F80:  RCALL  08F8
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0F82:  BTFSC  50.7
0F84:  BRA    0F8C
0F86:  MOVF   50,W
0F88:  SUBLW  09
0F8A:  BNC   0F92
0F8C:  BTFSC  50.7
0F8E:  BRA    0F92
0F90:  BRA    0FC6
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0F92:  CLRF   50
0F94:  MOVLW  03
0F96:  MOVWF  FA9
0F98:  CLRF   FA8
0F9A:  BCF    FA6.6
0F9C:  BCF    FA6.7
0F9E:  BSF    FA6.2
0FA0:  MOVF   FF2,W
0FA2:  MOVWF  00
0FA4:  BCF    FF2.6
0FA6:  BCF    FF2.7
0FA8:  MOVLB  F
0FAA:  MOVLW  55
0FAC:  MOVWF  FA7
0FAE:  MOVLW  AA
0FB0:  MOVWF  FA7
0FB2:  BSF    FA6.1
0FB4:  BTFSC  FA6.1
0FB6:  BRA    0FB4
0FB8:  BCF    FA6.2
0FBA:  MOVF   00,W
0FBC:  IORWF  FF2,F
0FBE:  MOVLW  14
0FC0:  MOVLB  0
0FC2:  MOVWF  xF7
0FC4:  RCALL  08F8
....................    } 
....................    if(estadoalarma>1){ 
0FC6:  MOVLW  00
0FC8:  BTFSC  2A.4
0FCA:  MOVLW  01
0FCC:  SUBLW  01
0FCE:  BC    1006
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0FD0:  BSF    2A.4
0FD2:  MOVLW  04
0FD4:  MOVWF  FA9
0FD6:  MOVLW  01
0FD8:  MOVWF  FA8
0FDA:  BCF    FA6.6
0FDC:  BCF    FA6.7
0FDE:  BSF    FA6.2
0FE0:  MOVF   FF2,W
0FE2:  MOVWF  00
0FE4:  BCF    FF2.6
0FE6:  BCF    FF2.7
0FE8:  MOVLB  F
0FEA:  MOVLW  55
0FEC:  MOVWF  FA7
0FEE:  MOVLW  AA
0FF0:  MOVWF  FA7
0FF2:  BSF    FA6.1
0FF4:  BTFSC  FA6.1
0FF6:  BRA    0FF4
0FF8:  BCF    FA6.2
0FFA:  MOVF   00,W
0FFC:  IORWF  FF2,F
0FFE:  MOVLW  14
1000:  MOVLB  0
1002:  MOVWF  xF7
1004:  RCALL  08F8
....................    } 
....................    if(tempo_minutos>200){ 
1006:  MOVF   3B,W
1008:  SUBLW  C8
100A:  BC    1044
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
100C:  MOVLW  14
100E:  MOVWF  3B
1010:  MOVLW  05
1012:  MOVWF  FA9
1014:  MOVLW  14
1016:  MOVWF  FA8
1018:  BCF    FA6.6
101A:  BCF    FA6.7
101C:  BSF    FA6.2
101E:  MOVF   FF2,W
1020:  MOVWF  00
1022:  BCF    FF2.6
1024:  BCF    FF2.7
1026:  MOVLB  F
1028:  MOVLW  55
102A:  MOVWF  FA7
102C:  MOVLW  AA
102E:  MOVWF  FA7
1030:  BSF    FA6.1
1032:  BTFSC  FA6.1
1034:  BRA    1032
1036:  BCF    FA6.2
1038:  MOVF   00,W
103A:  IORWF  FF2,F
103C:  MOVLW  14
103E:  MOVLB  0
1040:  MOVWF  xF7
1042:  RCALL  08F8
....................    } 
....................    if(tempo_segundos>59){ 
1044:  MOVF   3C,W
1046:  SUBLW  3B
1048:  BC    107E
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
104A:  CLRF   3C
104C:  MOVLW  06
104E:  MOVWF  FA9
1050:  CLRF   FA8
1052:  BCF    FA6.6
1054:  BCF    FA6.7
1056:  BSF    FA6.2
1058:  MOVF   FF2,W
105A:  MOVWF  00
105C:  BCF    FF2.6
105E:  BCF    FF2.7
1060:  MOVLB  F
1062:  MOVLW  55
1064:  MOVWF  FA7
1066:  MOVLW  AA
1068:  MOVWF  FA7
106A:  BSF    FA6.1
106C:  BTFSC  FA6.1
106E:  BRA    106C
1070:  BCF    FA6.2
1072:  MOVF   00,W
1074:  IORWF  FF2,F
1076:  MOVLW  14
1078:  MOVLB  0
107A:  MOVWF  xF7
107C:  RCALL  08F8
....................    } 
....................    if(segundos>60){ 
107E:  MOVF   35,W
1080:  SUBLW  3C
1082:  BC    10B8
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
1084:  CLRF   35
1086:  MOVLW  07
1088:  MOVWF  FA9
108A:  CLRF   FA8
108C:  BCF    FA6.6
108E:  BCF    FA6.7
1090:  BSF    FA6.2
1092:  MOVF   FF2,W
1094:  MOVWF  00
1096:  BCF    FF2.6
1098:  BCF    FF2.7
109A:  MOVLB  F
109C:  MOVLW  55
109E:  MOVWF  FA7
10A0:  MOVLW  AA
10A2:  MOVWF  FA7
10A4:  BSF    FA6.1
10A6:  BTFSC  FA6.1
10A8:  BRA    10A6
10AA:  BCF    FA6.2
10AC:  MOVF   00,W
10AE:  IORWF  FF2,F
10B0:  MOVLW  14
10B2:  MOVLB  0
10B4:  MOVWF  xF7
10B6:  RCALL  08F8
....................    } 
....................    if(minutos>60){ 
10B8:  MOVF   36,W
10BA:  SUBLW  3C
10BC:  BC    10F2
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
10BE:  CLRF   36
10C0:  MOVLW  08
10C2:  MOVWF  FA9
10C4:  CLRF   FA8
10C6:  BCF    FA6.6
10C8:  BCF    FA6.7
10CA:  BSF    FA6.2
10CC:  MOVF   FF2,W
10CE:  MOVWF  00
10D0:  BCF    FF2.6
10D2:  BCF    FF2.7
10D4:  MOVLB  F
10D6:  MOVLW  55
10D8:  MOVWF  FA7
10DA:  MOVLW  AA
10DC:  MOVWF  FA7
10DE:  BSF    FA6.1
10E0:  BTFSC  FA6.1
10E2:  BRA    10E0
10E4:  BCF    FA6.2
10E6:  MOVF   00,W
10E8:  IORWF  FF2,F
10EA:  MOVLW  14
10EC:  MOVLB  0
10EE:  MOVWF  xF7
10F0:  RCALL  08F8
....................    } 
....................    if(horas>10000){ 
10F2:  MOVF   5A,W
10F4:  SUBLW  26
10F6:  BC    1170
10F8:  XORLW  FF
10FA:  BNZ   1102
10FC:  MOVF   59,W
10FE:  SUBLW  10
1100:  BC    1170
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
1102:  CLRF   5A
1104:  CLRF   59
1106:  MOVLW  09
1108:  MOVWF  FA9
110A:  MOVLW  0A
110C:  MOVWF  FA8
110E:  BCF    FA6.6
1110:  BCF    FA6.7
1112:  BSF    FA6.2
1114:  MOVF   FF2,W
1116:  MOVWF  00
1118:  BCF    FF2.6
111A:  BCF    FF2.7
111C:  MOVLB  F
111E:  MOVLW  55
1120:  MOVWF  FA7
1122:  MOVLW  AA
1124:  MOVWF  FA7
1126:  BSF    FA6.1
1128:  BTFSC  FA6.1
112A:  BRA    1128
112C:  BCF    FA6.2
112E:  MOVF   00,W
1130:  IORWF  FF2,F
1132:  MOVLW  14
1134:  MOVLB  0
1136:  MOVWF  xF7
1138:  CALL   08F8
113C:  MOVLW  0A
113E:  MOVWF  FA9
1140:  CLRF   FA8
1142:  BCF    FA6.6
1144:  BCF    FA6.7
1146:  BSF    FA6.2
1148:  MOVF   FF2,W
114A:  MOVWF  00
114C:  BCF    FF2.6
114E:  BCF    FF2.7
1150:  MOVLB  F
1152:  MOVLW  55
1154:  MOVWF  FA7
1156:  MOVLW  AA
1158:  MOVWF  FA7
115A:  BSF    FA6.1
115C:  BTFSC  FA6.1
115E:  BRA    115C
1160:  BCF    FA6.2
1162:  MOVF   00,W
1164:  IORWF  FF2,F
1166:  MOVLW  14
1168:  MOVLB  0
116A:  MOVWF  xF7
116C:  CALL   08F8
....................    } 
....................    if(G>300 || G<200){ 
1170:  CLRF   xF7
1172:  CLRF   xF6
1174:  MOVLW  16
1176:  MOVWF  xF5
1178:  MOVLW  87
117A:  MOVWF  xF4
117C:  MOVFF  C0,FB
1180:  MOVFF  BF,FA
1184:  MOVFF  BE,F9
1188:  MOVFF  BD,F8
118C:  RCALL  0E42
118E:  BC    11B0
1190:  MOVFF  C0,F7
1194:  MOVFF  BF,F6
1198:  MOVFF  BE,F5
119C:  MOVFF  BD,F4
11A0:  CLRF   xFB
11A2:  CLRF   xFA
11A4:  MOVLW  48
11A6:  MOVWF  xF9
11A8:  MOVLW  86
11AA:  MOVWF  xF8
11AC:  RCALL  0E42
11AE:  BNC   1226
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
11B0:  CLRF   xC0
11B2:  CLRF   xBF
11B4:  MOVLW  5C
11B6:  MOVWF  xBE
11B8:  MOVLW  86
11BA:  MOVWF  xBD
11BC:  MOVLW  0B
11BE:  MOVWF  FA9
11C0:  MOVLW  DC
11C2:  MOVWF  FA8
11C4:  BCF    FA6.6
11C6:  BCF    FA6.7
11C8:  BSF    FA6.2
11CA:  MOVF   FF2,W
11CC:  MOVWF  00
11CE:  BCF    FF2.6
11D0:  BCF    FF2.7
11D2:  MOVLB  F
11D4:  MOVLW  55
11D6:  MOVWF  FA7
11D8:  MOVLW  AA
11DA:  MOVWF  FA7
11DC:  BSF    FA6.1
11DE:  BTFSC  FA6.1
11E0:  BRA    11DE
11E2:  BCF    FA6.2
11E4:  MOVF   00,W
11E6:  IORWF  FF2,F
11E8:  MOVLW  14
11EA:  MOVLB  0
11EC:  MOVWF  xF7
11EE:  CALL   08F8
11F2:  MOVLW  0C
11F4:  MOVWF  FA9
11F6:  CLRF   FA8
11F8:  BCF    FA6.6
11FA:  BCF    FA6.7
11FC:  BSF    FA6.2
11FE:  MOVF   FF2,W
1200:  MOVWF  00
1202:  BCF    FF2.6
1204:  BCF    FF2.7
1206:  MOVLB  F
1208:  MOVLW  55
120A:  MOVWF  FA7
120C:  MOVLW  AA
120E:  MOVWF  FA7
1210:  BSF    FA6.1
1212:  BTFSC  FA6.1
1214:  BRA    1212
1216:  BCF    FA6.2
1218:  MOVF   00,W
121A:  IORWF  FF2,F
121C:  MOVLW  14
121E:  MOVLB  0
1220:  MOVWF  xF7
1222:  CALL   08F8
....................    } 
....................    if(Vel1>6){ 
1226:  MOVF   56,W
1228:  SUBLW  06
122A:  BC    1266
....................       Vel1=4;write_eeprom(13,4);delay_ms(20); 
122C:  MOVLW  04
122E:  MOVWF  56
1230:  MOVLW  0D
1232:  MOVWF  FA9
1234:  MOVLW  04
1236:  MOVWF  FA8
1238:  BCF    FA6.6
123A:  BCF    FA6.7
123C:  BSF    FA6.2
123E:  MOVF   FF2,W
1240:  MOVWF  00
1242:  BCF    FF2.6
1244:  BCF    FF2.7
1246:  MOVLB  F
1248:  MOVLW  55
124A:  MOVWF  FA7
124C:  MOVLW  AA
124E:  MOVWF  FA7
1250:  BSF    FA6.1
1252:  BTFSC  FA6.1
1254:  BRA    1252
1256:  BCF    FA6.2
1258:  MOVF   00,W
125A:  IORWF  FF2,F
125C:  MOVLW  14
125E:  MOVLB  0
1260:  MOVWF  xF7
1262:  CALL   08F8
....................    } 
.................... } 
1266:  GOTO   2462 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
*
226C:  BCF    2A.5
....................    if(VIDRIOUUP || !VIDRIODN){ 
226E:  BSF    F92.1
2270:  BTFSS  F80.1
2272:  BRA    227A
2274:  BSF    F92.2
2276:  BTFSS  F80.2
2278:  BRA    2284
....................       O1_on;O2_off; 
227A:  BSF    F8A.6
227C:  BCF    F93.6
227E:  BCF    F8A.7
2280:  BCF    F93.7
....................    }else{ 
2282:  BRA    228E
....................       O1_off;O2_off; 
2284:  BCF    F8A.6
2286:  BCF    F93.6
2288:  BCF    F8A.7
228A:  BCF    F93.7
....................       pulsoBajar=OFF; 
228C:  BCF    2A.6
....................    } 
.................... } 
228E:  GOTO   4104 (RETURN)
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
*
2246:  BCF    2A.6
....................    if(!VIDRIOUUP || VIDRIODN){ 
2248:  BSF    F92.1
224A:  BTFSC  F80.1
224C:  BRA    2254
224E:  BSF    F92.2
2250:  BTFSC  F80.2
2252:  BRA    225E
....................       O1_off;O2_on; 
2254:  BCF    F8A.6
2256:  BCF    F93.6
2258:  BSF    F8A.7
225A:  BCF    F93.7
....................    }else{ 
225C:  BRA    2268
....................       O1_off;O2_off; 
225E:  BCF    F8A.6
2260:  BCF    F93.6
2262:  BCF    F8A.7
2264:  BCF    F93.7
....................       pulsoSubir=OFF; 
2266:  BCF    2A.5
....................    } 
.................... } 
2268:  GOTO   40FA (RETURN)
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
*
2292:  BCF    F8A.6
2294:  BCF    F93.6
2296:  BCF    F8A.7
2298:  BCF    F93.7
.................... } 
229A:  GOTO   410A (RETURN)
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
....................  
.................... /* 
.................... #int_EXT1 HIGH 
.................... void RB1(){ 
....................    Ta=get_timer1(); 
....................    TICK = Ta-tb; 
....................    Tb = Ta; 
....................     
....................    Entro=1; 
....................     
....................    if(BIT_START==1){ 
....................        //BIT 1 
....................        if(TICK>960 && TICK < 1280)  // 700 con Pres 4 y 20MHz  
....................       { 
....................          BITS[n]=1; n++; 
....................       } 
....................       //BIT 0 
....................        if(TICK>400 && TICK < 720)  // 350 con Pres 4 y 20MHz  
....................       { 
....................          BITS[n]=0; n++; 
....................       } 
....................       if(n>=32){ 
....................          NUEVO_DATO=1; 
....................          BIT_START=0; 
....................       } 
....................     
....................    } 
....................    //BIT START 
....................    if(TICK>2800 && TICK < 5800 && BIT_START==0)  //3500 con Pres 4 y 20MHz  
....................    { 
....................       BIT_START=1; 
....................       n=0;  
....................    } 
.................... } 
.................... */ 
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    2B.5
....................     
....................    if(VelMotor==5){ 
024A:  MOVF   xC8,W
024C:  SUBLW  05
024E:  BNZ   0260
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0250:  CLRF   FD7
0252:  MOVLW  E4
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==4){ 
025E:  BRA    02B4
0260:  MOVF   xC8,W
0262:  SUBLW  04
0264:  BNZ   0276
....................       set_timer0(201);       
0266:  CLRF   FD7
0268:  MOVLW  C9
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==3){ 
0274:  BRA    02B4
0276:  MOVF   xC8,W
0278:  SUBLW  03
027A:  BNZ   028C
....................       set_timer0(196); 
027C:  CLRF   FD7
027E:  MOVLW  C4
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==2){ 
028A:  BRA    02B4
028C:  MOVF   xC8,W
028E:  SUBLW  02
0290:  BNZ   02A2
....................       set_timer0(188); 
0292:  CLRF   FD7
0294:  MOVLW  BC
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==1){ 
02A0:  BRA    02B4
02A2:  DECFSZ xC8,W
02A4:  BRA    02B4
....................       set_timer0(180); 
02A6:  CLRF   FD7
02A8:  MOVLW  B4
02AA:  MOVWF  FD6
....................       Motor_off;  
02AC:  BCF    F8B.2
02AE:  BCF    F94.2
....................       Motor2_off;  
02B0:  BCF    F8B.1
02B2:  BCF    F94.1
....................    } 
....................    pulsos++;    
02B4:  INCF   xC1,F
02B6:  BTFSC  FD8.2
02B8:  INCF   xC2,F
.................... } 
....................  
02BA:  BCF    FF2.1
02BC:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<6){ 
02C0:  MOVF   xC8,F
02C2:  BZ    02EC
02C4:  MOVF   xC8,W
02C6:  SUBLW  05
02C8:  BNC   02EC
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
02CA:  BTFSS  2B.5
02CC:  BRA    02E0
....................       Motor_on; 
02CE:  BSF    F8B.2
02D0:  BCF    F94.2
....................       Motor2_on;  
02D2:  BSF    F8B.1
02D4:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
02D6:  CLRF   FD7
02D8:  MOVLW  FD
02DA:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
02DC:  BCF    2B.5
....................    } else {            //The triac has been triggered, cut the pulse 
02DE:  BRA    02EC
....................       Motor_off; 
02E0:  BCF    F8B.2
02E2:  BCF    F94.2
....................       Motor2_off;  
02E4:  BCF    F8B.1
02E6:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
02E8:  CLRF   FD7
02EA:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
02EC:  BCF    FF2.2
02EE:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(45536);//5ms 
02F2:  MOVLW  B1
02F4:  MOVWF  FCF
02F6:  MOVLW  E0
02F8:  MOVWF  FCE
....................    tiempos++; 
02FA:  INCF   57,F
02FC:  BTFSC  FD8.2
02FE:  INCF   58,F
....................    // 
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
0300:  MOVF   58,F
0302:  BNZ   030A
0304:  MOVF   57,W
0306:  SUBLW  C7
0308:  BC    035C
....................    output_toggle(PIN_A3); 
030A:  BCF    F92.3
030C:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
030E:  CLRF   58
0310:  CLRF   57
0312:  INCF   43,F
0314:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
0316:  DECFSZ 51,W
0318:  BRA    032E
....................          if(estadobuzzer==0){ 
031A:  BTFSC  2A.3
031C:  BRA    0324
....................             Buzzer_off; 
031E:  BCF    F8B.0
0320:  BCF    F94.0
....................          }else{ 
0322:  BRA    032C
....................             if(estadoalarma==1) 
0324:  BTFSS  2A.4
0326:  BRA    032C
....................                Buzzer_on; 
0328:  BSF    F8B.0
032A:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
032C:  BTG    2A.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
032E:  BTFSS  29.0
0330:  BRA    035C
....................          segundos++; 
0332:  INCF   35,F
....................          if(tiempo_cumplido==0){ 
0334:  BTFSC  29.7
0336:  BRA    035C
....................             if(tempo_segundos>0){ 
0338:  MOVF   3C,F
033A:  BZ    0340
....................                tempo_segundos--; 
033C:  DECF   3C,F
....................             }else{ 
033E:  BRA    035C
....................                if(tempo_minutos>0){ 
0340:  MOVF   3B,F
0342:  BZ    034C
....................                   tempo_minutos--; 
0344:  DECF   3B,F
....................                   tempo_segundos=59; 
0346:  MOVLW  3B
0348:  MOVWF  3C
....................                }else{ 
034A:  BRA    035C
....................                   tiempo_cumplido=1; 
034C:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
034E:  BCF    29.0
0350:  BSF    F8A.3
0352:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
0354:  MOVFF  3D,3B
0358:  MOVFF  3E,3C
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
035C:  BCF    F9E.0
035E:  GOTO   0064
.................... void main () 
.................... { 
*
229E:  CLRF   FF8
22A0:  BSF    FF1.2
22A2:  BCF    F9F.0
22A4:  BSF    FD0.7
22A6:  BSF    07.7
22A8:  CLRF   FEA
22AA:  CLRF   FE9
22AC:  BCF    29.0
22AE:  BCF    29.1
22B0:  BCF    29.2
22B2:  BCF    29.3
22B4:  BCF    29.4
22B6:  BCF    29.5
22B8:  BCF    29.6
22BA:  BCF    29.7
22BC:  BCF    2A.0
22BE:  BCF    2A.1
22C0:  BCF    2A.2
22C2:  BCF    2A.3
22C4:  BCF    2A.4
22C6:  BCF    2A.5
22C8:  BCF    2A.6
22CA:  BCF    2A.7
22CC:  BCF    2B.0
22CE:  BCF    2B.1
22D0:  BCF    2B.2
22D2:  CLRF   2C
22D4:  MOVLW  07
22D6:  MOVWF  2D
22D8:  MOVLW  02
22DA:  MOVWF  2E
22DC:  MOVLW  0B
22DE:  MOVWF  2F
22E0:  MOVLW  02
22E2:  MOVWF  30
22E4:  MOVLW  03
22E6:  MOVWF  31
22E8:  MOVLW  02
22EA:  MOVWF  32
22EC:  MOVWF  33
22EE:  MOVLW  04
22F0:  MOVWF  34
22F2:  CLRF   35
22F4:  CLRF   36
22F6:  CLRF   37
22F8:  CLRF   38
22FA:  CLRF   39
22FC:  CLRF   3A
22FE:  CLRF   3B
2300:  CLRF   3C
2302:  CLRF   3D
2304:  CLRF   3E
2306:  CLRF   3F
2308:  CLRF   40
230A:  CLRF   41
230C:  MOVLW  01
230E:  MOVWF  42
2310:  CLRF   43
2312:  CLRF   44
2314:  CLRF   45
2316:  CLRF   51
2318:  CLRF   52
231A:  CLRF   53
231C:  CLRF   54
231E:  CLRF   55
2320:  MOVLW  04
2322:  MOVWF  56
2324:  CLRF   5A
2326:  CLRF   59
2328:  CLRF   5C
232A:  CLRF   5B
232C:  CLRF   xB0
232E:  CLRF   xAF
2330:  CLRF   xAE
2332:  CLRF   xAD
2334:  CLRF   xB4
2336:  CLRF   xB3
2338:  CLRF   xB2
233A:  CLRF   xB1
233C:  CLRF   xB8
233E:  CLRF   xB7
2340:  CLRF   xB6
2342:  CLRF   xB5
2344:  CLRF   xBC
2346:  CLRF   xBB
2348:  CLRF   xBA
234A:  CLRF   xB9
234C:  CLRF   xC0
234E:  CLRF   xBF
2350:  CLRF   xBE
2352:  MOVLW  80
2354:  MOVWF  xBD
2356:  BSF    2B.3
2358:  BCF    2B.4
235A:  CLRF   xC2
235C:  CLRF   xC1
235E:  CLRF   xC4
2360:  CLRF   xC3
2362:  BCF    2B.5
2364:  BCF    2B.6
2366:  CLRF   xC6
2368:  CLRF   xC5
236A:  CLRF   xC7
236C:  CLRF   xC8
236E:  CLRF   xCC
2370:  CLRF   xCB
2372:  CLRF   xCA
2374:  CLRF   xC9
2376:  CLRF   xD0
2378:  CLRF   xCF
237A:  CLRF   xCE
237C:  CLRF   xCD
237E:  CLRF   xDA
2380:  CLRF   xD9
2382:  MOVF   FC1,W
2384:  ANDLW  C0
2386:  IORLW  0F
2388:  MOVWF  FC1
238A:  MOVLW  07
238C:  MOVWF  FB4
238E:  MOVLW  3E
2390:  MOVWF  46
2392:  MOVLW  20
2394:  MOVWF  47
2396:  MOVLW  5E
2398:  MOVWF  48
239A:  CLRF   49
239C:  CLRF   4A
239E:  CLRF   4B
23A0:  CLRF   4C
23A2:  CLRF   4D
23A4:  CLRF   4E
23A6:  CLRF   4F
23A8:  CLRF   50
23AA:  CLRF   5D
23AC:  CLRF   5E
23AE:  CLRF   5F
23B0:  CLRF   x60
23B2:  CLRF   x61
23B4:  CLRF   x62
23B6:  CLRF   x63
23B8:  CLRF   x64
23BA:  CLRF   x65
23BC:  CLRF   x66
23BE:  CLRF   x67
23C0:  CLRF   x68
23C2:  CLRF   x69
23C4:  CLRF   x6A
23C6:  CLRF   x6B
23C8:  CLRF   x6C
23CA:  CLRF   x6D
23CC:  CLRF   x6E
23CE:  CLRF   x6F
23D0:  CLRF   x70
23D2:  CLRF   x71
23D4:  CLRF   x72
23D6:  CLRF   x73
23D8:  CLRF   x74
23DA:  CLRF   x75
23DC:  CLRF   x76
23DE:  CLRF   x77
23E0:  CLRF   x78
23E2:  CLRF   x79
23E4:  CLRF   x7A
23E6:  CLRF   x7B
23E8:  CLRF   x7C
23EA:  CLRF   x7D
23EC:  CLRF   x7E
23EE:  CLRF   x7F
23F0:  CLRF   x80
23F2:  CLRF   x81
23F4:  CLRF   x82
23F6:  CLRF   x83
23F8:  CLRF   x84
23FA:  CLRF   x85
23FC:  CLRF   x86
23FE:  CLRF   x87
2400:  CLRF   x88
2402:  CLRF   x89
2404:  CLRF   x8A
2406:  CLRF   x8B
2408:  CLRF   x8C
240A:  CLRF   x8D
240C:  CLRF   x8E
240E:  CLRF   x8F
2410:  CLRF   x90
2412:  CLRF   x91
2414:  CLRF   x92
2416:  CLRF   x93
2418:  CLRF   x94
241A:  CLRF   x95
241C:  CLRF   x96
241E:  CLRF   x97
2420:  CLRF   x98
2422:  CLRF   x99
2424:  CLRF   x9A
2426:  CLRF   x9B
2428:  CLRF   x9C
242A:  CLRF   x9D
242C:  CLRF   x9E
242E:  CLRF   x9F
2430:  CLRF   xA0
2432:  CLRF   xA1
2434:  CLRF   xA2
2436:  CLRF   xA3
2438:  CLRF   xA4
243A:  CLRF   xA5
243C:  CLRF   xA6
243E:  CLRF   xA7
2440:  CLRF   xA8
2442:  CLRF   xA9
2444:  CLRF   xAA
2446:  CLRF   xAB
2448:  CLRF   xAC
....................    Motor_off; 
244A:  BCF    F8B.2
244C:  BCF    F94.2
....................    Motor2_off; 
244E:  BCF    F8B.1
2450:  BCF    F94.1
....................    ConfigInterrupciones(); 
2452:  GOTO   09E6
....................    MensajeBienvenida(); 
2456:  GOTO   0B08
....................    LeeEEPROM();  
245A:  GOTO   0BA4
....................    LimitaValores(); 
245E:  GOTO   0EB8
....................    Motor_off; 
2462:  BCF    F8B.2
2464:  BCF    F94.2
....................    Motor2_off; 
2466:  BCF    F8B.1
2468:  BCF    F94.1
.................... /*    
....................    if(UP && DOWN){ 
....................       delay_ms(500); 
....................       if(UP && DOWN){ 
....................          lcd_gotoxy(1,1); 
....................          printf(lcd_putc,"Cargando..."); 
....................          delay_ms(500); 
....................          printf(lcd_putc,"\f"); 
....................          for(;;){ 
....................             leeControlRemoto(); 
....................             lcd_gotoxy(1,1); 
....................             printf(lcd_putc,"Codigo Subir: %X   ",CodigoSubir); 
....................             lcd_gotoxy(1,2); 
....................             printf(lcd_putc,"Codigo Bajar: %X   ",CodigoBajar); 
....................             lcd_gotoxy(1,3); 
....................             printf(lcd_putc,"Codigo Detener: %X ",CodigoDetener); 
....................             lcd_gotoxy(1,4); 
....................             printf(lcd_putc,"Codigo:%X %X %X %X",BYTE_IR[0],BYTE_IR[1],BYTE_IR[2],BYTE_IR[3]); 
....................              
....................             if(UP){ 
....................                delay_ms(500); 
....................                if(UP){ 
....................                   codigoSubir=BYTE_IR[3]; 
....................                   write_eeprom(15,codigoSubir); 
....................                   delay_ms(20); 
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
....................                } 
....................             } 
....................              
....................             if(DOWN){ 
....................                delay_ms(500); 
....................                if(DOWN){ 
....................                   codigoBajar=BYTE_IR[3]; 
....................                   write_eeprom(16,codigoBajar); 
....................                   delay_ms(20); 
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
....................                } 
....................             } 
....................              
....................             if(RIGHT){ 
....................                delay_ms(500); 
....................                if(RIGHT){ 
....................                   codigoDetener=BYTE_IR[3]; 
....................                   write_eeprom(17,codigoDetener); 
....................                   delay_ms(20); 
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
....................                } 
....................             } 
....................              
....................             if(IZQU){ 
....................                delay_ms(500); 
....................                if(IZQU){ 
....................                   reset_cpu(); 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    */ 
....................    while(true){ 
....................    //leeControlRemoto(); 
....................     
....................    if(VelMotor==6){ 
246A:  MOVF   xC8,W
246C:  SUBLW  06
246E:  BNZ   247C
....................       Motor_on; 
2470:  BSF    F8B.2
2472:  BCF    F94.2
....................       Motor2_on;  
2474:  BSF    F8B.1
2476:  BCF    F94.1
....................       set_timer0(0); 
2478:  CLRF   FD7
247A:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
247C:  MOVF   xC8,F
247E:  BNZ   248C
....................       Motor_off; 
2480:  BCF    F8B.2
2482:  BCF    F94.2
....................       Motor2_off;  
2484:  BCF    F8B.1
2486:  BCF    F94.1
....................       set_timer0(0); 
2488:  CLRF   FD7
248A:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
248C:  MOVF   2C,F
248E:  BTFSS  FD8.2
2490:  BRA    289C
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2492:  MOVLW  01
2494:  MOVWF  xF2
2496:  MOVWF  xF3
2498:  CALL   0A22
....................          printf(lcd_putc,"     Ingrese        "); 
249C:  MOVLW  62
249E:  MOVWF  FF6
24A0:  MOVLW  03
24A2:  MOVWF  FF7
24A4:  CALL   0AE8
....................          lcd_gotoxy(1,2); 
24A8:  MOVLW  01
24AA:  MOVWF  xF2
24AC:  MOVLW  02
24AE:  MOVWF  xF3
24B0:  CALL   0A22
....................          printf(lcd_putc,"    Contraseña      "); 
24B4:  MOVLW  78
24B6:  MOVWF  FF6
24B8:  MOVLW  03
24BA:  MOVWF  FF7
24BC:  CALL   0AE8
....................          lcd_gotoxy(1,3); 
24C0:  MOVLW  01
24C2:  MOVWF  xF2
24C4:  MOVLW  03
24C6:  MOVWF  xF3
24C8:  CALL   0A22
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
24CC:  MOVLW  8E
24CE:  MOVWF  FF6
24D0:  MOVLW  03
24D2:  MOVWF  FF7
24D4:  MOVLW  0A
24D6:  MOVWF  xE4
24D8:  CALL   126A
24DC:  MOVFF  49,E0
24E0:  MOVLW  1F
24E2:  MOVWF  xE1
24E4:  CALL   12B0
24E8:  MOVFF  4A,E0
24EC:  MOVLW  1F
24EE:  MOVWF  xE1
24F0:  CALL   12B0
24F4:  MOVFF  4B,E0
24F8:  MOVLW  1F
24FA:  MOVWF  xE1
24FC:  CALL   12B0
2500:  MOVFF  4C,E0
2504:  MOVLW  1F
2506:  MOVWF  xE1
2508:  CALL   12B0
250C:  MOVLW  20
250E:  MOVWF  xF1
2510:  CALL   0A8A
2514:  MOVLW  20
2516:  MOVWF  xF1
2518:  CALL   0A8A
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
251C:  MOVFF  2F,F2
2520:  MOVLW  04
2522:  MOVWF  xF3
2524:  CALL   0A22
....................          lcd_putc(t[2]); 
2528:  MOVFF  48,F1
252C:  CALL   0A8A
....................           
....................          if(unidad>11&&unidad<14){ 
2530:  MOVF   2F,W
2532:  SUBLW  0B
2534:  BC    2554
2536:  MOVF   2F,W
2538:  SUBLW  0D
253A:  BNC   2554
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
253C:  MOVLW  01
253E:  SUBWF  2F,W
2540:  MOVWF  xE0
2542:  MOVWF  xF2
2544:  MOVLW  04
2546:  MOVWF  xF3
2548:  CALL   0A22
....................             lcd_putc(t[1]); 
254C:  MOVFF  47,F1
2550:  CALL   0A8A
....................          } 
....................           
....................          Cambio=OFF; 
2554:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2556:  BSF    F92.5
2558:  BTFSC  F80.5
255A:  BRA    258E
....................          delay_ms(20); 
255C:  MOVLW  14
255E:  MOVWF  xF7
2560:  CALL   08F8
....................          if(UP){ 
2564:  BSF    F92.5
2566:  BTFSC  F80.5
2568:  BRA    258C
....................             if(Flanco == 0) { 
256A:  BTFSC  29.3
256C:  BRA    258C
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
256E:  MOVLW  0B
2570:  SUBWF  2F,W
2572:  CLRF   03
2574:  ADDLW  49
2576:  MOVWF  FE9
2578:  MOVLW  00
257A:  ADDWFC 03,W
257C:  MOVWF  FEA
257E:  INCF   FEF,F
2580:  BSF    29.3
2582:  MOVLW  1E
2584:  MOVWF  xF7
2586:  CALL   08F8
258A:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
258C:  BRA    2590
....................          Flanco = 0; 
258E:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2590:  BSF    F96.0
2592:  BTFSC  F84.0
2594:  BRA    25C8
....................          delay_ms(20); 
2596:  MOVLW  14
2598:  MOVWF  xF7
259A:  CALL   08F8
....................          if(DOWN){ 
259E:  BSF    F96.0
25A0:  BTFSC  F84.0
25A2:  BRA    25C6
....................             if(Flanco2 == 0) { 
25A4:  BTFSC  29.5
25A6:  BRA    25C6
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
25A8:  MOVLW  0B
25AA:  SUBWF  2F,W
25AC:  CLRF   03
25AE:  ADDLW  49
25B0:  MOVWF  FE9
25B2:  MOVLW  00
25B4:  ADDWFC 03,W
25B6:  MOVWF  FEA
25B8:  DECF   FEF,F
25BA:  BSF    29.5
25BC:  MOVLW  1E
25BE:  MOVWF  xF7
25C0:  CALL   08F8
25C4:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
25C6:  BRA    25CA
....................          Flanco2 = 0; 
25C8:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
25CA:  BSF    F96.1
25CC:  BTFSC  F84.1
25CE:  BRA    25FA
....................          delay_ms(20); 
25D0:  MOVLW  14
25D2:  MOVWF  xF7
25D4:  CALL   08F8
....................          if(RIGHT){ 
25D8:  BSF    F96.1
25DA:  BTFSC  F84.1
25DC:  BRA    25F8
....................             if(Flanco1 == 0) { 
25DE:  BTFSC  29.4
25E0:  BRA    25F8
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
25E2:  BSF    29.4
25E4:  INCF   2F,F
25E6:  MOVLW  1E
25E8:  MOVWF  xF7
25EA:  CALL   08F8
25EE:  MOVLW  0C
25F0:  MOVWF  xF1
25F2:  CALL   0A8A
25F6:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
25F8:  BRA    25FC
....................          Flanco1 = 0; 
25FA:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
25FC:  BSF    F96.2
25FE:  BTFSC  F84.2
2600:  BRA    262C
....................          delay_ms(150); 
2602:  MOVLW  96
2604:  MOVWF  xF7
2606:  CALL   08F8
....................          if(IZQU){ 
260A:  BSF    F96.2
260C:  BTFSC  F84.2
260E:  BRA    262A
....................             if(Flanco3 == 0){ 
2610:  BTFSC  29.6
2612:  BRA    262A
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2614:  BSF    29.6
2616:  DECF   2F,F
2618:  MOVLW  1E
261A:  MOVWF  xF7
261C:  CALL   08F8
2620:  MOVLW  0C
2622:  MOVWF  xF1
2624:  CALL   0A8A
2628:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
262A:  BRA    262E
....................         Flanco3 = 0; 
262C:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
262E:  MOVLW  0B
2630:  SUBWF  2F,W
2632:  CLRF   03
2634:  ADDLW  49
2636:  MOVWF  FE9
2638:  MOVLW  00
263A:  ADDWFC 03,W
263C:  MOVWF  FEA
263E:  BTFSC  FEF.7
2640:  BRA    2644
2642:  BRA    2658
....................          clave[unidad-11]=9; 
2644:  MOVLW  0B
2646:  SUBWF  2F,W
2648:  CLRF   03
264A:  ADDLW  49
264C:  MOVWF  FE9
264E:  MOVLW  00
2650:  ADDWFC 03,W
2652:  MOVWF  FEA
2654:  MOVLW  09
2656:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2658:  MOVLW  0B
265A:  SUBWF  2F,W
265C:  CLRF   03
265E:  ADDLW  49
2660:  MOVWF  FE9
2662:  MOVLW  00
2664:  ADDWFC 03,W
2666:  MOVWF  FEA
2668:  BTFSC  FEF.7
266A:  BRA    2684
266C:  MOVF   FEF,W
266E:  SUBLW  09
2670:  BC    2684
....................          clave[unidad-11]=0; 
2672:  MOVLW  0B
2674:  SUBWF  2F,W
2676:  CLRF   03
2678:  ADDLW  49
267A:  MOVWF  FE9
267C:  MOVLW  00
267E:  ADDWFC 03,W
2680:  MOVWF  FEA
2682:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2684:  MOVF   2F,W
2686:  SUBLW  0A
2688:  BNC   268E
....................          unidad=11; 
268A:  MOVLW  0B
268C:  MOVWF  2F
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
268E:  MOVF   2F,W
2690:  SUBLW  0E
2692:  BTFSC  FD8.0
2694:  BRA    289C
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2696:  MOVF   49,W
2698:  SUBLW  03
269A:  BNZ   277E
269C:  MOVF   4A,W
269E:  SUBLW  08
26A0:  BNZ   277E
26A2:  MOVF   4B,W
26A4:  SUBLW  09
26A6:  BNZ   277E
26A8:  MOVF   4C,W
26AA:  SUBLW  02
26AC:  BNZ   277E
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
26AE:  CLRF   FA9
26B0:  CLRF   FA8
26B2:  BCF    FA6.6
26B4:  BCF    FA6.7
26B6:  BSF    FA6.2
26B8:  MOVF   FF2,W
26BA:  MOVWF  00
26BC:  BCF    FF2.6
26BE:  BCF    FF2.7
26C0:  MOVLB  F
26C2:  MOVLW  55
26C4:  MOVWF  FA7
26C6:  MOVLW  AA
26C8:  MOVWF  FA7
26CA:  BSF    FA6.1
26CC:  BTFSC  FA6.1
26CE:  BRA    26CC
26D0:  BCF    FA6.2
26D2:  MOVF   00,W
26D4:  IORWF  FF2,F
26D6:  MOVLW  14
26D8:  MOVLB  0
26DA:  MOVWF  xF7
26DC:  CALL   08F8
26E0:  MOVLW  01
26E2:  MOVWF  FA9
26E4:  CLRF   FA8
26E6:  BCF    FA6.6
26E8:  BCF    FA6.7
26EA:  BSF    FA6.2
26EC:  MOVF   FF2,W
26EE:  MOVWF  00
26F0:  BCF    FF2.6
26F2:  BCF    FF2.7
26F4:  MOVLB  F
26F6:  MOVLW  55
26F8:  MOVWF  FA7
26FA:  MOVLW  AA
26FC:  MOVWF  FA7
26FE:  BSF    FA6.1
2700:  BTFSC  FA6.1
2702:  BRA    2700
2704:  BCF    FA6.2
2706:  MOVF   00,W
2708:  IORWF  FF2,F
270A:  MOVLW  14
270C:  MOVLB  0
270E:  MOVWF  xF7
2710:  CALL   08F8
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2714:  MOVLW  02
2716:  MOVWF  FA9
2718:  CLRF   FA8
271A:  BCF    FA6.6
271C:  BCF    FA6.7
271E:  BSF    FA6.2
2720:  MOVF   FF2,W
2722:  MOVWF  00
2724:  BCF    FF2.6
2726:  BCF    FF2.7
2728:  MOVLB  F
272A:  MOVLW  55
272C:  MOVWF  FA7
272E:  MOVLW  AA
2730:  MOVWF  FA7
2732:  BSF    FA6.1
2734:  BTFSC  FA6.1
2736:  BRA    2734
2738:  BCF    FA6.2
273A:  MOVF   00,W
273C:  IORWF  FF2,F
273E:  MOVLW  14
2740:  MOVLB  0
2742:  MOVWF  xF7
2744:  CALL   08F8
2748:  MOVLW  03
274A:  MOVWF  FA9
274C:  CLRF   FA8
274E:  BCF    FA6.6
2750:  BCF    FA6.7
2752:  BSF    FA6.2
2754:  MOVF   FF2,W
2756:  MOVWF  00
2758:  BCF    FF2.6
275A:  BCF    FF2.7
275C:  MOVLB  F
275E:  MOVLW  55
2760:  MOVWF  FA7
2762:  MOVLW  AA
2764:  MOVWF  FA7
2766:  BSF    FA6.1
2768:  BTFSC  FA6.1
276A:  BRA    2768
276C:  BCF    FA6.2
276E:  MOVF   00,W
2770:  IORWF  FF2,F
2772:  MOVLW  14
2774:  MOVLB  0
2776:  MOVWF  xF7
2778:  CALL   08F8
....................              reset_cpu(); 
277C:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
277E:  MOVF   4D,W
2780:  SUBWF  49,W
2782:  BNZ   2822
2784:  MOVF   4E,W
2786:  SUBWF  4A,W
2788:  BNZ   2822
278A:  MOVF   4F,W
278C:  SUBWF  4B,W
278E:  BNZ   2822
2790:  MOVF   50,W
2792:  SUBWF  4C,W
2794:  BNZ   2822
....................             lcd_gotoxy(1,1); 
2796:  MOVLW  01
2798:  MOVWF  xF2
279A:  MOVWF  xF3
279C:  CALL   0A22
....................             printf(lcd_putc,"                   "); 
27A0:  MOVLW  A4
27A2:  MOVWF  FF6
27A4:  MOVLW  03
27A6:  MOVWF  FF7
27A8:  CALL   0AE8
....................             lcd_gotoxy(1,2); 
27AC:  MOVLW  01
27AE:  MOVWF  xF2
27B0:  MOVLW  02
27B2:  MOVWF  xF3
27B4:  CALL   0A22
....................             printf(lcd_putc,"     Contraseña    "); 
27B8:  MOVLW  B8
27BA:  MOVWF  FF6
27BC:  MOVLW  03
27BE:  MOVWF  FF7
27C0:  CALL   0AE8
....................             lcd_gotoxy(1,3); 
27C4:  MOVLW  01
27C6:  MOVWF  xF2
27C8:  MOVLW  03
27CA:  MOVWF  xF3
27CC:  CALL   0A22
....................             printf(lcd_putc,"      Correcta     "); 
27D0:  MOVLW  CC
27D2:  MOVWF  FF6
27D4:  MOVLW  03
27D6:  MOVWF  FF7
27D8:  CALL   0AE8
....................             lcd_gotoxy(1,4); 
27DC:  MOVLW  01
27DE:  MOVWF  xF2
27E0:  MOVLW  04
27E2:  MOVWF  xF3
27E4:  CALL   0A22
....................             printf(lcd_putc,"                   "); 
27E8:  MOVLW  E0
27EA:  MOVWF  FF6
27EC:  MOVLW  03
27EE:  MOVWF  FF7
27F0:  CALL   0AE8
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
27F4:  MOVLW  04
27F6:  MOVWF  xE0
27F8:  MOVLW  FA
27FA:  MOVWF  xF7
27FC:  CALL   08F8
2800:  DECFSZ xE0,F
2802:  BRA    27F8
2804:  MOVLW  32
2806:  MOVWF  2C
2808:  MOVLW  0B
280A:  MOVWF  2F
280C:  MOVLW  0C
280E:  MOVWF  xF1
2810:  CALL   0A8A
2814:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2816:  CLRF   49
2818:  CLRF   4A
281A:  CLRF   4B
281C:  CLRF   4C
281E:  BSF    2B.3
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2820:  BRA    289C
....................             lcd_gotoxy(1,1); 
2822:  MOVLW  01
2824:  MOVWF  xF2
2826:  MOVWF  xF3
2828:  CALL   0A22
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
282C:  MOVLW  01
282E:  MOVWF  xF2
2830:  MOVLW  02
2832:  MOVWF  xF3
2834:  CALL   0A22
....................             printf(lcd_putc,"     Contraseña    "); 
2838:  MOVLW  F4
283A:  MOVWF  FF6
283C:  MOVLW  03
283E:  MOVWF  FF7
2840:  CALL   0AE8
....................             lcd_gotoxy(1,3); 
2844:  MOVLW  01
2846:  MOVWF  xF2
2848:  MOVLW  03
284A:  MOVWF  xF3
284C:  CALL   0A22
....................             printf(lcd_putc,"     Incorrecta    "); 
2850:  MOVLW  08
2852:  MOVWF  FF6
2854:  MOVLW  04
2856:  MOVWF  FF7
2858:  CALL   0AE8
....................             lcd_gotoxy(1,4); 
285C:  MOVLW  01
285E:  MOVWF  xF2
2860:  MOVLW  04
2862:  MOVWF  xF3
2864:  CALL   0A22
....................             printf(lcd_putc,"                   "); 
2868:  MOVLW  1C
286A:  MOVWF  FF6
286C:  MOVLW  04
286E:  MOVWF  FF7
2870:  CALL   0AE8
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2874:  MOVLW  04
2876:  MOVWF  xE0
2878:  MOVLW  FA
287A:  MOVWF  xF7
287C:  CALL   08F8
2880:  DECFSZ xE0,F
2882:  BRA    2878
2884:  MOVLW  0B
2886:  MOVWF  2F
2888:  MOVLW  0C
288A:  MOVWF  xF1
288C:  CALL   0A8A
2890:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2892:  CLRF   49
2894:  CLRF   4A
2896:  CLRF   4B
2898:  CLRF   4C
289A:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
289C:  DECFSZ 2C,W
289E:  BRA    2AD6
....................       EliminaRuido(); 
28A0:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
28A4:  MOVLW  01
28A6:  MOVWF  xF2
28A8:  MOVWF  xF3
28AA:  CALL   0A22
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
28AE:  MOVLW  30
28B0:  MOVWF  FF6
28B2:  MOVLW  04
28B4:  MOVWF  FF7
28B6:  CALL   0AE8
....................          mensajes(1+paso,2); 
28BA:  MOVLW  01
28BC:  ADDWF  45,W
28BE:  MOVWF  xE0
28C0:  MOVWF  xE1
28C2:  MOVLW  02
28C4:  MOVWF  xE2
28C6:  CALL   1380
....................          mensajes(2+paso,3); 
28CA:  MOVLW  02
28CC:  ADDWF  45,W
28CE:  MOVWF  xE0
28D0:  MOVWF  xE1
28D2:  MOVLW  03
28D4:  MOVWF  xE2
28D6:  CALL   1380
....................          mensajes(3+paso,4); 
28DA:  MOVLW  03
28DC:  ADDWF  45,W
28DE:  MOVWF  xE0
28E0:  MOVWF  xE1
28E2:  MOVLW  04
28E4:  MOVWF  xE2
28E6:  CALL   1380
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
28EA:  MOVLW  01
28EC:  MOVWF  xF2
28EE:  MOVFF  30,F3
28F2:  CALL   0A22
....................         lcd_putc(t[0]); 
28F6:  MOVFF  46,F1
28FA:  CALL   0A8A
....................  
....................         if(Flecha==2) 
28FE:  MOVF   30,W
2900:  SUBLW  02
2902:  BNZ   292C
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2904:  MOVLW  01
2906:  MOVWF  xF2
2908:  MOVLW  04
290A:  MOVWF  xF3
290C:  CALL   0A22
....................             lcd_putc(t[1]); 
2910:  MOVFF  47,F1
2914:  CALL   0A8A
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2918:  MOVLW  01
291A:  MOVWF  xF2
291C:  MOVLW  03
291E:  MOVWF  xF3
2920:  CALL   0A22
....................             lcd_putc(t[1]); 
2924:  MOVFF  47,F1
2928:  CALL   0A8A
....................           } 
....................          
....................         if(Flecha==4) 
292C:  MOVF   30,W
292E:  SUBLW  04
2930:  BNZ   295A
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2932:  MOVLW  01
2934:  MOVWF  xF2
2936:  MOVLW  02
2938:  MOVWF  xF3
293A:  CALL   0A22
....................             lcd_putc(t[1]); 
293E:  MOVFF  47,F1
2942:  CALL   0A8A
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2946:  MOVLW  01
2948:  MOVWF  xF2
294A:  MOVLW  03
294C:  MOVWF  xF3
294E:  CALL   0A22
....................             lcd_putc(t[1]); 
2952:  MOVFF  47,F1
2956:  CALL   0A8A
....................           } 
....................          
....................         if(Flecha==3) 
295A:  MOVF   30,W
295C:  SUBLW  03
295E:  BNZ   2988
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2960:  MOVLW  01
2962:  MOVWF  xF2
2964:  MOVLW  04
2966:  MOVWF  xF3
2968:  CALL   0A22
....................             lcd_putc(t[1]); 
296C:  MOVFF  47,F1
2970:  CALL   0A8A
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2974:  MOVLW  01
2976:  MOVWF  xF2
2978:  MOVLW  02
297A:  MOVWF  xF3
297C:  CALL   0A22
....................             lcd_putc(t[1]); 
2980:  MOVFF  47,F1
2984:  CALL   0A8A
....................           } 
....................          Cambio=OFF; 
2988:  BCF    2B.3
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
298A:  BSF    F92.5
298C:  BTFSC  F80.5
298E:  BRA    29BA
....................          delay_ms(20); 
2990:  MOVLW  14
2992:  MOVWF  xF7
2994:  CALL   08F8
....................          if(UP){ 
2998:  BSF    F92.5
299A:  BTFSC  F80.5
299C:  BRA    29B8
....................             if(Flanco == 0){ 
299E:  BTFSC  29.3
29A0:  BRA    29B8
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
29A2:  DECF   32,F
29A4:  DECF   30,F
29A6:  MOVLW  01
29A8:  ADDWF  30,W
29AA:  MOVWF  31
29AC:  BSF    29.3
29AE:  MOVLW  1E
29B0:  MOVWF  xF7
29B2:  CALL   08F8
29B6:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
29B8:  BRA    29BC
....................          Flanco = 0; 
29BA:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
29BC:  BSF    F96.0
29BE:  BTFSC  F84.0
29C0:  BRA    29EC
....................          delay_ms(20); 
29C2:  MOVLW  14
29C4:  MOVWF  xF7
29C6:  CALL   08F8
....................          if(DOWN){ 
29CA:  BSF    F96.0
29CC:  BTFSC  F84.0
29CE:  BRA    29EA
....................             if(Flanco2 == 0){ 
29D0:  BTFSC  29.5
29D2:  BRA    29EA
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
29D4:  INCF   32,F
29D6:  INCF   30,F
29D8:  MOVLW  01
29DA:  SUBWF  30,W
29DC:  MOVWF  31
29DE:  BSF    29.5
29E0:  MOVLW  1E
29E2:  MOVWF  xF7
29E4:  CALL   08F8
29E8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
29EA:  BRA    29EE
....................          Flanco2 = 0; 
29EC:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
29EE:  MOVF   32,W
29F0:  SUBWF  34,W
29F2:  BC    2A04
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
29F4:  INCF   45,F
29F6:  MOVFF  32,34
29FA:  MOVLW  02
29FC:  SUBWF  34,W
29FE:  MOVWF  33
2A00:  MOVLW  04
2A02:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2A04:  MOVF   33,W
2A06:  SUBWF  32,W
2A08:  BC    2A1A
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
2A0A:  DECF   45,F
2A0C:  MOVFF  32,33
2A10:  MOVLW  02
2A12:  ADDWF  33,W
2A14:  MOVWF  34
2A16:  MOVLW  02
2A18:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
2A1A:  MOVF   32,W
2A1C:  SUBWF  2D,W
2A1E:  BC    2A32
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2A20:  MOVFF  2E,32
2A24:  MOVLW  02
2A26:  MOVWF  30
2A28:  CLRF   45
2A2A:  MOVFF  32,33
2A2E:  ADDWF  33,W
2A30:  MOVWF  34
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
2A32:  MOVF   2E,W
2A34:  SUBWF  32,W
2A36:  BC    2A4E
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2A38:  MOVFF  2D,32
2A3C:  MOVLW  04
2A3E:  MOVWF  30
2A40:  SUBWF  2D,W
2A42:  MOVWF  45
2A44:  MOVFF  32,34
2A48:  MOVLW  02
2A4A:  SUBWF  34,W
2A4C:  MOVWF  33
....................       } 
....................          
....................       if(paso<0) 
2A4E:  BTFSC  45.7
2A50:  BRA    2A54
2A52:  BRA    2A56
....................          paso=0; 
2A54:  CLRF   45
....................           
....................       if(RIGHT){// Si oprime derecha 
2A56:  BSF    F96.1
2A58:  BTFSC  F84.1
2A5A:  BRA    2AA2
....................          delay_ms(20); 
2A5C:  MOVLW  14
2A5E:  MOVWF  xF7
2A60:  CALL   08F8
....................          if(RIGHT){ 
2A64:  BSF    F96.1
2A66:  BTFSC  F84.1
2A68:  BRA    2A9E
....................             if(Flanco1 == 0){ 
2A6A:  BTFSC  29.4
2A6C:  BRA    2A9E
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2A6E:  BSF    29.4
2A70:  MOVFF  32,2C
2A74:  MOVLW  03
2A76:  MOVWF  30
2A78:  MOVLW  02
2A7A:  MOVWF  xE0
2A7C:  MOVLW  96
2A7E:  MOVWF  xF7
2A80:  CALL   08F8
2A84:  DECFSZ xE0,F
2A86:  BRA    2A7C
2A88:  MOVLW  0C
2A8A:  MOVWF  xF1
2A8C:  CALL   0A8A
....................                if(Menu==6){ 
2A90:  MOVF   2C,W
2A92:  SUBLW  06
2A94:  BNZ   2A9E
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2A96:  CLRF   49
2A98:  CLRF   4A
2A9A:  CLRF   4B
2A9C:  CLRF   4C
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2A9E:  BSF    2B.3
....................       }else{ 
2AA0:  BRA    2AA4
....................         Flanco1 = 0; 
2AA2:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
2AA4:  BSF    F96.2
2AA6:  BTFSC  F84.2
2AA8:  BRA    2AD6
....................          delay_ms(20); 
2AAA:  MOVLW  14
2AAC:  MOVWF  xF7
2AAE:  CALL   08F8
....................          if(IZQU){ 
2AB2:  BSF    F96.2
2AB4:  BTFSC  F84.2
2AB6:  BRA    2AD6
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2AB8:  MOVLW  02
2ABA:  MOVWF  xE0
2ABC:  MOVLW  FA
2ABE:  MOVWF  xF7
2AC0:  CALL   08F8
2AC4:  DECFSZ xE0,F
2AC6:  BRA    2ABC
2AC8:  MOVLW  32
2ACA:  MOVWF  2C
2ACC:  MOVLW  0C
2ACE:  MOVWF  xF1
2AD0:  CALL   0A8A
2AD4:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2AD6:  MOVF   2C,W
2AD8:  SUBLW  02
2ADA:  BTFSS  FD8.2
2ADC:  BRA    2D36
....................    EliminaRuido(); 
2ADE:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2AE2:  MOVLW  01
2AE4:  MOVWF  xF2
2AE6:  MOVWF  xF3
2AE8:  CALL   0A22
....................       printf(lcd_putc,"    Temporizador     "); 
2AEC:  MOVLW  46
2AEE:  MOVWF  FF6
2AF0:  MOVLW  04
2AF2:  MOVWF  FF7
2AF4:  CALL   0AE8
....................       lcd_gotoxy(1,2); 
2AF8:  MOVLW  01
2AFA:  MOVWF  xF2
2AFC:  MOVLW  02
2AFE:  MOVWF  xF3
2B00:  CALL   0A22
....................       printf(lcd_putc,"       Luz UV        "); 
2B04:  MOVLW  5C
2B06:  MOVWF  FF6
2B08:  MOVLW  04
2B0A:  MOVWF  FF7
2B0C:  CALL   0AE8
....................       lcd_gotoxy(6,3); 
2B10:  MOVLW  06
2B12:  MOVWF  xF2
2B14:  MOVLW  03
2B16:  MOVWF  xF3
2B18:  CALL   0A22
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2B1C:  MOVFF  3D,E0
2B20:  MOVLW  03
2B22:  MOVWF  xE1
2B24:  CALL   1454
2B28:  MOVLW  3A
2B2A:  MOVWF  xF1
2B2C:  CALL   0A8A
2B30:  MOVFF  3E,E0
2B34:  MOVLW  01
2B36:  MOVWF  xE1
2B38:  CALL   1454
2B3C:  MOVLW  7B
2B3E:  MOVWF  FF6
2B40:  MOVLW  04
2B42:  MOVWF  FF7
2B44:  MOVLW  08
2B46:  MOVWF  xE4
2B48:  CALL   126A
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2B4C:  MOVLW  06
2B4E:  ADDWF  42,W
2B50:  MOVWF  xE0
2B52:  MOVWF  xF2
2B54:  MOVLW  04
2B56:  MOVWF  xF3
2B58:  CALL   0A22
....................       lcd_putc(t[2]); 
2B5C:  MOVFF  48,F1
2B60:  CALL   0A8A
....................        
....................       Cambio=OFF; 
2B64:  BCF    2B.3
.................... //   } 
....................     
....................    if(UP) 
2B66:  BSF    F92.5
2B68:  BTFSC  F80.5
2B6A:  BRA    2BB8
....................    { 
....................       delay_ms(20); 
2B6C:  MOVLW  14
2B6E:  MOVWF  xF7
2B70:  CALL   08F8
....................       if(UP){ 
2B74:  BSF    F92.5
2B76:  BTFSC  F80.5
2B78:  BRA    2BB8
....................          if(unidad2==1) 
2B7A:  DECFSZ 42,W
2B7C:  BRA    2B98
....................          { 
....................             if(tempo_minutos_pro<240) 
2B7E:  MOVF   3D,W
2B80:  SUBLW  EF
2B82:  BNC   2B98
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
2B84:  MOVLW  05
2B86:  ADDWF  3D,F
2B88:  MOVLW  02
2B8A:  MOVWF  xE0
2B8C:  MOVLW  96
2B8E:  MOVWF  xF7
2B90:  CALL   08F8
2B94:  DECFSZ xE0,F
2B96:  BRA    2B8C
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2B98:  MOVF   42,W
2B9A:  SUBLW  04
2B9C:  BNZ   2BB6
....................          { 
....................             if(tempo_segundos_pro<59) 
2B9E:  MOVF   3E,W
2BA0:  SUBLW  3A
2BA2:  BNC   2BB6
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2BA4:  INCF   3E,F
2BA6:  MOVLW  02
2BA8:  MOVWF  xE0
2BAA:  MOVLW  96
2BAC:  MOVWF  xF7
2BAE:  CALL   08F8
2BB2:  DECFSZ xE0,F
2BB4:  BRA    2BAA
....................             } 
....................          }      
....................       Cambio=ON; 
2BB6:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2BB8:  BSF    F96.0
2BBA:  BTFSC  F84.0
2BBC:  BRA    2C06
....................    { 
....................       delay_ms(20); 
2BBE:  MOVLW  14
2BC0:  MOVWF  xF7
2BC2:  CALL   08F8
....................       if(DOWN){ 
2BC6:  BSF    F96.0
2BC8:  BTFSC  F84.0
2BCA:  BRA    2C06
....................          if(unidad2==1) 
2BCC:  DECFSZ 42,W
2BCE:  BRA    2BE8
....................          { 
....................             if(tempo_minutos_pro>0) 
2BD0:  MOVF   3D,F
2BD2:  BZ    2BE8
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2BD4:  MOVLW  05
2BD6:  SUBWF  3D,F
2BD8:  MOVLW  02
2BDA:  MOVWF  xE0
2BDC:  MOVLW  96
2BDE:  MOVWF  xF7
2BE0:  CALL   08F8
2BE4:  DECFSZ xE0,F
2BE6:  BRA    2BDC
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2BE8:  MOVF   42,W
2BEA:  SUBLW  04
2BEC:  BNZ   2C04
....................          { 
....................             if(tempo_segundos_pro>0) 
2BEE:  MOVF   3E,F
2BF0:  BZ    2C04
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2BF2:  DECF   3E,F
2BF4:  MOVLW  02
2BF6:  MOVWF  xE0
2BF8:  MOVLW  96
2BFA:  MOVWF  xF7
2BFC:  CALL   08F8
2C00:  DECFSZ xE0,F
2C02:  BRA    2BF8
....................             }    
....................          } 
....................       Cambio=ON; 
2C04:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2C06:  BSF    F96.1
2C08:  BTFSC  F84.1
2C0A:  BRA    2C48
....................    { 
....................       delay_ms(20); 
2C0C:  MOVLW  14
2C0E:  MOVWF  xF7
2C10:  CALL   08F8
....................       if(RIGHT){ 
2C14:  BSF    F96.1
2C16:  BTFSC  F84.1
2C18:  BRA    2C48
....................          if(unidad2==1) 
2C1A:  DECFSZ 42,W
2C1C:  BRA    2C24
....................          { 
....................             unidad2=4; 
2C1E:  MOVLW  04
2C20:  MOVWF  42
....................          } 
....................          else 
2C22:  BRA    2C2E
....................          { 
....................             if(unidad2==4) 
2C24:  MOVF   42,W
2C26:  SUBLW  04
2C28:  BNZ   2C2E
....................             { 
....................                unidad2=1; 
2C2A:  MOVLW  01
2C2C:  MOVWF  42
....................             } 
....................          } 
....................       delay_ms(500); 
2C2E:  MOVLW  02
2C30:  MOVWF  xE0
2C32:  MOVLW  FA
2C34:  MOVWF  xF7
2C36:  CALL   08F8
2C3A:  DECFSZ xE0,F
2C3C:  BRA    2C32
....................       printf(lcd_putc,"\f"); 
2C3E:  MOVLW  0C
2C40:  MOVWF  xF1
2C42:  CALL   0A8A
....................       Cambio=ON; 
2C46:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2C48:  BSF    F96.2
2C4A:  BTFSC  F84.2
2C4C:  BRA    2D36
....................    { 
....................       if(IZQU){ 
2C4E:  BSF    F96.2
2C50:  BTFSC  F84.2
2C52:  BRA    2D36
....................          delay_ms(200); 
2C54:  MOVLW  C8
2C56:  MOVWF  xF7
2C58:  CALL   08F8
....................          printf(lcd_putc,"\f"); 
2C5C:  MOVLW  0C
2C5E:  MOVWF  xF1
2C60:  CALL   0A8A
....................          lcd_gotoxy(1,2); 
2C64:  MOVLW  01
2C66:  MOVWF  xF2
2C68:  MOVLW  02
2C6A:  MOVWF  xF3
2C6C:  CALL   0A22
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2C70:  MOVLW  84
2C72:  MOVWF  FF6
2C74:  MOVLW  04
2C76:  MOVWF  FF7
2C78:  CALL   0AE8
....................          lcd_gotoxy(1,3); 
2C7C:  MOVLW  01
2C7E:  MOVWF  xF2
2C80:  MOVLW  03
2C82:  MOVWF  xF3
2C84:  CALL   0A22
....................          printf(lcd_putc,"  Correctamente  "); 
2C88:  MOVLW  96
2C8A:  MOVWF  FF6
2C8C:  MOVLW  04
2C8E:  MOVWF  FF7
2C90:  CALL   0AE8
....................          write_eeprom(5,tempo_minutos_pro); 
2C94:  MOVLW  05
2C96:  MOVWF  FA9
2C98:  MOVFF  3D,FA8
2C9C:  BCF    FA6.6
2C9E:  BCF    FA6.7
2CA0:  BSF    FA6.2
2CA2:  MOVF   FF2,W
2CA4:  MOVWF  00
2CA6:  BCF    FF2.6
2CA8:  BCF    FF2.7
2CAA:  MOVLB  F
2CAC:  MOVLW  55
2CAE:  MOVWF  FA7
2CB0:  MOVLW  AA
2CB2:  MOVWF  FA7
2CB4:  BSF    FA6.1
2CB6:  BTFSC  FA6.1
2CB8:  BRA    2CB6
2CBA:  BCF    FA6.2
2CBC:  MOVF   00,W
2CBE:  IORWF  FF2,F
....................          delay_ms(20); 
2CC0:  MOVLW  14
2CC2:  MOVLB  0
2CC4:  MOVWF  xF7
2CC6:  CALL   08F8
....................          write_eeprom(6,tempo_segundos_pro); 
2CCA:  MOVLW  06
2CCC:  MOVWF  FA9
2CCE:  MOVFF  3E,FA8
2CD2:  BCF    FA6.6
2CD4:  BCF    FA6.7
2CD6:  BSF    FA6.2
2CD8:  MOVF   FF2,W
2CDA:  MOVWF  00
2CDC:  BCF    FF2.6
2CDE:  BCF    FF2.7
2CE0:  MOVLB  F
2CE2:  MOVLW  55
2CE4:  MOVWF  FA7
2CE6:  MOVLW  AA
2CE8:  MOVWF  FA7
2CEA:  BSF    FA6.1
2CEC:  BTFSC  FA6.1
2CEE:  BRA    2CEC
2CF0:  BCF    FA6.2
2CF2:  MOVF   00,W
2CF4:  IORWF  FF2,F
....................          delay_ms(20); 
2CF6:  MOVLW  14
2CF8:  MOVLB  0
2CFA:  MOVWF  xF7
2CFC:  CALL   08F8
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2D00:  MOVFF  3D,3B
2D04:  MOVFF  3E,3C
....................          delay_ms(700); 
2D08:  MOVLW  04
2D0A:  MOVWF  xE0
2D0C:  MOVLW  AF
2D0E:  MOVWF  xF7
2D10:  CALL   08F8
2D14:  DECFSZ xE0,F
2D16:  BRA    2D0C
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2D18:  MOVLW  1E
2D1A:  MOVWF  xF7
2D1C:  CALL   08F8
2D20:  MOVLW  01
2D22:  MOVWF  2C
2D24:  CLRF   45
2D26:  MOVLW  02
2D28:  MOVWF  30
2D2A:  MOVWF  32
2D2C:  MOVLW  0C
2D2E:  MOVWF  xF1
2D30:  CALL   0A8A
....................          Cambio=ON; 
2D34:  BSF    2B.3
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2D36:  MOVF   2C,W
2D38:  SUBLW  03
2D3A:  BTFSS  FD8.2
2D3C:  BRA    3088
....................       EliminaRuido(); 
2D3E:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2D42:  MOVLW  01
2D44:  MOVWF  xF2
2D46:  MOVWF  xF3
2D48:  CALL   0A22
....................          printf(lcd_putc,"     Ingrese        "); 
2D4C:  MOVLW  A8
2D4E:  MOVWF  FF6
2D50:  MOVLW  04
2D52:  MOVWF  FF7
2D54:  CALL   0AE8
....................          lcd_gotoxy(1,2); 
2D58:  MOVLW  01
2D5A:  MOVWF  xF2
2D5C:  MOVLW  02
2D5E:  MOVWF  xF3
2D60:  CALL   0A22
....................          printf(lcd_putc,"    Contraseña      "); 
2D64:  MOVLW  BE
2D66:  MOVWF  FF6
2D68:  MOVLW  04
2D6A:  MOVWF  FF7
2D6C:  CALL   0AE8
....................          lcd_gotoxy(1,3); 
2D70:  MOVLW  01
2D72:  MOVWF  xF2
2D74:  MOVLW  03
2D76:  MOVWF  xF3
2D78:  CALL   0A22
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2D7C:  MOVLW  D4
2D7E:  MOVWF  FF6
2D80:  MOVLW  04
2D82:  MOVWF  FF7
2D84:  MOVLW  0A
2D86:  MOVWF  xE4
2D88:  CALL   126A
2D8C:  MOVFF  49,E0
2D90:  MOVLW  1F
2D92:  MOVWF  xE1
2D94:  CALL   12B0
2D98:  MOVFF  4A,E0
2D9C:  MOVLW  1F
2D9E:  MOVWF  xE1
2DA0:  CALL   12B0
2DA4:  MOVFF  4B,E0
2DA8:  MOVLW  1F
2DAA:  MOVWF  xE1
2DAC:  CALL   12B0
2DB0:  MOVFF  4C,E0
2DB4:  MOVLW  1F
2DB6:  MOVWF  xE1
2DB8:  CALL   12B0
2DBC:  MOVLW  20
2DBE:  MOVWF  xF1
2DC0:  CALL   0A8A
2DC4:  MOVLW  20
2DC6:  MOVWF  xF1
2DC8:  CALL   0A8A
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2DCC:  MOVFF  2F,F2
2DD0:  MOVLW  04
2DD2:  MOVWF  xF3
2DD4:  CALL   0A22
....................          lcd_putc(t[2]); 
2DD8:  MOVFF  48,F1
2DDC:  CALL   0A8A
....................           
....................          if(unidad>11&&unidad<14){ 
2DE0:  MOVF   2F,W
2DE2:  SUBLW  0B
2DE4:  BC    2E04
2DE6:  MOVF   2F,W
2DE8:  SUBLW  0D
2DEA:  BNC   2E04
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2DEC:  MOVLW  01
2DEE:  SUBWF  2F,W
2DF0:  MOVWF  xE0
2DF2:  MOVWF  xF2
2DF4:  MOVLW  04
2DF6:  MOVWF  xF3
2DF8:  CALL   0A22
....................             lcd_putc(t[1]); 
2DFC:  MOVFF  47,F1
2E00:  CALL   0A8A
....................          } 
....................           
....................          Cambio=OFF; 
2E04:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2E06:  BSF    F92.5
2E08:  BTFSC  F80.5
2E0A:  BRA    2E3E
....................          delay_ms(20); 
2E0C:  MOVLW  14
2E0E:  MOVWF  xF7
2E10:  CALL   08F8
....................          if(UP){ 
2E14:  BSF    F92.5
2E16:  BTFSC  F80.5
2E18:  BRA    2E3C
....................             if(Flanco == 0) { 
2E1A:  BTFSC  29.3
2E1C:  BRA    2E3C
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2E1E:  MOVLW  0B
2E20:  SUBWF  2F,W
2E22:  CLRF   03
2E24:  ADDLW  49
2E26:  MOVWF  FE9
2E28:  MOVLW  00
2E2A:  ADDWFC 03,W
2E2C:  MOVWF  FEA
2E2E:  INCF   FEF,F
2E30:  BSF    29.3
2E32:  MOVLW  1E
2E34:  MOVWF  xF7
2E36:  CALL   08F8
2E3A:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2E3C:  BRA    2E40
....................          Flanco = 0; 
2E3E:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2E40:  BSF    F96.0
2E42:  BTFSC  F84.0
2E44:  BRA    2E78
....................          delay_ms(20); 
2E46:  MOVLW  14
2E48:  MOVWF  xF7
2E4A:  CALL   08F8
....................          if(DOWN){ 
2E4E:  BSF    F96.0
2E50:  BTFSC  F84.0
2E52:  BRA    2E76
....................             if(Flanco2 == 0) { 
2E54:  BTFSC  29.5
2E56:  BRA    2E76
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2E58:  MOVLW  0B
2E5A:  SUBWF  2F,W
2E5C:  CLRF   03
2E5E:  ADDLW  49
2E60:  MOVWF  FE9
2E62:  MOVLW  00
2E64:  ADDWFC 03,W
2E66:  MOVWF  FEA
2E68:  DECF   FEF,F
2E6A:  BSF    29.5
2E6C:  MOVLW  1E
2E6E:  MOVWF  xF7
2E70:  CALL   08F8
2E74:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2E76:  BRA    2E7A
....................          Flanco2 = 0; 
2E78:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2E7A:  BSF    F96.1
2E7C:  BTFSC  F84.1
2E7E:  BRA    2EAA
....................          delay_ms(20); 
2E80:  MOVLW  14
2E82:  MOVWF  xF7
2E84:  CALL   08F8
....................          if(RIGHT){ 
2E88:  BSF    F96.1
2E8A:  BTFSC  F84.1
2E8C:  BRA    2EA8
....................             if(Flanco1 == 0) { 
2E8E:  BTFSC  29.4
2E90:  BRA    2EA8
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2E92:  BSF    29.4
2E94:  INCF   2F,F
2E96:  MOVLW  1E
2E98:  MOVWF  xF7
2E9A:  CALL   08F8
2E9E:  MOVLW  0C
2EA0:  MOVWF  xF1
2EA2:  CALL   0A8A
2EA6:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2EA8:  BRA    2EAC
....................          Flanco1 = 0; 
2EAA:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2EAC:  BSF    F96.2
2EAE:  BTFSC  F84.2
2EB0:  BRA    2EDC
....................          delay_ms(150); 
2EB2:  MOVLW  96
2EB4:  MOVWF  xF7
2EB6:  CALL   08F8
....................          if(IZQU){ 
2EBA:  BSF    F96.2
2EBC:  BTFSC  F84.2
2EBE:  BRA    2EDA
....................             if(Flanco3 == 0){ 
2EC0:  BTFSC  29.6
2EC2:  BRA    2EDA
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2EC4:  BSF    29.6
2EC6:  DECF   2F,F
2EC8:  MOVLW  1E
2ECA:  MOVWF  xF7
2ECC:  CALL   08F8
2ED0:  MOVLW  0C
2ED2:  MOVWF  xF1
2ED4:  CALL   0A8A
2ED8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2EDA:  BRA    2EDE
....................         Flanco3 = 0; 
2EDC:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2EDE:  MOVLW  0B
2EE0:  SUBWF  2F,W
2EE2:  CLRF   03
2EE4:  ADDLW  49
2EE6:  MOVWF  FE9
2EE8:  MOVLW  00
2EEA:  ADDWFC 03,W
2EEC:  MOVWF  FEA
2EEE:  BTFSC  FEF.7
2EF0:  BRA    2EF4
2EF2:  BRA    2F08
....................          clave[unidad-11]=9; 
2EF4:  MOVLW  0B
2EF6:  SUBWF  2F,W
2EF8:  CLRF   03
2EFA:  ADDLW  49
2EFC:  MOVWF  FE9
2EFE:  MOVLW  00
2F00:  ADDWFC 03,W
2F02:  MOVWF  FEA
2F04:  MOVLW  09
2F06:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2F08:  MOVLW  0B
2F0A:  SUBWF  2F,W
2F0C:  CLRF   03
2F0E:  ADDLW  49
2F10:  MOVWF  FE9
2F12:  MOVLW  00
2F14:  ADDWFC 03,W
2F16:  MOVWF  FEA
2F18:  BTFSC  FEF.7
2F1A:  BRA    2F34
2F1C:  MOVF   FEF,W
2F1E:  SUBLW  09
2F20:  BC    2F34
....................          clave[unidad-11]=0; 
2F22:  MOVLW  0B
2F24:  SUBWF  2F,W
2F26:  CLRF   03
2F28:  ADDLW  49
2F2A:  MOVWF  FE9
2F2C:  MOVLW  00
2F2E:  ADDWFC 03,W
2F30:  MOVWF  FEA
2F32:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2F34:  MOVF   2F,W
2F36:  SUBLW  0A
2F38:  BNC   2F5A
....................          unidad=11; 
2F3A:  MOVLW  0B
2F3C:  MOVWF  2F
....................          Menu=1; 
2F3E:  MOVLW  01
2F40:  MOVWF  2C
....................          paso=0; 
2F42:  CLRF   45
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2F44:  CLRF   49
2F46:  CLRF   4A
2F48:  CLRF   4B
2F4A:  CLRF   4C
2F4C:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
2F4E:  MOVLW  0B
2F50:  MOVWF  2F
2F52:  MOVLW  0C
2F54:  MOVWF  xF1
2F56:  CALL   0A8A
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2F5A:  MOVF   2F,W
2F5C:  SUBLW  0E
2F5E:  BTFSC  FD8.0
2F60:  BRA    3088
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2F62:  MOVF   4D,W
2F64:  SUBWF  49,W
2F66:  BNZ   3004
2F68:  MOVF   4E,W
2F6A:  SUBWF  4A,W
2F6C:  BNZ   3004
2F6E:  MOVF   4F,W
2F70:  SUBWF  4B,W
2F72:  BNZ   3004
2F74:  MOVF   50,W
2F76:  SUBWF  4C,W
2F78:  BNZ   3004
....................             lcd_gotoxy(1,1); 
2F7A:  MOVLW  01
2F7C:  MOVWF  xF2
2F7E:  MOVWF  xF3
2F80:  CALL   0A22
....................             printf(lcd_putc,"                    "); 
2F84:  MOVLW  EA
2F86:  MOVWF  FF6
2F88:  MOVLW  04
2F8A:  MOVWF  FF7
2F8C:  CALL   0AE8
....................             lcd_gotoxy(1,2); 
2F90:  MOVLW  01
2F92:  MOVWF  xF2
2F94:  MOVLW  02
2F96:  MOVWF  xF3
2F98:  CALL   0A22
....................             printf(lcd_putc,"     Contraseña     "); 
2F9C:  MOVLW  00
2F9E:  MOVWF  FF6
2FA0:  MOVLW  05
2FA2:  MOVWF  FF7
2FA4:  CALL   0AE8
....................             lcd_gotoxy(1,3); 
2FA8:  MOVLW  01
2FAA:  MOVWF  xF2
2FAC:  MOVLW  03
2FAE:  MOVWF  xF3
2FB0:  CALL   0A22
....................             printf(lcd_putc,"      Correcta      "); 
2FB4:  MOVLW  16
2FB6:  MOVWF  FF6
2FB8:  MOVLW  05
2FBA:  MOVWF  FF7
2FBC:  CALL   0AE8
....................             lcd_gotoxy(1,4); 
2FC0:  MOVLW  01
2FC2:  MOVWF  xF2
2FC4:  MOVLW  04
2FC6:  MOVWF  xF3
2FC8:  CALL   0A22
....................             printf(lcd_putc,"                    "); 
2FCC:  MOVLW  2C
2FCE:  MOVWF  FF6
2FD0:  MOVLW  05
2FD2:  MOVWF  FF7
2FD4:  CALL   0AE8
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2FD8:  MOVLW  02
2FDA:  MOVWF  xE0
2FDC:  MOVLW  FA
2FDE:  MOVWF  xF7
2FE0:  CALL   08F8
2FE4:  DECFSZ xE0,F
2FE6:  BRA    2FDC
2FE8:  MOVLW  3D
2FEA:  MOVWF  2C
2FEC:  MOVLW  0B
2FEE:  MOVWF  2F
2FF0:  MOVLW  0C
2FF2:  MOVWF  xF1
2FF4:  CALL   0A8A
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2FF8:  CLRF   49
2FFA:  CLRF   4A
2FFC:  CLRF   4B
2FFE:  CLRF   4C
3000:  BSF    2B.3
....................          }else{ 
3002:  BRA    3088
....................             lcd_gotoxy(1,1); 
3004:  MOVLW  01
3006:  MOVWF  xF2
3008:  MOVWF  xF3
300A:  CALL   0A22
....................             printf(lcd_putc,"                    "); 
300E:  MOVLW  42
3010:  MOVWF  FF6
3012:  MOVLW  05
3014:  MOVWF  FF7
3016:  CALL   0AE8
....................             lcd_gotoxy(1,2); 
301A:  MOVLW  01
301C:  MOVWF  xF2
301E:  MOVLW  02
3020:  MOVWF  xF3
3022:  CALL   0A22
....................             printf(lcd_putc,"     Contraseña     "); 
3026:  MOVLW  58
3028:  MOVWF  FF6
302A:  MOVLW  05
302C:  MOVWF  FF7
302E:  CALL   0AE8
....................             lcd_gotoxy(1,3); 
3032:  MOVLW  01
3034:  MOVWF  xF2
3036:  MOVLW  03
3038:  MOVWF  xF3
303A:  CALL   0A22
....................             printf(lcd_putc,"     Incorrecta     "); 
303E:  MOVLW  6E
3040:  MOVWF  FF6
3042:  MOVLW  05
3044:  MOVWF  FF7
3046:  CALL   0AE8
....................             lcd_gotoxy(1,4); 
304A:  MOVLW  01
304C:  MOVWF  xF2
304E:  MOVLW  04
3050:  MOVWF  xF3
3052:  CALL   0A22
....................             printf(lcd_putc,"                    "); 
3056:  MOVLW  84
3058:  MOVWF  FF6
305A:  MOVLW  05
305C:  MOVWF  FF7
305E:  CALL   0AE8
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3062:  MOVLW  02
3064:  MOVWF  xE0
3066:  MOVLW  FA
3068:  MOVWF  xF7
306A:  CALL   08F8
306E:  DECFSZ xE0,F
3070:  BRA    3066
3072:  MOVLW  0B
3074:  MOVWF  2F
3076:  MOVLW  0C
3078:  MOVWF  xF1
307A:  CALL   0A8A
307E:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3080:  CLRF   49
3082:  CLRF   4A
3084:  CLRF   4B
3086:  CLRF   4C
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3088:  MOVF   2C,W
308A:  SUBLW  3D
308C:  BTFSS  FD8.2
308E:  BRA    3420
....................       EliminaRuido(); 
3090:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3094:  MOVLW  01
3096:  MOVWF  xF2
3098:  MOVWF  xF3
309A:  CALL   0A22
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
309E:  MOVLW  9A
30A0:  MOVWF  FF6
30A2:  MOVLW  05
30A4:  MOVWF  FF7
30A6:  CALL   0AE8
....................          lcd_gotoxy(1,2); 
30AA:  MOVLW  01
30AC:  MOVWF  xF2
30AE:  MOVLW  02
30B0:  MOVWF  xF3
30B2:  CALL   0A22
....................          printf(lcd_putc,"     Contraseña     "); 
30B6:  MOVLW  B0
30B8:  MOVWF  FF6
30BA:  MOVLW  05
30BC:  MOVWF  FF7
30BE:  CALL   0AE8
....................          lcd_gotoxy(1,3); 
30C2:  MOVLW  01
30C4:  MOVWF  xF2
30C6:  MOVLW  03
30C8:  MOVWF  xF3
30CA:  CALL   0A22
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
30CE:  MOVLW  C6
30D0:  MOVWF  FF6
30D2:  MOVLW  05
30D4:  MOVWF  FF7
30D6:  MOVLW  0A
30D8:  MOVWF  xE4
30DA:  CALL   126A
30DE:  MOVFF  49,E0
30E2:  MOVLW  1F
30E4:  MOVWF  xE1
30E6:  CALL   12B0
30EA:  MOVFF  4A,E0
30EE:  MOVLW  1F
30F0:  MOVWF  xE1
30F2:  CALL   12B0
30F6:  MOVFF  4B,E0
30FA:  MOVLW  1F
30FC:  MOVWF  xE1
30FE:  CALL   12B0
3102:  MOVFF  4C,E0
3106:  MOVLW  1F
3108:  MOVWF  xE1
310A:  CALL   12B0
310E:  MOVLW  20
3110:  MOVWF  xF1
3112:  CALL   0A8A
3116:  MOVLW  20
3118:  MOVWF  xF1
311A:  CALL   0A8A
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
311E:  MOVFF  2F,F2
3122:  MOVLW  04
3124:  MOVWF  xF3
3126:  CALL   0A22
....................          lcd_putc(t[2]); 
312A:  MOVFF  48,F1
312E:  CALL   0A8A
....................           
....................          if(unidad>11&&unidad<14){ 
3132:  MOVF   2F,W
3134:  SUBLW  0B
3136:  BC    3156
3138:  MOVF   2F,W
313A:  SUBLW  0D
313C:  BNC   3156
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
313E:  MOVLW  01
3140:  SUBWF  2F,W
3142:  MOVWF  xE0
3144:  MOVWF  xF2
3146:  MOVLW  04
3148:  MOVWF  xF3
314A:  CALL   0A22
....................             lcd_putc(t[1]); 
314E:  MOVFF  47,F1
3152:  CALL   0A8A
....................          } 
....................           
....................          Cambio=OFF; 
3156:  BCF    2B.3
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3158:  BSF    F92.5
315A:  BTFSC  F80.5
315C:  BRA    3190
....................          delay_ms(20); 
315E:  MOVLW  14
3160:  MOVWF  xF7
3162:  CALL   08F8
....................          if(UP){ 
3166:  BSF    F92.5
3168:  BTFSC  F80.5
316A:  BRA    318E
....................             if(Flanco == 0) { 
316C:  BTFSC  29.3
316E:  BRA    318E
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3170:  MOVLW  0B
3172:  SUBWF  2F,W
3174:  CLRF   03
3176:  ADDLW  49
3178:  MOVWF  FE9
317A:  MOVLW  00
317C:  ADDWFC 03,W
317E:  MOVWF  FEA
3180:  INCF   FEF,F
3182:  BSF    29.3
3184:  MOVLW  1E
3186:  MOVWF  xF7
3188:  CALL   08F8
318C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
318E:  BRA    3192
....................          Flanco = 0; 
3190:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3192:  BSF    F96.0
3194:  BTFSC  F84.0
3196:  BRA    31CA
....................          delay_ms(20); 
3198:  MOVLW  14
319A:  MOVWF  xF7
319C:  CALL   08F8
....................          if(DOWN){ 
31A0:  BSF    F96.0
31A2:  BTFSC  F84.0
31A4:  BRA    31C8
....................             if(Flanco2 == 0) { 
31A6:  BTFSC  29.5
31A8:  BRA    31C8
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
31AA:  MOVLW  0B
31AC:  SUBWF  2F,W
31AE:  CLRF   03
31B0:  ADDLW  49
31B2:  MOVWF  FE9
31B4:  MOVLW  00
31B6:  ADDWFC 03,W
31B8:  MOVWF  FEA
31BA:  DECF   FEF,F
31BC:  BSF    29.5
31BE:  MOVLW  1E
31C0:  MOVWF  xF7
31C2:  CALL   08F8
31C6:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
31C8:  BRA    31CC
....................          Flanco2 = 0; 
31CA:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
31CC:  BSF    F96.1
31CE:  BTFSC  F84.1
31D0:  BRA    31F4
....................          if(RIGHT){ 
31D2:  BSF    F96.1
31D4:  BTFSC  F84.1
31D6:  BRA    31F2
....................             if(Flanco1 == 0) { 
31D8:  BTFSC  29.4
31DA:  BRA    31F2
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
31DC:  BSF    29.4
31DE:  INCF   2F,F
31E0:  MOVLW  1E
31E2:  MOVWF  xF7
31E4:  CALL   08F8
31E8:  MOVLW  0C
31EA:  MOVWF  xF1
31EC:  CALL   0A8A
31F0:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
31F2:  BRA    31F6
....................          Flanco1 = 0; 
31F4:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
31F6:  BSF    F96.2
31F8:  BTFSC  F84.2
31FA:  BRA    3226
....................          delay_ms(150); 
31FC:  MOVLW  96
31FE:  MOVWF  xF7
3200:  CALL   08F8
....................          if(IZQU){ 
3204:  BSF    F96.2
3206:  BTFSC  F84.2
3208:  BRA    3224
....................             if(Flanco3 == 0){ 
320A:  BTFSC  29.6
320C:  BRA    3224
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
320E:  BSF    29.6
3210:  DECF   2F,F
3212:  MOVLW  1E
3214:  MOVWF  xF7
3216:  CALL   08F8
321A:  MOVLW  0C
321C:  MOVWF  xF1
321E:  CALL   0A8A
3222:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3224:  BRA    3228
....................         Flanco3 = 0; 
3226:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3228:  MOVLW  0B
322A:  SUBWF  2F,W
322C:  CLRF   03
322E:  ADDLW  49
3230:  MOVWF  FE9
3232:  MOVLW  00
3234:  ADDWFC 03,W
3236:  MOVWF  FEA
3238:  BTFSC  FEF.7
323A:  BRA    323E
323C:  BRA    3252
....................          clave[unidad-11]=9; 
323E:  MOVLW  0B
3240:  SUBWF  2F,W
3242:  CLRF   03
3244:  ADDLW  49
3246:  MOVWF  FE9
3248:  MOVLW  00
324A:  ADDWFC 03,W
324C:  MOVWF  FEA
324E:  MOVLW  09
3250:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3252:  MOVLW  0B
3254:  SUBWF  2F,W
3256:  CLRF   03
3258:  ADDLW  49
325A:  MOVWF  FE9
325C:  MOVLW  00
325E:  ADDWFC 03,W
3260:  MOVWF  FEA
3262:  BTFSC  FEF.7
3264:  BRA    327E
3266:  MOVF   FEF,W
3268:  SUBLW  09
326A:  BC    327E
....................          clave[unidad-11]=0; 
326C:  MOVLW  0B
326E:  SUBWF  2F,W
3270:  CLRF   03
3272:  ADDLW  49
3274:  MOVWF  FE9
3276:  MOVLW  00
3278:  ADDWFC 03,W
327A:  MOVWF  FEA
327C:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
327E:  MOVF   2F,W
3280:  SUBLW  0A
3282:  BNC   32A2
....................          unidad=11; 
3284:  MOVLW  0B
3286:  MOVWF  2F
....................          Menu=1; 
3288:  MOVLW  01
328A:  MOVWF  2C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
328C:  CLRF   49
328E:  CLRF   4A
3290:  CLRF   4B
3292:  CLRF   4C
3294:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
3296:  MOVLW  0B
3298:  MOVWF  2F
329A:  MOVLW  0C
329C:  MOVWF  xF1
329E:  CALL   0A8A
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
32A2:  MOVF   2F,W
32A4:  SUBLW  0E
32A6:  BTFSC  FD8.0
32A8:  BRA    3420
....................          lcd_gotoxy(1,1); 
32AA:  MOVLW  01
32AC:  MOVWF  xF2
32AE:  MOVWF  xF3
32B0:  CALL   0A22
....................          printf(lcd_putc,"                    "); 
32B4:  MOVLW  DC
32B6:  MOVWF  FF6
32B8:  MOVLW  05
32BA:  MOVWF  FF7
32BC:  CALL   0AE8
....................          lcd_gotoxy(1,2); 
32C0:  MOVLW  01
32C2:  MOVWF  xF2
32C4:  MOVLW  02
32C6:  MOVWF  xF3
32C8:  CALL   0A22
....................          printf(lcd_putc,"     Contraseña     "); 
32CC:  MOVLW  F2
32CE:  MOVWF  FF6
32D0:  MOVLW  05
32D2:  MOVWF  FF7
32D4:  CALL   0AE8
....................          lcd_gotoxy(1,3); 
32D8:  MOVLW  01
32DA:  MOVWF  xF2
32DC:  MOVLW  03
32DE:  MOVWF  xF3
32E0:  CALL   0A22
....................          printf(lcd_putc,"     Almacenada     "); 
32E4:  MOVLW  08
32E6:  MOVWF  FF6
32E8:  MOVLW  06
32EA:  MOVWF  FF7
32EC:  CALL   0AE8
....................          lcd_gotoxy(1,4); 
32F0:  MOVLW  01
32F2:  MOVWF  xF2
32F4:  MOVLW  04
32F6:  MOVWF  xF3
32F8:  CALL   0A22
....................          printf(lcd_putc,"                    "); 
32FC:  MOVLW  1E
32FE:  MOVWF  FF6
3300:  MOVLW  06
3302:  MOVWF  FF7
3304:  CALL   0AE8
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3308:  CLRF   FA9
330A:  MOVFF  49,FA8
330E:  BCF    FA6.6
3310:  BCF    FA6.7
3312:  BSF    FA6.2
3314:  MOVF   FF2,W
3316:  MOVWF  00
3318:  BCF    FF2.6
331A:  BCF    FF2.7
331C:  MOVLB  F
331E:  MOVLW  55
3320:  MOVWF  FA7
3322:  MOVLW  AA
3324:  MOVWF  FA7
3326:  BSF    FA6.1
3328:  BTFSC  FA6.1
332A:  BRA    3328
332C:  BCF    FA6.2
332E:  MOVF   00,W
3330:  IORWF  FF2,F
3332:  MOVLW  14
3334:  MOVLB  0
3336:  MOVWF  xF7
3338:  CALL   08F8
333C:  MOVLW  01
333E:  MOVWF  FA9
3340:  MOVFF  4A,FA8
3344:  BCF    FA6.6
3346:  BCF    FA6.7
3348:  BSF    FA6.2
334A:  MOVF   FF2,W
334C:  MOVWF  00
334E:  BCF    FF2.6
3350:  BCF    FF2.7
3352:  MOVLB  F
3354:  MOVLW  55
3356:  MOVWF  FA7
3358:  MOVLW  AA
335A:  MOVWF  FA7
335C:  BSF    FA6.1
335E:  BTFSC  FA6.1
3360:  BRA    335E
3362:  BCF    FA6.2
3364:  MOVF   00,W
3366:  IORWF  FF2,F
3368:  MOVLW  14
336A:  MOVLB  0
336C:  MOVWF  xF7
336E:  CALL   08F8
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3372:  MOVLW  02
3374:  MOVWF  FA9
3376:  MOVFF  4B,FA8
337A:  BCF    FA6.6
337C:  BCF    FA6.7
337E:  BSF    FA6.2
3380:  MOVF   FF2,W
3382:  MOVWF  00
3384:  BCF    FF2.6
3386:  BCF    FF2.7
3388:  MOVLB  F
338A:  MOVLW  55
338C:  MOVWF  FA7
338E:  MOVLW  AA
3390:  MOVWF  FA7
3392:  BSF    FA6.1
3394:  BTFSC  FA6.1
3396:  BRA    3394
3398:  BCF    FA6.2
339A:  MOVF   00,W
339C:  IORWF  FF2,F
339E:  MOVLW  14
33A0:  MOVLB  0
33A2:  MOVWF  xF7
33A4:  CALL   08F8
33A8:  MOVLW  03
33AA:  MOVWF  FA9
33AC:  MOVFF  4C,FA8
33B0:  BCF    FA6.6
33B2:  BCF    FA6.7
33B4:  BSF    FA6.2
33B6:  MOVF   FF2,W
33B8:  MOVWF  00
33BA:  BCF    FF2.6
33BC:  BCF    FF2.7
33BE:  MOVLB  F
33C0:  MOVLW  55
33C2:  MOVWF  FA7
33C4:  MOVLW  AA
33C6:  MOVWF  FA7
33C8:  BSF    FA6.1
33CA:  BTFSC  FA6.1
33CC:  BRA    33CA
33CE:  BCF    FA6.2
33D0:  MOVF   00,W
33D2:  IORWF  FF2,F
33D4:  MOVLW  14
33D6:  MOVLB  0
33D8:  MOVWF  xF7
33DA:  CALL   08F8
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
33DE:  MOVLW  02
33E0:  MOVWF  xE0
33E2:  MOVLW  FA
33E4:  MOVWF  xF7
33E6:  CALL   08F8
33EA:  DECFSZ xE0,F
33EC:  BRA    33E2
33EE:  MOVLW  01
33F0:  MOVWF  2C
33F2:  CLRF   45
33F4:  MOVLW  02
33F6:  MOVWF  30
33F8:  MOVWF  32
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
33FA:  MOVFF  49,4D
33FE:  MOVFF  4A,4E
3402:  MOVFF  4B,4F
3406:  MOVFF  4C,50
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
340A:  CLRF   49
340C:  CLRF   4A
340E:  CLRF   4B
3410:  CLRF   4C
3412:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f");          
3414:  MOVLW  0B
3416:  MOVWF  2F
3418:  MOVLW  0C
341A:  MOVWF  xF1
341C:  CALL   0A8A
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3420:  MOVF   2C,W
3422:  SUBLW  04
3424:  BTFSS  FD8.2
3426:  BRA    3642
....................    EliminaRuido(); 
3428:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
342C:  MOVLW  01
342E:  MOVWF  xF2
3430:  MOVWF  xF3
3432:  CALL   0A22
....................       printf(lcd_putc,"  Duracion Actual   "); 
3436:  MOVLW  34
3438:  MOVWF  FF6
343A:  MOVLW  06
343C:  MOVWF  FF7
343E:  CALL   0AE8
....................       lcd_gotoxy(1,2); 
3442:  MOVLW  01
3444:  MOVWF  xF2
3446:  MOVLW  02
3448:  MOVWF  xF3
344A:  CALL   0A22
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
344E:  MOVLW  4A
3450:  MOVWF  FF6
3452:  MOVLW  06
3454:  MOVWF  FF7
3456:  MOVLW  0B
3458:  MOVWF  xE4
345A:  CALL   126A
345E:  MOVLW  08
3460:  MOVWF  FE9
3462:  MOVFF  5A,E1
3466:  MOVFF  59,E0
346A:  GOTO   14C0
346E:  MOVLW  20
3470:  MOVWF  xF1
3472:  CALL   0A8A
3476:  MOVLW  20
3478:  MOVWF  xF1
347A:  CALL   0A8A
347E:  MOVLW  20
3480:  MOVWF  xF1
3482:  CALL   0A8A
....................       lcd_gotoxy(1,4); 
3486:  MOVLW  01
3488:  MOVWF  xF2
348A:  MOVLW  04
348C:  MOVWF  xF3
348E:  CALL   0A22
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3492:  MOVLW  5E
3494:  MOVWF  FF6
3496:  MOVLW  06
3498:  MOVWF  FF7
349A:  CALL   0AE8
....................        
....................       Cambio=OFF; 
349E:  BCF    2B.3
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
34A0:  BSF    F92.5
34A2:  BTFSC  F80.5
34A4:  BRA    35FE
34A6:  BSF    F96.1
34A8:  BTFSC  F84.1
34AA:  BRA    35FE
....................          delay_ms(20); 
34AC:  MOVLW  14
34AE:  MOVWF  xF7
34B0:  CALL   08F8
....................          if(UP && RIGHT){ 
34B4:  BSF    F92.5
34B6:  BTFSC  F80.5
34B8:  BRA    35FE
34BA:  BSF    F96.1
34BC:  BTFSC  F84.1
34BE:  BRA    35FE
....................             delay_ms(200); 
34C0:  MOVLW  C8
34C2:  MOVWF  xF7
34C4:  CALL   08F8
....................             printf(lcd_putc,"\f"); 
34C8:  MOVLW  0C
34CA:  MOVWF  xF1
34CC:  CALL   0A8A
....................             lcd_gotoxy(1,2); 
34D0:  MOVLW  01
34D2:  MOVWF  xF2
34D4:  MOVLW  02
34D6:  MOVWF  xF3
34D8:  CALL   0A22
....................             printf(lcd_putc," Reset de tiempo "); 
34DC:  MOVLW  74
34DE:  MOVWF  FF6
34E0:  MOVLW  06
34E2:  MOVWF  FF7
34E4:  CALL   0AE8
....................             lcd_gotoxy(1,3); 
34E8:  MOVLW  01
34EA:  MOVWF  xF2
34EC:  MOVLW  03
34EE:  MOVWF  xF3
34F0:  CALL   0A22
....................             printf(lcd_putc,"     Exitoso     "); 
34F4:  MOVLW  86
34F6:  MOVWF  FF6
34F8:  MOVLW  06
34FA:  MOVWF  FF7
34FC:  CALL   0AE8
....................             write_eeprom(7,0); 
3500:  MOVLW  07
3502:  MOVWF  FA9
3504:  CLRF   FA8
3506:  BCF    FA6.6
3508:  BCF    FA6.7
350A:  BSF    FA6.2
350C:  MOVF   FF2,W
350E:  MOVWF  00
3510:  BCF    FF2.6
3512:  BCF    FF2.7
3514:  MOVLB  F
3516:  MOVLW  55
3518:  MOVWF  FA7
351A:  MOVLW  AA
351C:  MOVWF  FA7
351E:  BSF    FA6.1
3520:  BTFSC  FA6.1
3522:  BRA    3520
3524:  BCF    FA6.2
3526:  MOVF   00,W
3528:  IORWF  FF2,F
....................             delay_ms(20); 
352A:  MOVLW  14
352C:  MOVLB  0
352E:  MOVWF  xF7
3530:  CALL   08F8
....................             write_eeprom(8,0); 
3534:  MOVLW  08
3536:  MOVWF  FA9
3538:  CLRF   FA8
353A:  BCF    FA6.6
353C:  BCF    FA6.7
353E:  BSF    FA6.2
3540:  MOVF   FF2,W
3542:  MOVWF  00
3544:  BCF    FF2.6
3546:  BCF    FF2.7
3548:  MOVLB  F
354A:  MOVLW  55
354C:  MOVWF  FA7
354E:  MOVLW  AA
3550:  MOVWF  FA7
3552:  BSF    FA6.1
3554:  BTFSC  FA6.1
3556:  BRA    3554
3558:  BCF    FA6.2
355A:  MOVF   00,W
355C:  IORWF  FF2,F
....................             delay_ms(20); 
355E:  MOVLW  14
3560:  MOVLB  0
3562:  MOVWF  xF7
3564:  CALL   08F8
....................             write_eeprom(9,0); 
3568:  MOVLW  09
356A:  MOVWF  FA9
356C:  CLRF   FA8
356E:  BCF    FA6.6
3570:  BCF    FA6.7
3572:  BSF    FA6.2
3574:  MOVF   FF2,W
3576:  MOVWF  00
3578:  BCF    FF2.6
357A:  BCF    FF2.7
357C:  MOVLB  F
357E:  MOVLW  55
3580:  MOVWF  FA7
3582:  MOVLW  AA
3584:  MOVWF  FA7
3586:  BSF    FA6.1
3588:  BTFSC  FA6.1
358A:  BRA    3588
358C:  BCF    FA6.2
358E:  MOVF   00,W
3590:  IORWF  FF2,F
....................             delay_ms(20); 
3592:  MOVLW  14
3594:  MOVLB  0
3596:  MOVWF  xF7
3598:  CALL   08F8
....................             write_eeprom(10,0); 
359C:  MOVLW  0A
359E:  MOVWF  FA9
35A0:  CLRF   FA8
35A2:  BCF    FA6.6
35A4:  BCF    FA6.7
35A6:  BSF    FA6.2
35A8:  MOVF   FF2,W
35AA:  MOVWF  00
35AC:  BCF    FF2.6
35AE:  BCF    FF2.7
35B0:  MOVLB  F
35B2:  MOVLW  55
35B4:  MOVWF  FA7
35B6:  MOVLW  AA
35B8:  MOVWF  FA7
35BA:  BSF    FA6.1
35BC:  BTFSC  FA6.1
35BE:  BRA    35BC
35C0:  BCF    FA6.2
35C2:  MOVF   00,W
35C4:  IORWF  FF2,F
....................             delay_ms(700); 
35C6:  MOVLW  04
35C8:  MOVLB  0
35CA:  MOVWF  xE0
35CC:  MOVLW  AF
35CE:  MOVWF  xF7
35D0:  CALL   08F8
35D4:  DECFSZ xE0,F
35D6:  BRA    35CC
....................             segundos=0;minutos=0;horas=0; 
35D8:  CLRF   35
35DA:  CLRF   36
35DC:  CLRF   5A
35DE:  CLRF   59
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
35E0:  MOVLW  1E
35E2:  MOVWF  xF7
35E4:  CALL   08F8
35E8:  MOVLW  01
35EA:  MOVWF  2C
35EC:  CLRF   45
35EE:  MOVLW  02
35F0:  MOVWF  30
35F2:  MOVWF  32
35F4:  MOVLW  0C
35F6:  MOVWF  xF1
35F8:  CALL   0A8A
....................             Cambio=ON; 
35FC:  BSF    2B.3
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
35FE:  BSF    F96.2
3600:  BTFSC  F84.2
3602:  BRA    3640
....................          delay_ms(20); 
3604:  MOVLW  14
3606:  MOVWF  xF7
3608:  CALL   08F8
....................          if(IZQU){ 
360C:  BSF    F96.2
360E:  BTFSC  F84.2
3610:  BRA    363E
....................             if(Flanco3 == 0){ 
3612:  BTFSC  29.6
3614:  BRA    363E
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3616:  BSF    29.6
3618:  MOVLW  02
361A:  MOVWF  xE0
361C:  MOVLW  FA
361E:  MOVWF  xF7
3620:  CALL   08F8
3624:  DECFSZ xE0,F
3626:  BRA    361C
3628:  MOVLW  01
362A:  MOVWF  2C
362C:  CLRF   45
362E:  MOVLW  02
3630:  MOVWF  30
3632:  MOVWF  32
3634:  MOVLW  0C
3636:  MOVWF  xF1
3638:  CALL   0A8A
363C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
363E:  BRA    3642
....................          Flanco3 = 0; 
3640:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3642:  MOVF   2C,W
3644:  SUBLW  05
3646:  BTFSS  FD8.2
3648:  BRA    38A2
....................       EliminaRuido(); 
364A:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
364E:  MOVLW  01
3650:  MOVWF  xF2
3652:  MOVWF  xF3
3654:  CALL   0A22
....................          printf(lcd_putc,"  Zero Point Config "); 
3658:  MOVLW  98
365A:  MOVWF  FF6
365C:  MOVLW  06
365E:  MOVWF  FF7
3660:  CALL   0AE8
....................          lcd_gotoxy(1,2); 
3664:  MOVLW  01
3666:  MOVWF  xF2
3668:  MOVLW  02
366A:  MOVWF  xF3
366C:  CALL   0A22
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3670:  MOVLW  05
3672:  MOVWF  xE0
3674:  CALL   19F6
3678:  MOVFF  00,E0
367C:  MOVFF  01,E1
3680:  MOVFF  02,E2
3684:  MOVFF  03,E3
3688:  MOVFF  03,F7
368C:  MOVFF  02,F6
3690:  MOVFF  01,F5
3694:  MOVFF  00,F4
3698:  MOVLW  D7
369A:  MOVWF  xFB
369C:  MOVLW  A3
369E:  MOVWF  xFA
36A0:  CLRF   xF9
36A2:  MOVLW  81
36A4:  MOVWF  xF8
36A6:  CALL   1B8C
36AA:  MOVFF  00,E0
36AE:  MOVFF  01,E1
36B2:  MOVFF  02,E2
36B6:  MOVFF  03,E3
36BA:  MOVLW  AE
36BC:  MOVWF  FF6
36BE:  MOVLW  06
36C0:  MOVWF  FF7
36C2:  MOVLW  09
36C4:  MOVWF  xE4
36C6:  CALL   126A
36CA:  MOVLW  02
36CC:  MOVWF  FE9
36CE:  MOVFF  E3,E7
36D2:  MOVFF  E2,E6
36D6:  MOVFF  E1,E5
36DA:  MOVFF  E0,E4
36DE:  MOVWF  xE8
36E0:  CALL   1D38
36E4:  MOVLW  BC
36E6:  MOVWF  FF6
36E8:  MOVLW  06
36EA:  MOVWF  FF7
36EC:  MOVLW  07
36EE:  MOVWF  xE4
36F0:  CALL   126A
....................          lcd_gotoxy(1,3); 
36F4:  MOVLW  01
36F6:  MOVWF  xF2
36F8:  MOVLW  03
36FA:  MOVWF  xF3
36FC:  CALL   0A22
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3700:  CLRF   xE5
3702:  CALL   1576
3706:  MOVFF  00,E0
370A:  MOVFF  01,E1
370E:  MOVFF  02,E2
3712:  MOVFF  03,E3
3716:  MOVLW  C4
3718:  MOVWF  FF6
371A:  MOVLW  06
371C:  MOVWF  FF7
371E:  MOVLW  08
3720:  MOVWF  xE4
3722:  CALL   126A
3726:  MOVLW  01
3728:  MOVWF  FE9
372A:  MOVFF  E3,E7
372E:  MOVFF  E2,E6
3732:  MOVFF  E1,E5
3736:  MOVFF  E0,E4
373A:  CLRF   xE8
373C:  CALL   1D38
....................          lcd_gotoxy(1,4); 
3740:  MOVLW  01
3742:  MOVWF  xF2
3744:  MOVLW  04
3746:  MOVWF  xF3
3748:  CALL   0A22
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
374C:  MOVLW  D2
374E:  MOVWF  FF6
3750:  MOVLW  06
3752:  MOVWF  FF7
3754:  MOVLW  07
3756:  MOVWF  xE4
3758:  CALL   126A
375C:  MOVLW  01
375E:  MOVWF  FE9
3760:  MOVFF  C0,E7
3764:  MOVFF  BF,E6
3768:  MOVFF  BE,E5
376C:  MOVFF  BD,E4
3770:  CLRF   xE8
3772:  CALL   1D38
....................           
....................          Cambio=OFF; 
3776:  BCF    2B.3
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
3778:  BSF    F96.1
377A:  BTFSC  F84.1
377C:  BRA    3862
....................          delay_ms(20); 
377E:  MOVLW  14
3780:  MOVWF  xF7
3782:  CALL   08F8
....................          if(RIGHT){ 
3786:  BSF    F96.1
3788:  BTFSC  F84.1
378A:  BRA    3860
....................             if(Flanco1 == 0){ 
378C:  BTFSC  29.4
378E:  BRA    3860
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3790:  MOVLW  01
3792:  MOVWF  2C
3794:  CLRF   45
3796:  MOVLW  02
3798:  MOVWF  30
379A:  MOVWF  32
379C:  MOVLW  0B
379E:  MOVWF  2F
37A0:  MOVLW  02
37A2:  MOVWF  xE0
37A4:  MOVLW  FA
37A6:  MOVWF  xF7
37A8:  CALL   08F8
37AC:  DECFSZ xE0,F
37AE:  BRA    37A4
37B0:  MOVLW  0C
37B2:  MOVWF  xF1
37B4:  CALL   0A8A
....................                G=sensores(0); 
37B8:  CLRF   xE5
37BA:  CALL   1576
37BE:  MOVFF  03,C0
37C2:  MOVFF  02,BF
37C6:  MOVFF  01,BE
37CA:  MOVFF  00,BD
....................                G16=(int16)G; 
37CE:  MOVFF  C0,F7
37D2:  MOVFF  BF,F6
37D6:  MOVFF  BE,F5
37DA:  MOVFF  BD,F4
37DE:  CALL   1EBE
37E2:  MOVFF  02,5C
37E6:  MOVFF  01,5B
....................                G_l=G16; G_h=(G16>>8); 
37EA:  MOVFF  5B,39
37EE:  MOVFF  5C,3A
....................                 
....................                write_eeprom(11,G_l); 
37F2:  MOVLW  0B
37F4:  MOVWF  FA9
37F6:  MOVFF  39,FA8
37FA:  BCF    FA6.6
37FC:  BCF    FA6.7
37FE:  BSF    FA6.2
3800:  MOVF   FF2,W
3802:  MOVWF  00
3804:  BCF    FF2.6
3806:  BCF    FF2.7
3808:  MOVLB  F
380A:  MOVLW  55
380C:  MOVWF  FA7
380E:  MOVLW  AA
3810:  MOVWF  FA7
3812:  BSF    FA6.1
3814:  BTFSC  FA6.1
3816:  BRA    3814
3818:  BCF    FA6.2
381A:  MOVF   00,W
381C:  IORWF  FF2,F
....................                delay_ms(20); 
381E:  MOVLW  14
3820:  MOVLB  0
3822:  MOVWF  xF7
3824:  CALL   08F8
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3828:  MOVLW  0C
382A:  MOVWF  FA9
382C:  MOVFF  3A,FA8
3830:  BCF    FA6.6
3832:  BCF    FA6.7
3834:  BSF    FA6.2
3836:  MOVF   FF2,W
3838:  MOVWF  00
383A:  BCF    FF2.6
383C:  BCF    FF2.7
383E:  MOVLB  F
3840:  MOVLW  55
3842:  MOVWF  FA7
3844:  MOVLW  AA
3846:  MOVWF  FA7
3848:  BSF    FA6.1
384A:  BTFSC  FA6.1
384C:  BRA    384A
384E:  BCF    FA6.2
3850:  MOVF   00,W
3852:  IORWF  FF2,F
....................                delay_ms(20); 
3854:  MOVLW  14
3856:  MOVLB  0
3858:  MOVWF  xF7
385A:  CALL   08F8
....................                Cambio=ON; 
385E:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3860:  BRA    3864
....................          Flanco1 = 0; 
3862:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3864:  BSF    F96.2
3866:  BTFSC  F84.2
3868:  BRA    38A0
....................          delay_ms(20); 
386A:  MOVLW  14
386C:  MOVWF  xF7
386E:  CALL   08F8
....................          if(IZQU){ 
3872:  BSF    F96.2
3874:  BTFSC  F84.2
3876:  BRA    389E
....................             if(Flanco3 == 0){ 
3878:  BTFSC  29.6
387A:  BRA    389E
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
387C:  MOVLW  01
387E:  MOVWF  2C
3880:  CLRF   45
3882:  MOVLW  02
3884:  MOVWF  30
3886:  MOVWF  32
3888:  MOVLW  0B
388A:  MOVWF  2F
388C:  MOVLW  1E
388E:  MOVWF  xF7
3890:  CALL   08F8
3894:  MOVLW  0C
3896:  MOVWF  xF1
3898:  CALL   0A8A
....................                Cambio=ON; 
389C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
389E:  BRA    38A2
....................          Flanco3 = 0; 
38A0:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
38A2:  MOVF   2C,W
38A4:  SUBLW  06
38A6:  BTFSS  FD8.2
38A8:  BRA    39D2
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
38AA:  BTG    2A.4
38AC:  BSF    29.4
38AE:  MOVLW  01
38B0:  MOVWF  2C
38B2:  CLRF   45
....................                        
....................             if(estadoalarma==1) 
38B4:  BTFSS  2A.4
38B6:  BRA    3918
....................             {estadoalarma=1; 
38B8:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
38BA:  MOVLW  01
38BC:  MOVWF  xF2
38BE:  MOVWF  xF3
38C0:  CALL   0A22
....................                printf(lcd_putc,"                    "); 
38C4:  MOVLW  E0
38C6:  MOVWF  FF6
38C8:  MOVLW  06
38CA:  MOVWF  FF7
38CC:  CALL   0AE8
....................                lcd_gotoxy(1,2); 
38D0:  MOVLW  01
38D2:  MOVWF  xF2
38D4:  MOVLW  02
38D6:  MOVWF  xF3
38D8:  CALL   0A22
....................                printf(lcd_putc,"        Activo      "); 
38DC:  MOVLW  F6
38DE:  MOVWF  FF6
38E0:  MOVLW  06
38E2:  MOVWF  FF7
38E4:  CALL   0AE8
....................                lcd_gotoxy(1,3); 
38E8:  MOVLW  01
38EA:  MOVWF  xF2
38EC:  MOVLW  03
38EE:  MOVWF  xF3
38F0:  CALL   0A22
....................                printf(lcd_putc,"        Alarma      "); 
38F4:  MOVLW  0C
38F6:  MOVWF  FF6
38F8:  MOVLW  07
38FA:  MOVWF  FF7
38FC:  CALL   0AE8
....................                lcd_gotoxy(1,4); 
3900:  MOVLW  01
3902:  MOVWF  xF2
3904:  MOVLW  04
3906:  MOVWF  xF3
3908:  CALL   0A22
....................                printf(lcd_putc,"                    ");} 
390C:  MOVLW  22
390E:  MOVWF  FF6
3910:  MOVLW  07
3912:  MOVWF  FF7
3914:  CALL   0AE8
....................                 
....................             if(estadoalarma==0) 
3918:  BTFSC  2A.4
391A:  BRA    397C
....................             {estadoalarma=0; 
391C:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
391E:  MOVLW  01
3920:  MOVWF  xF2
3922:  MOVWF  xF3
3924:  CALL   0A22
....................                printf(lcd_putc,"                    "); 
3928:  MOVLW  38
392A:  MOVWF  FF6
392C:  MOVLW  07
392E:  MOVWF  FF7
3930:  CALL   0AE8
....................                lcd_gotoxy(1,2); 
3934:  MOVLW  01
3936:  MOVWF  xF2
3938:  MOVLW  02
393A:  MOVWF  xF3
393C:  CALL   0A22
....................                printf(lcd_putc,"      Desactivo     "); 
3940:  MOVLW  4E
3942:  MOVWF  FF6
3944:  MOVLW  07
3946:  MOVWF  FF7
3948:  CALL   0AE8
....................                lcd_gotoxy(1,3); 
394C:  MOVLW  01
394E:  MOVWF  xF2
3950:  MOVLW  03
3952:  MOVWF  xF3
3954:  CALL   0A22
....................                printf(lcd_putc,"       Alarma       "); 
3958:  MOVLW  64
395A:  MOVWF  FF6
395C:  MOVLW  07
395E:  MOVWF  FF7
3960:  CALL   0AE8
....................                lcd_gotoxy(1,4); 
3964:  MOVLW  01
3966:  MOVWF  xF2
3968:  MOVLW  04
396A:  MOVWF  xF3
396C:  CALL   0A22
....................                printf(lcd_putc,"                    ");} 
3970:  MOVLW  7A
3972:  MOVWF  FF6
3974:  MOVLW  07
3976:  MOVWF  FF7
3978:  CALL   0AE8
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
397C:  MOVLW  00
397E:  BTFSC  2A.4
3980:  MOVLW  01
3982:  MOVWF  xE0
3984:  MOVLW  04
3986:  MOVWF  FA9
3988:  MOVFF  E0,FA8
398C:  BCF    FA6.6
398E:  BCF    FA6.7
3990:  BSF    FA6.2
3992:  MOVF   FF2,W
3994:  MOVWF  00
3996:  BCF    FF2.6
3998:  BCF    FF2.7
399A:  MOVLB  F
399C:  MOVLW  55
399E:  MOVWF  FA7
39A0:  MOVLW  AA
39A2:  MOVWF  FA7
39A4:  BSF    FA6.1
39A6:  BTFSC  FA6.1
39A8:  BRA    39A6
39AA:  BCF    FA6.2
39AC:  MOVF   00,W
39AE:  IORWF  FF2,F
39B0:  MOVLW  04
39B2:  MOVLB  0
39B4:  MOVWF  xE0
39B6:  MOVLW  FA
39B8:  MOVWF  xF7
39BA:  CALL   08F8
39BE:  DECFSZ xE0,F
39C0:  BRA    39B6
39C2:  MOVLW  02
39C4:  MOVWF  30
39C6:  MOVWF  32
39C8:  MOVLW  0C
39CA:  MOVWF  xF1
39CC:  CALL   0A8A
....................             Cambio=ON; 
39D0:  BSF    2B.3
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
39D2:  MOVF   2C,W
39D4:  SUBLW  07
39D6:  BTFSS  FD8.2
39D8:  BRA    3B70
....................       if(Vel1>6) 
39DA:  MOVF   56,W
39DC:  SUBLW  06
39DE:  BC    39E4
....................          Vel1=6; 
39E0:  MOVLW  06
39E2:  MOVWF  56
....................       if(Vel1<1) 
39E4:  MOVF   56,F
39E6:  BNZ   39EC
....................          Vel1=1; 
39E8:  MOVLW  01
39EA:  MOVWF  56
....................        
....................       lcd_gotoxy(1,1); 
39EC:  MOVLW  01
39EE:  MOVWF  xF2
39F0:  MOVWF  xF3
39F2:  CALL   0A22
....................       printf(lcd_putc,"Seleccione Velocidad"); 
39F6:  MOVLW  90
39F8:  MOVWF  FF6
39FA:  MOVLW  07
39FC:  MOVWF  FF7
39FE:  CALL   0AE8
....................       lcd_gotoxy(1,2); 
3A02:  MOVLW  01
3A04:  MOVWF  xF2
3A06:  MOVLW  02
3A08:  MOVWF  xF3
3A0A:  CALL   0A22
....................       printf(lcd_putc,"   del Ventilador   "); 
3A0E:  MOVLW  A6
3A10:  MOVWF  FF6
3A12:  MOVLW  07
3A14:  MOVWF  FF7
3A16:  CALL   0AE8
....................       lcd_gotoxy(1,3); 
3A1A:  MOVLW  01
3A1C:  MOVWF  xF2
3A1E:  MOVLW  03
3A20:  MOVWF  xF3
3A22:  CALL   0A22
....................       printf(lcd_putc,"     Vel: %u       ",Vel1); 
3A26:  MOVLW  BC
3A28:  MOVWF  FF6
3A2A:  MOVLW  07
3A2C:  MOVWF  FF7
3A2E:  MOVLW  0A
3A30:  MOVWF  xE4
3A32:  CALL   126A
3A36:  MOVFF  56,E0
3A3A:  MOVLW  1B
3A3C:  MOVWF  xE1
3A3E:  CALL   1454
3A42:  MOVLW  C8
3A44:  MOVWF  FF6
3A46:  MOVLW  07
3A48:  MOVWF  FF7
3A4A:  MOVLW  07
3A4C:  MOVWF  xE4
3A4E:  CALL   126A
....................       lcd_gotoxy(1,4); 
3A52:  MOVLW  01
3A54:  MOVWF  xF2
3A56:  MOVLW  04
3A58:  MOVWF  xF3
3A5A:  CALL   0A22
....................       printf(lcd_putc,"                    ");       
3A5E:  MOVLW  D0
3A60:  MOVWF  FF6
3A62:  MOVLW  07
3A64:  MOVWF  FF7
3A66:  CALL   0AE8
....................        
....................       if(UP && Vel1<6)//Si oprime hacia arriba 
3A6A:  BSF    F92.5
3A6C:  BTFSC  F80.5
3A6E:  BRA    3A80
3A70:  MOVF   56,W
3A72:  SUBLW  05
3A74:  BNC   3A80
....................       {   
....................          delay_ms(200);Vel1++; 
3A76:  MOVLW  C8
3A78:  MOVWF  xF7
3A7A:  CALL   08F8
3A7E:  INCF   56,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
3A80:  BSF    F96.0
3A82:  BTFSC  F84.0
3A84:  BRA    3A94
3A86:  MOVF   56,F
3A88:  BZ    3A94
....................       {   
....................          delay_ms(200);Vel1--; 
3A8A:  MOVLW  C8
3A8C:  MOVWF  xF7
3A8E:  CALL   08F8
3A92:  DECF   56,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
3A94:  BSF    F96.1
3A96:  BTFSC  F84.1
3A98:  BRA    3A9E
....................       {            
....................          VelMotor=Vel1; 
3A9A:  MOVFF  56,C8
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
3A9E:  BSF    F96.2
3AA0:  BTFSC  F84.2
3AA2:  BRA    3B70
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3AA4:  MOVLW  64
3AA6:  MOVWF  xF7
3AA8:  CALL   08F8
3AAC:  MOVLW  02
3AAE:  MOVWF  30
3AB0:  MOVWF  32
3AB2:  MOVLW  0C
3AB4:  MOVWF  xF1
3AB6:  CALL   0A8A
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
3ABA:  MOVLW  0D
3ABC:  MOVWF  FA9
3ABE:  MOVFF  56,FA8
3AC2:  BCF    FA6.6
3AC4:  BCF    FA6.7
3AC6:  BSF    FA6.2
3AC8:  MOVF   FF2,W
3ACA:  MOVWF  00
3ACC:  BCF    FF2.6
3ACE:  BCF    FF2.7
3AD0:  MOVLB  F
3AD2:  MOVLW  55
3AD4:  MOVWF  FA7
3AD6:  MOVLW  AA
3AD8:  MOVWF  FA7
3ADA:  BSF    FA6.1
3ADC:  BTFSC  FA6.1
3ADE:  BRA    3ADC
3AE0:  BCF    FA6.2
3AE2:  MOVF   00,W
3AE4:  IORWF  FF2,F
....................          delay_ms(20); 
3AE6:  MOVLW  14
3AE8:  MOVLB  0
3AEA:  MOVWF  xF7
3AEC:  CALL   08F8
....................          lcd_gotoxy(1,1); 
3AF0:  MOVLW  01
3AF2:  MOVWF  xF2
3AF4:  MOVWF  xF3
3AF6:  CALL   0A22
....................          printf(lcd_putc,"                    "); 
3AFA:  MOVLW  E6
3AFC:  MOVWF  FF6
3AFE:  MOVLW  07
3B00:  MOVWF  FF7
3B02:  CALL   0AE8
....................          lcd_gotoxy(1,2); 
3B06:  MOVLW  01
3B08:  MOVWF  xF2
3B0A:  MOVLW  02
3B0C:  MOVWF  xF3
3B0E:  CALL   0A22
....................          printf(lcd_putc,"     Velocidad      "); 
3B12:  MOVLW  FC
3B14:  MOVWF  FF6
3B16:  MOVLW  07
3B18:  MOVWF  FF7
3B1A:  CALL   0AE8
....................          lcd_gotoxy(1,3); 
3B1E:  MOVLW  01
3B20:  MOVWF  xF2
3B22:  MOVLW  03
3B24:  MOVWF  xF3
3B26:  CALL   0A22
....................          printf(lcd_putc,"      Almacenada    "); 
3B2A:  MOVLW  12
3B2C:  MOVWF  FF6
3B2E:  MOVLW  08
3B30:  MOVWF  FF7
3B32:  CALL   0AE8
....................          lcd_gotoxy(1,4); 
3B36:  MOVLW  01
3B38:  MOVWF  xF2
3B3A:  MOVLW  04
3B3C:  MOVWF  xF3
3B3E:  CALL   0A22
....................          printf(lcd_putc,"                    ");  
3B42:  MOVLW  28
3B44:  MOVWF  FF6
3B46:  MOVLW  08
3B48:  MOVWF  FF7
3B4A:  CALL   0AE8
....................          delay_ms(1000); 
3B4E:  MOVLW  04
3B50:  MOVWF  xE0
3B52:  MOVLW  FA
3B54:  MOVWF  xF7
3B56:  CALL   08F8
3B5A:  DECFSZ xE0,F
3B5C:  BRA    3B52
....................          printf(lcd_putc,"\f"); 
3B5E:  MOVLW  0C
3B60:  MOVWF  xF1
3B62:  CALL   0A8A
....................          lcd_init(); 
3B66:  CALL   0988
....................          Menu=1; paso=0; 
3B6A:  MOVLW  01
3B6C:  MOVWF  2C
3B6E:  CLRF   45
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
3B70:  MOVF   2C,W
3B72:  SUBLW  32
3B74:  BTFSS  FD8.2
3B76:  BRA    41F0
....................    if(Lectura==1){ 
3B78:  BTFSS  2A.0
3B7A:  BRA    3D9E
....................       Lectura=0; 
3B7C:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
3B7E:  MOVLW  08
3B80:  MOVWF  xE0
3B82:  CALL   19F6
3B86:  MOVFF  03,BC
3B8A:  MOVFF  02,BB
3B8E:  MOVFF  01,BA
3B92:  MOVFF  00,B9
....................       lcd_gotoxy(1,1); 
3B96:  MOVLW  01
3B98:  MOVWF  xF2
3B9A:  MOVWF  xF3
3B9C:  CALL   0A22
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
3BA0:  MOVFF  BC,F7
3BA4:  MOVFF  BB,F6
3BA8:  MOVFF  BA,F5
3BAC:  MOVFF  B9,F4
3BB0:  MOVLW  D7
3BB2:  MOVWF  xFB
3BB4:  MOVLW  A3
3BB6:  MOVWF  xFA
3BB8:  CLRF   xF9
3BBA:  MOVLW  81
3BBC:  MOVWF  xF8
3BBE:  CALL   1B8C
3BC2:  MOVFF  00,E0
3BC6:  MOVFF  01,E1
3BCA:  MOVFF  02,E2
3BCE:  MOVFF  03,E3
3BD2:  MOVLW  3E
3BD4:  MOVWF  FF6
3BD6:  MOVLW  08
3BD8:  MOVWF  FF7
3BDA:  MOVLW  08
3BDC:  MOVWF  xE4
3BDE:  CALL   126A
3BE2:  MOVLW  02
3BE4:  MOVWF  FE9
3BE6:  MOVFF  E3,E7
3BEA:  MOVFF  E2,E6
3BEE:  MOVFF  E1,E5
3BF2:  MOVFF  E0,E4
3BF6:  MOVWF  xE8
3BF8:  CALL   1D38
3BFC:  MOVLW  4B
3BFE:  MOVWF  FF6
3C00:  MOVLW  08
3C02:  MOVWF  FF7
3C04:  MOVLW  07
3C06:  MOVWF  xE4
3C08:  CALL   126A
....................       Saturacion=(CaidaPresion/0.24)*11; 
3C0C:  MOVFF  BC,F7
3C10:  MOVFF  BB,F6
3C14:  MOVFF  BA,F5
3C18:  MOVFF  B9,F4
3C1C:  MOVLW  8F
3C1E:  MOVWF  xFB
3C20:  MOVLW  C2
3C22:  MOVWF  xFA
3C24:  MOVLW  75
3C26:  MOVWF  xF9
3C28:  MOVLW  7C
3C2A:  MOVWF  xF8
3C2C:  CALL   15CC
3C30:  MOVFF  00,E0
3C34:  MOVFF  01,E1
3C38:  MOVFF  02,E2
3C3C:  MOVFF  03,E3
3C40:  MOVFF  03,F7
3C44:  MOVFF  02,F6
3C48:  MOVFF  01,F5
3C4C:  MOVFF  00,F4
3C50:  CLRF   xFB
3C52:  CLRF   xFA
3C54:  MOVLW  30
3C56:  MOVWF  xF9
3C58:  MOVLW  82
3C5A:  MOVWF  xF8
3C5C:  CALL   1B8C
3C60:  MOVFF  03,B8
3C64:  MOVFF  02,B7
3C68:  MOVFF  01,B6
3C6C:  MOVFF  00,B5
....................        
....................       if(Saturacion>11) 
3C70:  CLRF   xF7
3C72:  CLRF   xF6
3C74:  MOVLW  30
3C76:  MOVWF  xF5
3C78:  MOVLW  82
3C7A:  MOVWF  xF4
3C7C:  MOVFF  B8,FB
3C80:  MOVFF  B7,FA
3C84:  MOVFF  B6,F9
3C88:  MOVFF  B5,F8
3C8C:  CALL   0E42
3C90:  BNC   3C9E
....................       { 
....................          Saturacion=11; 
3C92:  CLRF   xB8
3C94:  CLRF   xB7
3C96:  MOVLW  30
3C98:  MOVWF  xB6
3C9A:  MOVLW  82
3C9C:  MOVWF  xB5
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
3C9E:  CLRF   41
3CA0:  MOVFF  B8,E3
3CA4:  MOVFF  B7,E2
3CA8:  MOVFF  B6,E1
3CAC:  MOVFF  B5,E0
3CB0:  CALL   2230
3CB4:  MOVFF  00,E0
3CB8:  MOVFF  01,E1
3CBC:  MOVFF  02,E2
3CC0:  MOVFF  03,E3
3CC4:  CLRF   xF9
3CC6:  MOVFF  41,F8
3CCA:  CALL   0B6E
3CCE:  MOVFF  03,F7
3CD2:  MOVFF  02,F6
3CD6:  MOVFF  01,F5
3CDA:  MOVFF  00,F4
3CDE:  MOVFF  E3,FB
3CE2:  MOVFF  E2,FA
3CE6:  MOVFF  E1,F9
3CEA:  MOVFF  E0,F8
3CEE:  CALL   0E42
3CF2:  BNC   3D10
....................       { 
....................          lcd_gotoxy(i+8,2); 
3CF4:  MOVLW  08
3CF6:  ADDWF  41,W
3CF8:  MOVWF  xE0
3CFA:  MOVWF  xF2
3CFC:  MOVLW  02
3CFE:  MOVWF  xF3
3D00:  CALL   0A22
....................          printf(lcd_putc,"Ñ"); 
3D04:  MOVLW  D1
3D06:  MOVWF  xF1
3D08:  CALL   0A8A
....................       } 
3D0C:  INCF   41,F
3D0E:  BRA    3CA0
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3D10:  MOVFF  B8,E3
3D14:  MOVFF  B7,E2
3D18:  MOVFF  B6,E1
3D1C:  MOVFF  B5,E0
3D20:  CALL   2230
3D24:  MOVFF  03,F7
3D28:  MOVFF  02,F6
3D2C:  MOVFF  01,F5
3D30:  MOVFF  00,F4
3D34:  CALL   1EBE
3D38:  MOVFF  01,41
3D3C:  MOVF   41,W
3D3E:  SUBLW  0A
3D40:  BNC   3D5E
....................       { 
....................          lcd_gotoxy(i+8,2); 
3D42:  MOVLW  08
3D44:  ADDWF  41,W
3D46:  MOVWF  xE0
3D48:  MOVWF  xF2
3D4A:  MOVLW  02
3D4C:  MOVWF  xF3
3D4E:  CALL   0A22
....................          printf(lcd_putc," "); 
3D52:  MOVLW  20
3D54:  MOVWF  xF1
3D56:  CALL   0A8A
....................       } 
3D5A:  INCF   41,F
3D5C:  BRA    3D3C
....................        
....................       lcd_gotoxy(9,3); 
3D5E:  MOVLW  09
3D60:  MOVWF  xF2
3D62:  MOVLW  03
3D64:  MOVWF  xF3
3D66:  CALL   0A22
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3D6A:  MOVLW  54
3D6C:  MOVWF  FF6
3D6E:  MOVLW  08
3D70:  MOVWF  FF7
3D72:  MOVLW  06
3D74:  MOVWF  xE4
3D76:  CALL   126A
3D7A:  MOVFF  3B,E0
3D7E:  MOVLW  03
3D80:  MOVWF  xE1
3D82:  CALL   1454
3D86:  MOVLW  3A
3D88:  MOVWF  xF1
3D8A:  CALL   0A8A
3D8E:  MOVFF  3C,E0
3D92:  MOVLW  01
3D94:  MOVWF  xE1
3D96:  CALL   1454
....................       EliminaRuido(); 
3D9A:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3D9E:  BTFSS  29.7
3DA0:  BRA    3E3A
....................    { 
....................       if(estadoalarma==1) 
3DA2:  BTFSS  2A.4
3DA4:  BRA    3E30
....................       { 
....................          printf(lcd_putc,"\f"); 
3DA6:  MOVLW  0C
3DA8:  MOVWF  xF1
3DAA:  CALL   0A8A
....................          lcd_gotoxy(1,2); 
3DAE:  MOVLW  01
3DB0:  MOVWF  xF2
3DB2:  MOVLW  02
3DB4:  MOVWF  xF3
3DB6:  CALL   0A22
....................          printf(lcd_putc,"  Temporizador  de  "); 
3DBA:  MOVLW  64
3DBC:  MOVWF  FF6
3DBE:  MOVLW  08
3DC0:  MOVWF  FF7
3DC2:  CALL   0AE8
....................          lcd_gotoxy(1,3); 
3DC6:  MOVLW  01
3DC8:  MOVWF  xF2
3DCA:  MOVLW  03
3DCC:  MOVWF  xF3
3DCE:  CALL   0A22
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3DD2:  MOVLW  7A
3DD4:  MOVWF  FF6
3DD6:  MOVLW  08
3DD8:  MOVWF  FF7
3DDA:  CALL   0AE8
....................          lcd_gotoxy(1,4); 
3DDE:  MOVLW  01
3DE0:  MOVWF  xF2
3DE2:  MOVLW  04
3DE4:  MOVWF  xF3
3DE6:  CALL   0A22
....................          printf(lcd_putc,"                    "); 
3DEA:  MOVLW  90
3DEC:  MOVWF  FF6
3DEE:  MOVLW  08
3DF0:  MOVWF  FF7
3DF2:  CALL   0AE8
....................          lcd_gotoxy(1,1); 
3DF6:  MOVLW  01
3DF8:  MOVWF  xF2
3DFA:  MOVWF  xF3
3DFC:  CALL   0A22
....................          printf(lcd_putc,"                    "); 
3E00:  MOVLW  A6
3E02:  MOVWF  FF6
3E04:  MOVLW  08
3E06:  MOVWF  FF7
3E08:  CALL   0AE8
....................          for(i=0;i<5;i++) 
3E0C:  CLRF   41
3E0E:  MOVF   41,W
3E10:  SUBLW  04
3E12:  BNC   3E30
....................          { 
....................             Buzzer_on; 
3E14:  BSF    F8B.0
3E16:  BCF    F94.0
....................             delay_ms(200); 
3E18:  MOVLW  C8
3E1A:  MOVWF  xF7
3E1C:  CALL   08F8
....................             Buzzer_off; 
3E20:  BCF    F8B.0
3E22:  BCF    F94.0
....................             delay_ms(200); 
3E24:  MOVLW  C8
3E26:  MOVWF  xF7
3E28:  CALL   08F8
....................          } 
3E2C:  INCF   41,F
3E2E:  BRA    3E0E
....................       } 
....................       tiempo_cumplido=0; 
3E30:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
3E32:  MOVLW  0C
3E34:  MOVWF  xF1
3E36:  CALL   0A8A
....................    } 
....................     
....................    if(CaidaPresion>=0.23) 
3E3A:  MOVLW  1F
3E3C:  MOVWF  xF7
3E3E:  MOVLW  85
3E40:  MOVWF  xF6
3E42:  MOVLW  6B
3E44:  MOVWF  xF5
3E46:  MOVLW  7C
3E48:  MOVWF  xF4
3E4A:  MOVFF  BC,FB
3E4E:  MOVFF  BB,FA
3E52:  MOVFF  BA,F9
3E56:  MOVFF  B9,F8
3E5A:  CALL   0E42
3E5E:  BC    3E62
3E60:  BNZ   3E68
....................    {  
....................       ActivaBuzzer=1; 
3E62:  MOVLW  01
3E64:  MOVWF  51
....................    } 
....................    else 
3E66:  BRA    3E6E
....................    { 
....................       ActivaBuzzer=0; 
3E68:  CLRF   51
....................       Buzzer_off; 
3E6A:  BCF    F8B.0
3E6C:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3E6E:  MOVLW  01
3E70:  MOVWF  xF2
3E72:  MOVLW  02
3E74:  MOVWF  xF3
3E76:  CALL   0A22
....................       printf(lcd_putc,"Filtro:"); 
3E7A:  MOVLW  BC
3E7C:  MOVWF  FF6
3E7E:  MOVLW  08
3E80:  MOVWF  FF7
3E82:  CALL   0AE8
....................        
....................       if(estadomv==1) 
3E86:  BTFSS  29.2
3E88:  BRA    3EA4
....................       { 
....................          lcd_gotoxy(1,4); 
3E8A:  MOVLW  01
3E8C:  MOVWF  xF2
3E8E:  MOVLW  04
3E90:  MOVWF  xF3
3E92:  CALL   0A22
....................          printf(lcd_putc,"Motor:ON ");       
3E96:  MOVLW  C4
3E98:  MOVWF  FF6
3E9A:  MOVLW  08
3E9C:  MOVWF  FF7
3E9E:  CALL   0AE8
....................       } 
....................       else 
3EA2:  BRA    3EBC
....................       { 
....................          lcd_gotoxy(1,4); 
3EA4:  MOVLW  01
3EA6:  MOVWF  xF2
3EA8:  MOVLW  04
3EAA:  MOVWF  xF3
3EAC:  CALL   0A22
....................          printf(lcd_putc,"Motor:OFF"); 
3EB0:  MOVLW  CE
3EB2:  MOVWF  FF6
3EB4:  MOVLW  08
3EB6:  MOVWF  FF7
3EB8:  CALL   0AE8
....................       } 
....................        
....................       if(estadouv==1) 
3EBC:  BTFSS  29.0
3EBE:  BRA    3EDA
....................       { 
....................          lcd_gotoxy(13,4); 
3EC0:  MOVLW  0D
3EC2:  MOVWF  xF2
3EC4:  MOVLW  04
3EC6:  MOVWF  xF3
3EC8:  CALL   0A22
....................          printf(lcd_putc,"UV:ON "); 
3ECC:  MOVLW  D8
3ECE:  MOVWF  FF6
3ED0:  MOVLW  08
3ED2:  MOVWF  FF7
3ED4:  CALL   0AE8
....................       } 
....................       else 
3ED8:  BRA    3EF2
....................       {          
....................          lcd_gotoxy(13,4); 
3EDA:  MOVLW  0D
3EDC:  MOVWF  xF2
3EDE:  MOVLW  04
3EE0:  MOVWF  xF3
3EE2:  CALL   0A22
....................          printf(lcd_putc,"UV:OFF"); 
3EE6:  MOVLW  E0
3EE8:  MOVWF  FF6
3EEA:  MOVLW  08
3EEC:  MOVWF  FF7
3EEE:  CALL   0AE8
....................       } 
....................        
....................       if(estadofl==1) 
3EF2:  BTFSS  29.1
3EF4:  BRA    3F10
....................       { 
....................          lcd_gotoxy(1,3); 
3EF6:  MOVLW  01
3EF8:  MOVWF  xF2
3EFA:  MOVLW  03
3EFC:  MOVWF  xF3
3EFE:  CALL   0A22
....................          printf(lcd_putc,"Luz:ON "); 
3F02:  MOVLW  E8
3F04:  MOVWF  FF6
3F06:  MOVLW  08
3F08:  MOVWF  FF7
3F0A:  CALL   0AE8
....................       } 
....................       else 
3F0E:  BRA    3F28
....................       { 
....................          lcd_gotoxy(1,3); 
3F10:  MOVLW  01
3F12:  MOVWF  xF2
3F14:  MOVLW  03
3F16:  MOVWF  xF3
3F18:  CALL   0A22
....................          printf(lcd_putc,"Luz:OFF"); 
3F1C:  MOVLW  F0
3F1E:  MOVWF  FF6
3F20:  MOVLW  08
3F22:  MOVWF  FF7
3F24:  CALL   0AE8
....................       }  
....................       Cambio=OFF; 
3F28:  BCF    2B.3
....................    //} 
....................     
....................    if(estadomv==1){  
3F2A:  BTFSS  29.2
3F2C:  BRA    3F58
....................       if(flagmv==0){ 
3F2E:  BTFSC  2B.4
3F30:  BRA    3F52
....................          VelMotor=6; 
3F32:  MOVLW  06
3F34:  MOVWF  xC8
....................          lcd_init();delay_ms(200);lcd_init(); 
3F36:  CALL   0988
3F3A:  MOVLW  C8
3F3C:  MOVWF  xF7
3F3E:  CALL   08F8
3F42:  CALL   0988
....................          flagmv=1;Cambio=ON;delay_ms(200); 
3F46:  BSF    2B.4
3F48:  BSF    2B.3
3F4A:  MOVLW  C8
3F4C:  MOVWF  xF7
3F4E:  CALL   08F8
....................       } 
....................       VelMotor=Vel1; 
3F52:  MOVFF  56,C8
....................    }else{ 
3F56:  BRA    3F72
....................       VelMotor=0; 
3F58:  CLRF   xC8
....................       if(flagmv==1){ 
3F5A:  BTFSS  2B.4
3F5C:  BRA    3F72
....................          lcd_init();delay_ms(200);lcd_init(); 
3F5E:  CALL   0988
3F62:  MOVLW  C8
3F64:  MOVWF  xF7
3F66:  CALL   08F8
3F6A:  CALL   0988
....................          flagmv=0;Cambio=ON; 
3F6E:  BCF    2B.4
3F70:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
3F72:  BTFSS  29.1
3F74:  BRA    3F94
....................    { 
....................       Luz_Blanca_on; 
3F76:  BCF    F8A.4
3F78:  BCF    F93.4
....................       if(flagfl==0) 
3F7A:  BTFSC  2A.2
3F7C:  BRA    3F92
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
3F7E:  CALL   0988
3F82:  MOVLW  C8
3F84:  MOVWF  xF7
3F86:  CALL   08F8
3F8A:  CALL   0988
....................          flagfl=1;Cambio=ON; 
3F8E:  BSF    2A.2
3F90:  BSF    2B.3
....................       } 
....................    } 
....................    else 
3F92:  BRA    3FB0
....................    { 
....................       Luz_Blanca_off; 
3F94:  BSF    F8A.4
3F96:  BCF    F93.4
....................       if(flagfl==1) 
3F98:  BTFSS  2A.2
3F9A:  BRA    3FB0
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
3F9C:  CALL   0988
3FA0:  MOVLW  C8
3FA2:  MOVWF  xF7
3FA4:  CALL   08F8
3FA8:  CALL   0988
....................          flagfl=0;Cambio=ON; 
3FAC:  BCF    2A.2
3FAE:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    //if(VIDRIODN){ 
....................       //estadomv=0; 
....................       //VelMotor=0; 
....................       //estadofl=0; 
....................       //Luz_Blanca_off; 
....................       if(estadouv==1){ 
3FB0:  BTFSS  29.0
3FB2:  BRA    3FE2
....................          Luz_UV_on; 
3FB4:  BCF    F8A.3
3FB6:  BCF    F93.3
....................          tiempo_cumplido=0;       
3FB8:  BCF    29.7
....................          estadomv=0; 
3FBA:  BCF    29.2
....................          VelMotor=0; 
3FBC:  CLRF   xC8
....................          estadofl=0; 
3FBE:  BCF    29.1
....................          Luz_Blanca_off; 
3FC0:  BSF    F8A.4
3FC2:  BCF    F93.4
....................          if(flaguv==0){ 
3FC4:  BTFSC  2A.1
3FC6:  BRA    3FE0
....................             lcd_init();delay_ms(200);lcd_init(); 
3FC8:  CALL   0988
3FCC:  MOVLW  C8
3FCE:  MOVWF  xF7
3FD0:  CALL   08F8
3FD4:  CALL   0988
....................             flaguv=1;guardaruv=1;Cambio=ON; 
3FD8:  BSF    2A.1
3FDA:  MOVLW  01
3FDC:  MOVWF  44
3FDE:  BSF    2B.3
....................          } 
....................       }else{ 
3FE0:  BRA    4004
....................          estadouv=0; 
3FE2:  BCF    29.0
....................          Luz_UV_off; 
3FE4:  BSF    F8A.3
3FE6:  BCF    F93.3
....................          if(flaguv==1){ 
3FE8:  BTFSS  2A.1
3FEA:  BRA    4004
....................             lcd_init();delay_ms(200);lcd_init(); 
3FEC:  CALL   0988
3FF0:  MOVLW  C8
3FF2:  MOVWF  xF7
3FF4:  CALL   08F8
3FF8:  CALL   0988
....................             flaguv=0;guardaruv=1;Cambio=ON; 
3FFC:  BCF    2A.1
3FFE:  MOVLW  01
4000:  MOVWF  44
4002:  BSF    2B.3
....................          } 
....................       } 
....................    //}else{ 
....................    //   estadouv=0; 
....................    //   Luz_UV_off; 
....................    //   if(flaguv==1){ 
....................          //lcd_init();delay_ms(200);lcd_init(); 
....................    //      flaguv=0;guardaruv=1;Cambio=ON; 
....................    //   } 
....................    //} 
....................     
....................    if(DOWN){//Si oprime hacia Abajo 
4004:  BSF    F96.0
4006:  BTFSC  F84.0
4008:  BRA    4042
....................       Flanco=1; 
400A:  BSF    29.3
....................       if(!flagdn){ 
400C:  BTFSC  2B.1
400E:  BRA    4040
....................          delay_ms(500); 
4010:  MOVLW  02
4012:  MOVWF  xE0
4014:  MOVLW  FA
4016:  MOVWF  xF7
4018:  CALL   08F8
401C:  DECFSZ xE0,F
401E:  BRA    4014
....................          if(DOWN){ 
4020:  BSF    F96.0
4022:  BTFSC  F84.0
4024:  BRA    402A
....................             flagdn=1; 
4026:  BSF    2B.1
....................          }else{ 
4028:  BRA    4040
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
402A:  BTG    29.1
402C:  BSF    29.3
402E:  MOVLW  02
4030:  MOVWF  xE0
4032:  MOVLW  96
4034:  MOVWF  xF7
4036:  CALL   08F8
403A:  DECFSZ xE0,F
403C:  BRA    4032
403E:  BSF    2B.3
....................          } 
....................       } 
....................    }else{ 
4040:  BRA    4046
....................       flagdn=0; 
4042:  BCF    2B.1
....................       Flanco=0; 
4044:  BCF    29.3
....................    }  
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
4046:  BSF    F96.1
4048:  BTFSC  F84.1
404A:  BRA    4076
....................    { 
....................       delay_ms(20); 
404C:  MOVLW  14
404E:  MOVWF  xF7
4050:  CALL   08F8
....................       if(RIGHT){ 
4054:  BSF    F96.1
4056:  BTFSC  F84.1
4058:  BRA    4074
....................          if(Flanco2 == 0) 
405A:  BTFSC  29.5
405C:  BRA    4074
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
405E:  BTG    29.2
4060:  BSF    29.4
4062:  MOVLW  02
4064:  MOVWF  xE0
4066:  MOVLW  96
4068:  MOVWF  xF7
406A:  CALL   08F8
406E:  DECFSZ xE0,F
4070:  BRA    4066
4072:  BSF    2B.3
....................          } 
....................       } 
....................    } 
....................    else 
4074:  BRA    4078
....................    { 
....................       Flanco2 = 0; 
4076:  BCF    29.5
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
4078:  BSF    F96.2
407A:  BTFSC  F84.2
407C:  BRA    4098
....................    { 
....................       delay_ms(20); 
407E:  MOVLW  14
4080:  MOVWF  xF7
4082:  CALL   08F8
....................       if(IZQU){ 
4086:  BSF    F96.2
4088:  BTFSC  F84.2
408A:  BRA    4098
....................          delay_ms(150);  
408C:  MOVLW  96
408E:  MOVWF  xF7
4090:  CALL   08F8
....................          //estadouv=!estadouv; 
....................          estadouv=0; 
4094:  BCF    29.0
....................          Cambio=ON; 
4096:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(UP){// Si oprime Arriba 
4098:  BSF    F92.5
409A:  BTFSC  F80.5
409C:  BRA    40EE
....................       Flanco1=1; 
409E:  BSF    29.4
....................       if(!flagup){ 
40A0:  BTFSC  2B.2
40A2:  BRA    40EC
....................          delay_ms(500); 
40A4:  MOVLW  02
40A6:  MOVWF  xE0
40A8:  MOVLW  FA
40AA:  MOVWF  xF7
40AC:  CALL   08F8
40B0:  DECFSZ xE0,F
40B2:  BRA    40A8
....................          if(UP){ 
40B4:  BSF    F92.5
40B6:  BTFSC  F80.5
40B8:  BRA    40BE
....................             flagup=1; 
40BA:  BSF    2B.2
....................          }else{ 
40BC:  BRA    40EC
....................             delay_ms(200); 
40BE:  MOVLW  C8
40C0:  MOVWF  xF7
40C2:  CALL   08F8
....................             printf(lcd_putc,"\f"); 
40C6:  MOVLW  0C
40C8:  MOVWF  xF1
40CA:  CALL   0A8A
....................             delay_ms(300); 
40CE:  MOVLW  02
40D0:  MOVWF  xE0
40D2:  MOVLW  96
40D4:  MOVWF  xF7
40D6:  CALL   08F8
40DA:  DECFSZ xE0,F
40DC:  BRA    40D2
....................             Menu=1;  
40DE:  MOVLW  01
40E0:  MOVWF  2C
....................             paso=0; 
40E2:  CLRF   45
....................             Flecha=2; 
40E4:  MOVLW  02
40E6:  MOVWF  30
....................             Flecha2=2; 
40E8:  MOVWF  32
....................             Cambio=ON; 
40EA:  BSF    2B.3
....................          } 
....................       } 
....................    }else{ 
40EC:  BRA    40F2
....................       flagup=0; 
40EE:  BCF    2B.2
....................       Flanco1=0; 
40F0:  BCF    29.4
....................    } 
....................     
....................    if(flagup){ 
40F2:  BTFSS  2B.2
40F4:  BRA    40FC
....................       subirVidrio(); 
40F6:  GOTO   2246
....................    }else{ 
40FA:  BRA    410A
....................       if(flagdn){ 
40FC:  BTFSS  2B.1
40FE:  BRA    4106
....................          bajarVidrio(); 
4100:  GOTO   226C
....................       }else{ 
4104:  BRA    410A
....................          detenerVidrio(); 
4106:  GOTO   2292
....................       } 
....................    } 
....................        
....................    if(guardaruv==1) 
410A:  DECFSZ 44,W
410C:  BRA    41D8
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
410E:  MOVLW  07
4110:  MOVWF  FA9
4112:  MOVFF  35,FA8
4116:  BCF    FA6.6
4118:  BCF    FA6.7
411A:  BSF    FA6.2
411C:  MOVF   FF2,W
411E:  MOVWF  00
4120:  BCF    FF2.6
4122:  BCF    FF2.7
4124:  MOVLB  F
4126:  MOVLW  55
4128:  MOVWF  FA7
412A:  MOVLW  AA
412C:  MOVWF  FA7
412E:  BSF    FA6.1
4130:  BTFSC  FA6.1
4132:  BRA    4130
4134:  BCF    FA6.2
4136:  MOVF   00,W
4138:  IORWF  FF2,F
413A:  MOVLW  08
413C:  MOVWF  FA9
413E:  MOVFF  36,FA8
4142:  BCF    FA6.6
4144:  BCF    FA6.7
4146:  BSF    FA6.2
4148:  MOVF   FF2,W
414A:  MOVWF  00
414C:  BCF    FF2.6
414E:  BCF    FF2.7
4150:  MOVLW  55
4152:  MOVWF  FA7
4154:  MOVLW  AA
4156:  MOVWF  FA7
4158:  BSF    FA6.1
415A:  BTFSC  FA6.1
415C:  BRA    415A
415E:  BCF    FA6.2
4160:  MOVF   00,W
4162:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
4164:  MOVFF  59,37
....................       horasH=make8(horas,1); 
4168:  MOVFF  5A,38
....................       write_eeprom(9,horasL); 
416C:  MOVLW  09
416E:  MOVWF  FA9
4170:  MOVFF  37,FA8
4174:  BCF    FA6.6
4176:  BCF    FA6.7
4178:  BSF    FA6.2
417A:  MOVFF  FF2,00
417E:  BCF    FF2.6
4180:  BCF    FF2.7
4182:  MOVLW  55
4184:  MOVWF  FA7
4186:  MOVLW  AA
4188:  MOVWF  FA7
418A:  BSF    FA6.1
418C:  BTFSC  FA6.1
418E:  BRA    418C
4190:  BCF    FA6.2
4192:  MOVF   00,W
4194:  IORWF  FF2,F
....................       delay_ms(20); 
4196:  MOVLW  14
4198:  MOVLB  0
419A:  MOVWF  xF7
419C:  CALL   08F8
....................       write_eeprom(10,horasH); 
41A0:  MOVLW  0A
41A2:  MOVWF  FA9
41A4:  MOVFF  38,FA8
41A8:  BCF    FA6.6
41AA:  BCF    FA6.7
41AC:  BSF    FA6.2
41AE:  MOVF   FF2,W
41B0:  MOVWF  00
41B2:  BCF    FF2.6
41B4:  BCF    FF2.7
41B6:  MOVLB  F
41B8:  MOVLW  55
41BA:  MOVWF  FA7
41BC:  MOVLW  AA
41BE:  MOVWF  FA7
41C0:  BSF    FA6.1
41C2:  BTFSC  FA6.1
41C4:  BRA    41C2
41C6:  BCF    FA6.2
41C8:  MOVF   00,W
41CA:  IORWF  FF2,F
....................       delay_ms(20); 
41CC:  MOVLW  14
41CE:  MOVLB  0
41D0:  MOVWF  xF7
41D2:  CALL   08F8
....................       guardaruv=0; 
41D6:  CLRF   44
....................    } 
....................     
....................    if(segundos>=60) 
41D8:  MOVF   35,W
41DA:  SUBLW  3B
41DC:  BC    41E2
....................    { 
....................       segundos=0;minutos++; 
41DE:  CLRF   35
41E0:  INCF   36,F
....................    } 
....................    if(minutos==60) 
41E2:  MOVF   36,W
41E4:  SUBLW  3C
41E6:  BNZ   41F0
....................    { 
....................       minutos=0;horas++; 
41E8:  CLRF   36
41EA:  INCF   59,F
41EC:  BTFSC  FD8.2
41EE:  INCF   5A,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
41F0:  MOVF   43,W
41F2:  SUBLW  3B
41F4:  BC    420E
....................    { 
....................       printf(lcd_putc,"\f"); 
41F6:  MOVLW  0C
41F8:  MOVWF  xF1
41FA:  CALL   0A8A
....................       lcd_init(); 
41FE:  CALL   0988
....................       delay_ms(200); 
4202:  MOVLW  C8
4204:  MOVWF  xF7
4206:  CALL   08F8
....................       tiemporeset=0; 
420A:  CLRF   43
....................       Cambio=ON; 
420C:  BSF    2B.3
....................    }    
....................    } 
420E:  GOTO   246A
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
4212:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: CE3C   IESO FCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
