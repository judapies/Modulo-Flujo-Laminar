CCS PCH C Compiler, Version 4.104, 5967               22-sept.-20 16:31

               Filename: D:\Laboratorio\Modulo Flujo Laminar\2020\JPMOD48-RD Alpha & Omega #0045883XX OP2020280\Firmware 1.1.0\CabinaCFLH.lst

               ROM used: 18766 bytes (57%)
                         Largest free fragment is 14000
               RAM used: 234 (15%) at main() level
                         278 (18%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   287A
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   02F2
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   02C0
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... //#priority TIMER2 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
092A:  CLRF   FEA
092C:  MOVLW  FC
092E:  MOVWF  FE9
0930:  MOVF   FEF,W
0932:  BZ    094E
0934:  MOVLW  06
0936:  MOVWF  01
0938:  CLRF   00
093A:  DECFSZ 00,F
093C:  BRA    093A
093E:  DECFSZ 01,F
0940:  BRA    0938
0942:  MOVLW  7B
0944:  MOVWF  00
0946:  DECFSZ 00,F
0948:  BRA    0946
094A:  DECFSZ FEF,F
094C:  BRA    0934
094E:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
24AA:  BCF    xF9.0
....................    y = x; 
24AC:  MOVFF  ED,F2
24B0:  MOVFF  EC,F1
24B4:  MOVFF  EB,F0
24B8:  MOVFF  EA,EF
....................  
....................    if (x < 0) 
24BC:  MOVFF  ED,FD
24C0:  MOVFF  EC,FC
24C4:  MOVFF  EB,FB
24C8:  MOVFF  EA,FA
24CC:  MOVLB  1
24CE:  CLRF   x01
24D0:  CLRF   x00
24D2:  MOVLB  0
24D4:  CLRF   xFF
24D6:  CLRF   xFE
24D8:  CALL   0E6A
24DC:  BNC   24E6
....................    { 
....................       s = 1; 
24DE:  BSF    xF9.0
....................       y = -y; 
24E0:  MOVF   xF0,W
24E2:  XORLW  80
24E4:  MOVWF  xF0
....................    } 
....................  
....................    if (y <= 32768.0) 
24E6:  MOVFF  F2,FD
24EA:  MOVFF  F1,FC
24EE:  MOVFF  F0,FB
24F2:  MOVFF  EF,FA
24F6:  MOVLB  1
24F8:  CLRF   x01
24FA:  CLRF   x00
24FC:  MOVLB  0
24FE:  CLRF   xFF
2500:  MOVLW  8E
2502:  MOVWF  xFE
2504:  CALL   0E6A
2508:  BC    250C
250A:  BNZ   253C
....................   res = (float32)(unsigned int16)y; 
250C:  MOVFF  F2,FD
2510:  MOVFF  F1,FC
2514:  MOVFF  F0,FB
2518:  MOVFF  EF,FA
251C:  RCALL  2472
251E:  MOVFF  02,FF
2522:  MOVFF  01,FE
2526:  CALL   0ABA
252A:  MOVFF  03,F6
252E:  MOVFF  02,F5
2532:  MOVFF  01,F4
2536:  MOVFF  00,F3
....................  
....................  else if (y < 10000000.0) 
253A:  BRA    26D6
253C:  MOVFF  F2,FD
2540:  MOVFF  F1,FC
2544:  MOVFF  F0,FB
2548:  MOVFF  EF,FA
254C:  MOVLW  80
254E:  MOVLB  1
2550:  MOVWF  x01
2552:  MOVLW  96
2554:  MOVWF  x00
2556:  MOVLW  18
2558:  MOVLB  0
255A:  MOVWF  xFF
255C:  MOVLW  96
255E:  MOVWF  xFE
2560:  CALL   0E6A
2564:  BTFSS  FD8.0
2566:  BRA    26C6
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
2568:  MOVFF  F2,FE
256C:  MOVFF  F1,FD
2570:  MOVFF  F0,FC
2574:  MOVFF  EF,FB
2578:  MOVLB  1
257A:  CLRF   x02
257C:  CLRF   x01
257E:  CLRF   x00
2580:  MOVLW  8E
2582:  MOVLB  0
2584:  MOVWF  xFF
2586:  CALL   1B98
258A:  MOVFF  03,FD
258E:  MOVFF  02,FC
2592:  MOVFF  01,FB
2596:  MOVFF  00,FA
259A:  RCALL  2472
259C:  MOVFF  02,F8
25A0:  MOVFF  01,F7
....................       y = 32768.0*(y/32768.0 - (float32)l); 
25A4:  MOVFF  F2,FE
25A8:  MOVFF  F1,FD
25AC:  MOVFF  F0,FC
25B0:  MOVFF  EF,FB
25B4:  MOVLB  1
25B6:  CLRF   x02
25B8:  CLRF   x01
25BA:  CLRF   x00
25BC:  MOVLW  8E
25BE:  MOVLB  0
25C0:  MOVWF  xFF
25C2:  CALL   1B98
25C6:  MOVFF  00,FA
25CA:  MOVFF  01,FB
25CE:  MOVFF  02,FC
25D2:  MOVFF  03,FD
25D6:  MOVFF  F8,FF
25DA:  MOVFF  F7,FE
25DE:  CALL   0ABA
25E2:  BSF    FD8.1
25E4:  MOVFF  FD,101
25E8:  MOVFF  FC,100
25EC:  MOVFF  FB,FF
25F0:  MOVFF  FA,FE
25F4:  MOVFF  03,105
25F8:  MOVFF  02,104
25FC:  MOVFF  01,103
2600:  MOVFF  00,102
2604:  CALL   1D14
2608:  CLRF   xFD
260A:  CLRF   xFC
260C:  CLRF   xFB
260E:  MOVLW  8E
2610:  MOVWF  xFA
2612:  MOVFF  03,101
2616:  MOVFF  02,100
261A:  MOVFF  01,FF
261E:  MOVFF  00,FE
2622:  CALL   1A7C
2626:  MOVFF  03,F2
262A:  MOVFF  02,F1
262E:  MOVFF  01,F0
2632:  MOVFF  00,EF
....................   res = 32768.0*(float32)l; 
2636:  MOVFF  F8,FF
263A:  MOVFF  F7,FE
263E:  CALL   0ABA
2642:  CLRF   xFD
2644:  CLRF   xFC
2646:  CLRF   xFB
2648:  MOVLW  8E
264A:  MOVWF  xFA
264C:  MOVFF  03,101
2650:  MOVFF  02,100
2654:  MOVFF  01,FF
2658:  MOVFF  00,FE
265C:  CALL   1A7C
2660:  MOVFF  03,F6
2664:  MOVFF  02,F5
2668:  MOVFF  01,F4
266C:  MOVFF  00,F3
....................   res += (float32)(unsigned int16)y; 
2670:  MOVFF  F2,FD
2674:  MOVFF  F1,FC
2678:  MOVFF  F0,FB
267C:  MOVFF  EF,FA
2680:  RCALL  2472
2682:  MOVFF  02,FF
2686:  MOVFF  01,FE
268A:  CALL   0ABA
268E:  BCF    FD8.1
2690:  MOVFF  F6,101
2694:  MOVFF  F5,100
2698:  MOVFF  F4,FF
269C:  MOVFF  F3,FE
26A0:  MOVFF  03,105
26A4:  MOVFF  02,104
26A8:  MOVFF  01,103
26AC:  MOVFF  00,102
26B0:  CALL   1D14
26B4:  MOVFF  03,F6
26B8:  MOVFF  02,F5
26BC:  MOVFF  01,F4
26C0:  MOVFF  00,F3
....................  } 
....................  
....................  else 
26C4:  BRA    26D6
....................   res = y; 
26C6:  MOVFF  F2,F6
26CA:  MOVFF  F1,F5
26CE:  MOVFF  F0,F4
26D2:  MOVFF  EF,F3
....................  
....................  y = y - (float32)(unsigned int16)y; 
26D6:  MOVFF  F2,FD
26DA:  MOVFF  F1,FC
26DE:  MOVFF  F0,FB
26E2:  MOVFF  EF,FA
26E6:  RCALL  2472
26E8:  MOVFF  02,FF
26EC:  MOVFF  01,FE
26F0:  CALL   0ABA
26F4:  BSF    FD8.1
26F6:  MOVFF  F2,101
26FA:  MOVFF  F1,100
26FE:  MOVFF  F0,FF
2702:  MOVFF  EF,FE
2706:  MOVFF  03,105
270A:  MOVFF  02,104
270E:  MOVFF  01,103
2712:  MOVFF  00,102
2716:  CALL   1D14
271A:  MOVFF  03,F2
271E:  MOVFF  02,F1
2722:  MOVFF  01,F0
2726:  MOVFF  00,EF
....................  
....................  if (s) 
272A:  BTFSS  xF9.0
272C:  BRA    2734
....................   res = -res; 
272E:  MOVF   xF4,W
2730:  XORLW  80
2732:  MOVWF  xF4
....................  
....................  if (y != 0) 
2734:  MOVFF  F2,FD
2738:  MOVFF  F1,FC
273C:  MOVFF  F0,FB
2740:  MOVFF  EF,FA
2744:  MOVLB  1
2746:  CLRF   x01
2748:  CLRF   x00
274A:  MOVLB  0
274C:  CLRF   xFF
274E:  CLRF   xFE
2750:  CALL   0E6A
2754:  BZ    27CE
....................  { 
....................   if (s == 1 && n == 0) 
2756:  BTFSS  xF9.0
2758:  BRA    2792
275A:  MOVF   xEE,F
275C:  BNZ   2792
....................    res -= 1.0; 
275E:  BSF    FD8.1
2760:  MOVFF  F6,101
2764:  MOVFF  F5,100
2768:  MOVFF  F4,FF
276C:  MOVFF  F3,FE
2770:  MOVLB  1
2772:  CLRF   x05
2774:  CLRF   x04
2776:  CLRF   x03
2778:  MOVLW  7F
277A:  MOVWF  x02
277C:  MOVLB  0
277E:  CALL   1D14
2782:  MOVFF  03,F6
2786:  MOVFF  02,F5
278A:  MOVFF  01,F4
278E:  MOVFF  00,F3
....................  
....................   if (s == 0 && n == 1) 
2792:  BTFSC  xF9.0
2794:  BRA    27CE
2796:  DECFSZ xEE,W
2798:  BRA    27CE
....................    res += 1.0; 
279A:  BCF    FD8.1
279C:  MOVFF  F6,101
27A0:  MOVFF  F5,100
27A4:  MOVFF  F4,FF
27A8:  MOVFF  F3,FE
27AC:  MOVLB  1
27AE:  CLRF   x05
27B0:  CLRF   x04
27B2:  CLRF   x03
27B4:  MOVLW  7F
27B6:  MOVWF  x02
27B8:  MOVLB  0
27BA:  CALL   1D14
27BE:  MOVFF  03,F6
27C2:  MOVFF  02,F5
27C6:  MOVFF  01,F4
27CA:  MOVFF  00,F3
....................  } 
....................  if (x == 0) 
27CE:  MOVFF  ED,FD
27D2:  MOVFF  EC,FC
27D6:  MOVFF  EB,FB
27DA:  MOVFF  EA,FA
27DE:  MOVLB  1
27E0:  CLRF   x01
27E2:  CLRF   x00
27E4:  MOVLB  0
27E6:  CLRF   xFF
27E8:  CLRF   xFE
27EA:  CALL   0E6A
27EE:  BNZ   27F8
....................     res = 0; 
27F0:  CLRF   xF6
27F2:  CLRF   xF5
27F4:  CLRF   xF4
27F6:  CLRF   xF3
....................  
....................  return (res); 
27F8:  MOVFF  F3,00
27FC:  MOVFF  F4,01
2800:  MOVFF  F5,02
2804:  MOVFF  F6,03
.................... } 
2808:  GOTO   2820 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
280C:  MOVFF  E9,ED
2810:  MOVFF  E8,EC
2814:  MOVFF  E7,EB
2818:  MOVFF  E6,EA
281C:  CLRF   xEE
281E:  BRA    24AA
.................... } 
2820:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
0978:  MOVLW  F0
097A:  MOVWF  F95
....................       lcd.rw = 1; 
097C:  BSF    F83.2
....................       delay_cycles(30);//30 
097E:  MOVLW  09
0980:  MOVWF  00
0982:  DECFSZ 00,F
0984:  BRA    0982
0986:  BRA    0988
....................       lcd.enable = 1; 
0988:  BSF    F83.3
....................       delay_cycles(30);//30 
098A:  MOVLW  09
098C:  MOVWF  00
098E:  DECFSZ 00,F
0990:  BRA    098E
0992:  BRA    0994
....................       high = lcd.data; 
0994:  SWAPF  F83,W
0996:  ANDLW  0F
0998:  MOVWF  xFE
....................       lcd.enable = 0; 
099A:  BCF    F83.3
....................       delay_cycles(30);//30 
099C:  MOVLW  09
099E:  MOVWF  00
09A0:  DECFSZ 00,F
09A2:  BRA    09A0
09A4:  BRA    09A6
....................       lcd.enable = 1; 
09A6:  BSF    F83.3
....................       delay_us(30);//30 
09A8:  MOVLW  31
09AA:  MOVWF  00
09AC:  DECFSZ 00,F
09AE:  BRA    09AC
09B0:  BRA    09B2
....................       low = lcd.data; 
09B2:  SWAPF  F83,W
09B4:  ANDLW  0F
09B6:  MOVWF  xFD
....................       lcd.enable = 0; 
09B8:  BCF    F83.3
....................       set_tris_d(LCD_WRITE); 
09BA:  MOVLW  00
09BC:  MOVWF  F95
....................       return( (high<<4) | low); 
09BE:  SWAPF  xFE,W
09C0:  MOVWF  00
09C2:  MOVLW  F0
09C4:  ANDWF  00,F
09C6:  MOVF   00,W
09C8:  IORWF  xFD,W
09CA:  MOVWF  01
.................... } 
09CC:  GOTO   09D4 (RETURN)
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0950:  SWAPF  xFE,W
0952:  ANDLW  F0
0954:  MOVWF  00
0956:  MOVLW  0F
0958:  ANDWF  F83,W
095A:  IORWF  00,W
095C:  MOVWF  F83
....................       delay_cycles(30);//30 
095E:  MOVLW  09
0960:  MOVWF  00
0962:  DECFSZ 00,F
0964:  BRA    0962
0966:  BRA    0968
....................       lcd.enable = 1; 
0968:  BSF    F83.3
....................       delay_us(55);//55 
096A:  MOVLW  5B
096C:  MOVWF  00
096E:  DECFSZ 00,F
0970:  BRA    096E
0972:  NOP   
....................       lcd.enable = 0; 
0974:  BCF    F83.3
.................... } 
0976:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
09D0:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7)); 
09D2:  BRA    0978
09D4:  MOVFF  01,FD
09D8:  BTFSC  01.7
09DA:  BRA    09D2
....................       //delay_ms(1); 
....................       lcd.rs = address; 
09DC:  BTFSS  xFB.0
09DE:  BCF    F83.1
09E0:  BTFSC  xFB.0
09E2:  BSF    F83.1
....................       delay_cycles(30);//30 
09E4:  MOVLW  09
09E6:  MOVWF  00
09E8:  DECFSZ 00,F
09EA:  BRA    09E8
09EC:  BRA    09EE
....................       lcd.rw = 0; 
09EE:  BCF    F83.2
....................       delay_cycles(30);//30 
09F0:  MOVLW  09
09F2:  MOVWF  00
09F4:  DECFSZ 00,F
09F6:  BRA    09F4
09F8:  BRA    09FA
....................       lcd.enable = 0; 
09FA:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
09FC:  SWAPF  xFC,W
09FE:  MOVWF  xFD
0A00:  MOVLW  0F
0A02:  ANDWF  xFD,F
0A04:  MOVFF  FD,FE
0A08:  RCALL  0950
....................       lcd_send_nibble(n & 0xf); 
0A0A:  MOVF   xFC,W
0A0C:  ANDLW  0F
0A0E:  MOVWF  xFD
0A10:  MOVWF  xFE
0A12:  RCALL  0950
.................... } 
0A14:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0A16:  MOVLW  00
0A18:  MOVWF  F95
....................     lcd.rs = 0; 
0A1A:  BCF    F83.1
....................     lcd.rw = 0; 
0A1C:  BCF    F83.2
....................     lcd.enable = 0; 
0A1E:  BCF    F83.3
....................     delay_ms(15); 
0A20:  MOVLW  0F
0A22:  MOVWF  xFC
0A24:  RCALL  092A
....................     for(i=1;i<=3;++i) { 
0A26:  MOVLW  01
0A28:  MOVWF  xE6
0A2A:  MOVF   xE6,W
0A2C:  SUBLW  03
0A2E:  BNC   0A40
....................        lcd_send_nibble(3); 
0A30:  MOVLW  03
0A32:  MOVWF  xFE
0A34:  RCALL  0950
....................        delay_ms(5); 
0A36:  MOVLW  05
0A38:  MOVWF  xFC
0A3A:  RCALL  092A
....................     } 
0A3C:  INCF   xE6,F
0A3E:  BRA    0A2A
....................     lcd_send_nibble(2); 
0A40:  MOVLW  02
0A42:  MOVWF  xFE
0A44:  RCALL  0950
....................     for(i=0;i<=3;++i) 
0A46:  CLRF   xE6
0A48:  MOVF   xE6,W
0A4A:  SUBLW  03
0A4C:  BNC   0A72
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0A4E:  CLRF   03
0A50:  MOVF   xE6,W
0A52:  MOVFF  FF2,E7
0A56:  BCF    FF2.6
0A58:  BCF    FF2.7
0A5A:  CALL   0140
0A5E:  BTFSC  xE7.6
0A60:  BSF    FF2.6
0A62:  BTFSC  xE7.7
0A64:  BSF    FF2.7
0A66:  MOVWF  xE7
0A68:  CLRF   xFB
0A6A:  MOVWF  xFC
0A6C:  RCALL  09D0
0A6E:  INCF   xE6,F
0A70:  BRA    0A48
.................... } 
0A72:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
1442:  MOVLW  01
1444:  SUBWF  xF9,W
1446:  ADDLW  FC
1448:  BC    1468
144A:  ADDLW  04
144C:  GOTO   147A
....................      case 1 : address=0x80;break; 
1450:  MOVLW  80
1452:  MOVWF  xFA
1454:  BRA    1468
....................      case 2 : address=0xc0;break; 
1456:  MOVLW  C0
1458:  MOVWF  xFA
145A:  BRA    1468
....................      case 3 : address=0x94;break; 
145C:  MOVLW  94
145E:  MOVWF  xFA
1460:  BRA    1468
....................      case 4 : address=0xd4;break; 
1462:  MOVLW  D4
1464:  MOVWF  xFA
1466:  BRA    1468
....................    } 
....................    address+=x-1; 
1468:  MOVLW  01
146A:  SUBWF  xF8,W
146C:  ADDWF  xFA,F
....................    lcd_send_byte(0,address); 
146E:  CLRF   xFB
1470:  MOVFF  FA,FC
1474:  CALL   09D0
.................... } 
1478:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
14AC:  MOVF   xF7,W
14AE:  SUBLW  F1
14B0:  BNZ   14B6
....................    { 
....................       c=238; 
14B2:  MOVLW  EE
14B4:  MOVWF  xF7
....................    } 
....................    if(c=='Ñ') 
14B6:  MOVF   xF7,W
14B8:  SUBLW  D1
14BA:  BNZ   14C0
....................    { 
....................       c=255; 
14BC:  MOVLW  FF
14BE:  MOVWF  xF7
....................    } 
....................     
....................    switch (c) { 
14C0:  MOVF   xF7,W
14C2:  XORLW  0C
14C4:  BZ    14D0
14C6:  XORLW  06
14C8:  BZ    14E8
14CA:  XORLW  02
14CC:  BZ    14F6
14CE:  BRA    1502
....................      case '\f'   : lcd_send_byte(0,1); 
14D0:  CLRF   xFB
14D2:  MOVLW  01
14D4:  MOVWF  xFC
14D6:  CALL   09D0
....................                    lcdline=1; 
14DA:  MOVLW  01
14DC:  MOVWF  28
....................                    delay_ms(2); 
14DE:  MOVLW  02
14E0:  MOVWF  xFC
14E2:  CALL   092A
....................                                            break; 
14E6:  BRA    1510
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
14E8:  INCF   28,F
14EA:  MOVLW  01
14EC:  MOVWF  xF8
14EE:  MOVFF  28,F9
14F2:  RCALL  1442
14F4:  BRA    1510
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
14F6:  CLRF   xFB
14F8:  MOVLW  10
14FA:  MOVWF  xFC
14FC:  CALL   09D0
1500:  BRA    1510
....................      default     : lcd_send_byte(1,c);     break; 
1502:  MOVLW  01
1504:  MOVWF  xFB
1506:  MOVFF  F7,FC
150A:  CALL   09D0
150E:  BRA    1510
....................    } 
.................... } 
1510:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF,flag_arriba=OFF,Entro=0; 
.................... short flagdn=0,flagup=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,n=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0,segundosTrabajo=0,horasTrabajo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1854:  DECFSZ xE7,W
1856:  BRA    186C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1858:  MOVLW  02
185A:  MOVWF  xF8
185C:  MOVFF  E8,F9
1860:  RCALL  1442
1862:  MOVLW  64
1864:  MOVWF  FF6
1866:  MOVLW  01
1868:  MOVWF  FF7
186A:  RCALL  1512
....................    if(x==2) 
186C:  MOVF   xE7,W
186E:  SUBLW  02
1870:  BNZ   1886
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1872:  MOVLW  02
1874:  MOVWF  xF8
1876:  MOVFF  E8,F9
187A:  RCALL  1442
187C:  MOVLW  78
187E:  MOVWF  FF6
1880:  MOVLW  01
1882:  MOVWF  FF7
1884:  RCALL  1512
....................    if(x==3) 
1886:  MOVF   xE7,W
1888:  SUBLW  03
188A:  BNZ   18A0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo     ");} 
188C:  MOVLW  02
188E:  MOVWF  xF8
1890:  MOVFF  E8,F9
1894:  RCALL  1442
1896:  MOVLW  8C
1898:  MOVWF  FF6
189A:  MOVLW  01
189C:  MOVWF  FF7
189E:  RCALL  1512
....................    if(x==4) 
18A0:  MOVF   xE7,W
18A2:  SUBLW  04
18A4:  BNZ   18BA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
18A6:  MOVLW  02
18A8:  MOVWF  xF8
18AA:  MOVFF  E8,F9
18AE:  RCALL  1442
18B0:  MOVLW  A0
18B2:  MOVWF  FF6
18B4:  MOVLW  01
18B6:  MOVWF  FF7
18B8:  RCALL  1512
....................     
....................    if(x==5) 
18BA:  MOVF   xE7,W
18BC:  SUBLW  05
18BE:  BNZ   18F0
....................    {if(estadoalarma==0) 
18C0:  BTFSC  2A.4
18C2:  BRA    18D8
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
18C4:  MOVLW  02
18C6:  MOVWF  xF8
18C8:  MOVFF  E8,F9
18CC:  RCALL  1442
18CE:  MOVLW  B4
18D0:  MOVWF  FF6
18D2:  MOVLW  01
18D4:  MOVWF  FF7
18D6:  RCALL  1512
....................    if(estadoalarma==1) 
18D8:  BTFSS  2A.4
18DA:  BRA    18F0
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
18DC:  MOVLW  02
18DE:  MOVWF  xF8
18E0:  MOVFF  E8,F9
18E4:  RCALL  1442
18E6:  MOVLW  C8
18E8:  MOVWF  FF6
18EA:  MOVLW  01
18EC:  MOVWF  FF7
18EE:  RCALL  1512
....................    } 
....................     
....................    if(x==6) 
18F0:  MOVF   xE7,W
18F2:  SUBLW  06
18F4:  BNZ   190A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
18F6:  MOVLW  02
18F8:  MOVWF  xF8
18FA:  MOVFF  E8,F9
18FE:  RCALL  1442
1900:  MOVLW  DC
1902:  MOVWF  FF6
1904:  MOVLW  01
1906:  MOVWF  FF7
1908:  RCALL  1512
.................... } 
190A:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1A26:  RLCF   xF7,W
1A28:  MOVWF  00
1A2A:  RLCF   00,F
1A2C:  MOVLW  FC
1A2E:  ANDWF  00,F
1A30:  MOVFF  00,01
1A34:  MOVF   FC2,W
1A36:  ANDLW  C3
1A38:  IORWF  00,W
1A3A:  MOVWF  FC2
1A3C:  MOVLW  0A
1A3E:  MOVWF  xFC
1A40:  CALL   092A
1A44:  BSF    FC2.1
1A46:  BTFSC  FC2.1
1A48:  BRA    1A46
1A4A:  MOVFF  FC4,03
1A4E:  MOVFF  FC3,FE
1A52:  MOVFF  FC4,FF
1A56:  CALL   0ABA
1A5A:  MOVFF  03,FB
1A5E:  MOVFF  02,FA
1A62:  MOVFF  01,F9
1A66:  MOVFF  00,F8
1A6A:  MOVFF  F8,00
1A6E:  MOVFF  F9,01
1A72:  MOVFF  FA,02
1A76:  MOVFF  FB,03
.................... } 
1A7A:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1F92:  CLRF   xEA
1F94:  CLRF   xE9
1F96:  CLRF   xE8
1F98:  CLRF   xE7
1F9A:  CLRF   xEE
1F9C:  CLRF   xED
1F9E:  CLRF   xEC
1FA0:  CLRF   xEB
1FA2:  CLRF   xF2
1FA4:  CLRF   xF1
1FA6:  CLRF   xF0
1FA8:  CLRF   xEF
1FAA:  CLRF   xF6
1FAC:  CLRF   xF5
1FAE:  CLRF   xF4
1FB0:  CLRF   xF3
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................   //-----------MPXV5004DP------------------//  
....................    //V1=sensores(0);  
....................    //Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
....................    
....................   //-----------MPXV7002DP------------------//  
....................    V1=sensores(0);  
1FB2:  CLRF   xF7
1FB4:  RCALL  1A26
1FB6:  MOVFF  03,B2
1FBA:  MOVFF  02,B1
1FBE:  MOVFF  01,B0
1FC2:  MOVFF  00,AF
....................    VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
1FC6:  MOVFF  B2,FD
1FCA:  MOVFF  B1,FC
1FCE:  MOVFF  B0,FB
1FD2:  MOVFF  AF,FA
1FD6:  MOVLB  1
1FD8:  CLRF   x01
1FDA:  CLRF   x00
1FDC:  MOVLW  20
1FDE:  MOVLB  0
1FE0:  MOVWF  xFF
1FE2:  MOVLW  81
1FE4:  MOVWF  xFE
1FE6:  RCALL  1A7C
1FE8:  MOVFF  00,F7
1FEC:  MOVFF  01,F8
1FF0:  MOVFF  02,F9
1FF4:  MOVFF  03,FA
1FF8:  MOVFF  03,FE
1FFC:  MOVFF  02,FD
2000:  MOVFF  01,FC
2004:  MOVFF  00,FB
2008:  MOVLB  1
200A:  CLRF   x02
200C:  MOVLW  C0
200E:  MOVWF  x01
2010:  MOVLW  7F
2012:  MOVWF  x00
2014:  MOVLW  88
2016:  MOVLB  0
2018:  MOVWF  xFF
201A:  RCALL  1B98
201C:  MOVFF  03,F2
2020:  MOVFF  02,F1
2024:  MOVFF  01,F0
2028:  MOVFF  00,EF
....................    G2=G; 
202C:  MOVFF  C2,F6
2030:  MOVFF  C1,F5
2034:  MOVFF  C0,F4
2038:  MOVFF  BF,F3
....................    VG = (G2*5.0)/1023.0; 
203C:  MOVFF  F6,FD
2040:  MOVFF  F5,FC
2044:  MOVFF  F4,FB
2048:  MOVFF  F3,FA
204C:  MOVLB  1
204E:  CLRF   x01
2050:  CLRF   x00
2052:  MOVLW  20
2054:  MOVLB  0
2056:  MOVWF  xFF
2058:  MOVLW  81
205A:  MOVWF  xFE
205C:  RCALL  1A7C
205E:  MOVFF  00,F7
2062:  MOVFF  01,F8
2066:  MOVFF  02,F9
206A:  MOVFF  03,FA
206E:  MOVFF  03,FE
2072:  MOVFF  02,FD
2076:  MOVFF  01,FC
207A:  MOVFF  00,FB
207E:  MOVLB  1
2080:  CLRF   x02
2082:  MOVLW  C0
2084:  MOVWF  x01
2086:  MOVLW  7F
2088:  MOVWF  x00
208A:  MOVLW  88
208C:  MOVLB  0
208E:  MOVWF  xFF
2090:  RCALL  1B98
2092:  MOVFF  03,EE
2096:  MOVFF  02,ED
209A:  MOVFF  01,EC
209E:  MOVFF  00,EB
....................    Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
20A2:  BSF    FD8.1
20A4:  MOVFF  F2,101
20A8:  MOVFF  F1,100
20AC:  MOVFF  F0,FF
20B0:  MOVFF  EF,FE
20B4:  MOVFF  EE,105
20B8:  MOVFF  ED,104
20BC:  MOVFF  EC,103
20C0:  MOVFF  EB,102
20C4:  RCALL  1D14
20C6:  MOVFF  03,B6
20CA:  MOVFF  02,B5
20CE:  MOVFF  01,B4
20D2:  MOVFF  00,B3
....................     
....................    if(Presion<0.0) 
20D6:  MOVFF  B6,FD
20DA:  MOVFF  B5,FC
20DE:  MOVFF  B4,FB
20E2:  MOVFF  B3,FA
20E6:  MOVLB  1
20E8:  CLRF   x01
20EA:  CLRF   x00
20EC:  MOVLB  0
20EE:  CLRF   xFF
20F0:  CLRF   xFE
20F2:  CALL   0E6A
20F6:  BNC   2100
....................       Presion=0.0; 
20F8:  CLRF   xB6
20FA:  CLRF   xB5
20FC:  CLRF   xB4
20FE:  CLRF   xB3
....................  
....................    if(r>media-1) 
2100:  MOVLW  01
2102:  SUBWF  xE6,W
2104:  SUBWF  3F,W
2106:  BZ    210C
2108:  BNC   210C
....................    {r=0;} 
210A:  CLRF   3F
....................    PromPresion[r]=Presion;r++; 
210C:  MOVF   3F,W
210E:  MULLW  04
2110:  MOVF   FF3,W
2112:  CLRF   03
2114:  ADDLW  5F
2116:  MOVWF  FE9
2118:  MOVLW  00
211A:  ADDWFC 03,W
211C:  MOVWF  FEA
211E:  MOVFF  B3,FEF
2122:  MOVFF  B4,FEC
2126:  MOVFF  B5,FEC
212A:  MOVFF  B6,FEC
212E:  INCF   3F,F
....................           
....................    for(q=0;q<=(media-1);q++) 
2130:  CLRF   40
2132:  MOVLW  01
2134:  SUBWF  xE6,W
2136:  SUBWF  40,W
2138:  BZ    213C
213A:  BC    21A6
....................    { 
....................       promediopresion+=PromPresion[q]; 
213C:  MOVF   40,W
213E:  MULLW  04
2140:  MOVF   FF3,W
2142:  CLRF   03
2144:  ADDLW  5F
2146:  MOVWF  FE9
2148:  MOVLW  00
214A:  ADDWFC 03,W
214C:  MOVWF  FEA
214E:  MOVFF  FEF,00
2152:  MOVFF  FEC,01
2156:  MOVFF  FEC,02
215A:  MOVFF  FEC,03
215E:  MOVFF  FEA,F8
2162:  MOVFF  FE9,F7
2166:  BCF    FD8.1
2168:  MOVFF  EA,101
216C:  MOVFF  E9,100
2170:  MOVFF  E8,FF
2174:  MOVFF  E7,FE
2178:  MOVFF  03,105
217C:  MOVFF  02,104
2180:  MOVFF  01,103
2184:  MOVFF  00,102
2188:  RCALL  1D14
218A:  MOVFF  F8,FEA
218E:  MOVFF  F7,FE9
2192:  MOVFF  03,EA
2196:  MOVFF  02,E9
219A:  MOVFF  01,E8
219E:  MOVFF  00,E7
....................    }  
21A2:  INCF   40,F
21A4:  BRA    2132
....................    promediopresion=promediopresion/media;    
21A6:  CLRF   xFF
21A8:  MOVFF  E6,FE
21AC:  CALL   0ABA
21B0:  MOVFF  EA,FE
21B4:  MOVFF  E9,FD
21B8:  MOVFF  E8,FC
21BC:  MOVFF  E7,FB
21C0:  MOVFF  03,102
21C4:  MOVFF  02,101
21C8:  MOVFF  01,100
21CC:  MOVFF  00,FF
21D0:  RCALL  1B98
21D2:  MOVFF  03,EA
21D6:  MOVFF  02,E9
21DA:  MOVFF  01,E8
21DE:  MOVFF  00,E7
....................     
....................    return promediopresion; 
21E2:  MOVFF  E7,00
21E6:  MOVFF  E8,01
21EA:  MOVFF  E9,02
21EE:  MOVFF  EA,03
.................... } 
21F2:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0A74:  MOVLW  C8
0A76:  MOVWF  xFC
0A78:  RCALL  092A
....................    lcd_init(); 
0A7A:  RCALL  0A16
....................    set_tris_a(0XFF); 
0A7C:  MOVLW  FF
0A7E:  MOVWF  F92
....................    set_tris_e(0XFF); 
0A80:  BSF    F96.1
0A82:  BSF    F96.1
0A84:  BSF    F96.1
0A86:  BSF    F96.1
....................    enable_interrupts(global); 
0A88:  MOVLW  C0
0A8A:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
0A8C:  BSF    FF2.4
0A8E:  BSF    FF1.6
....................    setup_wdt(WDT_ON); 
0A90:  BSF    FD1.0
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0A92:  MOVLW  C7
0A94:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0A96:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0A98:  MOVLW  85
0A9A:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0A9C:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0A9E:  MOVF   FC1,W
0AA0:  ANDLW  C0
0AA2:  IORLW  0E
0AA4:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0AA6:  MOVF   FC0,W
0AA8:  ANDLW  C0
0AAA:  IORLW  02
0AAC:  MOVWF  FC0
0AAE:  BSF    FC0.7
0AB0:  BSF    FC2.0
....................    enable_interrupts(global); 
0AB2:  MOVLW  C0
0AB4:  IORWF  FF2,F
.................... } 
0AB6:  GOTO   2A3E (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
1532:  MOVLW  01
1534:  MOVWF  xF8
1536:  MOVWF  xF9
1538:  RCALL  1442
....................    printf(lcd_putc,"       MODULO       "); 
153A:  MOVLW  F0
153C:  MOVWF  FF6
153E:  MOVLW  01
1540:  MOVWF  FF7
1542:  RCALL  1512
....................    lcd_gotoxy(1,2); 
1544:  MOVLW  01
1546:  MOVWF  xF8
1548:  MOVLW  02
154A:  MOVWF  xF9
154C:  RCALL  1442
....................    printf(lcd_putc,"   FLUJO LAMINAR    "); 
154E:  MOVLW  06
1550:  MOVWF  FF6
1552:  MOVLW  02
1554:  MOVWF  FF7
1556:  RCALL  1512
....................    lcd_gotoxy(1,3); 
1558:  MOVLW  01
155A:  MOVWF  xF8
155C:  MOVLW  03
155E:  MOVWF  xF9
1560:  RCALL  1442
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
1562:  MOVLW  1C
1564:  MOVWF  FF6
1566:  MOVLW  02
1568:  MOVWF  FF7
156A:  RCALL  1512
....................    lcd_gotoxy(1,4); 
156C:  MOVLW  01
156E:  MOVWF  xF8
1570:  MOVLW  04
1572:  MOVWF  xF9
1574:  RCALL  1442
....................    printf(lcd_putc,"   REF:JPMOD48-RD   "); 
1576:  MOVLW  32
1578:  MOVWF  FF6
157A:  MOVLW  02
157C:  MOVWF  FF7
157E:  RCALL  1512
....................    delay_ms(2000); 
1580:  MOVLW  08
1582:  MOVWF  xE6
1584:  MOVLW  FA
1586:  MOVWF  xFC
1588:  CALL   092A
158C:  DECFSZ xE6,F
158E:  BRA    1584
....................    printf(lcd_putc,"\f"); 
1590:  MOVLW  0C
1592:  MOVWF  xF7
1594:  RCALL  14AC
.................... } 
1596:  GOTO   2A50 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0AF0:  MOVFF  FF2,E6
0AF4:  BCF    FF2.6
0AF6:  BCF    FF2.7
0AF8:  CLRF   FA9
0AFA:  BCF    FA6.6
0AFC:  BCF    FA6.7
0AFE:  BSF    FA6.0
0B00:  MOVF   FA8,W
0B02:  BTFSC  xE6.6
0B04:  BSF    FF2.6
0B06:  BTFSC  xE6.7
0B08:  BSF    FF2.7
0B0A:  MOVWF  4F
....................    delay_ms(20);  
0B0C:  MOVLW  14
0B0E:  MOVWF  xFC
0B10:  RCALL  092A
....................    contrasena[1]=read_eeprom(1); 
0B12:  MOVFF  FF2,E6
0B16:  BCF    FF2.6
0B18:  BCF    FF2.7
0B1A:  MOVLW  01
0B1C:  MOVWF  FA9
0B1E:  BCF    FA6.6
0B20:  BCF    FA6.7
0B22:  BSF    FA6.0
0B24:  MOVF   FA8,W
0B26:  BTFSC  xE6.6
0B28:  BSF    FF2.6
0B2A:  BTFSC  xE6.7
0B2C:  BSF    FF2.7
0B2E:  MOVWF  50
....................    delay_ms(20); 
0B30:  MOVLW  14
0B32:  MOVWF  xFC
0B34:  RCALL  092A
....................    contrasena[2]=read_eeprom(2); 
0B36:  MOVFF  FF2,E6
0B3A:  BCF    FF2.6
0B3C:  BCF    FF2.7
0B3E:  MOVLW  02
0B40:  MOVWF  FA9
0B42:  BCF    FA6.6
0B44:  BCF    FA6.7
0B46:  BSF    FA6.0
0B48:  MOVF   FA8,W
0B4A:  BTFSC  xE6.6
0B4C:  BSF    FF2.6
0B4E:  BTFSC  xE6.7
0B50:  BSF    FF2.7
0B52:  MOVWF  51
....................    delay_ms(20);  
0B54:  MOVLW  14
0B56:  MOVWF  xFC
0B58:  RCALL  092A
....................    contrasena[3]=read_eeprom(3); 
0B5A:  MOVFF  FF2,E6
0B5E:  BCF    FF2.6
0B60:  BCF    FF2.7
0B62:  MOVLW  03
0B64:  MOVWF  FA9
0B66:  BCF    FA6.6
0B68:  BCF    FA6.7
0B6A:  BSF    FA6.0
0B6C:  MOVF   FA8,W
0B6E:  BTFSC  xE6.6
0B70:  BSF    FF2.6
0B72:  BTFSC  xE6.7
0B74:  BSF    FF2.7
0B76:  MOVWF  52
....................    delay_ms(20); 
0B78:  MOVLW  14
0B7A:  MOVWF  xFC
0B7C:  RCALL  092A
....................    estadoalarma=read_eeprom(4); 
0B7E:  MOVFF  FF2,E6
0B82:  BCF    FF2.6
0B84:  BCF    FF2.7
0B86:  MOVLW  04
0B88:  MOVWF  FA9
0B8A:  BCF    FA6.6
0B8C:  BCF    FA6.7
0B8E:  BSF    FA6.0
0B90:  MOVF   FA8,W
0B92:  BTFSC  xE6.6
0B94:  BSF    FF2.6
0B96:  BTFSC  xE6.7
0B98:  BSF    FF2.7
0B9A:  MOVWF  01
0B9C:  BCF    2A.4
0B9E:  BTFSC  01.0
0BA0:  BSF    2A.4
....................    delay_ms(20); 
0BA2:  MOVLW  14
0BA4:  MOVWF  xFC
0BA6:  RCALL  092A
....................    tempo_minutos=read_eeprom(5); 
0BA8:  MOVFF  FF2,E6
0BAC:  BCF    FF2.6
0BAE:  BCF    FF2.7
0BB0:  MOVLW  05
0BB2:  MOVWF  FA9
0BB4:  BCF    FA6.6
0BB6:  BCF    FA6.7
0BB8:  BSF    FA6.0
0BBA:  MOVF   FA8,W
0BBC:  BTFSC  xE6.6
0BBE:  BSF    FF2.6
0BC0:  BTFSC  xE6.7
0BC2:  BSF    FF2.7
0BC4:  MOVWF  3B
....................    delay_ms(20); 
0BC6:  MOVLW  14
0BC8:  MOVWF  xFC
0BCA:  RCALL  092A
....................    tempo_segundos=read_eeprom(6); 
0BCC:  MOVFF  FF2,E6
0BD0:  BCF    FF2.6
0BD2:  BCF    FF2.7
0BD4:  MOVLW  06
0BD6:  MOVWF  FA9
0BD8:  BCF    FA6.6
0BDA:  BCF    FA6.7
0BDC:  BSF    FA6.0
0BDE:  MOVF   FA8,W
0BE0:  BTFSC  xE6.6
0BE2:  BSF    FF2.6
0BE4:  BTFSC  xE6.7
0BE6:  BSF    FF2.7
0BE8:  MOVWF  3C
....................    delay_ms(20); 
0BEA:  MOVLW  14
0BEC:  MOVWF  xFC
0BEE:  RCALL  092A
....................    segundos=read_eeprom(7); 
0BF0:  MOVFF  FF2,E6
0BF4:  BCF    FF2.6
0BF6:  BCF    FF2.7
0BF8:  MOVLW  07
0BFA:  MOVWF  FA9
0BFC:  BCF    FA6.6
0BFE:  BCF    FA6.7
0C00:  BSF    FA6.0
0C02:  MOVF   FA8,W
0C04:  BTFSC  xE6.6
0C06:  BSF    FF2.6
0C08:  BTFSC  xE6.7
0C0A:  BSF    FF2.7
0C0C:  MOVWF  35
....................    delay_ms(20); 
0C0E:  MOVLW  14
0C10:  MOVWF  xFC
0C12:  RCALL  092A
....................    minutos=read_eeprom(8); 
0C14:  MOVFF  FF2,E6
0C18:  BCF    FF2.6
0C1A:  BCF    FF2.7
0C1C:  MOVLW  08
0C1E:  MOVWF  FA9
0C20:  BCF    FA6.6
0C22:  BCF    FA6.7
0C24:  BSF    FA6.0
0C26:  MOVF   FA8,W
0C28:  BTFSC  xE6.6
0C2A:  BSF    FF2.6
0C2C:  BTFSC  xE6.7
0C2E:  BSF    FF2.7
0C30:  MOVWF  36
....................    delay_ms(20); 
0C32:  MOVLW  14
0C34:  MOVWF  xFC
0C36:  RCALL  092A
....................    horasL=read_eeprom(9); 
0C38:  MOVFF  FF2,E6
0C3C:  BCF    FF2.6
0C3E:  BCF    FF2.7
0C40:  MOVLW  09
0C42:  MOVWF  FA9
0C44:  BCF    FA6.6
0C46:  BCF    FA6.7
0C48:  BSF    FA6.0
0C4A:  MOVF   FA8,W
0C4C:  BTFSC  xE6.6
0C4E:  BSF    FF2.6
0C50:  BTFSC  xE6.7
0C52:  BSF    FF2.7
0C54:  MOVWF  37
....................    delay_ms(20); 
0C56:  MOVLW  14
0C58:  MOVWF  xFC
0C5A:  RCALL  092A
....................    horasH=read_eeprom(10); 
0C5C:  MOVFF  FF2,E6
0C60:  BCF    FF2.6
0C62:  BCF    FF2.7
0C64:  MOVLW  0A
0C66:  MOVWF  FA9
0C68:  BCF    FA6.6
0C6A:  BCF    FA6.7
0C6C:  BSF    FA6.0
0C6E:  MOVF   FA8,W
0C70:  BTFSC  xE6.6
0C72:  BSF    FF2.6
0C74:  BTFSC  xE6.7
0C76:  BSF    FF2.7
0C78:  MOVWF  38
....................    delay_ms(20); 
0C7A:  MOVLW  14
0C7C:  MOVWF  xFC
0C7E:  RCALL  092A
....................    G_l=read_eeprom(11); 
0C80:  MOVFF  FF2,E6
0C84:  BCF    FF2.6
0C86:  BCF    FF2.7
0C88:  MOVLW  0B
0C8A:  MOVWF  FA9
0C8C:  BCF    FA6.6
0C8E:  BCF    FA6.7
0C90:  BSF    FA6.0
0C92:  MOVF   FA8,W
0C94:  BTFSC  xE6.6
0C96:  BSF    FF2.6
0C98:  BTFSC  xE6.7
0C9A:  BSF    FF2.7
0C9C:  MOVWF  39
....................    delay_ms(20); 
0C9E:  MOVLW  14
0CA0:  MOVWF  xFC
0CA2:  RCALL  092A
....................    G_h=read_eeprom(12); 
0CA4:  MOVFF  FF2,E6
0CA8:  BCF    FF2.6
0CAA:  BCF    FF2.7
0CAC:  MOVLW  0C
0CAE:  MOVWF  FA9
0CB0:  BCF    FA6.6
0CB2:  BCF    FA6.7
0CB4:  BSF    FA6.0
0CB6:  MOVF   FA8,W
0CB8:  BTFSC  xE6.6
0CBA:  BSF    FF2.6
0CBC:  BTFSC  xE6.7
0CBE:  BSF    FF2.7
0CC0:  MOVWF  3A
....................    delay_ms(20); 
0CC2:  MOVLW  14
0CC4:  MOVWF  xFC
0CC6:  RCALL  092A
....................    Vel1=read_eeprom(13); 
0CC8:  MOVFF  FF2,E6
0CCC:  BCF    FF2.6
0CCE:  BCF    FF2.7
0CD0:  MOVLW  0D
0CD2:  MOVWF  FA9
0CD4:  BCF    FA6.6
0CD6:  BCF    FA6.7
0CD8:  BSF    FA6.0
0CDA:  MOVF   FA8,W
0CDC:  BTFSC  xE6.6
0CDE:  BSF    FF2.6
0CE0:  BTFSC  xE6.7
0CE2:  BSF    FF2.7
0CE4:  MOVWF  58
....................    delay_ms(20); 
0CE6:  MOVLW  14
0CE8:  MOVWF  xFC
0CEA:  RCALL  092A
....................    codigoSubir=read_eeprom(15); 
0CEC:  MOVFF  FF2,E6
0CF0:  BCF    FF2.6
0CF2:  BCF    FF2.7
0CF4:  MOVLW  0F
0CF6:  MOVWF  FA9
0CF8:  BCF    FA6.6
0CFA:  BCF    FA6.7
0CFC:  BSF    FA6.0
0CFE:  MOVF   FA8,W
0D00:  BTFSC  xE6.6
0D02:  BSF    FF2.6
0D04:  BTFSC  xE6.7
0D06:  BSF    FF2.7
0D08:  MOVWF  54
....................    delay_ms(20); 
0D0A:  MOVLW  14
0D0C:  MOVWF  xFC
0D0E:  RCALL  092A
....................    codigoBajar=read_eeprom(16); 
0D10:  MOVFF  FF2,E6
0D14:  BCF    FF2.6
0D16:  BCF    FF2.7
0D18:  MOVLW  10
0D1A:  MOVWF  FA9
0D1C:  BCF    FA6.6
0D1E:  BCF    FA6.7
0D20:  BSF    FA6.0
0D22:  MOVF   FA8,W
0D24:  BTFSC  xE6.6
0D26:  BSF    FF2.6
0D28:  BTFSC  xE6.7
0D2A:  BSF    FF2.7
0D2C:  MOVWF  55
....................    delay_ms(20); 
0D2E:  MOVLW  14
0D30:  MOVWF  xFC
0D32:  RCALL  092A
....................    codigoDetener=read_eeprom(17); 
0D34:  MOVFF  FF2,E6
0D38:  BCF    FF2.6
0D3A:  BCF    FF2.7
0D3C:  MOVLW  11
0D3E:  MOVWF  FA9
0D40:  BCF    FA6.6
0D42:  BCF    FA6.7
0D44:  BSF    FA6.0
0D46:  MOVF   FA8,W
0D48:  BTFSC  xE6.6
0D4A:  BSF    FF2.6
0D4C:  BTFSC  xE6.7
0D4E:  BSF    FF2.7
0D50:  MOVWF  56
....................    delay_ms(20); 
0D52:  MOVLW  14
0D54:  MOVWF  xFC
0D56:  RCALL  092A
....................    G16=make16(G_h,G_l); 
0D58:  MOVFF  3A,5E
0D5C:  MOVFF  39,5D
....................    G=G16; 
0D60:  MOVFF  5E,FF
0D64:  MOVFF  5D,FE
0D68:  RCALL  0ABA
0D6A:  MOVFF  03,C2
0D6E:  MOVFF  02,C1
0D72:  MOVFF  01,C0
0D76:  MOVFF  00,BF
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
0D7A:  MOVFF  FF2,E6
0D7E:  BCF    FF2.6
0D80:  BCF    FF2.7
0D82:  MOVLW  13
0D84:  MOVWF  FA9
0D86:  BCF    FA6.6
0D88:  BCF    FA6.7
0D8A:  BSF    FA6.0
0D8C:  MOVF   FA8,W
0D8E:  BTFSC  xE6.6
0D90:  BSF    FF2.6
0D92:  BTFSC  xE6.7
0D94:  BSF    FF2.7
0D96:  MOVWF  xE7
0D98:  MOVFF  FF2,E8
0D9C:  BCF    FF2.6
0D9E:  BCF    FF2.7
0DA0:  MOVLW  12
0DA2:  MOVWF  FA9
0DA4:  BCF    FA6.6
0DA6:  BCF    FA6.7
0DA8:  BSF    FA6.0
0DAA:  MOVF   FA8,W
0DAC:  BTFSC  xE8.6
0DAE:  BSF    FF2.6
0DB0:  BTFSC  xE8.7
0DB2:  BSF    FF2.7
0DB4:  MOVWF  xE9
0DB6:  MOVFF  E7,CA
0DBA:  MOVFF  E9,C9
....................    delay_ms(20); 
0DBE:  MOVLW  14
0DC0:  MOVWF  xFC
0DC2:  RCALL  092A
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
0DC4:  MOVFF  FF2,E6
0DC8:  BCF    FF2.6
0DCA:  BCF    FF2.7
0DCC:  MOVLW  15
0DCE:  MOVWF  FA9
0DD0:  BCF    FA6.6
0DD2:  BCF    FA6.7
0DD4:  BSF    FA6.0
0DD6:  MOVF   FA8,W
0DD8:  BTFSC  xE6.6
0DDA:  BSF    FF2.6
0DDC:  BTFSC  xE6.7
0DDE:  BSF    FF2.7
0DE0:  MOVWF  xE7
0DE2:  MOVFF  FF2,E8
0DE6:  BCF    FF2.6
0DE8:  BCF    FF2.7
0DEA:  MOVLW  14
0DEC:  MOVWF  FA9
0DEE:  BCF    FA6.6
0DF0:  BCF    FA6.7
0DF2:  BSF    FA6.0
0DF4:  MOVF   FA8,W
0DF6:  BTFSC  xE8.6
0DF8:  BSF    FF2.6
0DFA:  BTFSC  xE8.7
0DFC:  BSF    FF2.7
0DFE:  MOVWF  xE9
0E00:  MOVFF  E7,C8
0E04:  MOVFF  E9,C7
....................    delay_ms(20); 
0E08:  MOVLW  14
0E0A:  MOVWF  xFC
0E0C:  RCALL  092A
....................    motor=read_eeprom(22); 
0E0E:  MOVFF  FF2,E6
0E12:  BCF    FF2.6
0E14:  BCF    FF2.7
0E16:  MOVLW  16
0E18:  MOVWF  FA9
0E1A:  BCF    FA6.6
0E1C:  BCF    FA6.7
0E1E:  BSF    FA6.0
0E20:  MOVF   FA8,W
0E22:  BTFSC  xE6.6
0E24:  BSF    FF2.6
0E26:  BTFSC  xE6.7
0E28:  BSF    FF2.7
0E2A:  MOVWF  45
....................    delay_ms(20); 
0E2C:  MOVLW  14
0E2E:  MOVWF  xFC
0E30:  RCALL  092A
....................    luz=read_eeprom(23); 
0E32:  MOVFF  FF2,E6
0E36:  BCF    FF2.6
0E38:  BCF    FF2.7
0E3A:  MOVLW  17
0E3C:  MOVWF  FA9
0E3E:  BCF    FA6.6
0E40:  BCF    FA6.7
0E42:  BSF    FA6.0
0E44:  MOVF   FA8,W
0E46:  BTFSC  xE6.6
0E48:  BSF    FF2.6
0E4A:  BTFSC  xE6.7
0E4C:  BSF    FF2.7
0E4E:  MOVWF  46
....................    delay_ms(20); 
0E50:  MOVLW  14
0E52:  MOVWF  xFC
0E54:  RCALL  092A
....................    horas=make16(horasH,horasL); 
0E56:  MOVFF  38,5C
0E5A:  MOVFF  37,5B
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0E5E:  MOVFF  3B,3D
0E62:  MOVFF  3C,3E
.................... } 
0E66:  GOTO   2A42 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0F10:  BTFSC  4F.7
0F12:  BRA    0F1A
0F14:  MOVF   4F,W
0F16:  SUBLW  09
0F18:  BNC   0F1E
0F1A:  BTFSS  4F.7
0F1C:  BRA    0F50
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0F1E:  CLRF   4F
0F20:  CLRF   FA9
0F22:  CLRF   FA8
0F24:  BCF    FA6.6
0F26:  BCF    FA6.7
0F28:  BSF    FA6.2
0F2A:  MOVF   FF2,W
0F2C:  MOVWF  00
0F2E:  BCF    FF2.6
0F30:  BCF    FF2.7
0F32:  MOVLB  F
0F34:  MOVLW  55
0F36:  MOVWF  FA7
0F38:  MOVLW  AA
0F3A:  MOVWF  FA7
0F3C:  BSF    FA6.1
0F3E:  BTFSC  FA6.1
0F40:  BRA    0F3E
0F42:  BCF    FA6.2
0F44:  MOVF   00,W
0F46:  IORWF  FF2,F
0F48:  MOVLW  14
0F4A:  MOVLB  0
0F4C:  MOVWF  xFC
0F4E:  RCALL  092A
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0F50:  BTFSC  50.7
0F52:  BRA    0F5A
0F54:  MOVF   50,W
0F56:  SUBLW  09
0F58:  BNC   0F60
0F5A:  BTFSC  50.7
0F5C:  BRA    0F60
0F5E:  BRA    0F94
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0F60:  CLRF   50
0F62:  MOVLW  01
0F64:  MOVWF  FA9
0F66:  CLRF   FA8
0F68:  BCF    FA6.6
0F6A:  BCF    FA6.7
0F6C:  BSF    FA6.2
0F6E:  MOVF   FF2,W
0F70:  MOVWF  00
0F72:  BCF    FF2.6
0F74:  BCF    FF2.7
0F76:  MOVLB  F
0F78:  MOVLW  55
0F7A:  MOVWF  FA7
0F7C:  MOVLW  AA
0F7E:  MOVWF  FA7
0F80:  BSF    FA6.1
0F82:  BTFSC  FA6.1
0F84:  BRA    0F82
0F86:  BCF    FA6.2
0F88:  MOVF   00,W
0F8A:  IORWF  FF2,F
0F8C:  MOVLW  14
0F8E:  MOVLB  0
0F90:  MOVWF  xFC
0F92:  RCALL  092A
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0F94:  BTFSC  51.7
0F96:  BRA    0F9E
0F98:  MOVF   51,W
0F9A:  SUBLW  09
0F9C:  BNC   0FA4
0F9E:  BTFSC  51.7
0FA0:  BRA    0FA4
0FA2:  BRA    0FD8
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0FA4:  CLRF   51
0FA6:  MOVLW  02
0FA8:  MOVWF  FA9
0FAA:  CLRF   FA8
0FAC:  BCF    FA6.6
0FAE:  BCF    FA6.7
0FB0:  BSF    FA6.2
0FB2:  MOVF   FF2,W
0FB4:  MOVWF  00
0FB6:  BCF    FF2.6
0FB8:  BCF    FF2.7
0FBA:  MOVLB  F
0FBC:  MOVLW  55
0FBE:  MOVWF  FA7
0FC0:  MOVLW  AA
0FC2:  MOVWF  FA7
0FC4:  BSF    FA6.1
0FC6:  BTFSC  FA6.1
0FC8:  BRA    0FC6
0FCA:  BCF    FA6.2
0FCC:  MOVF   00,W
0FCE:  IORWF  FF2,F
0FD0:  MOVLW  14
0FD2:  MOVLB  0
0FD4:  MOVWF  xFC
0FD6:  RCALL  092A
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0FD8:  BTFSC  52.7
0FDA:  BRA    0FE2
0FDC:  MOVF   52,W
0FDE:  SUBLW  09
0FE0:  BNC   0FE8
0FE2:  BTFSC  52.7
0FE4:  BRA    0FE8
0FE6:  BRA    101C
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0FE8:  CLRF   52
0FEA:  MOVLW  03
0FEC:  MOVWF  FA9
0FEE:  CLRF   FA8
0FF0:  BCF    FA6.6
0FF2:  BCF    FA6.7
0FF4:  BSF    FA6.2
0FF6:  MOVF   FF2,W
0FF8:  MOVWF  00
0FFA:  BCF    FF2.6
0FFC:  BCF    FF2.7
0FFE:  MOVLB  F
1000:  MOVLW  55
1002:  MOVWF  FA7
1004:  MOVLW  AA
1006:  MOVWF  FA7
1008:  BSF    FA6.1
100A:  BTFSC  FA6.1
100C:  BRA    100A
100E:  BCF    FA6.2
1010:  MOVF   00,W
1012:  IORWF  FF2,F
1014:  MOVLW  14
1016:  MOVLB  0
1018:  MOVWF  xFC
101A:  RCALL  092A
....................    } 
....................    if(estadoalarma>1){ 
101C:  MOVLW  00
101E:  BTFSC  2A.4
1020:  MOVLW  01
1022:  SUBLW  01
1024:  BC    105C
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
1026:  BSF    2A.4
1028:  MOVLW  04
102A:  MOVWF  FA9
102C:  MOVLW  01
102E:  MOVWF  FA8
1030:  BCF    FA6.6
1032:  BCF    FA6.7
1034:  BSF    FA6.2
1036:  MOVF   FF2,W
1038:  MOVWF  00
103A:  BCF    FF2.6
103C:  BCF    FF2.7
103E:  MOVLB  F
1040:  MOVLW  55
1042:  MOVWF  FA7
1044:  MOVLW  AA
1046:  MOVWF  FA7
1048:  BSF    FA6.1
104A:  BTFSC  FA6.1
104C:  BRA    104A
104E:  BCF    FA6.2
1050:  MOVF   00,W
1052:  IORWF  FF2,F
1054:  MOVLW  14
1056:  MOVLB  0
1058:  MOVWF  xFC
105A:  RCALL  092A
....................    } 
....................    if(tempo_minutos>200){ 
105C:  MOVF   3B,W
105E:  SUBLW  C8
1060:  BC    109A
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
1062:  MOVLW  14
1064:  MOVWF  3B
1066:  MOVLW  05
1068:  MOVWF  FA9
106A:  MOVLW  14
106C:  MOVWF  FA8
106E:  BCF    FA6.6
1070:  BCF    FA6.7
1072:  BSF    FA6.2
1074:  MOVF   FF2,W
1076:  MOVWF  00
1078:  BCF    FF2.6
107A:  BCF    FF2.7
107C:  MOVLB  F
107E:  MOVLW  55
1080:  MOVWF  FA7
1082:  MOVLW  AA
1084:  MOVWF  FA7
1086:  BSF    FA6.1
1088:  BTFSC  FA6.1
108A:  BRA    1088
108C:  BCF    FA6.2
108E:  MOVF   00,W
1090:  IORWF  FF2,F
1092:  MOVLW  14
1094:  MOVLB  0
1096:  MOVWF  xFC
1098:  RCALL  092A
....................    } 
....................    if(tempo_segundos>59){ 
109A:  MOVF   3C,W
109C:  SUBLW  3B
109E:  BC    10D4
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
10A0:  CLRF   3C
10A2:  MOVLW  06
10A4:  MOVWF  FA9
10A6:  CLRF   FA8
10A8:  BCF    FA6.6
10AA:  BCF    FA6.7
10AC:  BSF    FA6.2
10AE:  MOVF   FF2,W
10B0:  MOVWF  00
10B2:  BCF    FF2.6
10B4:  BCF    FF2.7
10B6:  MOVLB  F
10B8:  MOVLW  55
10BA:  MOVWF  FA7
10BC:  MOVLW  AA
10BE:  MOVWF  FA7
10C0:  BSF    FA6.1
10C2:  BTFSC  FA6.1
10C4:  BRA    10C2
10C6:  BCF    FA6.2
10C8:  MOVF   00,W
10CA:  IORWF  FF2,F
10CC:  MOVLW  14
10CE:  MOVLB  0
10D0:  MOVWF  xFC
10D2:  RCALL  092A
....................    } 
....................    if(segundos>60){ 
10D4:  MOVF   35,W
10D6:  SUBLW  3C
10D8:  BC    110E
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
10DA:  CLRF   35
10DC:  MOVLW  07
10DE:  MOVWF  FA9
10E0:  CLRF   FA8
10E2:  BCF    FA6.6
10E4:  BCF    FA6.7
10E6:  BSF    FA6.2
10E8:  MOVF   FF2,W
10EA:  MOVWF  00
10EC:  BCF    FF2.6
10EE:  BCF    FF2.7
10F0:  MOVLB  F
10F2:  MOVLW  55
10F4:  MOVWF  FA7
10F6:  MOVLW  AA
10F8:  MOVWF  FA7
10FA:  BSF    FA6.1
10FC:  BTFSC  FA6.1
10FE:  BRA    10FC
1100:  BCF    FA6.2
1102:  MOVF   00,W
1104:  IORWF  FF2,F
1106:  MOVLW  14
1108:  MOVLB  0
110A:  MOVWF  xFC
110C:  RCALL  092A
....................    } 
....................    if(minutos>60){ 
110E:  MOVF   36,W
1110:  SUBLW  3C
1112:  BC    114A
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
1114:  CLRF   36
1116:  MOVLW  08
1118:  MOVWF  FA9
111A:  CLRF   FA8
111C:  BCF    FA6.6
111E:  BCF    FA6.7
1120:  BSF    FA6.2
1122:  MOVF   FF2,W
1124:  MOVWF  00
1126:  BCF    FF2.6
1128:  BCF    FF2.7
112A:  MOVLB  F
112C:  MOVLW  55
112E:  MOVWF  FA7
1130:  MOVLW  AA
1132:  MOVWF  FA7
1134:  BSF    FA6.1
1136:  BTFSC  FA6.1
1138:  BRA    1136
113A:  BCF    FA6.2
113C:  MOVF   00,W
113E:  IORWF  FF2,F
1140:  MOVLW  14
1142:  MOVLB  0
1144:  MOVWF  xFC
1146:  CALL   092A
....................    } 
....................    if(horas>10000){ 
114A:  MOVF   5C,W
114C:  SUBLW  26
114E:  BC    11C8
1150:  XORLW  FF
1152:  BNZ   115A
1154:  MOVF   5B,W
1156:  SUBLW  10
1158:  BC    11C8
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
115A:  CLRF   5C
115C:  CLRF   5B
115E:  MOVLW  09
1160:  MOVWF  FA9
1162:  MOVLW  0A
1164:  MOVWF  FA8
1166:  BCF    FA6.6
1168:  BCF    FA6.7
116A:  BSF    FA6.2
116C:  MOVF   FF2,W
116E:  MOVWF  00
1170:  BCF    FF2.6
1172:  BCF    FF2.7
1174:  MOVLB  F
1176:  MOVLW  55
1178:  MOVWF  FA7
117A:  MOVLW  AA
117C:  MOVWF  FA7
117E:  BSF    FA6.1
1180:  BTFSC  FA6.1
1182:  BRA    1180
1184:  BCF    FA6.2
1186:  MOVF   00,W
1188:  IORWF  FF2,F
118A:  MOVLW  14
118C:  MOVLB  0
118E:  MOVWF  xFC
1190:  CALL   092A
1194:  MOVLW  0A
1196:  MOVWF  FA9
1198:  CLRF   FA8
119A:  BCF    FA6.6
119C:  BCF    FA6.7
119E:  BSF    FA6.2
11A0:  MOVF   FF2,W
11A2:  MOVWF  00
11A4:  BCF    FF2.6
11A6:  BCF    FF2.7
11A8:  MOVLB  F
11AA:  MOVLW  55
11AC:  MOVWF  FA7
11AE:  MOVLW  AA
11B0:  MOVWF  FA7
11B2:  BSF    FA6.1
11B4:  BTFSC  FA6.1
11B6:  BRA    11B4
11B8:  BCF    FA6.2
11BA:  MOVF   00,W
11BC:  IORWF  FF2,F
11BE:  MOVLW  14
11C0:  MOVLB  0
11C2:  MOVWF  xFC
11C4:  CALL   092A
....................    } 
....................    if(G<450 || G>600){ 
11C8:  MOVFF  C2,FD
11CC:  MOVFF  C1,FC
11D0:  MOVFF  C0,FB
11D4:  MOVFF  BF,FA
11D8:  MOVLB  1
11DA:  CLRF   x01
11DC:  CLRF   x00
11DE:  MOVLW  61
11E0:  MOVLB  0
11E2:  MOVWF  xFF
11E4:  MOVLW  87
11E6:  MOVWF  xFE
11E8:  RCALL  0E6A
11EA:  BC    120C
11EC:  CLRF   xFD
11EE:  CLRF   xFC
11F0:  MOVLW  16
11F2:  MOVWF  xFB
11F4:  MOVLW  88
11F6:  MOVWF  xFA
11F8:  MOVFF  C2,101
11FC:  MOVFF  C1,100
1200:  MOVFF  C0,FF
1204:  MOVFF  BF,FE
1208:  RCALL  0E6A
120A:  BNC   1286
....................       G=511;write_eeprom(11,0xff);delay_ms(20);write_eeprom(12,0x01);delay_ms(20); 
120C:  CLRF   xC2
120E:  MOVLW  80
1210:  MOVWF  xC1
1212:  MOVLW  7F
1214:  MOVWF  xC0
1216:  MOVLW  87
1218:  MOVWF  xBF
121A:  MOVLW  0B
121C:  MOVWF  FA9
121E:  MOVLW  FF
1220:  MOVWF  FA8
1222:  BCF    FA6.6
1224:  BCF    FA6.7
1226:  BSF    FA6.2
1228:  MOVF   FF2,W
122A:  MOVWF  00
122C:  BCF    FF2.6
122E:  BCF    FF2.7
1230:  MOVLB  F
1232:  MOVLW  55
1234:  MOVWF  FA7
1236:  MOVLW  AA
1238:  MOVWF  FA7
123A:  BSF    FA6.1
123C:  BTFSC  FA6.1
123E:  BRA    123C
1240:  BCF    FA6.2
1242:  MOVF   00,W
1244:  IORWF  FF2,F
1246:  MOVLW  14
1248:  MOVLB  0
124A:  MOVWF  xFC
124C:  CALL   092A
1250:  MOVLW  0C
1252:  MOVWF  FA9
1254:  MOVLW  01
1256:  MOVWF  FA8
1258:  BCF    FA6.6
125A:  BCF    FA6.7
125C:  BSF    FA6.2
125E:  MOVF   FF2,W
1260:  MOVWF  00
1262:  BCF    FF2.6
1264:  BCF    FF2.7
1266:  MOVLB  F
1268:  MOVLW  55
126A:  MOVWF  FA7
126C:  MOVLW  AA
126E:  MOVWF  FA7
1270:  BSF    FA6.1
1272:  BTFSC  FA6.1
1274:  BRA    1272
1276:  BCF    FA6.2
1278:  MOVF   00,W
127A:  IORWF  FF2,F
127C:  MOVLW  14
127E:  MOVLB  0
1280:  MOVWF  xFC
1282:  CALL   092A
....................    } 
....................    if(Vel1>6){ 
1286:  MOVF   58,W
1288:  SUBLW  06
128A:  BC    12C6
....................       Vel1=4;write_eeprom(13,4);delay_ms(20); 
128C:  MOVLW  04
128E:  MOVWF  58
1290:  MOVLW  0D
1292:  MOVWF  FA9
1294:  MOVLW  04
1296:  MOVWF  FA8
1298:  BCF    FA6.6
129A:  BCF    FA6.7
129C:  BSF    FA6.2
129E:  MOVF   FF2,W
12A0:  MOVWF  00
12A2:  BCF    FF2.6
12A4:  BCF    FF2.7
12A6:  MOVLB  F
12A8:  MOVLW  55
12AA:  MOVWF  FA7
12AC:  MOVLW  AA
12AE:  MOVWF  FA7
12B0:  BSF    FA6.1
12B2:  BTFSC  FA6.1
12B4:  BRA    12B2
12B6:  BCF    FA6.2
12B8:  MOVF   00,W
12BA:  IORWF  FF2,F
12BC:  MOVLW  14
12BE:  MOVLB  0
12C0:  MOVWF  xFC
12C2:  CALL   092A
....................    } 
....................    if(horasTrabajo>60000){ 
12C6:  MOVF   xCA,W
12C8:  SUBLW  E9
12CA:  BC    1342
12CC:  XORLW  FF
12CE:  BNZ   12D6
12D0:  MOVF   xC9,W
12D2:  SUBLW  60
12D4:  BC    1342
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
12D6:  CLRF   xCA
12D8:  CLRF   xC9
12DA:  MOVLW  13
12DC:  MOVWF  FA9
12DE:  CLRF   FA8
12E0:  BCF    FA6.6
12E2:  BCF    FA6.7
12E4:  BSF    FA6.2
12E6:  MOVF   FF2,W
12E8:  MOVWF  00
12EA:  BCF    FF2.6
12EC:  BCF    FF2.7
12EE:  MOVLB  F
12F0:  MOVLW  55
12F2:  MOVWF  FA7
12F4:  MOVLW  AA
12F6:  MOVWF  FA7
12F8:  BSF    FA6.1
12FA:  BTFSC  FA6.1
12FC:  BRA    12FA
12FE:  BCF    FA6.2
1300:  MOVF   00,W
1302:  IORWF  FF2,F
1304:  MOVLW  14
1306:  MOVLB  0
1308:  MOVWF  xFC
130A:  CALL   092A
130E:  MOVLW  12
1310:  MOVWF  FA9
1312:  CLRF   FA8
1314:  BCF    FA6.6
1316:  BCF    FA6.7
1318:  BSF    FA6.2
131A:  MOVF   FF2,W
131C:  MOVWF  00
131E:  BCF    FF2.6
1320:  BCF    FF2.7
1322:  MOVLB  F
1324:  MOVLW  55
1326:  MOVWF  FA7
1328:  MOVLW  AA
132A:  MOVWF  FA7
132C:  BSF    FA6.1
132E:  BTFSC  FA6.1
1330:  BRA    132E
1332:  BCF    FA6.2
1334:  MOVF   00,W
1336:  IORWF  FF2,F
1338:  MOVLW  14
133A:  MOVLB  0
133C:  MOVWF  xFC
133E:  CALL   092A
....................    } 
....................    if(segundosTrabajo>3600){ 
1342:  MOVF   xC8,W
1344:  SUBLW  0D
1346:  BC    13BE
1348:  XORLW  FF
134A:  BNZ   1352
134C:  MOVF   xC7,W
134E:  SUBLW  10
1350:  BC    13BE
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
1352:  CLRF   xC8
1354:  CLRF   xC7
1356:  MOVLW  14
1358:  MOVWF  FA9
135A:  CLRF   FA8
135C:  BCF    FA6.6
135E:  BCF    FA6.7
1360:  BSF    FA6.2
1362:  MOVF   FF2,W
1364:  MOVWF  00
1366:  BCF    FF2.6
1368:  BCF    FF2.7
136A:  MOVLB  F
136C:  MOVLW  55
136E:  MOVWF  FA7
1370:  MOVLW  AA
1372:  MOVWF  FA7
1374:  BSF    FA6.1
1376:  BTFSC  FA6.1
1378:  BRA    1376
137A:  BCF    FA6.2
137C:  MOVF   00,W
137E:  IORWF  FF2,F
1380:  MOVLW  14
1382:  MOVLB  0
1384:  MOVWF  xFC
1386:  CALL   092A
138A:  MOVLW  15
138C:  MOVWF  FA9
138E:  CLRF   FA8
1390:  BCF    FA6.6
1392:  BCF    FA6.7
1394:  BSF    FA6.2
1396:  MOVF   FF2,W
1398:  MOVWF  00
139A:  BCF    FF2.6
139C:  BCF    FF2.7
139E:  MOVLB  F
13A0:  MOVLW  55
13A2:  MOVWF  FA7
13A4:  MOVLW  AA
13A6:  MOVWF  FA7
13A8:  BSF    FA6.1
13AA:  BTFSC  FA6.1
13AC:  BRA    13AA
13AE:  BCF    FA6.2
13B0:  MOVF   00,W
13B2:  IORWF  FF2,F
13B4:  MOVLW  14
13B6:  MOVLB  0
13B8:  MOVWF  xFC
13BA:  CALL   092A
....................    } 
....................    if(motor>1){ 
13BE:  MOVF   45,W
13C0:  SUBLW  01
13C2:  BC    13FE
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
13C4:  MOVLW  01
13C6:  MOVWF  45
13C8:  MOVLW  16
13CA:  MOVWF  FA9
13CC:  MOVLW  01
13CE:  MOVWF  FA8
13D0:  BCF    FA6.6
13D2:  BCF    FA6.7
13D4:  BSF    FA6.2
13D6:  MOVF   FF2,W
13D8:  MOVWF  00
13DA:  BCF    FF2.6
13DC:  BCF    FF2.7
13DE:  MOVLB  F
13E0:  MOVLW  55
13E2:  MOVWF  FA7
13E4:  MOVLW  AA
13E6:  MOVWF  FA7
13E8:  BSF    FA6.1
13EA:  BTFSC  FA6.1
13EC:  BRA    13EA
13EE:  BCF    FA6.2
13F0:  MOVF   00,W
13F2:  IORWF  FF2,F
13F4:  MOVLW  14
13F6:  MOVLB  0
13F8:  MOVWF  xFC
13FA:  CALL   092A
....................    } 
....................    if(luz>1){ 
13FE:  MOVF   46,W
1400:  SUBLW  01
1402:  BC    143E
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
1404:  MOVLW  01
1406:  MOVWF  46
1408:  MOVLW  17
140A:  MOVWF  FA9
140C:  MOVLW  01
140E:  MOVWF  FA8
1410:  BCF    FA6.6
1412:  BCF    FA6.7
1414:  BSF    FA6.2
1416:  MOVF   FF2,W
1418:  MOVWF  00
141A:  BCF    FF2.6
141C:  BCF    FF2.7
141E:  MOVLB  F
1420:  MOVLW  55
1422:  MOVWF  FA7
1424:  MOVLW  AA
1426:  MOVWF  FA7
1428:  BSF    FA6.1
142A:  BTFSC  FA6.1
142C:  BRA    142A
142E:  BCF    FA6.2
1430:  MOVF   00,W
1432:  IORWF  FF2,F
1434:  MOVLW  14
1436:  MOVLB  0
1438:  MOVWF  xFC
143A:  CALL   092A
....................    } 
.................... } 
143E:  GOTO   2A46 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
*
2848:  BCF    2A.5
....................    if(VIDRIOUUP || !VIDRIODN){ 
284A:  BSF    F92.1
284C:  BTFSS  F80.1
284E:  BRA    2856
2850:  BSF    F92.2
2852:  BTFSS  F80.2
2854:  BRA    2860
....................       O1_on;O2_off; 
2856:  BSF    F8A.6
2858:  BCF    F93.6
285A:  BCF    F8A.7
285C:  BCF    F93.7
....................    }else{ 
285E:  BRA    286A
....................       O1_off;O2_off; 
2860:  BCF    F8A.6
2862:  BCF    F93.6
2864:  BCF    F8A.7
2866:  BCF    F93.7
....................       pulsoBajar=OFF; 
2868:  BCF    2A.6
....................    } 
.................... } 
286A:  GOTO   4840 (RETURN)
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
*
2822:  BCF    2A.6
....................    if(!VIDRIOUUP || VIDRIODN){ 
2824:  BSF    F92.1
2826:  BTFSC  F80.1
2828:  BRA    2830
282A:  BSF    F92.2
282C:  BTFSC  F80.2
282E:  BRA    283A
....................       O1_off;O2_on; 
2830:  BCF    F8A.6
2832:  BCF    F93.6
2834:  BSF    F8A.7
2836:  BCF    F93.7
....................    }else{ 
2838:  BRA    2844
....................       O1_off;O2_off; 
283A:  BCF    F8A.6
283C:  BCF    F93.6
283E:  BCF    F8A.7
2840:  BCF    F93.7
....................       pulsoSubir=OFF; 
2842:  BCF    2A.5
....................    } 
.................... } 
2844:  GOTO   4836 (RETURN)
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
*
286E:  BCF    F8A.6
2870:  BCF    F93.6
2872:  BCF    F8A.7
2874:  BCF    F93.7
.................... } 
2876:  GOTO   4846 (RETURN)
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
159A:  MOVF   xC8,W
159C:  SUBLW  0D
159E:  BTFSC  FD8.0
15A0:  BRA    16AA
15A2:  XORLW  FF
15A4:  BNZ   15AE
15A6:  MOVF   xC7,W
15A8:  SUBLW  0F
15AA:  BTFSC  FD8.0
15AC:  BRA    16AA
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
15AE:  CLRF   xC8
15B0:  CLRF   xC7
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
15B2:  MOVFF  C7,E6
15B6:  MOVLW  14
15B8:  MOVWF  FA9
15BA:  MOVFF  E6,FA8
15BE:  BCF    FA6.6
15C0:  BCF    FA6.7
15C2:  BSF    FA6.2
15C4:  MOVF   FF2,W
15C6:  MOVWF  00
15C8:  BCF    FF2.6
15CA:  BCF    FF2.7
15CC:  MOVLB  F
15CE:  MOVLW  55
15D0:  MOVWF  FA7
15D2:  MOVLW  AA
15D4:  MOVWF  FA7
15D6:  BSF    FA6.1
15D8:  BTFSC  FA6.1
15DA:  BRA    15D8
15DC:  BCF    FA6.2
15DE:  MOVF   00,W
15E0:  IORWF  FF2,F
....................       delay_ms(20); 
15E2:  MOVLW  14
15E4:  MOVLB  0
15E6:  MOVWF  xFC
15E8:  CALL   092A
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
15EC:  MOVFF  C8,E6
15F0:  MOVLW  15
15F2:  MOVWF  FA9
15F4:  MOVFF  E6,FA8
15F8:  BCF    FA6.6
15FA:  BCF    FA6.7
15FC:  BSF    FA6.2
15FE:  MOVF   FF2,W
1600:  MOVWF  00
1602:  BCF    FF2.6
1604:  BCF    FF2.7
1606:  MOVLB  F
1608:  MOVLW  55
160A:  MOVWF  FA7
160C:  MOVLW  AA
160E:  MOVWF  FA7
1610:  BSF    FA6.1
1612:  BTFSC  FA6.1
1614:  BRA    1612
1616:  BCF    FA6.2
1618:  MOVF   00,W
161A:  IORWF  FF2,F
....................       delay_ms(20); 
161C:  MOVLW  14
161E:  MOVLB  0
1620:  MOVWF  xFC
1622:  CALL   092A
....................       horasTrabajo++; 
1626:  INCF   xC9,F
1628:  BTFSC  FD8.2
162A:  INCF   xCA,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
162C:  MOVFF  C9,E6
1630:  MOVLW  12
1632:  MOVWF  FA9
1634:  MOVFF  E6,FA8
1638:  BCF    FA6.6
163A:  BCF    FA6.7
163C:  BSF    FA6.2
163E:  MOVF   FF2,W
1640:  MOVWF  00
1642:  BCF    FF2.6
1644:  BCF    FF2.7
1646:  MOVLB  F
1648:  MOVLW  55
164A:  MOVWF  FA7
164C:  MOVLW  AA
164E:  MOVWF  FA7
1650:  BSF    FA6.1
1652:  BTFSC  FA6.1
1654:  BRA    1652
1656:  BCF    FA6.2
1658:  MOVF   00,W
165A:  IORWF  FF2,F
....................       delay_ms(20); 
165C:  MOVLW  14
165E:  MOVLB  0
1660:  MOVWF  xFC
1662:  CALL   092A
....................       write_eeprom(19,make8(horasTrabajo,1)); 
1666:  MOVFF  CA,E6
166A:  MOVLW  13
166C:  MOVWF  FA9
166E:  MOVFF  E6,FA8
1672:  BCF    FA6.6
1674:  BCF    FA6.7
1676:  BSF    FA6.2
1678:  MOVF   FF2,W
167A:  MOVWF  00
167C:  BCF    FF2.6
167E:  BCF    FF2.7
1680:  MOVLB  F
1682:  MOVLW  55
1684:  MOVWF  FA7
1686:  MOVLW  AA
1688:  MOVWF  FA7
168A:  BSF    FA6.1
168C:  BTFSC  FA6.1
168E:  BRA    168C
1690:  BCF    FA6.2
1692:  MOVF   00,W
1694:  IORWF  FF2,F
....................       delay_ms(20); 
1696:  MOVLW  14
1698:  MOVLB  0
169A:  MOVWF  xFC
169C:  CALL   092A
....................       delay_ms(20); 
16A0:  MOVLW  14
16A2:  MOVWF  xFC
16A4:  CALL   092A
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
16A8:  BRA    1742
16AA:  MOVF   xC7,W
16AC:  SUBLW  84
16AE:  BNZ   16B6
16B0:  MOVF   xC8,W
16B2:  SUBLW  03
16B4:  BZ    16CE
16B6:  MOVF   xC7,W
16B8:  SUBLW  08
16BA:  BNZ   16C2
16BC:  MOVF   xC8,W
16BE:  SUBLW  07
16C0:  BZ    16CE
16C2:  MOVF   xC7,W
16C4:  SUBLW  8C
16C6:  BNZ   1742
16C8:  MOVF   xC8,W
16CA:  SUBLW  0A
16CC:  BNZ   1742
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
16CE:  MOVFF  C7,E6
16D2:  MOVLW  14
16D4:  MOVWF  FA9
16D6:  MOVFF  E6,FA8
16DA:  BCF    FA6.6
16DC:  BCF    FA6.7
16DE:  BSF    FA6.2
16E0:  MOVF   FF2,W
16E2:  MOVWF  00
16E4:  BCF    FF2.6
16E6:  BCF    FF2.7
16E8:  MOVLB  F
16EA:  MOVLW  55
16EC:  MOVWF  FA7
16EE:  MOVLW  AA
16F0:  MOVWF  FA7
16F2:  BSF    FA6.1
16F4:  BTFSC  FA6.1
16F6:  BRA    16F4
16F8:  BCF    FA6.2
16FA:  MOVF   00,W
16FC:  IORWF  FF2,F
....................       delay_ms(20); 
16FE:  MOVLW  14
1700:  MOVLB  0
1702:  MOVWF  xFC
1704:  CALL   092A
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
1708:  MOVFF  C8,E6
170C:  MOVLW  15
170E:  MOVWF  FA9
1710:  MOVFF  E6,FA8
1714:  BCF    FA6.6
1716:  BCF    FA6.7
1718:  BSF    FA6.2
171A:  MOVF   FF2,W
171C:  MOVWF  00
171E:  BCF    FF2.6
1720:  BCF    FF2.7
1722:  MOVLB  F
1724:  MOVLW  55
1726:  MOVWF  FA7
1728:  MOVLW  AA
172A:  MOVWF  FA7
172C:  BSF    FA6.1
172E:  BTFSC  FA6.1
1730:  BRA    172E
1732:  BCF    FA6.2
1734:  MOVF   00,W
1736:  IORWF  FF2,F
....................       delay_ms(20); 
1738:  MOVLW  14
173A:  MOVLB  0
173C:  MOVWF  xFC
173E:  CALL   092A
....................    } 
.................... //----------------------------------------// 
.................... } 
1742:  GOTO   2A70 (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    output_bit(PIN_C4,0); 
....................    output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }   
....................  
....................  
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    2B.5
....................     
....................    if(VelMotor==5){ 
024A:  MOVF   xCE,W
024C:  SUBLW  05
024E:  BNZ   0260
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0250:  CLRF   FD7
0252:  MOVLW  E4
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==4){ 
025E:  BRA    02B4
0260:  MOVF   xCE,W
0262:  SUBLW  04
0264:  BNZ   0276
....................       set_timer0(201);       
0266:  CLRF   FD7
0268:  MOVLW  C9
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==3){ 
0274:  BRA    02B4
0276:  MOVF   xCE,W
0278:  SUBLW  03
027A:  BNZ   028C
....................       set_timer0(196); 
027C:  CLRF   FD7
027E:  MOVLW  C4
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==2){ 
028A:  BRA    02B4
028C:  MOVF   xCE,W
028E:  SUBLW  02
0290:  BNZ   02A2
....................       set_timer0(188); 
0292:  CLRF   FD7
0294:  MOVLW  BC
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==1){ 
02A0:  BRA    02B4
02A2:  DECFSZ xCE,W
02A4:  BRA    02B4
....................       set_timer0(180); 
02A6:  CLRF   FD7
02A8:  MOVLW  B4
02AA:  MOVWF  FD6
....................       Motor_off;  
02AC:  BCF    F8B.2
02AE:  BCF    F94.2
....................       Motor2_off;  
02B0:  BCF    F8B.1
02B2:  BCF    F94.1
....................    } 
....................    pulsos++;    
02B4:  INCF   xC3,F
02B6:  BTFSC  FD8.2
02B8:  INCF   xC4,F
.................... } 
....................  
02BA:  BCF    FF2.1
02BC:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<6){ 
02C0:  MOVF   xCE,F
02C2:  BZ    02EC
02C4:  MOVF   xCE,W
02C6:  SUBLW  05
02C8:  BNC   02EC
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
02CA:  BTFSS  2B.5
02CC:  BRA    02E0
....................       Motor_on; 
02CE:  BSF    F8B.2
02D0:  BCF    F94.2
....................       Motor2_on;  
02D2:  BSF    F8B.1
02D4:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
02D6:  CLRF   FD7
02D8:  MOVLW  FD
02DA:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
02DC:  BCF    2B.5
....................    } else {            //The triac has been triggered, cut the pulse 
02DE:  BRA    02EC
....................       Motor_off; 
02E0:  BCF    F8B.2
02E2:  BCF    F94.2
....................       Motor2_off;  
02E4:  BCF    F8B.1
02E6:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
02E8:  CLRF   FD7
02EA:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
02EC:  BCF    FF2.2
02EE:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(40536);//5ms 
02F2:  MOVLW  9E
02F4:  MOVWF  FCF
02F6:  MOVLW  58
02F8:  MOVWF  FCE
....................    tiempos++; 
02FA:  INCF   59,F
02FC:  BTFSC  FD8.2
02FE:  INCF   5A,F
....................     
....................    if(tiempos>=200){//1s 
0300:  MOVF   5A,F
0302:  BNZ   030A
0304:  MOVF   59,W
0306:  SUBLW  C7
0308:  BC    0366
....................       output_toggle(PIN_A3); 
030A:  BCF    F92.3
030C:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
030E:  CLRF   5A
0310:  CLRF   59
0312:  INCF   43,F
0314:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
0316:  DECFSZ 53,W
0318:  BRA    032E
....................          if(estadobuzzer==0){ 
031A:  BTFSC  2A.3
031C:  BRA    0324
....................             Buzzer_off; 
031E:  BCF    F8B.0
0320:  BCF    F94.0
....................          }else{ 
0322:  BRA    032C
....................             if(estadoalarma==1) 
0324:  BTFSS  2A.4
0326:  BRA    032C
....................                Buzzer_on; 
0328:  BSF    F8B.0
032A:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
032C:  BTG    2A.3
....................       } 
....................        
....................       if(estadomv==1) 
032E:  BTFSS  29.2
0330:  BRA    0338
....................          segundosTrabajo++; 
0332:  INCF   xC7,F
0334:  BTFSC  FD8.2
0336:  INCF   xC8,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
0338:  BTFSS  29.0
033A:  BRA    0366
....................          segundos++; 
033C:  INCF   35,F
....................          if(tiempo_cumplido==0){ 
033E:  BTFSC  29.7
0340:  BRA    0366
....................             if(tempo_segundos>0){ 
0342:  MOVF   3C,F
0344:  BZ    034A
....................                tempo_segundos--; 
0346:  DECF   3C,F
....................             }else{ 
0348:  BRA    0366
....................                if(tempo_minutos>0){ 
034A:  MOVF   3B,F
034C:  BZ    0356
....................                   tempo_minutos--; 
034E:  DECF   3B,F
....................                   tempo_segundos=59; 
0350:  MOVLW  3B
0352:  MOVWF  3C
....................                }else{ 
0354:  BRA    0366
....................                   tiempo_cumplido=1; 
0356:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
0358:  BCF    29.0
035A:  BSF    F8A.3
035C:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
035E:  MOVFF  3D,3B
0362:  MOVFF  3E,3C
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0366:  BCF    F9E.0
0368:  GOTO   0064
.................... void main () 
.................... { 
*
287A:  CLRF   FF8
287C:  BSF    FF1.2
287E:  BCF    F9F.0
2880:  BSF    FD0.7
2882:  BSF    07.7
2884:  CLRF   FEA
2886:  CLRF   FE9
2888:  BCF    29.0
288A:  BCF    29.1
288C:  BCF    29.2
288E:  BCF    29.3
2890:  BCF    29.4
2892:  BCF    29.5
2894:  BCF    29.6
2896:  BCF    29.7
2898:  BCF    2A.0
289A:  BCF    2A.1
289C:  BCF    2A.2
289E:  BCF    2A.3
28A0:  BCF    2A.4
28A2:  BCF    2A.5
28A4:  BCF    2A.6
28A6:  BCF    2A.7
28A8:  BCF    2B.0
28AA:  BCF    2B.1
28AC:  BCF    2B.2
28AE:  CLRF   2C
28B0:  MOVLW  07
28B2:  MOVWF  2D
28B4:  MOVLW  02
28B6:  MOVWF  2E
28B8:  MOVLW  0B
28BA:  MOVWF  2F
28BC:  MOVLW  02
28BE:  MOVWF  30
28C0:  MOVLW  03
28C2:  MOVWF  31
28C4:  MOVLW  02
28C6:  MOVWF  32
28C8:  MOVWF  33
28CA:  MOVLW  04
28CC:  MOVWF  34
28CE:  CLRF   35
28D0:  CLRF   36
28D2:  CLRF   37
28D4:  CLRF   38
28D6:  CLRF   39
28D8:  CLRF   3A
28DA:  CLRF   3B
28DC:  CLRF   3C
28DE:  CLRF   3D
28E0:  CLRF   3E
28E2:  CLRF   3F
28E4:  CLRF   40
28E6:  CLRF   41
28E8:  MOVLW  01
28EA:  MOVWF  42
28EC:  CLRF   43
28EE:  CLRF   44
28F0:  CLRF   45
28F2:  CLRF   46
28F4:  CLRF   47
28F6:  CLRF   53
28F8:  CLRF   54
28FA:  CLRF   55
28FC:  CLRF   56
28FE:  CLRF   57
2900:  MOVLW  04
2902:  MOVWF  58
2904:  CLRF   5C
2906:  CLRF   5B
2908:  CLRF   5E
290A:  CLRF   5D
290C:  CLRF   xB2
290E:  CLRF   xB1
2910:  CLRF   xB0
2912:  CLRF   xAF
2914:  CLRF   xB6
2916:  CLRF   xB5
2918:  CLRF   xB4
291A:  CLRF   xB3
291C:  CLRF   xBA
291E:  CLRF   xB9
2920:  CLRF   xB8
2922:  CLRF   xB7
2924:  CLRF   xBE
2926:  CLRF   xBD
2928:  CLRF   xBC
292A:  CLRF   xBB
292C:  CLRF   xC2
292E:  CLRF   xC1
2930:  CLRF   xC0
2932:  MOVLW  80
2934:  MOVWF  xBF
2936:  BSF    2B.3
2938:  BCF    2B.4
293A:  CLRF   xC4
293C:  CLRF   xC3
293E:  CLRF   xC6
2940:  CLRF   xC5
2942:  CLRF   xC8
2944:  CLRF   xC7
2946:  CLRF   xCA
2948:  CLRF   xC9
294A:  BCF    2B.5
294C:  BCF    2B.6
294E:  CLRF   xCC
2950:  CLRF   xCB
2952:  CLRF   xCD
2954:  CLRF   xCE
2956:  CLRF   xD2
2958:  CLRF   xD1
295A:  CLRF   xD0
295C:  CLRF   xCF
295E:  CLRF   xD6
2960:  CLRF   xD5
2962:  CLRF   xD4
2964:  CLRF   xD3
2966:  CLRF   xE0
2968:  CLRF   xDF
296A:  MOVF   FC1,W
296C:  ANDLW  C0
296E:  IORLW  0F
2970:  MOVWF  FC1
2972:  MOVLW  07
2974:  MOVWF  FB4
2976:  MOVLW  3E
2978:  MOVWF  48
297A:  MOVLW  20
297C:  MOVWF  49
297E:  MOVLW  5E
2980:  MOVWF  4A
2982:  CLRF   4B
2984:  CLRF   4C
2986:  CLRF   4D
2988:  CLRF   4E
298A:  CLRF   4F
298C:  CLRF   50
298E:  CLRF   51
2990:  CLRF   52
2992:  CLRF   5F
2994:  CLRF   60
2996:  CLRF   61
2998:  CLRF   62
299A:  CLRF   63
299C:  CLRF   64
299E:  CLRF   65
29A0:  CLRF   66
29A2:  CLRF   67
29A4:  CLRF   68
29A6:  CLRF   69
29A8:  CLRF   6A
29AA:  CLRF   6B
29AC:  CLRF   6C
29AE:  CLRF   6D
29B0:  CLRF   6E
29B2:  CLRF   6F
29B4:  CLRF   70
29B6:  CLRF   71
29B8:  CLRF   72
29BA:  CLRF   73
29BC:  CLRF   74
29BE:  CLRF   75
29C0:  CLRF   76
29C2:  CLRF   77
29C4:  CLRF   78
29C6:  CLRF   79
29C8:  CLRF   7A
29CA:  CLRF   7B
29CC:  CLRF   7C
29CE:  CLRF   7D
29D0:  CLRF   7E
29D2:  CLRF   7F
29D4:  CLRF   x80
29D6:  CLRF   x81
29D8:  CLRF   x82
29DA:  CLRF   x83
29DC:  CLRF   x84
29DE:  CLRF   x85
29E0:  CLRF   x86
29E2:  CLRF   x87
29E4:  CLRF   x88
29E6:  CLRF   x89
29E8:  CLRF   x8A
29EA:  CLRF   x8B
29EC:  CLRF   x8C
29EE:  CLRF   x8D
29F0:  CLRF   x8E
29F2:  CLRF   x8F
29F4:  CLRF   x90
29F6:  CLRF   x91
29F8:  CLRF   x92
29FA:  CLRF   x93
29FC:  CLRF   x94
29FE:  CLRF   x95
2A00:  CLRF   x96
2A02:  CLRF   x97
2A04:  CLRF   x98
2A06:  CLRF   x99
2A08:  CLRF   x9A
2A0A:  CLRF   x9B
2A0C:  CLRF   x9C
2A0E:  CLRF   x9D
2A10:  CLRF   x9E
2A12:  CLRF   x9F
2A14:  CLRF   xA0
2A16:  CLRF   xA1
2A18:  CLRF   xA2
2A1A:  CLRF   xA3
2A1C:  CLRF   xA4
2A1E:  CLRF   xA5
2A20:  CLRF   xA6
2A22:  CLRF   xA7
2A24:  CLRF   xA8
2A26:  CLRF   xA9
2A28:  CLRF   xAA
2A2A:  CLRF   xAB
2A2C:  CLRF   xAC
2A2E:  CLRF   xAD
2A30:  CLRF   xAE
....................    Motor_off; 
2A32:  BCF    F8B.2
2A34:  BCF    F94.2
....................    Motor2_off; 
2A36:  BCF    F8B.1
2A38:  BCF    F94.1
....................    ConfigInterrupciones(); 
2A3A:  GOTO   0A74
....................    LeeEEPROM(); 
2A3E:  GOTO   0AF0
....................    LimitaValores(); 
2A42:  GOTO   0F10
....................    if(motor!=1){ 
2A46:  DECFSZ 45,W
2A48:  BRA    2A4C
2A4A:  BRA    2A52
....................       MensajeBienvenida();  
2A4C:  GOTO   1532
....................    }else{ 
2A50:  BRA    2A64
....................       if(luz==1) 
2A52:  DECFSZ 46,W
2A54:  BRA    2A58
....................          estadofl=1; 
2A56:  BSF    29.1
....................       if(luz==0) 
2A58:  MOVF   46,F
2A5A:  BNZ   2A5E
....................          estadofl=0; 
2A5C:  BCF    29.1
....................       estadomv=1; 
2A5E:  BSF    29.2
....................       Menu=50; 
2A60:  MOVLW  32
2A62:  MOVWF  2C
....................    } 
....................    Motor_off; 
2A64:  BCF    F8B.2
2A66:  BCF    F94.2
....................    Motor2_off; 
2A68:  BCF    F8B.1
2A6A:  BCF    F94.1
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
2A6C:  GOTO   159A
....................    restart_wdt(); 
2A70:  CLRWDT
....................    if(VelMotor==6){ 
2A72:  MOVF   xCE,W
2A74:  SUBLW  06
2A76:  BNZ   2A84
....................       Motor_on; 
2A78:  BSF    F8B.2
2A7A:  BCF    F94.2
....................       Motor2_on;  
2A7C:  BSF    F8B.1
2A7E:  BCF    F94.1
....................       set_timer0(0); 
2A80:  CLRF   FD7
2A82:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
2A84:  MOVF   xCE,F
2A86:  BNZ   2A94
....................       Motor_off; 
2A88:  BCF    F8B.2
2A8A:  BCF    F94.2
....................       Motor2_off;  
2A8C:  BCF    F8B.1
2A8E:  BCF    F94.1
....................       set_timer0(0); 
2A90:  CLRF   FD7
2A92:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2A94:  MOVF   2C,F
2A96:  BTFSS  FD8.2
2A98:  BRA    2EA4
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2A9A:  MOVLW  01
2A9C:  MOVWF  xF8
2A9E:  MOVWF  xF9
2AA0:  CALL   1442
....................          printf(lcd_putc,"     Ingrese        "); 
2AA4:  MOVLW  6C
2AA6:  MOVWF  FF6
2AA8:  MOVLW  03
2AAA:  MOVWF  FF7
2AAC:  CALL   1512
....................          lcd_gotoxy(1,2); 
2AB0:  MOVLW  01
2AB2:  MOVWF  xF8
2AB4:  MOVLW  02
2AB6:  MOVWF  xF9
2AB8:  CALL   1442
....................          printf(lcd_putc,"    Contraseña      "); 
2ABC:  MOVLW  82
2ABE:  MOVWF  FF6
2AC0:  MOVLW  03
2AC2:  MOVWF  FF7
2AC4:  CALL   1512
....................          lcd_gotoxy(1,3); 
2AC8:  MOVLW  01
2ACA:  MOVWF  xF8
2ACC:  MOVLW  03
2ACE:  MOVWF  xF9
2AD0:  CALL   1442
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2AD4:  MOVLW  98
2AD6:  MOVWF  FF6
2AD8:  MOVLW  03
2ADA:  MOVWF  FF7
2ADC:  MOVLW  0A
2ADE:  MOVWF  xEA
2AE0:  CALL   1746
2AE4:  MOVFF  4B,E6
2AE8:  MOVLW  1F
2AEA:  MOVWF  xE7
2AEC:  CALL   178C
2AF0:  MOVFF  4C,E6
2AF4:  MOVLW  1F
2AF6:  MOVWF  xE7
2AF8:  CALL   178C
2AFC:  MOVFF  4D,E6
2B00:  MOVLW  1F
2B02:  MOVWF  xE7
2B04:  CALL   178C
2B08:  MOVFF  4E,E6
2B0C:  MOVLW  1F
2B0E:  MOVWF  xE7
2B10:  CALL   178C
2B14:  MOVLW  20
2B16:  MOVWF  xF7
2B18:  CALL   14AC
2B1C:  MOVLW  20
2B1E:  MOVWF  xF7
2B20:  CALL   14AC
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2B24:  MOVFF  2F,F8
2B28:  MOVLW  04
2B2A:  MOVWF  xF9
2B2C:  CALL   1442
....................          lcd_putc(t[2]); 
2B30:  MOVFF  4A,F7
2B34:  CALL   14AC
....................           
....................          if(unidad>11&&unidad<14){ 
2B38:  MOVF   2F,W
2B3A:  SUBLW  0B
2B3C:  BC    2B5C
2B3E:  MOVF   2F,W
2B40:  SUBLW  0D
2B42:  BNC   2B5C
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2B44:  MOVLW  01
2B46:  SUBWF  2F,W
2B48:  MOVWF  xE6
2B4A:  MOVWF  xF8
2B4C:  MOVLW  04
2B4E:  MOVWF  xF9
2B50:  CALL   1442
....................             lcd_putc(t[1]); 
2B54:  MOVFF  49,F7
2B58:  CALL   14AC
....................          } 
....................           
....................          Cambio=OFF; 
2B5C:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2B5E:  BSF    F92.5
2B60:  BTFSC  F80.5
2B62:  BRA    2B96
....................          delay_ms(20); 
2B64:  MOVLW  14
2B66:  MOVWF  xFC
2B68:  CALL   092A
....................          if(UP){ 
2B6C:  BSF    F92.5
2B6E:  BTFSC  F80.5
2B70:  BRA    2B94
....................             if(Flanco == 0) { 
2B72:  BTFSC  29.3
2B74:  BRA    2B94
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2B76:  MOVLW  0B
2B78:  SUBWF  2F,W
2B7A:  CLRF   03
2B7C:  ADDLW  4B
2B7E:  MOVWF  FE9
2B80:  MOVLW  00
2B82:  ADDWFC 03,W
2B84:  MOVWF  FEA
2B86:  INCF   FEF,F
2B88:  BSF    29.3
2B8A:  MOVLW  1E
2B8C:  MOVWF  xFC
2B8E:  CALL   092A
2B92:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2B94:  BRA    2B98
....................          Flanco = 0; 
2B96:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2B98:  BSF    F96.0
2B9A:  BTFSC  F84.0
2B9C:  BRA    2BD0
....................          delay_ms(20); 
2B9E:  MOVLW  14
2BA0:  MOVWF  xFC
2BA2:  CALL   092A
....................          if(DOWN){ 
2BA6:  BSF    F96.0
2BA8:  BTFSC  F84.0
2BAA:  BRA    2BCE
....................             if(Flanco2 == 0) { 
2BAC:  BTFSC  29.5
2BAE:  BRA    2BCE
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2BB0:  MOVLW  0B
2BB2:  SUBWF  2F,W
2BB4:  CLRF   03
2BB6:  ADDLW  4B
2BB8:  MOVWF  FE9
2BBA:  MOVLW  00
2BBC:  ADDWFC 03,W
2BBE:  MOVWF  FEA
2BC0:  DECF   FEF,F
2BC2:  BSF    29.5
2BC4:  MOVLW  1E
2BC6:  MOVWF  xFC
2BC8:  CALL   092A
2BCC:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2BCE:  BRA    2BD2
....................          Flanco2 = 0; 
2BD0:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2BD2:  BSF    F96.1
2BD4:  BTFSC  F84.1
2BD6:  BRA    2C02
....................          delay_ms(20); 
2BD8:  MOVLW  14
2BDA:  MOVWF  xFC
2BDC:  CALL   092A
....................          if(RIGHT){ 
2BE0:  BSF    F96.1
2BE2:  BTFSC  F84.1
2BE4:  BRA    2C00
....................             if(Flanco1 == 0) { 
2BE6:  BTFSC  29.4
2BE8:  BRA    2C00
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2BEA:  BSF    29.4
2BEC:  INCF   2F,F
2BEE:  MOVLW  1E
2BF0:  MOVWF  xFC
2BF2:  CALL   092A
2BF6:  MOVLW  0C
2BF8:  MOVWF  xF7
2BFA:  CALL   14AC
2BFE:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2C00:  BRA    2C04
....................          Flanco1 = 0; 
2C02:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2C04:  BSF    F96.2
2C06:  BTFSC  F84.2
2C08:  BRA    2C34
....................          delay_ms(150); 
2C0A:  MOVLW  96
2C0C:  MOVWF  xFC
2C0E:  CALL   092A
....................          if(IZQU){ 
2C12:  BSF    F96.2
2C14:  BTFSC  F84.2
2C16:  BRA    2C32
....................             if(Flanco3 == 0){ 
2C18:  BTFSC  29.6
2C1A:  BRA    2C32
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C1C:  BSF    29.6
2C1E:  DECF   2F,F
2C20:  MOVLW  1E
2C22:  MOVWF  xFC
2C24:  CALL   092A
2C28:  MOVLW  0C
2C2A:  MOVWF  xF7
2C2C:  CALL   14AC
2C30:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2C32:  BRA    2C36
....................         Flanco3 = 0; 
2C34:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2C36:  MOVLW  0B
2C38:  SUBWF  2F,W
2C3A:  CLRF   03
2C3C:  ADDLW  4B
2C3E:  MOVWF  FE9
2C40:  MOVLW  00
2C42:  ADDWFC 03,W
2C44:  MOVWF  FEA
2C46:  BTFSC  FEF.7
2C48:  BRA    2C4C
2C4A:  BRA    2C60
....................          clave[unidad-11]=9; 
2C4C:  MOVLW  0B
2C4E:  SUBWF  2F,W
2C50:  CLRF   03
2C52:  ADDLW  4B
2C54:  MOVWF  FE9
2C56:  MOVLW  00
2C58:  ADDWFC 03,W
2C5A:  MOVWF  FEA
2C5C:  MOVLW  09
2C5E:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2C60:  MOVLW  0B
2C62:  SUBWF  2F,W
2C64:  CLRF   03
2C66:  ADDLW  4B
2C68:  MOVWF  FE9
2C6A:  MOVLW  00
2C6C:  ADDWFC 03,W
2C6E:  MOVWF  FEA
2C70:  BTFSC  FEF.7
2C72:  BRA    2C8C
2C74:  MOVF   FEF,W
2C76:  SUBLW  09
2C78:  BC    2C8C
....................          clave[unidad-11]=0; 
2C7A:  MOVLW  0B
2C7C:  SUBWF  2F,W
2C7E:  CLRF   03
2C80:  ADDLW  4B
2C82:  MOVWF  FE9
2C84:  MOVLW  00
2C86:  ADDWFC 03,W
2C88:  MOVWF  FEA
2C8A:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2C8C:  MOVF   2F,W
2C8E:  SUBLW  0A
2C90:  BNC   2C96
....................          unidad=11; 
2C92:  MOVLW  0B
2C94:  MOVWF  2F
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2C96:  MOVF   2F,W
2C98:  SUBLW  0E
2C9A:  BTFSC  FD8.0
2C9C:  BRA    2EA4
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2C9E:  MOVF   4B,W
2CA0:  SUBLW  03
2CA2:  BNZ   2D86
2CA4:  MOVF   4C,W
2CA6:  SUBLW  08
2CA8:  BNZ   2D86
2CAA:  MOVF   4D,W
2CAC:  SUBLW  09
2CAE:  BNZ   2D86
2CB0:  MOVF   4E,W
2CB2:  SUBLW  02
2CB4:  BNZ   2D86
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2CB6:  CLRF   FA9
2CB8:  CLRF   FA8
2CBA:  BCF    FA6.6
2CBC:  BCF    FA6.7
2CBE:  BSF    FA6.2
2CC0:  MOVF   FF2,W
2CC2:  MOVWF  00
2CC4:  BCF    FF2.6
2CC6:  BCF    FF2.7
2CC8:  MOVLB  F
2CCA:  MOVLW  55
2CCC:  MOVWF  FA7
2CCE:  MOVLW  AA
2CD0:  MOVWF  FA7
2CD2:  BSF    FA6.1
2CD4:  BTFSC  FA6.1
2CD6:  BRA    2CD4
2CD8:  BCF    FA6.2
2CDA:  MOVF   00,W
2CDC:  IORWF  FF2,F
2CDE:  MOVLW  14
2CE0:  MOVLB  0
2CE2:  MOVWF  xFC
2CE4:  CALL   092A
2CE8:  MOVLW  01
2CEA:  MOVWF  FA9
2CEC:  CLRF   FA8
2CEE:  BCF    FA6.6
2CF0:  BCF    FA6.7
2CF2:  BSF    FA6.2
2CF4:  MOVF   FF2,W
2CF6:  MOVWF  00
2CF8:  BCF    FF2.6
2CFA:  BCF    FF2.7
2CFC:  MOVLB  F
2CFE:  MOVLW  55
2D00:  MOVWF  FA7
2D02:  MOVLW  AA
2D04:  MOVWF  FA7
2D06:  BSF    FA6.1
2D08:  BTFSC  FA6.1
2D0A:  BRA    2D08
2D0C:  BCF    FA6.2
2D0E:  MOVF   00,W
2D10:  IORWF  FF2,F
2D12:  MOVLW  14
2D14:  MOVLB  0
2D16:  MOVWF  xFC
2D18:  CALL   092A
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2D1C:  MOVLW  02
2D1E:  MOVWF  FA9
2D20:  CLRF   FA8
2D22:  BCF    FA6.6
2D24:  BCF    FA6.7
2D26:  BSF    FA6.2
2D28:  MOVF   FF2,W
2D2A:  MOVWF  00
2D2C:  BCF    FF2.6
2D2E:  BCF    FF2.7
2D30:  MOVLB  F
2D32:  MOVLW  55
2D34:  MOVWF  FA7
2D36:  MOVLW  AA
2D38:  MOVWF  FA7
2D3A:  BSF    FA6.1
2D3C:  BTFSC  FA6.1
2D3E:  BRA    2D3C
2D40:  BCF    FA6.2
2D42:  MOVF   00,W
2D44:  IORWF  FF2,F
2D46:  MOVLW  14
2D48:  MOVLB  0
2D4A:  MOVWF  xFC
2D4C:  CALL   092A
2D50:  MOVLW  03
2D52:  MOVWF  FA9
2D54:  CLRF   FA8
2D56:  BCF    FA6.6
2D58:  BCF    FA6.7
2D5A:  BSF    FA6.2
2D5C:  MOVF   FF2,W
2D5E:  MOVWF  00
2D60:  BCF    FF2.6
2D62:  BCF    FF2.7
2D64:  MOVLB  F
2D66:  MOVLW  55
2D68:  MOVWF  FA7
2D6A:  MOVLW  AA
2D6C:  MOVWF  FA7
2D6E:  BSF    FA6.1
2D70:  BTFSC  FA6.1
2D72:  BRA    2D70
2D74:  BCF    FA6.2
2D76:  MOVF   00,W
2D78:  IORWF  FF2,F
2D7A:  MOVLW  14
2D7C:  MOVLB  0
2D7E:  MOVWF  xFC
2D80:  CALL   092A
....................              reset_cpu(); 
2D84:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2D86:  MOVF   4F,W
2D88:  SUBWF  4B,W
2D8A:  BNZ   2E2A
2D8C:  MOVF   50,W
2D8E:  SUBWF  4C,W
2D90:  BNZ   2E2A
2D92:  MOVF   51,W
2D94:  SUBWF  4D,W
2D96:  BNZ   2E2A
2D98:  MOVF   52,W
2D9A:  SUBWF  4E,W
2D9C:  BNZ   2E2A
....................             lcd_gotoxy(1,1); 
2D9E:  MOVLW  01
2DA0:  MOVWF  xF8
2DA2:  MOVWF  xF9
2DA4:  CALL   1442
....................             printf(lcd_putc,"                   "); 
2DA8:  MOVLW  AE
2DAA:  MOVWF  FF6
2DAC:  MOVLW  03
2DAE:  MOVWF  FF7
2DB0:  CALL   1512
....................             lcd_gotoxy(1,2); 
2DB4:  MOVLW  01
2DB6:  MOVWF  xF8
2DB8:  MOVLW  02
2DBA:  MOVWF  xF9
2DBC:  CALL   1442
....................             printf(lcd_putc,"     Contraseña    "); 
2DC0:  MOVLW  C2
2DC2:  MOVWF  FF6
2DC4:  MOVLW  03
2DC6:  MOVWF  FF7
2DC8:  CALL   1512
....................             lcd_gotoxy(1,3); 
2DCC:  MOVLW  01
2DCE:  MOVWF  xF8
2DD0:  MOVLW  03
2DD2:  MOVWF  xF9
2DD4:  CALL   1442
....................             printf(lcd_putc,"      Correcta     "); 
2DD8:  MOVLW  D6
2DDA:  MOVWF  FF6
2DDC:  MOVLW  03
2DDE:  MOVWF  FF7
2DE0:  CALL   1512
....................             lcd_gotoxy(1,4); 
2DE4:  MOVLW  01
2DE6:  MOVWF  xF8
2DE8:  MOVLW  04
2DEA:  MOVWF  xF9
2DEC:  CALL   1442
....................             printf(lcd_putc,"                   "); 
2DF0:  MOVLW  EA
2DF2:  MOVWF  FF6
2DF4:  MOVLW  03
2DF6:  MOVWF  FF7
2DF8:  CALL   1512
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2DFC:  MOVLW  04
2DFE:  MOVWF  xE6
2E00:  MOVLW  FA
2E02:  MOVWF  xFC
2E04:  CALL   092A
2E08:  DECFSZ xE6,F
2E0A:  BRA    2E00
2E0C:  MOVLW  32
2E0E:  MOVWF  2C
2E10:  MOVLW  0B
2E12:  MOVWF  2F
2E14:  MOVLW  0C
2E16:  MOVWF  xF7
2E18:  CALL   14AC
2E1C:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2E1E:  CLRF   4B
2E20:  CLRF   4C
2E22:  CLRF   4D
2E24:  CLRF   4E
2E26:  BSF    2B.3
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2E28:  BRA    2EA4
....................             lcd_gotoxy(1,1); 
2E2A:  MOVLW  01
2E2C:  MOVWF  xF8
2E2E:  MOVWF  xF9
2E30:  CALL   1442
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2E34:  MOVLW  01
2E36:  MOVWF  xF8
2E38:  MOVLW  02
2E3A:  MOVWF  xF9
2E3C:  CALL   1442
....................             printf(lcd_putc,"     Contraseña    "); 
2E40:  MOVLW  FE
2E42:  MOVWF  FF6
2E44:  MOVLW  03
2E46:  MOVWF  FF7
2E48:  CALL   1512
....................             lcd_gotoxy(1,3); 
2E4C:  MOVLW  01
2E4E:  MOVWF  xF8
2E50:  MOVLW  03
2E52:  MOVWF  xF9
2E54:  CALL   1442
....................             printf(lcd_putc,"     Incorrecta    "); 
2E58:  MOVLW  12
2E5A:  MOVWF  FF6
2E5C:  MOVLW  04
2E5E:  MOVWF  FF7
2E60:  CALL   1512
....................             lcd_gotoxy(1,4); 
2E64:  MOVLW  01
2E66:  MOVWF  xF8
2E68:  MOVLW  04
2E6A:  MOVWF  xF9
2E6C:  CALL   1442
....................             printf(lcd_putc,"                   "); 
2E70:  MOVLW  26
2E72:  MOVWF  FF6
2E74:  MOVLW  04
2E76:  MOVWF  FF7
2E78:  CALL   1512
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2E7C:  MOVLW  04
2E7E:  MOVWF  xE6
2E80:  MOVLW  FA
2E82:  MOVWF  xFC
2E84:  CALL   092A
2E88:  DECFSZ xE6,F
2E8A:  BRA    2E80
2E8C:  MOVLW  0B
2E8E:  MOVWF  2F
2E90:  MOVLW  0C
2E92:  MOVWF  xF7
2E94:  CALL   14AC
2E98:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2E9A:  CLRF   4B
2E9C:  CLRF   4C
2E9E:  CLRF   4D
2EA0:  CLRF   4E
2EA2:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2EA4:  DECFSZ 2C,W
2EA6:  BRA    30DE
....................       EliminaRuido(); 
2EA8:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2EAC:  MOVLW  01
2EAE:  MOVWF  xF8
2EB0:  MOVWF  xF9
2EB2:  CALL   1442
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2EB6:  MOVLW  3A
2EB8:  MOVWF  FF6
2EBA:  MOVLW  04
2EBC:  MOVWF  FF7
2EBE:  CALL   1512
....................          mensajes(1+paso,2); 
2EC2:  MOVLW  01
2EC4:  ADDWF  47,W
2EC6:  MOVWF  xE6
2EC8:  MOVWF  xE7
2ECA:  MOVLW  02
2ECC:  MOVWF  xE8
2ECE:  CALL   1854
....................          mensajes(2+paso,3); 
2ED2:  MOVLW  02
2ED4:  ADDWF  47,W
2ED6:  MOVWF  xE6
2ED8:  MOVWF  xE7
2EDA:  MOVLW  03
2EDC:  MOVWF  xE8
2EDE:  CALL   1854
....................          mensajes(3+paso,4); 
2EE2:  MOVLW  03
2EE4:  ADDWF  47,W
2EE6:  MOVWF  xE6
2EE8:  MOVWF  xE7
2EEA:  MOVLW  04
2EEC:  MOVWF  xE8
2EEE:  CALL   1854
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2EF2:  MOVLW  01
2EF4:  MOVWF  xF8
2EF6:  MOVFF  30,F9
2EFA:  CALL   1442
....................         lcd_putc(t[0]); 
2EFE:  MOVFF  48,F7
2F02:  CALL   14AC
....................  
....................         if(Flecha==2) 
2F06:  MOVF   30,W
2F08:  SUBLW  02
2F0A:  BNZ   2F34
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2F0C:  MOVLW  01
2F0E:  MOVWF  xF8
2F10:  MOVLW  04
2F12:  MOVWF  xF9
2F14:  CALL   1442
....................             lcd_putc(t[1]); 
2F18:  MOVFF  49,F7
2F1C:  CALL   14AC
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2F20:  MOVLW  01
2F22:  MOVWF  xF8
2F24:  MOVLW  03
2F26:  MOVWF  xF9
2F28:  CALL   1442
....................             lcd_putc(t[1]); 
2F2C:  MOVFF  49,F7
2F30:  CALL   14AC
....................           } 
....................          
....................         if(Flecha==4) 
2F34:  MOVF   30,W
2F36:  SUBLW  04
2F38:  BNZ   2F62
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2F3A:  MOVLW  01
2F3C:  MOVWF  xF8
2F3E:  MOVLW  02
2F40:  MOVWF  xF9
2F42:  CALL   1442
....................             lcd_putc(t[1]); 
2F46:  MOVFF  49,F7
2F4A:  CALL   14AC
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2F4E:  MOVLW  01
2F50:  MOVWF  xF8
2F52:  MOVLW  03
2F54:  MOVWF  xF9
2F56:  CALL   1442
....................             lcd_putc(t[1]); 
2F5A:  MOVFF  49,F7
2F5E:  CALL   14AC
....................           } 
....................          
....................         if(Flecha==3) 
2F62:  MOVF   30,W
2F64:  SUBLW  03
2F66:  BNZ   2F90
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2F68:  MOVLW  01
2F6A:  MOVWF  xF8
2F6C:  MOVLW  04
2F6E:  MOVWF  xF9
2F70:  CALL   1442
....................             lcd_putc(t[1]); 
2F74:  MOVFF  49,F7
2F78:  CALL   14AC
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2F7C:  MOVLW  01
2F7E:  MOVWF  xF8
2F80:  MOVLW  02
2F82:  MOVWF  xF9
2F84:  CALL   1442
....................             lcd_putc(t[1]); 
2F88:  MOVFF  49,F7
2F8C:  CALL   14AC
....................           } 
....................          Cambio=OFF; 
2F90:  BCF    2B.3
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
2F92:  BSF    F92.5
2F94:  BTFSC  F80.5
2F96:  BRA    2FC2
....................          delay_ms(20); 
2F98:  MOVLW  14
2F9A:  MOVWF  xFC
2F9C:  CALL   092A
....................          if(UP){ 
2FA0:  BSF    F92.5
2FA2:  BTFSC  F80.5
2FA4:  BRA    2FC0
....................             if(Flanco == 0){ 
2FA6:  BTFSC  29.3
2FA8:  BRA    2FC0
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
2FAA:  DECF   32,F
2FAC:  DECF   30,F
2FAE:  MOVLW  01
2FB0:  ADDWF  30,W
2FB2:  MOVWF  31
2FB4:  BSF    29.3
2FB6:  MOVLW  1E
2FB8:  MOVWF  xFC
2FBA:  CALL   092A
2FBE:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2FC0:  BRA    2FC4
....................          Flanco = 0; 
2FC2:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2FC4:  BSF    F96.0
2FC6:  BTFSC  F84.0
2FC8:  BRA    2FF4
....................          delay_ms(20); 
2FCA:  MOVLW  14
2FCC:  MOVWF  xFC
2FCE:  CALL   092A
....................          if(DOWN){ 
2FD2:  BSF    F96.0
2FD4:  BTFSC  F84.0
2FD6:  BRA    2FF2
....................             if(Flanco2 == 0){ 
2FD8:  BTFSC  29.5
2FDA:  BRA    2FF2
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2FDC:  INCF   32,F
2FDE:  INCF   30,F
2FE0:  MOVLW  01
2FE2:  SUBWF  30,W
2FE4:  MOVWF  31
2FE6:  BSF    29.5
2FE8:  MOVLW  1E
2FEA:  MOVWF  xFC
2FEC:  CALL   092A
2FF0:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2FF2:  BRA    2FF6
....................          Flanco2 = 0; 
2FF4:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2FF6:  MOVF   32,W
2FF8:  SUBWF  34,W
2FFA:  BC    300C
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2FFC:  INCF   47,F
2FFE:  MOVFF  32,34
3002:  MOVLW  02
3004:  SUBWF  34,W
3006:  MOVWF  33
3008:  MOVLW  04
300A:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
300C:  MOVF   33,W
300E:  SUBWF  32,W
3010:  BC    3022
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
3012:  DECF   47,F
3014:  MOVFF  32,33
3018:  MOVLW  02
301A:  ADDWF  33,W
301C:  MOVWF  34
301E:  MOVLW  02
3020:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
3022:  MOVF   32,W
3024:  SUBWF  2D,W
3026:  BC    303A
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
3028:  MOVFF  2E,32
302C:  MOVLW  02
302E:  MOVWF  30
3030:  CLRF   47
3032:  MOVFF  32,33
3036:  ADDWF  33,W
3038:  MOVWF  34
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
303A:  MOVF   2E,W
303C:  SUBWF  32,W
303E:  BC    3056
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
3040:  MOVFF  2D,32
3044:  MOVLW  04
3046:  MOVWF  30
3048:  SUBWF  2D,W
304A:  MOVWF  47
304C:  MOVFF  32,34
3050:  MOVLW  02
3052:  SUBWF  34,W
3054:  MOVWF  33
....................       } 
....................          
....................       if(paso<0) 
3056:  BTFSC  47.7
3058:  BRA    305C
305A:  BRA    305E
....................          paso=0; 
305C:  CLRF   47
....................           
....................       if(RIGHT){// Si oprime derecha 
305E:  BSF    F96.1
3060:  BTFSC  F84.1
3062:  BRA    30AA
....................          delay_ms(20); 
3064:  MOVLW  14
3066:  MOVWF  xFC
3068:  CALL   092A
....................          if(RIGHT){ 
306C:  BSF    F96.1
306E:  BTFSC  F84.1
3070:  BRA    30A6
....................             if(Flanco1 == 0){ 
3072:  BTFSC  29.4
3074:  BRA    30A6
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
3076:  BSF    29.4
3078:  MOVFF  32,2C
307C:  MOVLW  03
307E:  MOVWF  30
3080:  MOVLW  02
3082:  MOVWF  xE6
3084:  MOVLW  96
3086:  MOVWF  xFC
3088:  CALL   092A
308C:  DECFSZ xE6,F
308E:  BRA    3084
3090:  MOVLW  0C
3092:  MOVWF  xF7
3094:  CALL   14AC
....................                if(Menu==6){ 
3098:  MOVF   2C,W
309A:  SUBLW  06
309C:  BNZ   30A6
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
309E:  CLRF   4B
30A0:  CLRF   4C
30A2:  CLRF   4D
30A4:  CLRF   4E
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
30A6:  BSF    2B.3
....................       }else{ 
30A8:  BRA    30AC
....................         Flanco1 = 0; 
30AA:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
30AC:  BSF    F96.2
30AE:  BTFSC  F84.2
30B0:  BRA    30DE
....................          delay_ms(20); 
30B2:  MOVLW  14
30B4:  MOVWF  xFC
30B6:  CALL   092A
....................          if(IZQU){ 
30BA:  BSF    F96.2
30BC:  BTFSC  F84.2
30BE:  BRA    30DE
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
30C0:  MOVLW  02
30C2:  MOVWF  xE6
30C4:  MOVLW  FA
30C6:  MOVWF  xFC
30C8:  CALL   092A
30CC:  DECFSZ xE6,F
30CE:  BRA    30C4
30D0:  MOVLW  32
30D2:  MOVWF  2C
30D4:  MOVLW  0C
30D6:  MOVWF  xF7
30D8:  CALL   14AC
30DC:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
30DE:  MOVF   2C,W
30E0:  SUBLW  02
30E2:  BTFSS  FD8.2
30E4:  BRA    333E
....................    EliminaRuido(); 
30E6:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
30EA:  MOVLW  01
30EC:  MOVWF  xF8
30EE:  MOVWF  xF9
30F0:  CALL   1442
....................       printf(lcd_putc,"    Temporizador     "); 
30F4:  MOVLW  50
30F6:  MOVWF  FF6
30F8:  MOVLW  04
30FA:  MOVWF  FF7
30FC:  CALL   1512
....................       lcd_gotoxy(1,2); 
3100:  MOVLW  01
3102:  MOVWF  xF8
3104:  MOVLW  02
3106:  MOVWF  xF9
3108:  CALL   1442
....................       printf(lcd_putc,"       Luz UV        "); 
310C:  MOVLW  66
310E:  MOVWF  FF6
3110:  MOVLW  04
3112:  MOVWF  FF7
3114:  CALL   1512
....................       lcd_gotoxy(6,3); 
3118:  MOVLW  06
311A:  MOVWF  xF8
311C:  MOVLW  03
311E:  MOVWF  xF9
3120:  CALL   1442
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
3124:  MOVFF  3D,E6
3128:  MOVLW  03
312A:  MOVWF  xE7
312C:  CALL   190C
3130:  MOVLW  3A
3132:  MOVWF  xF7
3134:  CALL   14AC
3138:  MOVFF  3E,E6
313C:  MOVLW  01
313E:  MOVWF  xE7
3140:  CALL   190C
3144:  MOVLW  85
3146:  MOVWF  FF6
3148:  MOVLW  04
314A:  MOVWF  FF7
314C:  MOVLW  08
314E:  MOVWF  xEA
3150:  CALL   1746
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
3154:  MOVLW  06
3156:  ADDWF  42,W
3158:  MOVWF  xE6
315A:  MOVWF  xF8
315C:  MOVLW  04
315E:  MOVWF  xF9
3160:  CALL   1442
....................       lcd_putc(t[2]); 
3164:  MOVFF  4A,F7
3168:  CALL   14AC
....................        
....................       Cambio=OFF; 
316C:  BCF    2B.3
.................... //   } 
....................     
....................    if(UP) 
316E:  BSF    F92.5
3170:  BTFSC  F80.5
3172:  BRA    31C0
....................    { 
....................       delay_ms(20); 
3174:  MOVLW  14
3176:  MOVWF  xFC
3178:  CALL   092A
....................       if(UP){ 
317C:  BSF    F92.5
317E:  BTFSC  F80.5
3180:  BRA    31C0
....................          if(unidad2==1) 
3182:  DECFSZ 42,W
3184:  BRA    31A0
....................          { 
....................             if(tempo_minutos_pro<240) 
3186:  MOVF   3D,W
3188:  SUBLW  EF
318A:  BNC   31A0
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
318C:  MOVLW  05
318E:  ADDWF  3D,F
3190:  MOVLW  02
3192:  MOVWF  xE6
3194:  MOVLW  96
3196:  MOVWF  xFC
3198:  CALL   092A
319C:  DECFSZ xE6,F
319E:  BRA    3194
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
31A0:  MOVF   42,W
31A2:  SUBLW  04
31A4:  BNZ   31BE
....................          { 
....................             if(tempo_segundos_pro<59) 
31A6:  MOVF   3E,W
31A8:  SUBLW  3A
31AA:  BNC   31BE
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
31AC:  INCF   3E,F
31AE:  MOVLW  02
31B0:  MOVWF  xE6
31B2:  MOVLW  96
31B4:  MOVWF  xFC
31B6:  CALL   092A
31BA:  DECFSZ xE6,F
31BC:  BRA    31B2
....................             } 
....................          }      
....................       Cambio=ON; 
31BE:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(DOWN) 
31C0:  BSF    F96.0
31C2:  BTFSC  F84.0
31C4:  BRA    320E
....................    { 
....................       delay_ms(20); 
31C6:  MOVLW  14
31C8:  MOVWF  xFC
31CA:  CALL   092A
....................       if(DOWN){ 
31CE:  BSF    F96.0
31D0:  BTFSC  F84.0
31D2:  BRA    320E
....................          if(unidad2==1) 
31D4:  DECFSZ 42,W
31D6:  BRA    31F0
....................          { 
....................             if(tempo_minutos_pro>0) 
31D8:  MOVF   3D,F
31DA:  BZ    31F0
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
31DC:  MOVLW  05
31DE:  SUBWF  3D,F
31E0:  MOVLW  02
31E2:  MOVWF  xE6
31E4:  MOVLW  96
31E6:  MOVWF  xFC
31E8:  CALL   092A
31EC:  DECFSZ xE6,F
31EE:  BRA    31E4
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
31F0:  MOVF   42,W
31F2:  SUBLW  04
31F4:  BNZ   320C
....................          { 
....................             if(tempo_segundos_pro>0) 
31F6:  MOVF   3E,F
31F8:  BZ    320C
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
31FA:  DECF   3E,F
31FC:  MOVLW  02
31FE:  MOVWF  xE6
3200:  MOVLW  96
3202:  MOVWF  xFC
3204:  CALL   092A
3208:  DECFSZ xE6,F
320A:  BRA    3200
....................             }    
....................          } 
....................       Cambio=ON; 
320C:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
320E:  BSF    F96.1
3210:  BTFSC  F84.1
3212:  BRA    3250
....................    { 
....................       delay_ms(20); 
3214:  MOVLW  14
3216:  MOVWF  xFC
3218:  CALL   092A
....................       if(RIGHT){ 
321C:  BSF    F96.1
321E:  BTFSC  F84.1
3220:  BRA    3250
....................          if(unidad2==1) 
3222:  DECFSZ 42,W
3224:  BRA    322C
....................          { 
....................             unidad2=4; 
3226:  MOVLW  04
3228:  MOVWF  42
....................          } 
....................          else 
322A:  BRA    3236
....................          { 
....................             if(unidad2==4) 
322C:  MOVF   42,W
322E:  SUBLW  04
3230:  BNZ   3236
....................             { 
....................                unidad2=1; 
3232:  MOVLW  01
3234:  MOVWF  42
....................             } 
....................          } 
....................       delay_ms(500); 
3236:  MOVLW  02
3238:  MOVWF  xE6
323A:  MOVLW  FA
323C:  MOVWF  xFC
323E:  CALL   092A
3242:  DECFSZ xE6,F
3244:  BRA    323A
....................       printf(lcd_putc,"\f"); 
3246:  MOVLW  0C
3248:  MOVWF  xF7
324A:  CALL   14AC
....................       Cambio=ON; 
324E:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(IZQU) 
3250:  BSF    F96.2
3252:  BTFSC  F84.2
3254:  BRA    333E
....................    { 
....................       if(IZQU){ 
3256:  BSF    F96.2
3258:  BTFSC  F84.2
325A:  BRA    333E
....................          delay_ms(200); 
325C:  MOVLW  C8
325E:  MOVWF  xFC
3260:  CALL   092A
....................          printf(lcd_putc,"\f"); 
3264:  MOVLW  0C
3266:  MOVWF  xF7
3268:  CALL   14AC
....................          lcd_gotoxy(1,2); 
326C:  MOVLW  01
326E:  MOVWF  xF8
3270:  MOVLW  02
3272:  MOVWF  xF9
3274:  CALL   1442
....................          printf(lcd_putc,"Tiempo Almacenado"); 
3278:  MOVLW  8E
327A:  MOVWF  FF6
327C:  MOVLW  04
327E:  MOVWF  FF7
3280:  CALL   1512
....................          lcd_gotoxy(1,3); 
3284:  MOVLW  01
3286:  MOVWF  xF8
3288:  MOVLW  03
328A:  MOVWF  xF9
328C:  CALL   1442
....................          printf(lcd_putc,"  Correctamente  "); 
3290:  MOVLW  A0
3292:  MOVWF  FF6
3294:  MOVLW  04
3296:  MOVWF  FF7
3298:  CALL   1512
....................          write_eeprom(5,tempo_minutos_pro); 
329C:  MOVLW  05
329E:  MOVWF  FA9
32A0:  MOVFF  3D,FA8
32A4:  BCF    FA6.6
32A6:  BCF    FA6.7
32A8:  BSF    FA6.2
32AA:  MOVF   FF2,W
32AC:  MOVWF  00
32AE:  BCF    FF2.6
32B0:  BCF    FF2.7
32B2:  MOVLB  F
32B4:  MOVLW  55
32B6:  MOVWF  FA7
32B8:  MOVLW  AA
32BA:  MOVWF  FA7
32BC:  BSF    FA6.1
32BE:  BTFSC  FA6.1
32C0:  BRA    32BE
32C2:  BCF    FA6.2
32C4:  MOVF   00,W
32C6:  IORWF  FF2,F
....................          delay_ms(20); 
32C8:  MOVLW  14
32CA:  MOVLB  0
32CC:  MOVWF  xFC
32CE:  CALL   092A
....................          write_eeprom(6,tempo_segundos_pro); 
32D2:  MOVLW  06
32D4:  MOVWF  FA9
32D6:  MOVFF  3E,FA8
32DA:  BCF    FA6.6
32DC:  BCF    FA6.7
32DE:  BSF    FA6.2
32E0:  MOVF   FF2,W
32E2:  MOVWF  00
32E4:  BCF    FF2.6
32E6:  BCF    FF2.7
32E8:  MOVLB  F
32EA:  MOVLW  55
32EC:  MOVWF  FA7
32EE:  MOVLW  AA
32F0:  MOVWF  FA7
32F2:  BSF    FA6.1
32F4:  BTFSC  FA6.1
32F6:  BRA    32F4
32F8:  BCF    FA6.2
32FA:  MOVF   00,W
32FC:  IORWF  FF2,F
....................          delay_ms(20); 
32FE:  MOVLW  14
3300:  MOVLB  0
3302:  MOVWF  xFC
3304:  CALL   092A
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
3308:  MOVFF  3D,3B
330C:  MOVFF  3E,3C
....................          delay_ms(700); 
3310:  MOVLW  04
3312:  MOVWF  xE6
3314:  MOVLW  AF
3316:  MOVWF  xFC
3318:  CALL   092A
331C:  DECFSZ xE6,F
331E:  BRA    3314
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3320:  MOVLW  1E
3322:  MOVWF  xFC
3324:  CALL   092A
3328:  MOVLW  01
332A:  MOVWF  2C
332C:  CLRF   47
332E:  MOVLW  02
3330:  MOVWF  30
3332:  MOVWF  32
3334:  MOVLW  0C
3336:  MOVWF  xF7
3338:  CALL   14AC
....................          Cambio=ON; 
333C:  BSF    2B.3
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
333E:  MOVF   2C,W
3340:  SUBLW  03
3342:  BTFSS  FD8.2
3344:  BRA    3690
....................       EliminaRuido(); 
3346:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
334A:  MOVLW  01
334C:  MOVWF  xF8
334E:  MOVWF  xF9
3350:  CALL   1442
....................          printf(lcd_putc,"     Ingrese        "); 
3354:  MOVLW  B2
3356:  MOVWF  FF6
3358:  MOVLW  04
335A:  MOVWF  FF7
335C:  CALL   1512
....................          lcd_gotoxy(1,2); 
3360:  MOVLW  01
3362:  MOVWF  xF8
3364:  MOVLW  02
3366:  MOVWF  xF9
3368:  CALL   1442
....................          printf(lcd_putc,"    Contraseña      "); 
336C:  MOVLW  C8
336E:  MOVWF  FF6
3370:  MOVLW  04
3372:  MOVWF  FF7
3374:  CALL   1512
....................          lcd_gotoxy(1,3); 
3378:  MOVLW  01
337A:  MOVWF  xF8
337C:  MOVLW  03
337E:  MOVWF  xF9
3380:  CALL   1442
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3384:  MOVLW  DE
3386:  MOVWF  FF6
3388:  MOVLW  04
338A:  MOVWF  FF7
338C:  MOVLW  0A
338E:  MOVWF  xEA
3390:  CALL   1746
3394:  MOVFF  4B,E6
3398:  MOVLW  1F
339A:  MOVWF  xE7
339C:  CALL   178C
33A0:  MOVFF  4C,E6
33A4:  MOVLW  1F
33A6:  MOVWF  xE7
33A8:  CALL   178C
33AC:  MOVFF  4D,E6
33B0:  MOVLW  1F
33B2:  MOVWF  xE7
33B4:  CALL   178C
33B8:  MOVFF  4E,E6
33BC:  MOVLW  1F
33BE:  MOVWF  xE7
33C0:  CALL   178C
33C4:  MOVLW  20
33C6:  MOVWF  xF7
33C8:  CALL   14AC
33CC:  MOVLW  20
33CE:  MOVWF  xF7
33D0:  CALL   14AC
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
33D4:  MOVFF  2F,F8
33D8:  MOVLW  04
33DA:  MOVWF  xF9
33DC:  CALL   1442
....................          lcd_putc(t[2]); 
33E0:  MOVFF  4A,F7
33E4:  CALL   14AC
....................           
....................          if(unidad>11&&unidad<14){ 
33E8:  MOVF   2F,W
33EA:  SUBLW  0B
33EC:  BC    340C
33EE:  MOVF   2F,W
33F0:  SUBLW  0D
33F2:  BNC   340C
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
33F4:  MOVLW  01
33F6:  SUBWF  2F,W
33F8:  MOVWF  xE6
33FA:  MOVWF  xF8
33FC:  MOVLW  04
33FE:  MOVWF  xF9
3400:  CALL   1442
....................             lcd_putc(t[1]); 
3404:  MOVFF  49,F7
3408:  CALL   14AC
....................          } 
....................           
....................          Cambio=OFF; 
340C:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
340E:  BSF    F92.5
3410:  BTFSC  F80.5
3412:  BRA    3446
....................          delay_ms(20); 
3414:  MOVLW  14
3416:  MOVWF  xFC
3418:  CALL   092A
....................          if(UP){ 
341C:  BSF    F92.5
341E:  BTFSC  F80.5
3420:  BRA    3444
....................             if(Flanco == 0) { 
3422:  BTFSC  29.3
3424:  BRA    3444
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3426:  MOVLW  0B
3428:  SUBWF  2F,W
342A:  CLRF   03
342C:  ADDLW  4B
342E:  MOVWF  FE9
3430:  MOVLW  00
3432:  ADDWFC 03,W
3434:  MOVWF  FEA
3436:  INCF   FEF,F
3438:  BSF    29.3
343A:  MOVLW  1E
343C:  MOVWF  xFC
343E:  CALL   092A
3442:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3444:  BRA    3448
....................          Flanco = 0; 
3446:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3448:  BSF    F96.0
344A:  BTFSC  F84.0
344C:  BRA    3480
....................          delay_ms(20); 
344E:  MOVLW  14
3450:  MOVWF  xFC
3452:  CALL   092A
....................          if(DOWN){ 
3456:  BSF    F96.0
3458:  BTFSC  F84.0
345A:  BRA    347E
....................             if(Flanco2 == 0) { 
345C:  BTFSC  29.5
345E:  BRA    347E
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3460:  MOVLW  0B
3462:  SUBWF  2F,W
3464:  CLRF   03
3466:  ADDLW  4B
3468:  MOVWF  FE9
346A:  MOVLW  00
346C:  ADDWFC 03,W
346E:  MOVWF  FEA
3470:  DECF   FEF,F
3472:  BSF    29.5
3474:  MOVLW  1E
3476:  MOVWF  xFC
3478:  CALL   092A
347C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
347E:  BRA    3482
....................          Flanco2 = 0; 
3480:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3482:  BSF    F96.1
3484:  BTFSC  F84.1
3486:  BRA    34B2
....................          delay_ms(20); 
3488:  MOVLW  14
348A:  MOVWF  xFC
348C:  CALL   092A
....................          if(RIGHT){ 
3490:  BSF    F96.1
3492:  BTFSC  F84.1
3494:  BRA    34B0
....................             if(Flanco1 == 0) { 
3496:  BTFSC  29.4
3498:  BRA    34B0
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
349A:  BSF    29.4
349C:  INCF   2F,F
349E:  MOVLW  1E
34A0:  MOVWF  xFC
34A2:  CALL   092A
34A6:  MOVLW  0C
34A8:  MOVWF  xF7
34AA:  CALL   14AC
34AE:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
34B0:  BRA    34B4
....................          Flanco1 = 0; 
34B2:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
34B4:  BSF    F96.2
34B6:  BTFSC  F84.2
34B8:  BRA    34E4
....................          delay_ms(150); 
34BA:  MOVLW  96
34BC:  MOVWF  xFC
34BE:  CALL   092A
....................          if(IZQU){ 
34C2:  BSF    F96.2
34C4:  BTFSC  F84.2
34C6:  BRA    34E2
....................             if(Flanco3 == 0){ 
34C8:  BTFSC  29.6
34CA:  BRA    34E2
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
34CC:  BSF    29.6
34CE:  DECF   2F,F
34D0:  MOVLW  1E
34D2:  MOVWF  xFC
34D4:  CALL   092A
34D8:  MOVLW  0C
34DA:  MOVWF  xF7
34DC:  CALL   14AC
34E0:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
34E2:  BRA    34E6
....................         Flanco3 = 0; 
34E4:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
34E6:  MOVLW  0B
34E8:  SUBWF  2F,W
34EA:  CLRF   03
34EC:  ADDLW  4B
34EE:  MOVWF  FE9
34F0:  MOVLW  00
34F2:  ADDWFC 03,W
34F4:  MOVWF  FEA
34F6:  BTFSC  FEF.7
34F8:  BRA    34FC
34FA:  BRA    3510
....................          clave[unidad-11]=9; 
34FC:  MOVLW  0B
34FE:  SUBWF  2F,W
3500:  CLRF   03
3502:  ADDLW  4B
3504:  MOVWF  FE9
3506:  MOVLW  00
3508:  ADDWFC 03,W
350A:  MOVWF  FEA
350C:  MOVLW  09
350E:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3510:  MOVLW  0B
3512:  SUBWF  2F,W
3514:  CLRF   03
3516:  ADDLW  4B
3518:  MOVWF  FE9
351A:  MOVLW  00
351C:  ADDWFC 03,W
351E:  MOVWF  FEA
3520:  BTFSC  FEF.7
3522:  BRA    353C
3524:  MOVF   FEF,W
3526:  SUBLW  09
3528:  BC    353C
....................          clave[unidad-11]=0; 
352A:  MOVLW  0B
352C:  SUBWF  2F,W
352E:  CLRF   03
3530:  ADDLW  4B
3532:  MOVWF  FE9
3534:  MOVLW  00
3536:  ADDWFC 03,W
3538:  MOVWF  FEA
353A:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
353C:  MOVF   2F,W
353E:  SUBLW  0A
3540:  BNC   3562
....................          unidad=11; 
3542:  MOVLW  0B
3544:  MOVWF  2F
....................          Menu=1; 
3546:  MOVLW  01
3548:  MOVWF  2C
....................          paso=0; 
354A:  CLRF   47
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
354C:  CLRF   4B
354E:  CLRF   4C
3550:  CLRF   4D
3552:  CLRF   4E
3554:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
3556:  MOVLW  0B
3558:  MOVWF  2F
355A:  MOVLW  0C
355C:  MOVWF  xF7
355E:  CALL   14AC
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3562:  MOVF   2F,W
3564:  SUBLW  0E
3566:  BTFSC  FD8.0
3568:  BRA    3690
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
356A:  MOVF   4F,W
356C:  SUBWF  4B,W
356E:  BNZ   360C
3570:  MOVF   50,W
3572:  SUBWF  4C,W
3574:  BNZ   360C
3576:  MOVF   51,W
3578:  SUBWF  4D,W
357A:  BNZ   360C
357C:  MOVF   52,W
357E:  SUBWF  4E,W
3580:  BNZ   360C
....................             lcd_gotoxy(1,1); 
3582:  MOVLW  01
3584:  MOVWF  xF8
3586:  MOVWF  xF9
3588:  CALL   1442
....................             printf(lcd_putc,"                    "); 
358C:  MOVLW  F4
358E:  MOVWF  FF6
3590:  MOVLW  04
3592:  MOVWF  FF7
3594:  CALL   1512
....................             lcd_gotoxy(1,2); 
3598:  MOVLW  01
359A:  MOVWF  xF8
359C:  MOVLW  02
359E:  MOVWF  xF9
35A0:  CALL   1442
....................             printf(lcd_putc,"     Contraseña     "); 
35A4:  MOVLW  0A
35A6:  MOVWF  FF6
35A8:  MOVLW  05
35AA:  MOVWF  FF7
35AC:  CALL   1512
....................             lcd_gotoxy(1,3); 
35B0:  MOVLW  01
35B2:  MOVWF  xF8
35B4:  MOVLW  03
35B6:  MOVWF  xF9
35B8:  CALL   1442
....................             printf(lcd_putc,"      Correcta      "); 
35BC:  MOVLW  20
35BE:  MOVWF  FF6
35C0:  MOVLW  05
35C2:  MOVWF  FF7
35C4:  CALL   1512
....................             lcd_gotoxy(1,4); 
35C8:  MOVLW  01
35CA:  MOVWF  xF8
35CC:  MOVLW  04
35CE:  MOVWF  xF9
35D0:  CALL   1442
....................             printf(lcd_putc,"                    "); 
35D4:  MOVLW  36
35D6:  MOVWF  FF6
35D8:  MOVLW  05
35DA:  MOVWF  FF7
35DC:  CALL   1512
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
35E0:  MOVLW  02
35E2:  MOVWF  xE6
35E4:  MOVLW  FA
35E6:  MOVWF  xFC
35E8:  CALL   092A
35EC:  DECFSZ xE6,F
35EE:  BRA    35E4
35F0:  MOVLW  3D
35F2:  MOVWF  2C
35F4:  MOVLW  0B
35F6:  MOVWF  2F
35F8:  MOVLW  0C
35FA:  MOVWF  xF7
35FC:  CALL   14AC
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3600:  CLRF   4B
3602:  CLRF   4C
3604:  CLRF   4D
3606:  CLRF   4E
3608:  BSF    2B.3
....................          }else{ 
360A:  BRA    3690
....................             lcd_gotoxy(1,1); 
360C:  MOVLW  01
360E:  MOVWF  xF8
3610:  MOVWF  xF9
3612:  CALL   1442
....................             printf(lcd_putc,"                    "); 
3616:  MOVLW  4C
3618:  MOVWF  FF6
361A:  MOVLW  05
361C:  MOVWF  FF7
361E:  CALL   1512
....................             lcd_gotoxy(1,2); 
3622:  MOVLW  01
3624:  MOVWF  xF8
3626:  MOVLW  02
3628:  MOVWF  xF9
362A:  CALL   1442
....................             printf(lcd_putc,"     Contraseña     "); 
362E:  MOVLW  62
3630:  MOVWF  FF6
3632:  MOVLW  05
3634:  MOVWF  FF7
3636:  CALL   1512
....................             lcd_gotoxy(1,3); 
363A:  MOVLW  01
363C:  MOVWF  xF8
363E:  MOVLW  03
3640:  MOVWF  xF9
3642:  CALL   1442
....................             printf(lcd_putc,"     Incorrecta     "); 
3646:  MOVLW  78
3648:  MOVWF  FF6
364A:  MOVLW  05
364C:  MOVWF  FF7
364E:  CALL   1512
....................             lcd_gotoxy(1,4); 
3652:  MOVLW  01
3654:  MOVWF  xF8
3656:  MOVLW  04
3658:  MOVWF  xF9
365A:  CALL   1442
....................             printf(lcd_putc,"                    "); 
365E:  MOVLW  8E
3660:  MOVWF  FF6
3662:  MOVLW  05
3664:  MOVWF  FF7
3666:  CALL   1512
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
366A:  MOVLW  02
366C:  MOVWF  xE6
366E:  MOVLW  FA
3670:  MOVWF  xFC
3672:  CALL   092A
3676:  DECFSZ xE6,F
3678:  BRA    366E
367A:  MOVLW  0B
367C:  MOVWF  2F
367E:  MOVLW  0C
3680:  MOVWF  xF7
3682:  CALL   14AC
3686:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3688:  CLRF   4B
368A:  CLRF   4C
368C:  CLRF   4D
368E:  CLRF   4E
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3690:  MOVF   2C,W
3692:  SUBLW  3D
3694:  BTFSS  FD8.2
3696:  BRA    3A28
....................       EliminaRuido(); 
3698:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
369C:  MOVLW  01
369E:  MOVWF  xF8
36A0:  MOVWF  xF9
36A2:  CALL   1442
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
36A6:  MOVLW  A4
36A8:  MOVWF  FF6
36AA:  MOVLW  05
36AC:  MOVWF  FF7
36AE:  CALL   1512
....................          lcd_gotoxy(1,2); 
36B2:  MOVLW  01
36B4:  MOVWF  xF8
36B6:  MOVLW  02
36B8:  MOVWF  xF9
36BA:  CALL   1442
....................          printf(lcd_putc,"     Contraseña     "); 
36BE:  MOVLW  BA
36C0:  MOVWF  FF6
36C2:  MOVLW  05
36C4:  MOVWF  FF7
36C6:  CALL   1512
....................          lcd_gotoxy(1,3); 
36CA:  MOVLW  01
36CC:  MOVWF  xF8
36CE:  MOVLW  03
36D0:  MOVWF  xF9
36D2:  CALL   1442
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
36D6:  MOVLW  D0
36D8:  MOVWF  FF6
36DA:  MOVLW  05
36DC:  MOVWF  FF7
36DE:  MOVLW  0A
36E0:  MOVWF  xEA
36E2:  CALL   1746
36E6:  MOVFF  4B,E6
36EA:  MOVLW  1F
36EC:  MOVWF  xE7
36EE:  CALL   178C
36F2:  MOVFF  4C,E6
36F6:  MOVLW  1F
36F8:  MOVWF  xE7
36FA:  CALL   178C
36FE:  MOVFF  4D,E6
3702:  MOVLW  1F
3704:  MOVWF  xE7
3706:  CALL   178C
370A:  MOVFF  4E,E6
370E:  MOVLW  1F
3710:  MOVWF  xE7
3712:  CALL   178C
3716:  MOVLW  20
3718:  MOVWF  xF7
371A:  CALL   14AC
371E:  MOVLW  20
3720:  MOVWF  xF7
3722:  CALL   14AC
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3726:  MOVFF  2F,F8
372A:  MOVLW  04
372C:  MOVWF  xF9
372E:  CALL   1442
....................          lcd_putc(t[2]); 
3732:  MOVFF  4A,F7
3736:  CALL   14AC
....................           
....................          if(unidad>11&&unidad<14){ 
373A:  MOVF   2F,W
373C:  SUBLW  0B
373E:  BC    375E
3740:  MOVF   2F,W
3742:  SUBLW  0D
3744:  BNC   375E
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3746:  MOVLW  01
3748:  SUBWF  2F,W
374A:  MOVWF  xE6
374C:  MOVWF  xF8
374E:  MOVLW  04
3750:  MOVWF  xF9
3752:  CALL   1442
....................             lcd_putc(t[1]); 
3756:  MOVFF  49,F7
375A:  CALL   14AC
....................          } 
....................           
....................          Cambio=OFF; 
375E:  BCF    2B.3
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3760:  BSF    F92.5
3762:  BTFSC  F80.5
3764:  BRA    3798
....................          delay_ms(20); 
3766:  MOVLW  14
3768:  MOVWF  xFC
376A:  CALL   092A
....................          if(UP){ 
376E:  BSF    F92.5
3770:  BTFSC  F80.5
3772:  BRA    3796
....................             if(Flanco == 0) { 
3774:  BTFSC  29.3
3776:  BRA    3796
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3778:  MOVLW  0B
377A:  SUBWF  2F,W
377C:  CLRF   03
377E:  ADDLW  4B
3780:  MOVWF  FE9
3782:  MOVLW  00
3784:  ADDWFC 03,W
3786:  MOVWF  FEA
3788:  INCF   FEF,F
378A:  BSF    29.3
378C:  MOVLW  1E
378E:  MOVWF  xFC
3790:  CALL   092A
3794:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3796:  BRA    379A
....................          Flanco = 0; 
3798:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
379A:  BSF    F96.0
379C:  BTFSC  F84.0
379E:  BRA    37D2
....................          delay_ms(20); 
37A0:  MOVLW  14
37A2:  MOVWF  xFC
37A4:  CALL   092A
....................          if(DOWN){ 
37A8:  BSF    F96.0
37AA:  BTFSC  F84.0
37AC:  BRA    37D0
....................             if(Flanco2 == 0) { 
37AE:  BTFSC  29.5
37B0:  BRA    37D0
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
37B2:  MOVLW  0B
37B4:  SUBWF  2F,W
37B6:  CLRF   03
37B8:  ADDLW  4B
37BA:  MOVWF  FE9
37BC:  MOVLW  00
37BE:  ADDWFC 03,W
37C0:  MOVWF  FEA
37C2:  DECF   FEF,F
37C4:  BSF    29.5
37C6:  MOVLW  1E
37C8:  MOVWF  xFC
37CA:  CALL   092A
37CE:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
37D0:  BRA    37D4
....................          Flanco2 = 0; 
37D2:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
37D4:  BSF    F96.1
37D6:  BTFSC  F84.1
37D8:  BRA    37FC
....................          if(RIGHT){ 
37DA:  BSF    F96.1
37DC:  BTFSC  F84.1
37DE:  BRA    37FA
....................             if(Flanco1 == 0) { 
37E0:  BTFSC  29.4
37E2:  BRA    37FA
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
37E4:  BSF    29.4
37E6:  INCF   2F,F
37E8:  MOVLW  1E
37EA:  MOVWF  xFC
37EC:  CALL   092A
37F0:  MOVLW  0C
37F2:  MOVWF  xF7
37F4:  CALL   14AC
37F8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
37FA:  BRA    37FE
....................          Flanco1 = 0; 
37FC:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
37FE:  BSF    F96.2
3800:  BTFSC  F84.2
3802:  BRA    382E
....................          delay_ms(150); 
3804:  MOVLW  96
3806:  MOVWF  xFC
3808:  CALL   092A
....................          if(IZQU){ 
380C:  BSF    F96.2
380E:  BTFSC  F84.2
3810:  BRA    382C
....................             if(Flanco3 == 0){ 
3812:  BTFSC  29.6
3814:  BRA    382C
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3816:  BSF    29.6
3818:  DECF   2F,F
381A:  MOVLW  1E
381C:  MOVWF  xFC
381E:  CALL   092A
3822:  MOVLW  0C
3824:  MOVWF  xF7
3826:  CALL   14AC
382A:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
382C:  BRA    3830
....................         Flanco3 = 0; 
382E:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3830:  MOVLW  0B
3832:  SUBWF  2F,W
3834:  CLRF   03
3836:  ADDLW  4B
3838:  MOVWF  FE9
383A:  MOVLW  00
383C:  ADDWFC 03,W
383E:  MOVWF  FEA
3840:  BTFSC  FEF.7
3842:  BRA    3846
3844:  BRA    385A
....................          clave[unidad-11]=9; 
3846:  MOVLW  0B
3848:  SUBWF  2F,W
384A:  CLRF   03
384C:  ADDLW  4B
384E:  MOVWF  FE9
3850:  MOVLW  00
3852:  ADDWFC 03,W
3854:  MOVWF  FEA
3856:  MOVLW  09
3858:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
385A:  MOVLW  0B
385C:  SUBWF  2F,W
385E:  CLRF   03
3860:  ADDLW  4B
3862:  MOVWF  FE9
3864:  MOVLW  00
3866:  ADDWFC 03,W
3868:  MOVWF  FEA
386A:  BTFSC  FEF.7
386C:  BRA    3886
386E:  MOVF   FEF,W
3870:  SUBLW  09
3872:  BC    3886
....................          clave[unidad-11]=0; 
3874:  MOVLW  0B
3876:  SUBWF  2F,W
3878:  CLRF   03
387A:  ADDLW  4B
387C:  MOVWF  FE9
387E:  MOVLW  00
3880:  ADDWFC 03,W
3882:  MOVWF  FEA
3884:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3886:  MOVF   2F,W
3888:  SUBLW  0A
388A:  BNC   38AA
....................          unidad=11; 
388C:  MOVLW  0B
388E:  MOVWF  2F
....................          Menu=1; 
3890:  MOVLW  01
3892:  MOVWF  2C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3894:  CLRF   4B
3896:  CLRF   4C
3898:  CLRF   4D
389A:  CLRF   4E
389C:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
389E:  MOVLW  0B
38A0:  MOVWF  2F
38A2:  MOVLW  0C
38A4:  MOVWF  xF7
38A6:  CALL   14AC
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
38AA:  MOVF   2F,W
38AC:  SUBLW  0E
38AE:  BTFSC  FD8.0
38B0:  BRA    3A28
....................          lcd_gotoxy(1,1); 
38B2:  MOVLW  01
38B4:  MOVWF  xF8
38B6:  MOVWF  xF9
38B8:  CALL   1442
....................          printf(lcd_putc,"                    "); 
38BC:  MOVLW  E6
38BE:  MOVWF  FF6
38C0:  MOVLW  05
38C2:  MOVWF  FF7
38C4:  CALL   1512
....................          lcd_gotoxy(1,2); 
38C8:  MOVLW  01
38CA:  MOVWF  xF8
38CC:  MOVLW  02
38CE:  MOVWF  xF9
38D0:  CALL   1442
....................          printf(lcd_putc,"     Contraseña     "); 
38D4:  MOVLW  FC
38D6:  MOVWF  FF6
38D8:  MOVLW  05
38DA:  MOVWF  FF7
38DC:  CALL   1512
....................          lcd_gotoxy(1,3); 
38E0:  MOVLW  01
38E2:  MOVWF  xF8
38E4:  MOVLW  03
38E6:  MOVWF  xF9
38E8:  CALL   1442
....................          printf(lcd_putc,"     Almacenada     "); 
38EC:  MOVLW  12
38EE:  MOVWF  FF6
38F0:  MOVLW  06
38F2:  MOVWF  FF7
38F4:  CALL   1512
....................          lcd_gotoxy(1,4); 
38F8:  MOVLW  01
38FA:  MOVWF  xF8
38FC:  MOVLW  04
38FE:  MOVWF  xF9
3900:  CALL   1442
....................          printf(lcd_putc,"                    "); 
3904:  MOVLW  28
3906:  MOVWF  FF6
3908:  MOVLW  06
390A:  MOVWF  FF7
390C:  CALL   1512
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3910:  CLRF   FA9
3912:  MOVFF  4B,FA8
3916:  BCF    FA6.6
3918:  BCF    FA6.7
391A:  BSF    FA6.2
391C:  MOVF   FF2,W
391E:  MOVWF  00
3920:  BCF    FF2.6
3922:  BCF    FF2.7
3924:  MOVLB  F
3926:  MOVLW  55
3928:  MOVWF  FA7
392A:  MOVLW  AA
392C:  MOVWF  FA7
392E:  BSF    FA6.1
3930:  BTFSC  FA6.1
3932:  BRA    3930
3934:  BCF    FA6.2
3936:  MOVF   00,W
3938:  IORWF  FF2,F
393A:  MOVLW  14
393C:  MOVLB  0
393E:  MOVWF  xFC
3940:  CALL   092A
3944:  MOVLW  01
3946:  MOVWF  FA9
3948:  MOVFF  4C,FA8
394C:  BCF    FA6.6
394E:  BCF    FA6.7
3950:  BSF    FA6.2
3952:  MOVF   FF2,W
3954:  MOVWF  00
3956:  BCF    FF2.6
3958:  BCF    FF2.7
395A:  MOVLB  F
395C:  MOVLW  55
395E:  MOVWF  FA7
3960:  MOVLW  AA
3962:  MOVWF  FA7
3964:  BSF    FA6.1
3966:  BTFSC  FA6.1
3968:  BRA    3966
396A:  BCF    FA6.2
396C:  MOVF   00,W
396E:  IORWF  FF2,F
3970:  MOVLW  14
3972:  MOVLB  0
3974:  MOVWF  xFC
3976:  CALL   092A
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
397A:  MOVLW  02
397C:  MOVWF  FA9
397E:  MOVFF  4D,FA8
3982:  BCF    FA6.6
3984:  BCF    FA6.7
3986:  BSF    FA6.2
3988:  MOVF   FF2,W
398A:  MOVWF  00
398C:  BCF    FF2.6
398E:  BCF    FF2.7
3990:  MOVLB  F
3992:  MOVLW  55
3994:  MOVWF  FA7
3996:  MOVLW  AA
3998:  MOVWF  FA7
399A:  BSF    FA6.1
399C:  BTFSC  FA6.1
399E:  BRA    399C
39A0:  BCF    FA6.2
39A2:  MOVF   00,W
39A4:  IORWF  FF2,F
39A6:  MOVLW  14
39A8:  MOVLB  0
39AA:  MOVWF  xFC
39AC:  CALL   092A
39B0:  MOVLW  03
39B2:  MOVWF  FA9
39B4:  MOVFF  4E,FA8
39B8:  BCF    FA6.6
39BA:  BCF    FA6.7
39BC:  BSF    FA6.2
39BE:  MOVF   FF2,W
39C0:  MOVWF  00
39C2:  BCF    FF2.6
39C4:  BCF    FF2.7
39C6:  MOVLB  F
39C8:  MOVLW  55
39CA:  MOVWF  FA7
39CC:  MOVLW  AA
39CE:  MOVWF  FA7
39D0:  BSF    FA6.1
39D2:  BTFSC  FA6.1
39D4:  BRA    39D2
39D6:  BCF    FA6.2
39D8:  MOVF   00,W
39DA:  IORWF  FF2,F
39DC:  MOVLW  14
39DE:  MOVLB  0
39E0:  MOVWF  xFC
39E2:  CALL   092A
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
39E6:  MOVLW  02
39E8:  MOVWF  xE6
39EA:  MOVLW  FA
39EC:  MOVWF  xFC
39EE:  CALL   092A
39F2:  DECFSZ xE6,F
39F4:  BRA    39EA
39F6:  MOVLW  01
39F8:  MOVWF  2C
39FA:  CLRF   47
39FC:  MOVLW  02
39FE:  MOVWF  30
3A00:  MOVWF  32
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3A02:  MOVFF  4B,4F
3A06:  MOVFF  4C,50
3A0A:  MOVFF  4D,51
3A0E:  MOVFF  4E,52
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3A12:  CLRF   4B
3A14:  CLRF   4C
3A16:  CLRF   4D
3A18:  CLRF   4E
3A1A:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f");          
3A1C:  MOVLW  0B
3A1E:  MOVWF  2F
3A20:  MOVLW  0C
3A22:  MOVWF  xF7
3A24:  CALL   14AC
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3A28:  MOVF   2C,W
3A2A:  SUBLW  04
3A2C:  BTFSS  FD8.2
3A2E:  BRA    3BDE
....................    EliminaRuido(); 
3A30:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3A34:  MOVLW  01
3A36:  MOVWF  xF8
3A38:  MOVWF  xF9
3A3A:  CALL   1442
....................       printf(lcd_putc,"  Tiempo de Trabajo "); 
3A3E:  MOVLW  3E
3A40:  MOVWF  FF6
3A42:  MOVLW  06
3A44:  MOVWF  FF7
3A46:  CALL   1512
....................       lcd_gotoxy(1,2); 
3A4A:  MOVLW  01
3A4C:  MOVWF  xF8
3A4E:  MOVLW  02
3A50:  MOVWF  xF9
3A52:  CALL   1442
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horasTrabajo); 
3A56:  MOVLW  54
3A58:  MOVWF  FF6
3A5A:  MOVLW  06
3A5C:  MOVWF  FF7
3A5E:  MOVLW  0B
3A60:  MOVWF  xEA
3A62:  CALL   1746
3A66:  MOVLW  08
3A68:  MOVWF  FE9
3A6A:  MOVFF  CA,E7
3A6E:  MOVFF  C9,E6
3A72:  GOTO   1972
3A76:  MOVLW  20
3A78:  MOVWF  xF7
3A7A:  CALL   14AC
3A7E:  MOVLW  20
3A80:  MOVWF  xF7
3A82:  CALL   14AC
3A86:  MOVLW  20
3A88:  MOVWF  xF7
3A8A:  CALL   14AC
....................       lcd_gotoxy(1,4); 
3A8E:  MOVLW  01
3A90:  MOVWF  xF8
3A92:  MOVLW  04
3A94:  MOVWF  xF9
3A96:  CALL   1442
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3A9A:  MOVLW  68
3A9C:  MOVWF  FF6
3A9E:  MOVLW  06
3AA0:  MOVWF  FF7
3AA2:  CALL   1512
....................        
....................       Cambio=OFF; 
3AA6:  BCF    2B.3
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3AA8:  BSF    F92.5
3AAA:  BTFSC  F80.5
3AAC:  BRA    3B9A
3AAE:  BSF    F96.1
3AB0:  BTFSC  F84.1
3AB2:  BRA    3B9A
....................          delay_ms(20); 
3AB4:  MOVLW  14
3AB6:  MOVWF  xFC
3AB8:  CALL   092A
....................          if(UP && RIGHT){ 
3ABC:  BSF    F92.5
3ABE:  BTFSC  F80.5
3AC0:  BRA    3B9A
3AC2:  BSF    F96.1
3AC4:  BTFSC  F84.1
3AC6:  BRA    3B9A
....................             delay_ms(200); 
3AC8:  MOVLW  C8
3ACA:  MOVWF  xFC
3ACC:  CALL   092A
....................             printf(lcd_putc,"\f"); 
3AD0:  MOVLW  0C
3AD2:  MOVWF  xF7
3AD4:  CALL   14AC
....................             lcd_gotoxy(1,2); 
3AD8:  MOVLW  01
3ADA:  MOVWF  xF8
3ADC:  MOVLW  02
3ADE:  MOVWF  xF9
3AE0:  CALL   1442
....................             printf(lcd_putc," Reset de tiempo "); 
3AE4:  MOVLW  7E
3AE6:  MOVWF  FF6
3AE8:  MOVLW  06
3AEA:  MOVWF  FF7
3AEC:  CALL   1512
....................             lcd_gotoxy(1,3); 
3AF0:  MOVLW  01
3AF2:  MOVWF  xF8
3AF4:  MOVLW  03
3AF6:  MOVWF  xF9
3AF8:  CALL   1442
....................             printf(lcd_putc,"     Exitoso     "); 
3AFC:  MOVLW  90
3AFE:  MOVWF  FF6
3B00:  MOVLW  06
3B02:  MOVWF  FF7
3B04:  CALL   1512
....................             horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
3B08:  CLRF   xCA
3B0A:  CLRF   xC9
3B0C:  MOVLW  13
3B0E:  MOVWF  FA9
3B10:  CLRF   FA8
3B12:  BCF    FA6.6
3B14:  BCF    FA6.7
3B16:  BSF    FA6.2
3B18:  MOVF   FF2,W
3B1A:  MOVWF  00
3B1C:  BCF    FF2.6
3B1E:  BCF    FF2.7
3B20:  MOVLB  F
3B22:  MOVLW  55
3B24:  MOVWF  FA7
3B26:  MOVLW  AA
3B28:  MOVWF  FA7
3B2A:  BSF    FA6.1
3B2C:  BTFSC  FA6.1
3B2E:  BRA    3B2C
3B30:  BCF    FA6.2
3B32:  MOVF   00,W
3B34:  IORWF  FF2,F
3B36:  MOVLW  14
3B38:  MOVLB  0
3B3A:  MOVWF  xFC
3B3C:  CALL   092A
3B40:  MOVLW  12
3B42:  MOVWF  FA9
3B44:  CLRF   FA8
3B46:  BCF    FA6.6
3B48:  BCF    FA6.7
3B4A:  BSF    FA6.2
3B4C:  MOVF   FF2,W
3B4E:  MOVWF  00
3B50:  BCF    FF2.6
3B52:  BCF    FF2.7
3B54:  MOVLB  F
3B56:  MOVLW  55
3B58:  MOVWF  FA7
3B5A:  MOVLW  AA
3B5C:  MOVWF  FA7
3B5E:  BSF    FA6.1
3B60:  BTFSC  FA6.1
3B62:  BRA    3B60
3B64:  BCF    FA6.2
3B66:  MOVF   00,W
3B68:  IORWF  FF2,F
3B6A:  MOVLW  14
3B6C:  MOVLB  0
3B6E:  MOVWF  xFC
3B70:  CALL   092A
....................             segundos=0;minutos=0;horas=0; 
3B74:  CLRF   35
3B76:  CLRF   36
3B78:  CLRF   5C
3B7A:  CLRF   5B
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3B7C:  MOVLW  1E
3B7E:  MOVWF  xFC
3B80:  CALL   092A
3B84:  MOVLW  01
3B86:  MOVWF  2C
3B88:  CLRF   47
3B8A:  MOVLW  02
3B8C:  MOVWF  30
3B8E:  MOVWF  32
3B90:  MOVLW  0C
3B92:  MOVWF  xF7
3B94:  CALL   14AC
....................             Cambio=ON; 
3B98:  BSF    2B.3
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3B9A:  BSF    F96.2
3B9C:  BTFSC  F84.2
3B9E:  BRA    3BDC
....................          delay_ms(20); 
3BA0:  MOVLW  14
3BA2:  MOVWF  xFC
3BA4:  CALL   092A
....................          if(IZQU){ 
3BA8:  BSF    F96.2
3BAA:  BTFSC  F84.2
3BAC:  BRA    3BDA
....................             if(Flanco3 == 0){ 
3BAE:  BTFSC  29.6
3BB0:  BRA    3BDA
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3BB2:  BSF    29.6
3BB4:  MOVLW  02
3BB6:  MOVWF  xE6
3BB8:  MOVLW  FA
3BBA:  MOVWF  xFC
3BBC:  CALL   092A
3BC0:  DECFSZ xE6,F
3BC2:  BRA    3BB8
3BC4:  MOVLW  01
3BC6:  MOVWF  2C
3BC8:  CLRF   47
3BCA:  MOVLW  02
3BCC:  MOVWF  30
3BCE:  MOVWF  32
3BD0:  MOVLW  0C
3BD2:  MOVWF  xF7
3BD4:  CALL   14AC
3BD8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3BDA:  BRA    3BDE
....................          Flanco3 = 0; 
3BDC:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3BDE:  MOVF   2C,W
3BE0:  SUBLW  05
3BE2:  BTFSS  FD8.2
3BE4:  BRA    3E42
....................       EliminaRuido(); 
3BE6:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3BEA:  MOVLW  01
3BEC:  MOVWF  xF8
3BEE:  MOVWF  xF9
3BF0:  CALL   1442
....................          printf(lcd_putc,"  Zero Point Config "); 
3BF4:  MOVLW  A2
3BF6:  MOVWF  FF6
3BF8:  MOVLW  06
3BFA:  MOVWF  FF7
3BFC:  CALL   1512
....................          lcd_gotoxy(1,2); 
3C00:  MOVLW  01
3C02:  MOVWF  xF8
3C04:  MOVLW  02
3C06:  MOVWF  xF9
3C08:  CALL   1442
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3C0C:  MOVLW  05
3C0E:  MOVWF  xE6
3C10:  CALL   1F92
3C14:  MOVFF  00,E6
3C18:  MOVFF  01,E7
3C1C:  MOVFF  02,E8
3C20:  MOVFF  03,E9
3C24:  MOVFF  03,FD
3C28:  MOVFF  02,FC
3C2C:  MOVFF  01,FB
3C30:  MOVFF  00,FA
3C34:  MOVLW  D7
3C36:  MOVLB  1
3C38:  MOVWF  x01
3C3A:  MOVLW  A3
3C3C:  MOVWF  x00
3C3E:  MOVLB  0
3C40:  CLRF   xFF
3C42:  MOVLW  81
3C44:  MOVWF  xFE
3C46:  CALL   1A7C
3C4A:  MOVFF  00,E6
3C4E:  MOVFF  01,E7
3C52:  MOVFF  02,E8
3C56:  MOVFF  03,E9
3C5A:  MOVLW  B8
3C5C:  MOVWF  FF6
3C5E:  MOVLW  06
3C60:  MOVWF  FF7
3C62:  MOVLW  09
3C64:  MOVWF  xEA
3C66:  CALL   1746
3C6A:  MOVLW  02
3C6C:  MOVWF  FE9
3C6E:  MOVFF  E9,ED
3C72:  MOVFF  E8,EC
3C76:  MOVFF  E7,EB
3C7A:  MOVFF  E6,EA
3C7E:  MOVWF  xEE
3C80:  CALL   22E6
3C84:  MOVLW  C6
3C86:  MOVWF  FF6
3C88:  MOVLW  06
3C8A:  MOVWF  FF7
3C8C:  MOVLW  07
3C8E:  MOVWF  xEA
3C90:  CALL   1746
....................          lcd_gotoxy(1,3); 
3C94:  MOVLW  01
3C96:  MOVWF  xF8
3C98:  MOVLW  03
3C9A:  MOVWF  xF9
3C9C:  CALL   1442
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3CA0:  CLRF   xF7
3CA2:  CALL   1A26
3CA6:  MOVFF  00,E6
3CAA:  MOVFF  01,E7
3CAE:  MOVFF  02,E8
3CB2:  MOVFF  03,E9
3CB6:  MOVLW  CE
3CB8:  MOVWF  FF6
3CBA:  MOVLW  06
3CBC:  MOVWF  FF7
3CBE:  MOVLW  08
3CC0:  MOVWF  xEA
3CC2:  CALL   1746
3CC6:  MOVLW  01
3CC8:  MOVWF  FE9
3CCA:  MOVFF  E9,ED
3CCE:  MOVFF  E8,EC
3CD2:  MOVFF  E7,EB
3CD6:  MOVFF  E6,EA
3CDA:  CLRF   xEE
3CDC:  CALL   22E6
....................          lcd_gotoxy(1,4); 
3CE0:  MOVLW  01
3CE2:  MOVWF  xF8
3CE4:  MOVLW  04
3CE6:  MOVWF  xF9
3CE8:  CALL   1442
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3CEC:  MOVLW  DC
3CEE:  MOVWF  FF6
3CF0:  MOVLW  06
3CF2:  MOVWF  FF7
3CF4:  MOVLW  07
3CF6:  MOVWF  xEA
3CF8:  CALL   1746
3CFC:  MOVLW  01
3CFE:  MOVWF  FE9
3D00:  MOVFF  C2,ED
3D04:  MOVFF  C1,EC
3D08:  MOVFF  C0,EB
3D0C:  MOVFF  BF,EA
3D10:  CLRF   xEE
3D12:  CALL   22E6
....................           
....................          Cambio=OFF; 
3D16:  BCF    2B.3
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
3D18:  BSF    F96.1
3D1A:  BTFSC  F84.1
3D1C:  BRA    3E02
....................          delay_ms(20); 
3D1E:  MOVLW  14
3D20:  MOVWF  xFC
3D22:  CALL   092A
....................          if(RIGHT){ 
3D26:  BSF    F96.1
3D28:  BTFSC  F84.1
3D2A:  BRA    3E00
....................             if(Flanco1 == 0){ 
3D2C:  BTFSC  29.4
3D2E:  BRA    3E00
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3D30:  MOVLW  01
3D32:  MOVWF  2C
3D34:  CLRF   47
3D36:  MOVLW  02
3D38:  MOVWF  30
3D3A:  MOVWF  32
3D3C:  MOVLW  0B
3D3E:  MOVWF  2F
3D40:  MOVLW  02
3D42:  MOVWF  xE6
3D44:  MOVLW  FA
3D46:  MOVWF  xFC
3D48:  CALL   092A
3D4C:  DECFSZ xE6,F
3D4E:  BRA    3D44
3D50:  MOVLW  0C
3D52:  MOVWF  xF7
3D54:  CALL   14AC
....................                G=sensores(0); 
3D58:  CLRF   xF7
3D5A:  CALL   1A26
3D5E:  MOVFF  03,C2
3D62:  MOVFF  02,C1
3D66:  MOVFF  01,C0
3D6A:  MOVFF  00,BF
....................                G16=(int16)G; 
3D6E:  MOVFF  C2,FD
3D72:  MOVFF  C1,FC
3D76:  MOVFF  C0,FB
3D7A:  MOVFF  BF,FA
3D7E:  CALL   2472
3D82:  MOVFF  02,5E
3D86:  MOVFF  01,5D
....................                G_l=G16; G_h=(G16>>8); 
3D8A:  MOVFF  5D,39
3D8E:  MOVFF  5E,3A
....................                 
....................                write_eeprom(11,G_l); 
3D92:  MOVLW  0B
3D94:  MOVWF  FA9
3D96:  MOVFF  39,FA8
3D9A:  BCF    FA6.6
3D9C:  BCF    FA6.7
3D9E:  BSF    FA6.2
3DA0:  MOVF   FF2,W
3DA2:  MOVWF  00
3DA4:  BCF    FF2.6
3DA6:  BCF    FF2.7
3DA8:  MOVLB  F
3DAA:  MOVLW  55
3DAC:  MOVWF  FA7
3DAE:  MOVLW  AA
3DB0:  MOVWF  FA7
3DB2:  BSF    FA6.1
3DB4:  BTFSC  FA6.1
3DB6:  BRA    3DB4
3DB8:  BCF    FA6.2
3DBA:  MOVF   00,W
3DBC:  IORWF  FF2,F
....................                delay_ms(20); 
3DBE:  MOVLW  14
3DC0:  MOVLB  0
3DC2:  MOVWF  xFC
3DC4:  CALL   092A
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3DC8:  MOVLW  0C
3DCA:  MOVWF  FA9
3DCC:  MOVFF  3A,FA8
3DD0:  BCF    FA6.6
3DD2:  BCF    FA6.7
3DD4:  BSF    FA6.2
3DD6:  MOVF   FF2,W
3DD8:  MOVWF  00
3DDA:  BCF    FF2.6
3DDC:  BCF    FF2.7
3DDE:  MOVLB  F
3DE0:  MOVLW  55
3DE2:  MOVWF  FA7
3DE4:  MOVLW  AA
3DE6:  MOVWF  FA7
3DE8:  BSF    FA6.1
3DEA:  BTFSC  FA6.1
3DEC:  BRA    3DEA
3DEE:  BCF    FA6.2
3DF0:  MOVF   00,W
3DF2:  IORWF  FF2,F
....................                delay_ms(20); 
3DF4:  MOVLW  14
3DF6:  MOVLB  0
3DF8:  MOVWF  xFC
3DFA:  CALL   092A
....................                Cambio=ON; 
3DFE:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3E00:  BRA    3E04
....................          Flanco1 = 0; 
3E02:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3E04:  BSF    F96.2
3E06:  BTFSC  F84.2
3E08:  BRA    3E40
....................          delay_ms(20); 
3E0A:  MOVLW  14
3E0C:  MOVWF  xFC
3E0E:  CALL   092A
....................          if(IZQU){ 
3E12:  BSF    F96.2
3E14:  BTFSC  F84.2
3E16:  BRA    3E3E
....................             if(Flanco3 == 0){ 
3E18:  BTFSC  29.6
3E1A:  BRA    3E3E
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3E1C:  MOVLW  01
3E1E:  MOVWF  2C
3E20:  CLRF   47
3E22:  MOVLW  02
3E24:  MOVWF  30
3E26:  MOVWF  32
3E28:  MOVLW  0B
3E2A:  MOVWF  2F
3E2C:  MOVLW  1E
3E2E:  MOVWF  xFC
3E30:  CALL   092A
3E34:  MOVLW  0C
3E36:  MOVWF  xF7
3E38:  CALL   14AC
....................                Cambio=ON; 
3E3C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3E3E:  BRA    3E42
....................          Flanco3 = 0; 
3E40:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3E42:  MOVF   2C,W
3E44:  SUBLW  06
3E46:  BTFSS  FD8.2
3E48:  BRA    3F72
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3E4A:  BTG    2A.4
3E4C:  BSF    29.4
3E4E:  MOVLW  01
3E50:  MOVWF  2C
3E52:  CLRF   47
....................                        
....................             if(estadoalarma==1) 
3E54:  BTFSS  2A.4
3E56:  BRA    3EB8
....................             {estadoalarma=1; 
3E58:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
3E5A:  MOVLW  01
3E5C:  MOVWF  xF8
3E5E:  MOVWF  xF9
3E60:  CALL   1442
....................                printf(lcd_putc,"                    "); 
3E64:  MOVLW  EA
3E66:  MOVWF  FF6
3E68:  MOVLW  06
3E6A:  MOVWF  FF7
3E6C:  CALL   1512
....................                lcd_gotoxy(1,2); 
3E70:  MOVLW  01
3E72:  MOVWF  xF8
3E74:  MOVLW  02
3E76:  MOVWF  xF9
3E78:  CALL   1442
....................                printf(lcd_putc,"        Activo      "); 
3E7C:  MOVLW  00
3E7E:  MOVWF  FF6
3E80:  MOVLW  07
3E82:  MOVWF  FF7
3E84:  CALL   1512
....................                lcd_gotoxy(1,3); 
3E88:  MOVLW  01
3E8A:  MOVWF  xF8
3E8C:  MOVLW  03
3E8E:  MOVWF  xF9
3E90:  CALL   1442
....................                printf(lcd_putc,"        Alarma      "); 
3E94:  MOVLW  16
3E96:  MOVWF  FF6
3E98:  MOVLW  07
3E9A:  MOVWF  FF7
3E9C:  CALL   1512
....................                lcd_gotoxy(1,4); 
3EA0:  MOVLW  01
3EA2:  MOVWF  xF8
3EA4:  MOVLW  04
3EA6:  MOVWF  xF9
3EA8:  CALL   1442
....................                printf(lcd_putc,"                    ");} 
3EAC:  MOVLW  2C
3EAE:  MOVWF  FF6
3EB0:  MOVLW  07
3EB2:  MOVWF  FF7
3EB4:  CALL   1512
....................                 
....................             if(estadoalarma==0) 
3EB8:  BTFSC  2A.4
3EBA:  BRA    3F1C
....................             {estadoalarma=0; 
3EBC:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
3EBE:  MOVLW  01
3EC0:  MOVWF  xF8
3EC2:  MOVWF  xF9
3EC4:  CALL   1442
....................                printf(lcd_putc,"                    "); 
3EC8:  MOVLW  42
3ECA:  MOVWF  FF6
3ECC:  MOVLW  07
3ECE:  MOVWF  FF7
3ED0:  CALL   1512
....................                lcd_gotoxy(1,2); 
3ED4:  MOVLW  01
3ED6:  MOVWF  xF8
3ED8:  MOVLW  02
3EDA:  MOVWF  xF9
3EDC:  CALL   1442
....................                printf(lcd_putc,"      Desactivo     "); 
3EE0:  MOVLW  58
3EE2:  MOVWF  FF6
3EE4:  MOVLW  07
3EE6:  MOVWF  FF7
3EE8:  CALL   1512
....................                lcd_gotoxy(1,3); 
3EEC:  MOVLW  01
3EEE:  MOVWF  xF8
3EF0:  MOVLW  03
3EF2:  MOVWF  xF9
3EF4:  CALL   1442
....................                printf(lcd_putc,"       Alarma       "); 
3EF8:  MOVLW  6E
3EFA:  MOVWF  FF6
3EFC:  MOVLW  07
3EFE:  MOVWF  FF7
3F00:  CALL   1512
....................                lcd_gotoxy(1,4); 
3F04:  MOVLW  01
3F06:  MOVWF  xF8
3F08:  MOVLW  04
3F0A:  MOVWF  xF9
3F0C:  CALL   1442
....................                printf(lcd_putc,"                    ");} 
3F10:  MOVLW  84
3F12:  MOVWF  FF6
3F14:  MOVLW  07
3F16:  MOVWF  FF7
3F18:  CALL   1512
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3F1C:  MOVLW  00
3F1E:  BTFSC  2A.4
3F20:  MOVLW  01
3F22:  MOVWF  xE6
3F24:  MOVLW  04
3F26:  MOVWF  FA9
3F28:  MOVFF  E6,FA8
3F2C:  BCF    FA6.6
3F2E:  BCF    FA6.7
3F30:  BSF    FA6.2
3F32:  MOVF   FF2,W
3F34:  MOVWF  00
3F36:  BCF    FF2.6
3F38:  BCF    FF2.7
3F3A:  MOVLB  F
3F3C:  MOVLW  55
3F3E:  MOVWF  FA7
3F40:  MOVLW  AA
3F42:  MOVWF  FA7
3F44:  BSF    FA6.1
3F46:  BTFSC  FA6.1
3F48:  BRA    3F46
3F4A:  BCF    FA6.2
3F4C:  MOVF   00,W
3F4E:  IORWF  FF2,F
3F50:  MOVLW  04
3F52:  MOVLB  0
3F54:  MOVWF  xE6
3F56:  MOVLW  FA
3F58:  MOVWF  xFC
3F5A:  CALL   092A
3F5E:  DECFSZ xE6,F
3F60:  BRA    3F56
3F62:  MOVLW  02
3F64:  MOVWF  30
3F66:  MOVWF  32
3F68:  MOVLW  0C
3F6A:  MOVWF  xF7
3F6C:  CALL   14AC
....................             Cambio=ON; 
3F70:  BSF    2B.3
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
3F72:  MOVF   2C,W
3F74:  SUBLW  07
3F76:  BTFSS  FD8.2
3F78:  BRA    4110
....................       if(Vel1>6) 
3F7A:  MOVF   58,W
3F7C:  SUBLW  06
3F7E:  BC    3F84
....................          Vel1=6; 
3F80:  MOVLW  06
3F82:  MOVWF  58
....................       if(Vel1<1) 
3F84:  MOVF   58,F
3F86:  BNZ   3F8C
....................          Vel1=1; 
3F88:  MOVLW  01
3F8A:  MOVWF  58
....................        
....................       lcd_gotoxy(1,1); 
3F8C:  MOVLW  01
3F8E:  MOVWF  xF8
3F90:  MOVWF  xF9
3F92:  CALL   1442
....................       printf(lcd_putc,"Seleccione Velocidad"); 
3F96:  MOVLW  9A
3F98:  MOVWF  FF6
3F9A:  MOVLW  07
3F9C:  MOVWF  FF7
3F9E:  CALL   1512
....................       lcd_gotoxy(1,2); 
3FA2:  MOVLW  01
3FA4:  MOVWF  xF8
3FA6:  MOVLW  02
3FA8:  MOVWF  xF9
3FAA:  CALL   1442
....................       printf(lcd_putc,"   del Ventilador   "); 
3FAE:  MOVLW  B0
3FB0:  MOVWF  FF6
3FB2:  MOVLW  07
3FB4:  MOVWF  FF7
3FB6:  CALL   1512
....................       lcd_gotoxy(1,3); 
3FBA:  MOVLW  01
3FBC:  MOVWF  xF8
3FBE:  MOVLW  03
3FC0:  MOVWF  xF9
3FC2:  CALL   1442
....................       printf(lcd_putc,"     Vel: %u       ",Vel1); 
3FC6:  MOVLW  C6
3FC8:  MOVWF  FF6
3FCA:  MOVLW  07
3FCC:  MOVWF  FF7
3FCE:  MOVLW  0A
3FD0:  MOVWF  xEA
3FD2:  CALL   1746
3FD6:  MOVFF  58,E6
3FDA:  MOVLW  1B
3FDC:  MOVWF  xE7
3FDE:  CALL   190C
3FE2:  MOVLW  D2
3FE4:  MOVWF  FF6
3FE6:  MOVLW  07
3FE8:  MOVWF  FF7
3FEA:  MOVLW  07
3FEC:  MOVWF  xEA
3FEE:  CALL   1746
....................       lcd_gotoxy(1,4); 
3FF2:  MOVLW  01
3FF4:  MOVWF  xF8
3FF6:  MOVLW  04
3FF8:  MOVWF  xF9
3FFA:  CALL   1442
....................       printf(lcd_putc,"                    ");       
3FFE:  MOVLW  DA
4000:  MOVWF  FF6
4002:  MOVLW  07
4004:  MOVWF  FF7
4006:  CALL   1512
....................        
....................       if(UP && Vel1<6)//Si oprime hacia arriba 
400A:  BSF    F92.5
400C:  BTFSC  F80.5
400E:  BRA    4020
4010:  MOVF   58,W
4012:  SUBLW  05
4014:  BNC   4020
....................       {   
....................          delay_ms(200);Vel1++; 
4016:  MOVLW  C8
4018:  MOVWF  xFC
401A:  CALL   092A
401E:  INCF   58,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
4020:  BSF    F96.0
4022:  BTFSC  F84.0
4024:  BRA    4034
4026:  MOVF   58,F
4028:  BZ    4034
....................       {   
....................          delay_ms(200);Vel1--; 
402A:  MOVLW  C8
402C:  MOVWF  xFC
402E:  CALL   092A
4032:  DECF   58,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
4034:  BSF    F96.1
4036:  BTFSC  F84.1
4038:  BRA    403E
....................       {            
....................          VelMotor=Vel1; 
403A:  MOVFF  58,CE
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
403E:  BSF    F96.2
4040:  BTFSC  F84.2
4042:  BRA    4110
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4044:  MOVLW  64
4046:  MOVWF  xFC
4048:  CALL   092A
404C:  MOVLW  02
404E:  MOVWF  30
4050:  MOVWF  32
4052:  MOVLW  0C
4054:  MOVWF  xF7
4056:  CALL   14AC
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
405A:  MOVLW  0D
405C:  MOVWF  FA9
405E:  MOVFF  58,FA8
4062:  BCF    FA6.6
4064:  BCF    FA6.7
4066:  BSF    FA6.2
4068:  MOVF   FF2,W
406A:  MOVWF  00
406C:  BCF    FF2.6
406E:  BCF    FF2.7
4070:  MOVLB  F
4072:  MOVLW  55
4074:  MOVWF  FA7
4076:  MOVLW  AA
4078:  MOVWF  FA7
407A:  BSF    FA6.1
407C:  BTFSC  FA6.1
407E:  BRA    407C
4080:  BCF    FA6.2
4082:  MOVF   00,W
4084:  IORWF  FF2,F
....................          delay_ms(20); 
4086:  MOVLW  14
4088:  MOVLB  0
408A:  MOVWF  xFC
408C:  CALL   092A
....................          lcd_gotoxy(1,1); 
4090:  MOVLW  01
4092:  MOVWF  xF8
4094:  MOVWF  xF9
4096:  CALL   1442
....................          printf(lcd_putc,"                    "); 
409A:  MOVLW  F0
409C:  MOVWF  FF6
409E:  MOVLW  07
40A0:  MOVWF  FF7
40A2:  CALL   1512
....................          lcd_gotoxy(1,2); 
40A6:  MOVLW  01
40A8:  MOVWF  xF8
40AA:  MOVLW  02
40AC:  MOVWF  xF9
40AE:  CALL   1442
....................          printf(lcd_putc,"     Velocidad      "); 
40B2:  MOVLW  06
40B4:  MOVWF  FF6
40B6:  MOVLW  08
40B8:  MOVWF  FF7
40BA:  CALL   1512
....................          lcd_gotoxy(1,3); 
40BE:  MOVLW  01
40C0:  MOVWF  xF8
40C2:  MOVLW  03
40C4:  MOVWF  xF9
40C6:  CALL   1442
....................          printf(lcd_putc,"      Almacenada    "); 
40CA:  MOVLW  1C
40CC:  MOVWF  FF6
40CE:  MOVLW  08
40D0:  MOVWF  FF7
40D2:  CALL   1512
....................          lcd_gotoxy(1,4); 
40D6:  MOVLW  01
40D8:  MOVWF  xF8
40DA:  MOVLW  04
40DC:  MOVWF  xF9
40DE:  CALL   1442
....................          printf(lcd_putc,"                    ");  
40E2:  MOVLW  32
40E4:  MOVWF  FF6
40E6:  MOVLW  08
40E8:  MOVWF  FF7
40EA:  CALL   1512
....................          delay_ms(1000); 
40EE:  MOVLW  04
40F0:  MOVWF  xE6
40F2:  MOVLW  FA
40F4:  MOVWF  xFC
40F6:  CALL   092A
40FA:  DECFSZ xE6,F
40FC:  BRA    40F2
....................          printf(lcd_putc,"\f"); 
40FE:  MOVLW  0C
4100:  MOVWF  xF7
4102:  CALL   14AC
....................          lcd_init(); 
4106:  CALL   0A16
....................          Menu=1; paso=0; 
410A:  MOVLW  01
410C:  MOVWF  2C
410E:  CLRF   47
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Funcionamiento 
4110:  MOVF   2C,W
4112:  SUBLW  32
4114:  BTFSS  FD8.2
4116:  GOTO   492C
....................    if(Lectura==1){ 
411A:  BTFSS  2A.0
411C:  BRA    455C
....................       Lectura=0; 
411E:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
4120:  MOVLW  08
4122:  MOVWF  xE6
4124:  CALL   1F92
4128:  MOVFF  03,BE
412C:  MOVFF  02,BD
4130:  MOVFF  01,BC
4134:  MOVFF  00,BB
....................       if((CaidaPresion*4.02>0.1 && CaidaPresion<0.23) || estadomv==0){ 
4138:  MOVFF  BE,FD
413C:  MOVFF  BD,FC
4140:  MOVFF  BC,FB
4144:  MOVFF  BB,FA
4148:  MOVLW  D7
414A:  MOVLB  1
414C:  MOVWF  x01
414E:  MOVLW  A3
4150:  MOVWF  x00
4152:  MOVLB  0
4154:  CLRF   xFF
4156:  MOVLW  81
4158:  MOVWF  xFE
415A:  CALL   1A7C
415E:  MOVFF  00,E6
4162:  MOVFF  01,E7
4166:  MOVFF  02,E8
416A:  MOVFF  03,E9
416E:  MOVLW  CD
4170:  MOVWF  xFD
4172:  MOVLW  CC
4174:  MOVWF  xFC
4176:  MOVLW  4C
4178:  MOVWF  xFB
417A:  MOVLW  7B
417C:  MOVWF  xFA
417E:  MOVFF  03,101
4182:  MOVFF  02,100
4186:  MOVFF  01,FF
418A:  MOVFF  00,FE
418E:  CALL   0E6A
4192:  BNC   41BE
4194:  MOVFF  BE,FD
4198:  MOVFF  BD,FC
419C:  MOVFF  BC,FB
41A0:  MOVFF  BB,FA
41A4:  MOVLW  1F
41A6:  MOVLB  1
41A8:  MOVWF  x01
41AA:  MOVLW  85
41AC:  MOVWF  x00
41AE:  MOVLW  6B
41B0:  MOVLB  0
41B2:  MOVWF  xFF
41B4:  MOVLW  7C
41B6:  MOVWF  xFE
41B8:  CALL   0E6A
41BC:  BC    41C2
41BE:  BTFSC  29.2
41C0:  BRA    4244
....................          lcd_gotoxy(1,1); 
41C2:  MOVLW  01
41C4:  MOVWF  xF8
41C6:  MOVWF  xF9
41C8:  CALL   1442
....................          printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
41CC:  MOVFF  BE,FD
41D0:  MOVFF  BD,FC
41D4:  MOVFF  BC,FB
41D8:  MOVFF  BB,FA
41DC:  MOVLW  D7
41DE:  MOVLB  1
41E0:  MOVWF  x01
41E2:  MOVLW  A3
41E4:  MOVWF  x00
41E6:  MOVLB  0
41E8:  CLRF   xFF
41EA:  MOVLW  81
41EC:  MOVWF  xFE
41EE:  CALL   1A7C
41F2:  MOVFF  00,E6
41F6:  MOVFF  01,E7
41FA:  MOVFF  02,E8
41FE:  MOVFF  03,E9
4202:  MOVLW  48
4204:  MOVWF  FF6
4206:  MOVLW  08
4208:  MOVWF  FF7
420A:  MOVLW  08
420C:  MOVWF  xEA
420E:  CALL   1746
4212:  MOVLW  02
4214:  MOVWF  FE9
4216:  MOVFF  E9,ED
421A:  MOVFF  E8,EC
421E:  MOVFF  E7,EB
4222:  MOVFF  E6,EA
4226:  MOVWF  xEE
4228:  CALL   22E6
422C:  MOVLW  55
422E:  MOVWF  FF6
4230:  MOVLW  08
4232:  MOVWF  FF7
4234:  MOVLW  07
4236:  MOVWF  xEA
4238:  CALL   1746
....................          ActivaBuzzer=0; 
423C:  CLRF   53
....................          Buzzer_off; 
423E:  BCF    F8B.0
4240:  BCF    F94.0
....................       }else if((CaidaPresion*4.02<=0.1 && estadomv==1)){ 
4242:  BRA    4308
4244:  MOVFF  BE,FD
4248:  MOVFF  BD,FC
424C:  MOVFF  BC,FB
4250:  MOVFF  BB,FA
4254:  MOVLW  D7
4256:  MOVLB  1
4258:  MOVWF  x01
425A:  MOVLW  A3
425C:  MOVWF  x00
425E:  MOVLB  0
4260:  CLRF   xFF
4262:  MOVLW  81
4264:  MOVWF  xFE
4266:  CALL   1A7C
426A:  MOVFF  00,E6
426E:  MOVFF  01,E7
4272:  MOVFF  02,E8
4276:  MOVFF  03,E9
427A:  MOVFF  03,FD
427E:  MOVFF  02,FC
4282:  MOVFF  01,FB
4286:  MOVFF  00,FA
428A:  MOVLW  CD
428C:  MOVLB  1
428E:  MOVWF  x01
4290:  MOVLW  CC
4292:  MOVWF  x00
4294:  MOVLW  4C
4296:  MOVLB  0
4298:  MOVWF  xFF
429A:  MOVLW  7B
429C:  MOVWF  xFE
429E:  CALL   0E6A
42A2:  BC    42A6
42A4:  BNZ   42C6
42A6:  BTFSS  29.2
42A8:  BRA    42C6
....................          lcd_gotoxy(1,1); 
42AA:  MOVLW  01
42AC:  MOVWF  xF8
42AE:  MOVWF  xF9
42B0:  CALL   1442
....................          printf(lcd_putc,"!Verifique Flujo! ");  
42B4:  MOVLW  5E
42B6:  MOVWF  FF6
42B8:  MOVLW  08
42BA:  MOVWF  FF7
42BC:  CALL   1512
....................          ActivaBuzzer=1; 
42C0:  MOVLW  01
42C2:  MOVWF  53
....................       }else if(CaidaPresion>=0.23){ 
42C4:  BRA    4308
42C6:  MOVLW  1F
42C8:  MOVWF  xFD
42CA:  MOVLW  85
42CC:  MOVWF  xFC
42CE:  MOVLW  6B
42D0:  MOVWF  xFB
42D2:  MOVLW  7C
42D4:  MOVWF  xFA
42D6:  MOVFF  BE,101
42DA:  MOVFF  BD,100
42DE:  MOVFF  BC,FF
42E2:  MOVFF  BB,FE
42E6:  CALL   0E6A
42EA:  BC    42EE
42EC:  BNZ   4308
....................          lcd_gotoxy(1,1); 
42EE:  MOVLW  01
42F0:  MOVWF  xF8
42F2:  MOVWF  xF9
42F4:  CALL   1442
....................          printf(lcd_putc,"!Verifique Filtro!");  
42F8:  MOVLW  72
42FA:  MOVWF  FF6
42FC:  MOVLW  08
42FE:  MOVWF  FF7
4300:  CALL   1512
....................          ActivaBuzzer=1; 
4304:  MOVLW  01
4306:  MOVWF  53
....................       } 
....................        
....................       Saturacion=(CaidaPresion/0.24)*11; 
4308:  MOVFF  BE,FE
430C:  MOVFF  BD,FD
4310:  MOVFF  BC,FC
4314:  MOVFF  BB,FB
4318:  MOVLW  8F
431A:  MOVLB  1
431C:  MOVWF  x02
431E:  MOVLW  C2
4320:  MOVWF  x01
4322:  MOVLW  75
4324:  MOVWF  x00
4326:  MOVLW  7C
4328:  MOVLB  0
432A:  MOVWF  xFF
432C:  CALL   1B98
4330:  MOVFF  00,E6
4334:  MOVFF  01,E7
4338:  MOVFF  02,E8
433C:  MOVFF  03,E9
4340:  MOVFF  03,FD
4344:  MOVFF  02,FC
4348:  MOVFF  01,FB
434C:  MOVFF  00,FA
4350:  MOVLB  1
4352:  CLRF   x01
4354:  CLRF   x00
4356:  MOVLW  30
4358:  MOVLB  0
435A:  MOVWF  xFF
435C:  MOVLW  82
435E:  MOVWF  xFE
4360:  CALL   1A7C
4364:  MOVFF  03,BA
4368:  MOVFF  02,B9
436C:  MOVFF  01,B8
4370:  MOVFF  00,B7
....................        
....................       if(Saturacion>11) 
4374:  CLRF   xFD
4376:  CLRF   xFC
4378:  MOVLW  30
437A:  MOVWF  xFB
437C:  MOVLW  82
437E:  MOVWF  xFA
4380:  MOVFF  BA,101
4384:  MOVFF  B9,100
4388:  MOVFF  B8,FF
438C:  MOVFF  B7,FE
4390:  CALL   0E6A
4394:  BNC   43A2
....................          Saturacion=11; 
4396:  CLRF   xBA
4398:  CLRF   xB9
439A:  MOVLW  30
439C:  MOVWF  xB8
439E:  MOVLW  82
43A0:  MOVWF  xB7
....................        
....................       for(i=0;i<floor(Saturacion);i++){ 
43A2:  CLRF   41
43A4:  MOVFF  BA,E9
43A8:  MOVFF  B9,E8
43AC:  MOVFF  B8,E7
43B0:  MOVFF  B7,E6
43B4:  CALL   280C
43B8:  MOVFF  00,E6
43BC:  MOVFF  01,E7
43C0:  MOVFF  02,E8
43C4:  MOVFF  03,E9
43C8:  CLRF   xFF
43CA:  MOVFF  41,FE
43CE:  CALL   0ABA
43D2:  MOVFF  03,FD
43D6:  MOVFF  02,FC
43DA:  MOVFF  01,FB
43DE:  MOVFF  00,FA
43E2:  MOVFF  E9,101
43E6:  MOVFF  E8,100
43EA:  MOVFF  E7,FF
43EE:  MOVFF  E6,FE
43F2:  CALL   0E6A
43F6:  BNC   4414
....................          lcd_gotoxy(i+8,2); 
43F8:  MOVLW  08
43FA:  ADDWF  41,W
43FC:  MOVWF  xE6
43FE:  MOVWF  xF8
4400:  MOVLW  02
4402:  MOVWF  xF9
4404:  CALL   1442
....................          printf(lcd_putc,"Ñ"); 
4408:  MOVLW  D1
440A:  MOVWF  xF7
440C:  CALL   14AC
....................       } 
4410:  INCF   41,F
4412:  BRA    43A4
....................        
....................       for(i=floor(Saturacion);i<11;i++){ 
4414:  MOVFF  BA,E9
4418:  MOVFF  B9,E8
441C:  MOVFF  B8,E7
4420:  MOVFF  B7,E6
4424:  CALL   280C
4428:  MOVFF  03,FD
442C:  MOVFF  02,FC
4430:  MOVFF  01,FB
4434:  MOVFF  00,FA
4438:  CALL   2472
443C:  MOVFF  01,41
4440:  MOVF   41,W
4442:  SUBLW  0A
4444:  BNC   4462
....................          lcd_gotoxy(i+8,2); 
4446:  MOVLW  08
4448:  ADDWF  41,W
444A:  MOVWF  xE6
444C:  MOVWF  xF8
444E:  MOVLW  02
4450:  MOVWF  xF9
4452:  CALL   1442
....................          printf(lcd_putc," "); 
4456:  MOVLW  20
4458:  MOVWF  xF7
445A:  CALL   14AC
....................       } 
445E:  INCF   41,F
4460:  BRA    4440
....................        
....................       lcd_gotoxy(9,3); 
4462:  MOVLW  09
4464:  MOVWF  xF8
4466:  MOVLW  03
4468:  MOVWF  xF9
446A:  CALL   1442
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
446E:  MOVLW  86
4470:  MOVWF  FF6
4472:  MOVLW  08
4474:  MOVWF  FF7
4476:  MOVLW  06
4478:  MOVWF  xEA
447A:  CALL   1746
447E:  MOVFF  3B,E6
4482:  MOVLW  03
4484:  MOVWF  xE7
4486:  CALL   190C
448A:  MOVLW  3A
448C:  MOVWF  xF7
448E:  CALL   14AC
4492:  MOVFF  3C,E6
4496:  MOVLW  01
4498:  MOVWF  xE7
449A:  CALL   190C
....................       EliminaRuido(); 
449E:  CALL   0004
....................        
....................       lcd_gotoxy(1,2); 
44A2:  MOVLW  01
44A4:  MOVWF  xF8
44A6:  MOVLW  02
44A8:  MOVWF  xF9
44AA:  CALL   1442
....................       printf(lcd_putc,"Filtro:"); 
44AE:  MOVLW  96
44B0:  MOVWF  FF6
44B2:  MOVLW  08
44B4:  MOVWF  FF7
44B6:  CALL   1512
....................        
....................       if(estadomv==1){ 
44BA:  BTFSS  29.2
44BC:  BRA    44D8
....................          lcd_gotoxy(1,4); 
44BE:  MOVLW  01
44C0:  MOVWF  xF8
44C2:  MOVLW  04
44C4:  MOVWF  xF9
44C6:  CALL   1442
....................          printf(lcd_putc,"Motor:ON ");       
44CA:  MOVLW  9E
44CC:  MOVWF  FF6
44CE:  MOVLW  08
44D0:  MOVWF  FF7
44D2:  CALL   1512
....................       }else{ 
44D6:  BRA    44F0
....................          lcd_gotoxy(1,4); 
44D8:  MOVLW  01
44DA:  MOVWF  xF8
44DC:  MOVLW  04
44DE:  MOVWF  xF9
44E0:  CALL   1442
....................          printf(lcd_putc,"Motor:OFF"); 
44E4:  MOVLW  A8
44E6:  MOVWF  FF6
44E8:  MOVLW  08
44EA:  MOVWF  FF7
44EC:  CALL   1512
....................       } 
....................        
....................       if(estadouv==1){ 
44F0:  BTFSS  29.0
44F2:  BRA    450E
....................          lcd_gotoxy(13,4); 
44F4:  MOVLW  0D
44F6:  MOVWF  xF8
44F8:  MOVLW  04
44FA:  MOVWF  xF9
44FC:  CALL   1442
....................          printf(lcd_putc,"UV:ON "); 
4500:  MOVLW  B2
4502:  MOVWF  FF6
4504:  MOVLW  08
4506:  MOVWF  FF7
4508:  CALL   1512
....................       }else{          
450C:  BRA    4526
....................          lcd_gotoxy(13,4); 
450E:  MOVLW  0D
4510:  MOVWF  xF8
4512:  MOVLW  04
4514:  MOVWF  xF9
4516:  CALL   1442
....................          printf(lcd_putc,"UV:OFF"); 
451A:  MOVLW  BA
451C:  MOVWF  FF6
451E:  MOVLW  08
4520:  MOVWF  FF7
4522:  CALL   1512
....................       } 
....................        
....................       if(estadofl==1){ 
4526:  BTFSS  29.1
4528:  BRA    4544
....................          lcd_gotoxy(1,3); 
452A:  MOVLW  01
452C:  MOVWF  xF8
452E:  MOVLW  03
4530:  MOVWF  xF9
4532:  CALL   1442
....................          printf(lcd_putc,"Luz:ON "); 
4536:  MOVLW  C2
4538:  MOVWF  FF6
453A:  MOVLW  08
453C:  MOVWF  FF7
453E:  CALL   1512
....................       }else{ 
4542:  BRA    455C
....................          lcd_gotoxy(1,3); 
4544:  MOVLW  01
4546:  MOVWF  xF8
4548:  MOVLW  03
454A:  MOVWF  xF9
454C:  CALL   1442
....................          printf(lcd_putc,"Luz:OFF"); 
4550:  MOVLW  CA
4552:  MOVWF  FF6
4554:  MOVLW  08
4556:  MOVWF  FF7
4558:  CALL   1512
....................       }  
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
455C:  BTFSS  29.7
455E:  BRA    45F8
....................       if(estadoalarma==1){ 
4560:  BTFSS  2A.4
4562:  BRA    45EE
....................          printf(lcd_putc,"\f"); 
4564:  MOVLW  0C
4566:  MOVWF  xF7
4568:  CALL   14AC
....................          lcd_gotoxy(1,2); 
456C:  MOVLW  01
456E:  MOVWF  xF8
4570:  MOVLW  02
4572:  MOVWF  xF9
4574:  CALL   1442
....................          printf(lcd_putc,"  Temporizador  de  "); 
4578:  MOVLW  D2
457A:  MOVWF  FF6
457C:  MOVLW  08
457E:  MOVWF  FF7
4580:  CALL   1512
....................          lcd_gotoxy(1,3); 
4584:  MOVLW  01
4586:  MOVWF  xF8
4588:  MOVLW  03
458A:  MOVWF  xF9
458C:  CALL   1442
....................          printf(lcd_putc," Luz UV  Finalizado "); 
4590:  MOVLW  E8
4592:  MOVWF  FF6
4594:  MOVLW  08
4596:  MOVWF  FF7
4598:  CALL   1512
....................          lcd_gotoxy(1,4); 
459C:  MOVLW  01
459E:  MOVWF  xF8
45A0:  MOVLW  04
45A2:  MOVWF  xF9
45A4:  CALL   1442
....................          printf(lcd_putc,"                    "); 
45A8:  MOVLW  FE
45AA:  MOVWF  FF6
45AC:  MOVLW  08
45AE:  MOVWF  FF7
45B0:  CALL   1512
....................          lcd_gotoxy(1,1); 
45B4:  MOVLW  01
45B6:  MOVWF  xF8
45B8:  MOVWF  xF9
45BA:  CALL   1442
....................          printf(lcd_putc,"                    "); 
45BE:  MOVLW  14
45C0:  MOVWF  FF6
45C2:  MOVLW  09
45C4:  MOVWF  FF7
45C6:  CALL   1512
....................          for(i=0;i<5;i++){ 
45CA:  CLRF   41
45CC:  MOVF   41,W
45CE:  SUBLW  04
45D0:  BNC   45EE
....................             Buzzer_on; 
45D2:  BSF    F8B.0
45D4:  BCF    F94.0
....................             delay_ms(200); 
45D6:  MOVLW  C8
45D8:  MOVWF  xFC
45DA:  CALL   092A
....................             Buzzer_off; 
45DE:  BCF    F8B.0
45E0:  BCF    F94.0
....................             delay_ms(200); 
45E2:  MOVLW  C8
45E4:  MOVWF  xFC
45E6:  CALL   092A
....................          } 
45EA:  INCF   41,F
45EC:  BRA    45CC
....................       } 
....................       tiempo_cumplido=0; 
45EE:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
45F0:  MOVLW  0C
45F2:  MOVWF  xF7
45F4:  CALL   14AC
....................    }   
....................        
....................    //if(Cambio){ 
....................      // Cambio=OFF; 
....................    //} 
....................     
....................    if(estadomv==1){  
45F8:  BTFSS  29.2
45FA:  BRA    4626
....................       if(flagmv==0){ 
45FC:  BTFSC  2B.4
45FE:  BRA    4620
....................          VelMotor=6; 
4600:  MOVLW  06
4602:  MOVWF  xCE
....................          lcd_init();delay_ms(200);lcd_init(); 
4604:  CALL   0A16
4608:  MOVLW  C8
460A:  MOVWF  xFC
460C:  CALL   092A
4610:  CALL   0A16
....................          flagmv=1;Cambio=ON;delay_ms(200); 
4614:  BSF    2B.4
4616:  BSF    2B.3
4618:  MOVLW  C8
461A:  MOVWF  xFC
461C:  CALL   092A
....................       } 
....................       VelMotor=Vel1; 
4620:  MOVFF  58,CE
....................    }else{ 
4624:  BRA    4640
....................       VelMotor=0; 
4626:  CLRF   xCE
....................       if(flagmv==1){ 
4628:  BTFSS  2B.4
462A:  BRA    4640
....................          lcd_init();delay_ms(200);lcd_init(); 
462C:  CALL   0A16
4630:  MOVLW  C8
4632:  MOVWF  xFC
4634:  CALL   092A
4638:  CALL   0A16
....................          flagmv=0;Cambio=ON; 
463C:  BCF    2B.4
463E:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(estadofl==1){ 
4640:  BTFSS  29.1
4642:  BRA    4662
....................       Luz_Blanca_on; 
4644:  BCF    F8A.4
4646:  BCF    F93.4
....................       if(flagfl==0){ 
4648:  BTFSC  2A.2
464A:  BRA    4660
....................          lcd_init();delay_ms(200);lcd_init(); 
464C:  CALL   0A16
4650:  MOVLW  C8
4652:  MOVWF  xFC
4654:  CALL   092A
4658:  CALL   0A16
....................          flagfl=1;Cambio=ON; 
465C:  BSF    2A.2
465E:  BSF    2B.3
....................       } 
....................    }else{ 
4660:  BRA    467E
....................       Luz_Blanca_off; 
4662:  BSF    F8A.4
4664:  BCF    F93.4
....................       if(flagfl==1){ 
4666:  BTFSS  2A.2
4668:  BRA    467E
....................          lcd_init();delay_ms(200);lcd_init(); 
466A:  CALL   0A16
466E:  MOVLW  C8
4670:  MOVWF  xFC
4672:  CALL   092A
4676:  CALL   0A16
....................          flagfl=0;Cambio=ON; 
467A:  BCF    2A.2
467C:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
467E:  BTFSS  29.0
4680:  BRA    46B0
....................       Luz_UV_on; 
4682:  BCF    F8A.3
4684:  BCF    F93.3
....................       tiempo_cumplido=0;       
4686:  BCF    29.7
....................       estadomv=0; 
4688:  BCF    29.2
....................       VelMotor=0; 
468A:  CLRF   xCE
....................       estadofl=0; 
468C:  BCF    29.1
....................       Luz_Blanca_off; 
468E:  BSF    F8A.4
4690:  BCF    F93.4
....................       if(flaguv==0){ 
4692:  BTFSC  2A.1
4694:  BRA    46AE
....................          lcd_init();delay_ms(200);lcd_init(); 
4696:  CALL   0A16
469A:  MOVLW  C8
469C:  MOVWF  xFC
469E:  CALL   092A
46A2:  CALL   0A16
....................          flaguv=1;guardaruv=1;Cambio=ON; 
46A6:  BSF    2A.1
46A8:  MOVLW  01
46AA:  MOVWF  44
46AC:  BSF    2B.3
....................       } 
....................    }else{ 
46AE:  BRA    46D2
....................       estadouv=0; 
46B0:  BCF    29.0
....................       Luz_UV_off; 
46B2:  BSF    F8A.3
46B4:  BCF    F93.3
....................       if(flaguv==1){ 
46B6:  BTFSS  2A.1
46B8:  BRA    46D2
....................          lcd_init();delay_ms(200);lcd_init(); 
46BA:  CALL   0A16
46BE:  MOVLW  C8
46C0:  MOVWF  xFC
46C2:  CALL   092A
46C6:  CALL   0A16
....................          flaguv=0;guardaruv=1;Cambio=ON; 
46CA:  BCF    2A.1
46CC:  MOVLW  01
46CE:  MOVWF  44
46D0:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(DOWN){//Si oprime hacia Abajo 
46D2:  BSF    F96.0
46D4:  BTFSC  F84.0
46D6:  BRA    4748
....................       delay_ms(20); 
46D8:  MOVLW  14
46DA:  MOVWF  xFC
46DC:  CALL   092A
....................       if(DOWN){ 
46E0:  BSF    F96.0
46E2:  BTFSC  F84.0
46E4:  BRA    4746
....................          if(Flanco==0){ 
46E6:  BTFSC  29.3
46E8:  BRA    4746
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
46EA:  BTG    29.1
46EC:  BSF    29.3
46EE:  MOVLW  02
46F0:  MOVWF  xE6
46F2:  MOVLW  96
46F4:  MOVWF  xFC
46F6:  CALL   092A
46FA:  DECFSZ xE6,F
46FC:  BRA    46F2
46FE:  BSF    2B.3
....................             write_eeprom(23,estadomv); 
4700:  MOVLW  00
4702:  BTFSC  29.2
4704:  MOVLW  01
4706:  MOVWF  xE6
4708:  MOVLW  17
470A:  MOVWF  FA9
470C:  MOVFF  E6,FA8
4710:  BCF    FA6.6
4712:  BCF    FA6.7
4714:  BSF    FA6.2
4716:  MOVF   FF2,W
4718:  MOVWF  00
471A:  BCF    FF2.6
471C:  BCF    FF2.7
471E:  MOVLB  F
4720:  MOVLW  55
4722:  MOVWF  FA7
4724:  MOVLW  AA
4726:  MOVWF  FA7
4728:  BSF    FA6.1
472A:  BTFSC  FA6.1
472C:  BRA    472A
472E:  BCF    FA6.2
4730:  MOVF   00,W
4732:  IORWF  FF2,F
....................             delay_ms(300); 
4734:  MOVLW  02
4736:  MOVLB  0
4738:  MOVWF  xE6
473A:  MOVLW  96
473C:  MOVWF  xFC
473E:  CALL   092A
4742:  DECFSZ xE6,F
4744:  BRA    473A
....................          } 
....................       } 
....................    }else{ 
4746:  BRA    474C
....................       flagdn=0; 
4748:  BCF    2B.1
....................       Flanco=0; 
474A:  BCF    29.3
....................    }  
....................     
....................    if(RIGHT){//Si oprime hacia abajo 
474C:  BSF    F96.1
474E:  BTFSC  F84.1
4750:  BRA    47B2
....................       delay_ms(20); 
4752:  MOVLW  14
4754:  MOVWF  xFC
4756:  CALL   092A
....................       if(RIGHT){ 
475A:  BSF    F96.1
475C:  BTFSC  F84.1
475E:  BRA    47B0
....................          if(Flanco2 == 0){ 
4760:  BTFSC  29.5
4762:  BRA    47B0
....................             estadomv=!estadomv;Flanco2 = 1;Cambio=ON; 
4764:  BTG    29.2
4766:  BSF    29.5
4768:  BSF    2B.3
....................             write_eeprom(22,estadomv); 
476A:  MOVLW  00
476C:  BTFSC  29.2
476E:  MOVLW  01
4770:  MOVWF  xE6
4772:  MOVLW  16
4774:  MOVWF  FA9
4776:  MOVFF  E6,FA8
477A:  BCF    FA6.6
477C:  BCF    FA6.7
477E:  BSF    FA6.2
4780:  MOVF   FF2,W
4782:  MOVWF  00
4784:  BCF    FF2.6
4786:  BCF    FF2.7
4788:  MOVLB  F
478A:  MOVLW  55
478C:  MOVWF  FA7
478E:  MOVLW  AA
4790:  MOVWF  FA7
4792:  BSF    FA6.1
4794:  BTFSC  FA6.1
4796:  BRA    4794
4798:  BCF    FA6.2
479A:  MOVF   00,W
479C:  IORWF  FF2,F
....................             delay_ms(300); 
479E:  MOVLW  02
47A0:  MOVLB  0
47A2:  MOVWF  xE6
47A4:  MOVLW  96
47A6:  MOVWF  xFC
47A8:  CALL   092A
47AC:  DECFSZ xE6,F
47AE:  BRA    47A4
....................          } 
....................       } 
....................    }else{ 
47B0:  BRA    47B4
....................       Flanco2 = 0; 
47B2:  BCF    29.5
....................    } 
....................     
....................    if(IZQU){//Si oprime hacia izquierda 
47B4:  BSF    F96.2
47B6:  BTFSC  F84.2
47B8:  BRA    47D4
....................       delay_ms(20); 
47BA:  MOVLW  14
47BC:  MOVWF  xFC
47BE:  CALL   092A
....................       if(IZQU){ 
47C2:  BSF    F96.2
47C4:  BTFSC  F84.2
47C6:  BRA    47D4
....................          delay_ms(150);  
47C8:  MOVLW  96
47CA:  MOVWF  xFC
47CC:  CALL   092A
....................          //estadouv=!estadouv; 
....................          estadouv=0; 
47D0:  BCF    29.0
....................          Cambio=ON; 
47D2:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(UP){// Si oprime Arriba 
47D4:  BSF    F92.5
47D6:  BTFSC  F80.5
47D8:  BRA    482A
....................       Flanco1=1; 
47DA:  BSF    29.4
....................       if(!flagup){ 
47DC:  BTFSC  2B.2
47DE:  BRA    4828
....................          delay_ms(500); 
47E0:  MOVLW  02
47E2:  MOVWF  xE6
47E4:  MOVLW  FA
47E6:  MOVWF  xFC
47E8:  CALL   092A
47EC:  DECFSZ xE6,F
47EE:  BRA    47E4
....................          if(UP){ 
47F0:  BSF    F92.5
47F2:  BTFSC  F80.5
47F4:  BRA    47FA
....................             flagup=1; 
47F6:  BSF    2B.2
....................          }else{ 
47F8:  BRA    4828
....................             delay_ms(200); 
47FA:  MOVLW  C8
47FC:  MOVWF  xFC
47FE:  CALL   092A
....................             printf(lcd_putc,"\f"); 
4802:  MOVLW  0C
4804:  MOVWF  xF7
4806:  CALL   14AC
....................             delay_ms(300); 
480A:  MOVLW  02
480C:  MOVWF  xE6
480E:  MOVLW  96
4810:  MOVWF  xFC
4812:  CALL   092A
4816:  DECFSZ xE6,F
4818:  BRA    480E
....................             Menu=1;  
481A:  MOVLW  01
481C:  MOVWF  2C
....................             paso=0; 
481E:  CLRF   47
....................             Flecha=2; 
4820:  MOVLW  02
4822:  MOVWF  30
....................             Flecha2=2; 
4824:  MOVWF  32
....................             Cambio=ON; 
4826:  BSF    2B.3
....................          } 
....................       } 
....................    }else{ 
4828:  BRA    482E
....................       flagup=0; 
482A:  BCF    2B.2
....................       Flanco1=0; 
482C:  BCF    29.4
....................    } 
....................     
....................    if(flagup){ 
482E:  BTFSS  2B.2
4830:  BRA    4838
....................       subirVidrio(); 
4832:  GOTO   2822
....................    }else{ 
4836:  BRA    4846
....................       if(flagdn){ 
4838:  BTFSS  2B.1
483A:  BRA    4842
....................          bajarVidrio(); 
483C:  GOTO   2848
....................       }else{ 
4840:  BRA    4846
....................          detenerVidrio(); 
4842:  GOTO   286E
....................       } 
....................    } 
....................        
....................    if(guardaruv==1){ 
4846:  DECFSZ 44,W
4848:  BRA    4914
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
484A:  MOVLW  07
484C:  MOVWF  FA9
484E:  MOVFF  35,FA8
4852:  BCF    FA6.6
4854:  BCF    FA6.7
4856:  BSF    FA6.2
4858:  MOVF   FF2,W
485A:  MOVWF  00
485C:  BCF    FF2.6
485E:  BCF    FF2.7
4860:  MOVLB  F
4862:  MOVLW  55
4864:  MOVWF  FA7
4866:  MOVLW  AA
4868:  MOVWF  FA7
486A:  BSF    FA6.1
486C:  BTFSC  FA6.1
486E:  BRA    486C
4870:  BCF    FA6.2
4872:  MOVF   00,W
4874:  IORWF  FF2,F
4876:  MOVLW  08
4878:  MOVWF  FA9
487A:  MOVFF  36,FA8
487E:  BCF    FA6.6
4880:  BCF    FA6.7
4882:  BSF    FA6.2
4884:  MOVF   FF2,W
4886:  MOVWF  00
4888:  BCF    FF2.6
488A:  BCF    FF2.7
488C:  MOVLW  55
488E:  MOVWF  FA7
4890:  MOVLW  AA
4892:  MOVWF  FA7
4894:  BSF    FA6.1
4896:  BTFSC  FA6.1
4898:  BRA    4896
489A:  BCF    FA6.2
489C:  MOVF   00,W
489E:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
48A0:  MOVFF  5B,37
....................       horasH=make8(horas,1); 
48A4:  MOVFF  5C,38
....................       write_eeprom(9,horasL); 
48A8:  MOVLW  09
48AA:  MOVWF  FA9
48AC:  MOVFF  37,FA8
48B0:  BCF    FA6.6
48B2:  BCF    FA6.7
48B4:  BSF    FA6.2
48B6:  MOVFF  FF2,00
48BA:  BCF    FF2.6
48BC:  BCF    FF2.7
48BE:  MOVLW  55
48C0:  MOVWF  FA7
48C2:  MOVLW  AA
48C4:  MOVWF  FA7
48C6:  BSF    FA6.1
48C8:  BTFSC  FA6.1
48CA:  BRA    48C8
48CC:  BCF    FA6.2
48CE:  MOVF   00,W
48D0:  IORWF  FF2,F
....................       delay_ms(20); 
48D2:  MOVLW  14
48D4:  MOVLB  0
48D6:  MOVWF  xFC
48D8:  CALL   092A
....................       write_eeprom(10,horasH); 
48DC:  MOVLW  0A
48DE:  MOVWF  FA9
48E0:  MOVFF  38,FA8
48E4:  BCF    FA6.6
48E6:  BCF    FA6.7
48E8:  BSF    FA6.2
48EA:  MOVF   FF2,W
48EC:  MOVWF  00
48EE:  BCF    FF2.6
48F0:  BCF    FF2.7
48F2:  MOVLB  F
48F4:  MOVLW  55
48F6:  MOVWF  FA7
48F8:  MOVLW  AA
48FA:  MOVWF  FA7
48FC:  BSF    FA6.1
48FE:  BTFSC  FA6.1
4900:  BRA    48FE
4902:  BCF    FA6.2
4904:  MOVF   00,W
4906:  IORWF  FF2,F
....................       delay_ms(20); 
4908:  MOVLW  14
490A:  MOVLB  0
490C:  MOVWF  xFC
490E:  CALL   092A
....................       guardaruv=0; 
4912:  CLRF   44
....................    } 
....................     
....................    if(segundos>=60){ 
4914:  MOVF   35,W
4916:  SUBLW  3B
4918:  BC    491E
....................       segundos=0;minutos++; 
491A:  CLRF   35
491C:  INCF   36,F
....................    } 
....................    if(minutos>=60){ 
491E:  MOVF   36,W
4920:  SUBLW  3B
4922:  BC    492C
....................       minutos=0;horas++; 
4924:  CLRF   36
4926:  INCF   5B,F
4928:  BTFSC  FD8.2
492A:  INCF   5C,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60){ 
492C:  MOVF   43,W
492E:  SUBLW  3B
4930:  BC    494A
....................       printf(lcd_putc,"\f"); 
4932:  MOVLW  0C
4934:  MOVWF  xF7
4936:  CALL   14AC
....................       lcd_init(); 
493A:  CALL   0A16
....................       delay_ms(200); 
493E:  MOVLW  C8
4940:  MOVWF  xFC
4942:  CALL   092A
....................       tiemporeset=0; 
4946:  CLRF   43
....................       Cambio=ON; 
4948:  BSF    2B.3
....................    }    
....................    } 
494A:  GOTO   2A6C
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
494E:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1B1F   BROWNOUT WDT BORV20 NOPUT WDT8192
   Word  3: 0100   NOPBADEN CCP2C1 NOLPT1OSC NOMCLR
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
